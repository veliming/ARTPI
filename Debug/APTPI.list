
APTPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b54  08018230  08018230  00028230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bd84  0801bd84  0002bd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0801bd8c  0801bd8c  0002bd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bda0  0801bda0  0002bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  24000000  0801bda4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000fd04  240000c4  0801be68  000300c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400fdc8  0801be68  0003fdc8  2**0
                  ALLOC
  9 ExtFlashSection 0000ab60  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  0004ab60  2**0
                  CONTENTS, READONLY
 11 .debug_info   000c6907  00000000  00000000  0004ab8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00013706  00000000  00000000  00111495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0002bf47  00000000  00000000  00124b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c28  00000000  00000000  00150ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003330  00000000  00000000  00153710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fea1  00000000  00000000  00156a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004af22  00000000  00000000  001668e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194da5  00000000  00000000  001b1803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  003465a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083e4  00000000  00000000  0034667c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c4 	.word	0x240000c4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018214 	.word	0x08018214

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c8 	.word	0x240000c8
 80002dc:	08018214 	.word	0x08018214

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000678:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MX_TouchGFX_Process();
	osDelay(1);
 800067a:	2401      	movs	r4, #1
	MX_TouchGFX_Process();
 800067c:	f007 fad6 	bl	8007c2c <MX_TouchGFX_Process>
	osDelay(1);
 8000680:	4620      	mov	r0, r4
 8000682:	f005 f8f4 	bl	800586e <osDelay>
  for(;;)
 8000686:	e7f9      	b.n	800067c <StartDefaultTask+0x4>

08000688 <__io_putchar>:
{
 8000688:	b500      	push	{lr}
 800068a:	b083      	sub	sp, #12
 800068c:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 800068e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000692:	2201      	movs	r2, #1
 8000694:	a901      	add	r1, sp, #4
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <__io_putchar+0x1c>)
 8000698:	f004 fe4c 	bl	8005334 <HAL_UART_Transmit>
}
 800069c:	9801      	ldr	r0, [sp, #4]
 800069e:	b003      	add	sp, #12
 80006a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a4:	2400fbb0 	.word	0x2400fbb0

080006a8 <SystemClock_Config>:
{
 80006a8:	b500      	push	{lr}
 80006aa:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ac:	224c      	movs	r2, #76	; 0x4c
 80006ae:	2100      	movs	r1, #0
 80006b0:	a809      	add	r0, sp, #36	; 0x24
 80006b2:	f016 feb3 	bl	801741c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b6:	2220      	movs	r2, #32
 80006b8:	2100      	movs	r1, #0
 80006ba:	a801      	add	r0, sp, #4
 80006bc:	f016 feae 	bl	801741c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f002 f88f 	bl	80027e4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c6:	2300      	movs	r3, #0
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <SystemClock_Config+0xc8>)
 80006cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ce:	f022 0201 	bic.w	r2, r2, #1
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80006d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SystemClock_Config+0xcc>)
 80006de:	699a      	ldr	r2, [r3, #24]
 80006e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80006e4:	619a      	str	r2, [r3, #24]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f0:	4a20      	ldr	r2, [pc, #128]	; (8000774 <SystemClock_Config+0xcc>)
 80006f2:	6993      	ldr	r3, [r2, #24]
 80006f4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80006f8:	d0fb      	beq.n	80006f2 <SystemClock_Config+0x4a>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <SystemClock_Config+0xd0>)
 80006fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80006fe:	f023 0303 	bic.w	r3, r3, #3
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000718:	2205      	movs	r2, #5
 800071a:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800071c:	22a0      	movs	r2, #160	; 0xa0
 800071e:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000720:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000722:	2208      	movs	r2, #8
 8000724:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000728:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800072a:	2300      	movs	r3, #0
 800072c:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800072e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	a809      	add	r0, sp, #36	; 0x24
 8000732:	f002 fa21 	bl	8002b78 <HAL_RCC_OscConfig>
 8000736:	b9b0      	cbnz	r0, 8000766 <SystemClock_Config+0xbe>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	233f      	movs	r3, #63	; 0x3f
 800073a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000744:	2308      	movs	r3, #8
 8000746:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000748:	2340      	movs	r3, #64	; 0x40
 800074a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800074c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800074e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000752:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000754:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000756:	2102      	movs	r1, #2
 8000758:	a801      	add	r0, sp, #4
 800075a:	f002 fe2b 	bl	80033b4 <HAL_RCC_ClockConfig>
 800075e:	b920      	cbnz	r0, 800076a <SystemClock_Config+0xc2>
}
 8000760:	b01d      	add	sp, #116	; 0x74
 8000762:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000766:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <SystemClock_Config+0xc0>
 800076a:	b672      	cpsid	i
 800076c:	e7fe      	b.n	800076c <SystemClock_Config+0xc4>
 800076e:	bf00      	nop
 8000770:	58000400 	.word	0x58000400
 8000774:	58024800 	.word	0x58024800
 8000778:	58024400 	.word	0x58024400

0800077c <MX_SDRAM_InitEx>:
  {
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	b087      	sub	sp, #28
    __IO uint32_t tmpmrd = 0;
 8000780:	2700      	movs	r7, #0
 8000782:	9705      	str	r7, [sp, #20]
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000784:	2501      	movs	r5, #1
 8000786:	9501      	str	r5, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8000788:	2610      	movs	r6, #16
 800078a:	9602      	str	r6, [sp, #8]
    Command.AutoRefreshNumber      = 1;
 800078c:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800078e:	9704      	str	r7, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000790:	4c1b      	ldr	r4, [pc, #108]	; (8000800 <MX_SDRAM_InitEx+0x84>)
 8000792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000796:	a901      	add	r1, sp, #4
 8000798:	4620      	mov	r0, r4
 800079a:	f003 ffed 	bl	8004778 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800079e:	4628      	mov	r0, r5
 80007a0:	f000 ff68 	bl	8001674 <HAL_Delay>
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80007a4:	2302      	movs	r3, #2
 80007a6:	9301      	str	r3, [sp, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80007a8:	9602      	str	r6, [sp, #8]
    Command.AutoRefreshNumber      = 1;
 80007aa:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 80007ac:	9704      	str	r7, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80007ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b2:	a901      	add	r1, sp, #4
 80007b4:	4620      	mov	r0, r4
 80007b6:	f003 ffdf 	bl	8004778 <HAL_SDRAM_SendCommand>
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80007ba:	2303      	movs	r3, #3
 80007bc:	9301      	str	r3, [sp, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80007be:	9602      	str	r6, [sp, #8]
    Command.AutoRefreshNumber      = 8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	9303      	str	r3, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 80007c4:	9704      	str	r7, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80007c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ca:	a901      	add	r1, sp, #4
 80007cc:	4620      	mov	r0, r4
 80007ce:	f003 ffd3 	bl	8004778 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80007d2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80007d6:	9305      	str	r3, [sp, #20]
    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80007d8:	2304      	movs	r3, #4
 80007da:	9301      	str	r3, [sp, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80007dc:	9602      	str	r6, [sp, #8]
    Command.AutoRefreshNumber      = 1;
 80007de:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 80007e0:	9b05      	ldr	r3, [sp, #20]
 80007e2:	9304      	str	r3, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80007e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e8:	a901      	add	r1, sp, #4
 80007ea:	4620      	mov	r0, r4
 80007ec:	f003 ffc4 	bl	8004778 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80007f0:	f240 71a1 	movw	r1, #1953	; 0x7a1
 80007f4:	4620      	mov	r0, r4
 80007f6:	f003 ffdc 	bl	80047b2 <HAL_SDRAM_ProgramRefreshRate>
  }
 80007fa:	b007      	add	sp, #28
 80007fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fe:	bf00      	nop
 8000800:	2400fca8 	.word	0x2400fca8

08000804 <QSPI_EnableMemoryMappedMode>:
{
 8000804:	b500      	push	{lr}
 8000806:	b091      	sub	sp, #68	; 0x44
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800080e:	23eb      	movs	r3, #235	; 0xeb
 8000810:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000812:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000816:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800081e:	2300      	movs	r3, #0
 8000820:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000822:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000826:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.DummyCycles       = 6;
 8000828:	2206      	movs	r2, #6
 800082a:	9207      	str	r2, [sp, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800082c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800082e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000832:	920e      	str	r2, [sp, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000834:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000836:	9301      	str	r3, [sp, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8000838:	9300      	str	r3, [sp, #0]
  HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg);
 800083a:	466a      	mov	r2, sp
 800083c:	a902      	add	r1, sp, #8
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <QSPI_EnableMemoryMappedMode+0x48>)
 8000840:	f002 f950 	bl	8002ae4 <HAL_QSPI_MemoryMapped>
}
 8000844:	b011      	add	sp, #68	; 0x44
 8000846:	f85d fb04 	ldr.w	pc, [sp], #4
 800084a:	bf00      	nop
 800084c:	2400fcdc 	.word	0x2400fcdc

08000850 <I2C_ResetChip>:
{
 8000850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000854:	b086      	sub	sp, #24
	GPIO_InitStructure.Pin = GTP_INT_Pin;
 8000856:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800085a:	9601      	str	r6, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2401      	movs	r4, #1
 800085e:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2702      	movs	r7, #2
 8000862:	9704      	str	r7, [sp, #16]
	GPIO_InitStructure.Pull  = GPIO_PULLUP;       //设置为上
 8000864:	9403      	str	r4, [sp, #12]
	HAL_GPIO_Init(GTP_INT_GPIO_Port, &GPIO_InitStructure);
 8000866:	4d15      	ldr	r5, [pc, #84]	; (80008bc <I2C_ResetChip+0x6c>)
 8000868:	a901      	add	r1, sp, #4
 800086a:	4628      	mov	r0, r5
 800086c:	f001 f950 	bl	8001b10 <HAL_GPIO_Init>
	HAL_GPIO_WritePin (GTP_INT_GPIO_Port,GTP_INT_Pin,GPIO_PIN_SET);
 8000870:	4622      	mov	r2, r4
 8000872:	4631      	mov	r1, r6
 8000874:	4628      	mov	r0, r5
 8000876:	f001 fa4f 	bl	8001d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GTP_RST_GPIO_Port,GTP_RST_Pin,GPIO_PIN_RESET);
 800087a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80008c0 <I2C_ResetChip+0x70>
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4640      	mov	r0, r8
 8000884:	f001 fa48 	bl	8001d18 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000888:	200a      	movs	r0, #10
 800088a:	f000 fef3 	bl	8001674 <HAL_Delay>
	HAL_GPIO_WritePin (GTP_RST_GPIO_Port,GTP_RST_Pin,GPIO_PIN_SET);
 800088e:	4622      	mov	r2, r4
 8000890:	2108      	movs	r1, #8
 8000892:	4640      	mov	r0, r8
 8000894:	f001 fa40 	bl	8001d18 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000898:	2014      	movs	r0, #20
 800089a:	f000 feeb 	bl	8001674 <HAL_Delay>
	GPIO_InitStructure.Pin = GTP_INT_Pin;
 800089e:	9601      	str	r6, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	9302      	str	r3, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	9704      	str	r7, [sp, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80008a6:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GTP_INT_GPIO_Port, &GPIO_InitStructure);
 80008a8:	a901      	add	r1, sp, #4
 80008aa:	4628      	mov	r0, r5
 80008ac:	f001 f930 	bl	8001b10 <HAL_GPIO_Init>
	HAL_Delay(100);
 80008b0:	2064      	movs	r0, #100	; 0x64
 80008b2:	f000 fedf 	bl	8001674 <HAL_Delay>
}
 80008b6:	b006      	add	sp, #24
 80008b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008bc:	58021800 	.word	0x58021800
 80008c0:	58020c00 	.word	0x58020c00

080008c4 <main>:
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b098      	sub	sp, #96	; 0x60
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008c8:	4bc3      	ldr	r3, [pc, #780]	; (8000bd8 <main+0x314>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008d0:	d113      	bne.n	80008fa <main+0x36>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008da:	4bbf      	ldr	r3, [pc, #764]	; (8000bd8 <main+0x314>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008e6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008ea:	695a      	ldr	r2, [r3, #20]
 80008ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008f0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008fa:	4bb7      	ldr	r3, [pc, #732]	; (8000bd8 <main+0x314>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000902:	d129      	bne.n	8000958 <main+0x94>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000904:	4bb4      	ldr	r3, [pc, #720]	; (8000bd8 <main+0x314>)
 8000906:	2200      	movs	r2, #0
 8000908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000914:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000918:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800091c:	015a      	lsls	r2, r3, #5
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800091e:	f643 75e0 	movw	r5, #16352	; 0x3fe0
 8000922:	48ad      	ldr	r0, [pc, #692]	; (8000bd8 <main+0x314>)
 8000924:	ea02 0405 	and.w	r4, r2, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000928:	4633      	mov	r3, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800092a:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
 800092e:	f8c0 1260 	str.w	r1, [r0, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000938:	d1f7      	bne.n	800092a <main+0x66>
    } while(sets-- != 0U);
 800093a:	3a20      	subs	r2, #32
 800093c:	f112 0f20 	cmn.w	r2, #32
 8000940:	d1f0      	bne.n	8000924 <main+0x60>
 8000942:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000946:	4aa4      	ldr	r2, [pc, #656]	; (8000bd8 <main+0x314>)
 8000948:	6953      	ldr	r3, [r2, #20]
 800094a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094e:	6153      	str	r3, [r2, #20]
 8000950:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000954:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000958:	f000 fe4c 	bl	80015f4 <HAL_Init>
  SystemClock_Config();
 800095c:	f7ff fea4 	bl	80006a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	2400      	movs	r4, #0
 8000962:	940b      	str	r4, [sp, #44]	; 0x2c
 8000964:	940c      	str	r4, [sp, #48]	; 0x30
 8000966:	940d      	str	r4, [sp, #52]	; 0x34
 8000968:	940e      	str	r4, [sp, #56]	; 0x38
 800096a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b9b      	ldr	r3, [pc, #620]	; (8000bdc <main+0x318>)
 800096e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000972:	f042 0202 	orr.w	r2, r2, #2
 8000976:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800097a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800097e:	f002 0202 	and.w	r2, r2, #2
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000986:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800098a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800098e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000992:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000996:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800099a:	9201      	str	r2, [sp, #4]
 800099c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009ae:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80009b2:	9202      	str	r2, [sp, #8]
 80009b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009ba:	f042 0208 	orr.w	r2, r2, #8
 80009be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009c6:	f002 0208 	and.w	r2, r2, #8
 80009ca:	9203      	str	r2, [sp, #12]
 80009cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009d2:	f042 0210 	orr.w	r2, r2, #16
 80009d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009de:	f002 0210 	and.w	r2, r2, #16
 80009e2:	9204      	str	r2, [sp, #16]
 80009e4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009f6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80009fa:	9205      	str	r2, [sp, #20]
 80009fc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a0e:	f002 0201 	and.w	r2, r2, #1
 8000a12:	9206      	str	r2, [sp, #24]
 8000a14:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a1a:	f042 0204 	orr.w	r2, r2, #4
 8000a1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a26:	f002 0204 	and.w	r2, r2, #4
 8000a2a:	9207      	str	r2, [sp, #28]
 8000a2c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a3e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000a42:	9208      	str	r2, [sp, #32]
 8000a44:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a4a:	f042 0220 	orr.w	r2, r2, #32
 8000a4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a56:	f002 0220 	and.w	r2, r2, #32
 8000a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8000a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	930a      	str	r3, [sp, #40]	; 0x28
 8000a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000a76:	4e5a      	ldr	r6, [pc, #360]	; (8000be0 <main+0x31c>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	f001 f94b 	bl	8001d18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GTP_RST_GPIO_Port, GTP_RST_Pin, GPIO_PIN_RESET);
 8000a82:	4622      	mov	r2, r4
 8000a84:	2108      	movs	r1, #8
 8000a86:	4630      	mov	r0, r6
 8000a88:	f001 f946 	bl	8001d18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GTP_INT_GPIO_Port, GTP_INT_Pin, GPIO_PIN_RESET);
 8000a8c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000c04 <main+0x340>
 8000a90:	4622      	mov	r2, r4
 8000a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a96:	4648      	mov	r0, r9
 8000a98:	f001 f93e 	bl	8001d18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2502      	movs	r5, #2
 8000aa2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	f04f 0803 	mov.w	r8, #3
 8000aaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aae:	2705      	movs	r7, #5
 8000ab0:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ab4:	484b      	ldr	r0, [pc, #300]	; (8000be4 <main+0x320>)
 8000ab6:	f001 f82b 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000abe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac8:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aca:	a90b      	add	r1, sp, #44	; 0x2c
 8000acc:	4648      	mov	r0, r9
 8000ace:	f001 f81f 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	f04f 0a01 	mov.w	sl, #1
 8000ada:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	f001 f813 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GTP_RST_Pin;
 8000aea:	2308      	movs	r3, #8
 8000aec:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af2:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GTP_RST_GPIO_Port, &GPIO_InitStruct);
 8000af6:	a90b      	add	r1, sp, #44	; 0x2c
 8000af8:	4630      	mov	r0, r6
 8000afa:	f001 f809 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GTP_INT_Pin;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b08:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	a90b      	add	r1, sp, #44	; 0x2c
 8000b0e:	4648      	mov	r0, r9
 8000b10:	f000 fffe 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000b14:	2330      	movs	r3, #48	; 0x30
 8000b16:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b20:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	a90b      	add	r1, sp, #44	; 0x2c
 8000b24:	4830      	ldr	r0, [pc, #192]	; (8000be8 <main+0x324>)
 8000b26:	f000 fff3 	bl	8001b10 <HAL_GPIO_Init>
  huart4.Instance = UART4;
 8000b2a:	4830      	ldr	r0, [pc, #192]	; (8000bec <main+0x328>)
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <main+0x32c>)
 8000b2e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8000b30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b34:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	6084      	str	r4, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b38:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b3a:	6104      	str	r4, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	6143      	str	r3, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b40:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b42:	61c4      	str	r4, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b44:	6204      	str	r4, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b46:	6244      	str	r4, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b4a:	f004 fca1 	bl	8005490 <HAL_UART_Init>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	f040 8114 	bne.w	8000d7c <main+0x4b8>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4825      	ldr	r0, [pc, #148]	; (8000bec <main+0x328>)
 8000b58:	f004 fd13 	bl	8005582 <HAL_UARTEx_SetTxFifoThreshold>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	f040 810f 	bne.w	8000d80 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b62:	2100      	movs	r1, #0
 8000b64:	4821      	ldr	r0, [pc, #132]	; (8000bec <main+0x328>)
 8000b66:	f004 fd31 	bl	80055cc <HAL_UARTEx_SetRxFifoThreshold>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	f040 810a 	bne.w	8000d84 <main+0x4c0>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <main+0x328>)
 8000b72:	f004 fce7 	bl	8005544 <HAL_UARTEx_DisableFifoMode>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	f040 8106 	bne.w	8000d88 <main+0x4c4>
  hqspi.Instance = QUADSPI;
 8000b7c:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <main+0x330>)
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <main+0x334>)
 8000b80:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b86:	2304      	movs	r3, #4
 8000b88:	6083      	str	r3, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 22;
 8000b8e:	2316      	movs	r3, #22
 8000b90:	6103      	str	r3, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000b92:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000b96:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b9c:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b9e:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ba0:	f001 ff4e 	bl	8002a40 <HAL_QSPI_Init>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	f040 80f1 	bne.w	8000d8c <main+0x4c8>
  QSPI_EnableMemoryMappedMode();
 8000baa:	f7ff fe2b 	bl	8000804 <QSPI_EnableMemoryMappedMode>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bae:	4813      	ldr	r0, [pc, #76]	; (8000bfc <main+0x338>)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <main+0x33c>)
 8000bb2:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	6101      	str	r1, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	6141      	str	r1, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000bc8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000bcc:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bce:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd4:	6203      	str	r3, [r0, #32]
 8000bd6:	e017      	b.n	8000c08 <main+0x344>
 8000bd8:	e000ed00 	.word	0xe000ed00
 8000bdc:	58024400 	.word	0x58024400
 8000be0:	58020c00 	.word	0x58020c00
 8000be4:	58020400 	.word	0x58020400
 8000be8:	58020000 	.word	0x58020000
 8000bec:	2400fbb0 	.word	0x2400fbb0
 8000bf0:	40004c00 	.word	0x40004c00
 8000bf4:	2400fcdc 	.word	0x2400fcdc
 8000bf8:	52005000 	.word	0x52005000
 8000bfc:	2400fca8 	.word	0x2400fca8
 8000c00:	52004140 	.word	0x52004140
 8000c04:	58021800 	.word	0x58021800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	930b      	str	r3, [sp, #44]	; 0x2c
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000c18:	920c      	str	r2, [sp, #48]	; 0x30
  SdramTiming.SelfRefreshTime = 6;
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	920d      	str	r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 8000c1e:	2207      	movs	r2, #7
 8000c20:	920e      	str	r2, [sp, #56]	; 0x38
  SdramTiming.WriteRecoveryTime = 5;
 8000c22:	2205      	movs	r2, #5
 8000c24:	920f      	str	r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 8000c26:	9310      	str	r3, [sp, #64]	; 0x40
  SdramTiming.RCDDelay = 2;
 8000c28:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c2a:	a90b      	add	r1, sp, #44	; 0x2c
 8000c2c:	f003 fd7c 	bl	8004728 <HAL_SDRAM_Init>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	f040 80ad 	bne.w	8000d90 <main+0x4cc>
  MX_SDRAM_InitEx();
 8000c36:	f7ff fda1 	bl	800077c <MX_SDRAM_InitEx>
  hcrc.Instance = CRC;
 8000c3a:	485e      	ldr	r0, [pc, #376]	; (8000db4 <main+0x4f0>)
 8000c3c:	4b5e      	ldr	r3, [pc, #376]	; (8000db8 <main+0x4f4>)
 8000c3e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c44:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c46:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c48:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c4e:	f000 fd7b 	bl	8001748 <HAL_CRC_Init>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	f040 809e 	bne.w	8000d94 <main+0x4d0>
  hdma2d.Instance = DMA2D;
 8000c58:	4858      	ldr	r0, [pc, #352]	; (8000dbc <main+0x4f8>)
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <main+0x4fc>)
 8000c5c:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c62:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c64:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c66:	6443      	str	r3, [r0, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000c68:	6483      	str	r3, [r0, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c6a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c6c:	6503      	str	r3, [r0, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000c6e:	6543      	str	r3, [r0, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000c70:	6583      	str	r3, [r0, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000c72:	65c3      	str	r3, [r0, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c74:	f000 fdec 	bl	8001850 <HAL_DMA2D_Init>
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	f040 808d 	bne.w	8000d98 <main+0x4d4>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	484e      	ldr	r0, [pc, #312]	; (8000dbc <main+0x4f8>)
 8000c82:	f000 fec7 	bl	8001a14 <HAL_DMA2D_ConfigLayer>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	f040 8088 	bne.w	8000d9c <main+0x4d8>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c8c:	2234      	movs	r2, #52	; 0x34
 8000c8e:	2100      	movs	r1, #0
 8000c90:	a80b      	add	r0, sp, #44	; 0x2c
 8000c92:	f016 fbc3 	bl	801741c <memset>
  hltdc.Instance = LTDC;
 8000c96:	484b      	ldr	r0, [pc, #300]	; (8000dc4 <main+0x500>)
 8000c98:	4b4b      	ldr	r3, [pc, #300]	; (8000dc8 <main+0x504>)
 8000c9a:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ca0:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ca2:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ca4:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 0;
 8000ca6:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 0;
 8000ca8:	6183      	str	r3, [r0, #24]
  hltdc.Init.AccumulatedHBP = 88;
 8000caa:	2258      	movs	r2, #88	; 0x58
 8000cac:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 32;
 8000cae:	2220      	movs	r2, #32
 8000cb0:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 888;
 8000cb2:	f44f 725e 	mov.w	r2, #888	; 0x378
 8000cb6:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8000cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbc:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 928;
 8000cbe:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8000cc2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 525;
 8000cc4:	f240 220d 	movw	r2, #525	; 0x20d
 8000cc8:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cca:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cce:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cd2:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cd6:	f001 fc49 	bl	800256c <HAL_LTDC_Init>
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d160      	bne.n	8000da0 <main+0x4dc>
  pLayerCfg.WindowX0 = 0;
 8000cde:	2200      	movs	r2, #0
 8000ce0:	920b      	str	r2, [sp, #44]	; 0x2c
  pLayerCfg.WindowX1 = 800;
 8000ce2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000ce6:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.WindowY0 = 0;
 8000ce8:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowY1 = 480;
 8000cea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cee:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000cf0:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.Alpha = 0xFF;
 8000cf2:	20ff      	movs	r0, #255	; 0xff
 8000cf4:	9010      	str	r0, [sp, #64]	; 0x40
  pLayerCfg.Alpha0 = 0;
 8000cf6:	9211      	str	r2, [sp, #68]	; 0x44
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cfc:	9012      	str	r0, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cfe:	2005      	movs	r0, #5
 8000d00:	9013      	str	r0, [sp, #76]	; 0x4c
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d02:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8000d06:	9014      	str	r0, [sp, #80]	; 0x50
  pLayerCfg.ImageWidth = 800;
 8000d08:	9115      	str	r1, [sp, #84]	; 0x54
  pLayerCfg.ImageHeight = 480;
 8000d0a:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Backcolor.Blue = 0;
 8000d0c:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Green = 0;
 8000d10:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
  pLayerCfg.Backcolor.Red = 0;
 8000d14:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d18:	a90b      	add	r1, sp, #44	; 0x2c
 8000d1a:	482a      	ldr	r0, [pc, #168]	; (8000dc4 <main+0x500>)
 8000d1c:	f001 fd0f 	bl	800273e <HAL_LTDC_ConfigLayer>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d13f      	bne.n	8000da4 <main+0x4e0>
  hi2c1.Instance = I2C1;
 8000d24:	4829      	ldr	r0, [pc, #164]	; (8000dcc <main+0x508>)
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <main+0x50c>)
 8000d28:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x90913232;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <main+0x510>)
 8000d2c:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d32:	2201      	movs	r2, #1
 8000d34:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d36:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d38:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d3a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d40:	f001 f932 	bl	8001fa8 <HAL_I2C_Init>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d12f      	bne.n	8000da8 <main+0x4e4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <main+0x508>)
 8000d4c:	f001 fb0e 	bl	800236c <HAL_I2CEx_ConfigAnalogFilter>
 8000d50:	bb60      	cbnz	r0, 8000dac <main+0x4e8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	481d      	ldr	r0, [pc, #116]	; (8000dcc <main+0x508>)
 8000d56:	f001 fb37 	bl	80023c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5a:	bb48      	cbnz	r0, 8000db0 <main+0x4ec>
  I2C_ResetChip();
 8000d5c:	f7ff fd78 	bl	8000850 <I2C_ResetChip>
  MX_TouchGFX_Init();
 8000d60:	f006 ff60 	bl	8007c24 <MX_TouchGFX_Init>
  osKernelInitialize();
 8000d64:	f004 fd0a 	bl	800577c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <main+0x514>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <main+0x518>)
 8000d6e:	f004 fd33 	bl	80057d8 <osThreadNew>
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <main+0x51c>)
 8000d74:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000d76:	f004 fd13 	bl	80057a0 <osKernelStart>
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <main+0x4b6>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <main+0x4ba>
 8000d80:	b672      	cpsid	i
 8000d82:	e7fe      	b.n	8000d82 <main+0x4be>
 8000d84:	b672      	cpsid	i
 8000d86:	e7fe      	b.n	8000d86 <main+0x4c2>
 8000d88:	b672      	cpsid	i
 8000d8a:	e7fe      	b.n	8000d8a <main+0x4c6>
 8000d8c:	b672      	cpsid	i
 8000d8e:	e7fe      	b.n	8000d8e <main+0x4ca>
 8000d90:	b672      	cpsid	i
 8000d92:	e7fe      	b.n	8000d92 <main+0x4ce>
 8000d94:	b672      	cpsid	i
 8000d96:	e7fe      	b.n	8000d96 <main+0x4d2>
 8000d98:	b672      	cpsid	i
 8000d9a:	e7fe      	b.n	8000d9a <main+0x4d6>
 8000d9c:	b672      	cpsid	i
 8000d9e:	e7fe      	b.n	8000d9e <main+0x4da>
 8000da0:	b672      	cpsid	i
 8000da2:	e7fe      	b.n	8000da2 <main+0x4de>
 8000da4:	b672      	cpsid	i
 8000da6:	e7fe      	b.n	8000da6 <main+0x4e2>
 8000da8:	b672      	cpsid	i
 8000daa:	e7fe      	b.n	8000daa <main+0x4e6>
 8000dac:	b672      	cpsid	i
 8000dae:	e7fe      	b.n	8000dae <main+0x4ea>
 8000db0:	b672      	cpsid	i
 8000db2:	e7fe      	b.n	8000db2 <main+0x4ee>
 8000db4:	2400fae4 	.word	0x2400fae4
 8000db8:	58024c00 	.word	0x58024c00
 8000dbc:	2400fc40 	.word	0x2400fc40
 8000dc0:	52001000 	.word	0x52001000
 8000dc4:	2400fb08 	.word	0x2400fb08
 8000dc8:	50001000 	.word	0x50001000
 8000dcc:	2400af84 	.word	0x2400af84
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	90913232 	.word	0x90913232
 8000dd8:	0801827c 	.word	0x0801827c
 8000ddc:	08000679 	.word	0x08000679
 8000de0:	2400fae0 	.word	0x2400fae0

08000de4 <HAL_TIM_PeriodElapsedCallback>:
{
 8000de4:	b508      	push	{r3, lr}
  if (htim->Instance == TIM1) {
 8000de6:	6802      	ldr	r2, [r0, #0]
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d000      	beq.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8000dee:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000df0:	f000 fc2e 	bl	8001650 <HAL_IncTick>
}
 8000df4:	e7fb      	b.n	8000dee <HAL_TIM_PeriodElapsedCallback+0xa>
 8000df6:	bf00      	nop
 8000df8:	40010000 	.word	0x40010000

08000dfc <Error_Handler>:
 8000dfc:	b672      	cpsid	i
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <Error_Handler+0x2>

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b500      	push	{lr}
 8000e02:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x30>)
 8000e06:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000e0a:	f042 0202 	orr.w	r2, r2, #2
 8000e0e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	210f      	movs	r1, #15
 8000e22:	f06f 0001 	mvn.w	r0, #1
 8000e26:	f000 fc51 	bl	80016cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	b003      	add	sp, #12
 8000e2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e30:	58024400 	.word	0x58024400

08000e34 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000e34:	6802      	ldr	r2, [r0, #0]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_CRC_MspInit+0x2c>)
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d000      	beq.n	8000e3e <HAL_CRC_MspInit+0xa>
 8000e3c:	4770      	bx	lr
{
 8000e3e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e40:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000e44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e48:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e5c:	b002      	add	sp, #8
 8000e5e:	4770      	bx	lr
 8000e60:	58024c00 	.word	0x58024c00

08000e64 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000e64:	6802      	ldr	r2, [r0, #0]
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_DMA2D_MspInit+0x40>)
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d000      	beq.n	8000e6e <HAL_DMA2D_MspInit+0xa>
 8000e6c:	4770      	bx	lr
{
 8000e6e:	b500      	push	{lr}
 8000e70:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_DMA2D_MspInit+0x44>)
 8000e74:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000e78:	f042 0210 	orr.w	r2, r2, #16
 8000e7c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000e80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e84:	f003 0310 	and.w	r3, r3, #16
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2105      	movs	r1, #5
 8000e90:	205a      	movs	r0, #90	; 0x5a
 8000e92:	f000 fc1b 	bl	80016cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e96:	205a      	movs	r0, #90	; 0x5a
 8000e98:	f000 fc48 	bl	800172c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e9c:	b003      	add	sp, #12
 8000e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ea2:	bf00      	nop
 8000ea4:	52001000 	.word	0x52001000
 8000ea8:	58024400 	.word	0x58024400

08000eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eac:	b510      	push	{r4, lr}
 8000eae:	b0b6      	sub	sp, #216	; 0xd8
 8000eb0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	9131      	str	r1, [sp, #196]	; 0xc4
 8000eb6:	9132      	str	r1, [sp, #200]	; 0xc8
 8000eb8:	9133      	str	r1, [sp, #204]	; 0xcc
 8000eba:	9134      	str	r1, [sp, #208]	; 0xd0
 8000ebc:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebe:	22bc      	movs	r2, #188	; 0xbc
 8000ec0:	a802      	add	r0, sp, #8
 8000ec2:	f016 faab 	bl	801741c <memset>
  if(hi2c->Instance==I2C1)
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_I2C_MspInit+0x8c>)
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d001      	beq.n	8000ed2 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ece:	b036      	add	sp, #216	; 0xd8
 8000ed0:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9322      	str	r3, [sp, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	a802      	add	r0, sp, #8
 8000edc:	f002 fd32 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000ee0:	bb38      	cbnz	r0, 8000f32 <HAL_I2C_MspInit+0x86>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4c16      	ldr	r4, [pc, #88]	; (8000f3c <HAL_I2C_MspInit+0x90>)
 8000ee4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000ef0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000efc:	23c0      	movs	r3, #192	; 0xc0
 8000efe:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f00:	2312      	movs	r3, #18
 8000f02:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	a931      	add	r1, sp, #196	; 0xc4
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_I2C_MspInit+0x94>)
 8000f14:	f000 fdfc 	bl	8001b10 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f18:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f20:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8000f24:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	9b01      	ldr	r3, [sp, #4]
}
 8000f30:	e7cd      	b.n	8000ece <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8000f32:	f7ff ff63 	bl	8000dfc <Error_Handler>
 8000f36:	e7d4      	b.n	8000ee2 <HAL_I2C_MspInit+0x36>
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020400 	.word	0x58020400

08000f44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	b0b8      	sub	sp, #224	; 0xe0
 8000f48:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	9133      	str	r1, [sp, #204]	; 0xcc
 8000f4e:	9134      	str	r1, [sp, #208]	; 0xd0
 8000f50:	9135      	str	r1, [sp, #212]	; 0xd4
 8000f52:	9136      	str	r1, [sp, #216]	; 0xd8
 8000f54:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f56:	22bc      	movs	r2, #188	; 0xbc
 8000f58:	a804      	add	r0, sp, #16
 8000f5a:	f016 fa5f 	bl	801741c <memset>
  if(hltdc->Instance==LTDC)
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <HAL_LTDC_MspInit+0x114>)
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d001      	beq.n	8000f6a <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000f66:	b038      	add	sp, #224	; 0xe0
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f6e:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000f70:	2305      	movs	r3, #5
 8000f72:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8000f74:	23c0      	movs	r3, #192	; 0xc0
 8000f76:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f7c:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 32;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f86:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9313      	str	r3, [sp, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f8c:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8e:	a804      	add	r0, sp, #16
 8000f90:	f002 fcd8 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d15c      	bne.n	8001052 <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f98:	4b30      	ldr	r3, [pc, #192]	; (800105c <HAL_LTDC_MspInit+0x118>)
 8000f9a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000f9e:	f042 0208 	orr.w	r2, r2, #8
 8000fa2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000fa6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000faa:	f002 0208 	and.w	r2, r2, #8
 8000fae:	9200      	str	r2, [sp, #0]
 8000fb0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fc2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000fc6:	9201      	str	r2, [sp, #4]
 8000fc8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fda:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fde:	9202      	str	r2, [sp, #8]
 8000fe0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fe2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	9303      	str	r3, [sp, #12]
 8000ff8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000ffa:	23ff      	movs	r3, #255	; 0xff
 8000ffc:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2602      	movs	r6, #2
 8001000:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2400      	movs	r4, #0
 8001004:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001008:	250e      	movs	r5, #14
 800100a:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800100c:	a933      	add	r1, sp, #204	; 0xcc
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <HAL_LTDC_MspInit+0x11c>)
 8001010:	f000 fd7e 	bl	8001b10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001018:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001020:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001022:	a933      	add	r1, sp, #204	; 0xcc
 8001024:	480f      	ldr	r0, [pc, #60]	; (8001064 <HAL_LTDC_MspInit+0x120>)
 8001026:	f000 fd73 	bl	8001b10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800102a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800102e:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001036:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001038:	a933      	add	r1, sp, #204	; 0xcc
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <HAL_LTDC_MspInit+0x124>)
 800103c:	f000 fd68 	bl	8001b10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001040:	4622      	mov	r2, r4
 8001042:	2105      	movs	r1, #5
 8001044:	2058      	movs	r0, #88	; 0x58
 8001046:	f000 fb41 	bl	80016cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800104a:	2058      	movs	r0, #88	; 0x58
 800104c:	f000 fb6e 	bl	800172c <HAL_NVIC_EnableIRQ>
}
 8001050:	e789      	b.n	8000f66 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 8001052:	f7ff fed3 	bl	8000dfc <Error_Handler>
 8001056:	e79f      	b.n	8000f98 <HAL_LTDC_MspInit+0x54>
 8001058:	50001000 	.word	0x50001000
 800105c:	58024400 	.word	0x58024400
 8001060:	58022800 	.word	0x58022800
 8001064:	58022400 	.word	0x58022400
 8001068:	58022000 	.word	0x58022000

0800106c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001070:	b0b8      	sub	sp, #224	; 0xe0
 8001072:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	2100      	movs	r1, #0
 8001076:	9133      	str	r1, [sp, #204]	; 0xcc
 8001078:	9134      	str	r1, [sp, #208]	; 0xd0
 800107a:	9135      	str	r1, [sp, #212]	; 0xd4
 800107c:	9136      	str	r1, [sp, #216]	; 0xd8
 800107e:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001080:	22bc      	movs	r2, #188	; 0xbc
 8001082:	a804      	add	r0, sp, #16
 8001084:	f016 f9ca 	bl	801741c <memset>
  if(hqspi->Instance==QUADSPI)
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_QSPI_MspInit+0xe4>)
 800108c:	429a      	cmp	r2, r3
 800108e:	d002      	beq.n	8001096 <HAL_QSPI_MspInit+0x2a>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001090:	b038      	add	sp, #224	; 0xe0
 8001092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800109a:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800109c:	2300      	movs	r3, #0
 800109e:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a0:	a804      	add	r0, sp, #16
 80010a2:	f002 fc4f 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	d14e      	bne.n	8001148 <HAL_QSPI_MspInit+0xdc>
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_QSPI_MspInit+0xe8>)
 80010ac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80010b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80010b8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80010bc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010d4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80010d8:	9202      	str	r2, [sp, #8]
 80010da:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010e0:	f042 0220 	orr.w	r2, r2, #32
 80010e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	9303      	str	r3, [sp, #12]
 80010f2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f4:	2340      	movs	r3, #64	; 0x40
 80010f6:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2602      	movs	r6, #2
 80010fa:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2500      	movs	r5, #0
 80010fe:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2403      	movs	r4, #3
 8001102:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001104:	f04f 080a 	mov.w	r8, #10
 8001108:	f8cd 80dc 	str.w	r8, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110c:	a933      	add	r1, sp, #204	; 0xcc
 800110e:	4812      	ldr	r0, [pc, #72]	; (8001158 <HAL_QSPI_MspInit+0xec>)
 8001110:	f000 fcfe 	bl	8001b10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001114:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001118:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001120:	2309      	movs	r3, #9
 8001122:	9337      	str	r3, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001124:	4f0d      	ldr	r7, [pc, #52]	; (800115c <HAL_QSPI_MspInit+0xf0>)
 8001126:	a933      	add	r1, sp, #204	; 0xcc
 8001128:	4638      	mov	r0, r7
 800112a:	f000 fcf1 	bl	8001b10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800112e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001132:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800113a:	f8cd 80dc 	str.w	r8, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800113e:	a933      	add	r1, sp, #204	; 0xcc
 8001140:	4638      	mov	r0, r7
 8001142:	f000 fce5 	bl	8001b10 <HAL_GPIO_Init>
}
 8001146:	e7a3      	b.n	8001090 <HAL_QSPI_MspInit+0x24>
      Error_Handler();
 8001148:	f7ff fe58 	bl	8000dfc <Error_Handler>
 800114c:	e7ad      	b.n	80010aa <HAL_QSPI_MspInit+0x3e>
 800114e:	bf00      	nop
 8001150:	52005000 	.word	0x52005000
 8001154:	58024400 	.word	0x58024400
 8001158:	58021800 	.word	0x58021800
 800115c:	58021400 	.word	0x58021400

08001160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	b0b8      	sub	sp, #224	; 0xe0
 8001164:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	2100      	movs	r1, #0
 8001168:	9133      	str	r1, [sp, #204]	; 0xcc
 800116a:	9134      	str	r1, [sp, #208]	; 0xd0
 800116c:	9135      	str	r1, [sp, #212]	; 0xd4
 800116e:	9136      	str	r1, [sp, #216]	; 0xd8
 8001170:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001172:	22bc      	movs	r2, #188	; 0xbc
 8001174:	a804      	add	r0, sp, #16
 8001176:	f016 f951 	bl	801741c <memset>
  if(huart->Instance==UART4)
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_UART_MspInit+0xbc>)
 800117e:	429a      	cmp	r2, r3
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001182:	b038      	add	sp, #224	; 0xe0
 8001184:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001186:	2302      	movs	r3, #2
 8001188:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800118a:	2300      	movs	r3, #0
 800118c:	9321      	str	r3, [sp, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118e:	a804      	add	r0, sp, #16
 8001190:	f002 fbd8 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8001194:	2800      	cmp	r0, #0
 8001196:	d13d      	bne.n	8001214 <HAL_UART_MspInit+0xb4>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_UART_MspInit+0xc0>)
 800119a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800119e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011a2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80011a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011aa:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80011c6:	9202      	str	r2, [sp, #8]
 80011c8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011ce:	f042 0201 	orr.w	r2, r2, #1
 80011d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	9303      	str	r3, [sp, #12]
 80011e0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e6:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2602      	movs	r6, #2
 80011ea:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2400      	movs	r4, #0
 80011ee:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011f2:	2508      	movs	r5, #8
 80011f4:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011f6:	a933      	add	r1, sp, #204	; 0xcc
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <HAL_UART_MspInit+0xc4>)
 80011fa:	f000 fc89 	bl	8001b10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fe:	2301      	movs	r3, #1
 8001200:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001208:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	a933      	add	r1, sp, #204	; 0xcc
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <HAL_UART_MspInit+0xc8>)
 800120e:	f000 fc7f 	bl	8001b10 <HAL_GPIO_Init>
}
 8001212:	e7b6      	b.n	8001182 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001214:	f7ff fdf2 	bl	8000dfc <Error_Handler>
 8001218:	e7be      	b.n	8001198 <HAL_UART_MspInit+0x38>
 800121a:	bf00      	nop
 800121c:	40004c00 	.word	0x40004c00
 8001220:	58024400 	.word	0x58024400
 8001224:	58022000 	.word	0x58022000
 8001228:	58020000 	.word	0x58020000

0800122c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001230:	2300      	movs	r3, #0
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	9303      	str	r3, [sp, #12]
 8001236:	9304      	str	r3, [sp, #16]
 8001238:	9305      	str	r3, [sp, #20]
 800123a:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 800123c:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <HAL_SDRAM_MspInit+0xfc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b10b      	cbz	r3, 8001246 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001242:	b037      	add	sp, #220	; 0xdc
 8001244:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <HAL_SDRAM_MspInit+0xfc>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124c:	229c      	movs	r2, #156	; 0x9c
 800124e:	2100      	movs	r1, #0
 8001250:	a80f      	add	r0, sp, #60	; 0x3c
 8001252:	f016 f8e3 	bl	801741c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001256:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800125a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001264:	2302      	movs	r3, #2
 8001266:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001268:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800126a:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001270:	2200      	movs	r2, #0
 8001272:	920e      	str	r2, [sp, #56]	; 0x38
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8001274:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	a807      	add	r0, sp, #28
 8001278:	f002 fb64 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	2800      	cmp	r0, #0
 800127e:	d150      	bne.n	8001322 <HAL_SDRAM_MspInit+0xf6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <HAL_SDRAM_MspInit+0x100>)
 8001282:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800128a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800128e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800129a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800129e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2702      	movs	r7, #2
 80012a2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2600      	movs	r6, #0
 80012a6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2503      	movs	r5, #3
 80012aa:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ac:	240c      	movs	r4, #12
 80012ae:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b0:	a902      	add	r1, sp, #8
 80012b2:	481f      	ldr	r0, [pc, #124]	; (8001330 <HAL_SDRAM_MspInit+0x104>)
 80012b4:	f000 fc2c 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012b8:	f248 1337 	movw	r3, #33079	; 0x8137
 80012bc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c6:	a902      	add	r1, sp, #8
 80012c8:	481a      	ldr	r0, [pc, #104]	; (8001334 <HAL_SDRAM_MspInit+0x108>)
 80012ca:	f000 fc21 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80012d2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012da:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	a902      	add	r1, sp, #8
 80012de:	4816      	ldr	r0, [pc, #88]	; (8001338 <HAL_SDRAM_MspInit+0x10c>)
 80012e0:	f000 fc16 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80012e4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012e8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f2:	a902      	add	r1, sp, #8
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <HAL_SDRAM_MspInit+0x110>)
 80012f6:	f000 fc0b 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012fa:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001302:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	a902      	add	r1, sp, #8
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <HAL_SDRAM_MspInit+0x114>)
 8001308:	f000 fc02 	bl	8001b10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800130c:	2320      	movs	r3, #32
 800130e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001316:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001318:	a902      	add	r1, sp, #8
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <HAL_SDRAM_MspInit+0x118>)
 800131c:	f000 fbf8 	bl	8001b10 <HAL_GPIO_Init>
}
 8001320:	e78f      	b.n	8001242 <HAL_SDRAM_MspInit+0x16>
      Error_Handler();
 8001322:	f7ff fd6b 	bl	8000dfc <Error_Handler>
 8001326:	e7ab      	b.n	8001280 <HAL_SDRAM_MspInit+0x54>
 8001328:	240000e0 	.word	0x240000e0
 800132c:	58024400 	.word	0x58024400
 8001330:	58021000 	.word	0x58021000
 8001334:	58021800 	.word	0x58021800
 8001338:	58020c00 	.word	0x58020c00
 800133c:	58021400 	.word	0x58021400
 8001340:	58020800 	.word	0x58020800
 8001344:	58021c00 	.word	0x58021c00

08001348 <HAL_InitTick>:
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001348:	280f      	cmp	r0, #15
 800134a:	d901      	bls.n	8001350 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800134e:	4770      	bx	lr
{
 8001350:	b510      	push	{r4, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001356:	2200      	movs	r2, #0
 8001358:	4601      	mov	r1, r0
 800135a:	2019      	movs	r0, #25
 800135c:	f000 f9b6 	bl	80016cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001360:	2019      	movs	r0, #25
 8001362:	f000 f9e3 	bl	800172c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_InitTick+0x80>)
 8001368:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM1_CLK_ENABLE();
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_InitTick+0x84>)
 800136c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001370:	f042 0201 	orr.w	r2, r2, #1
 8001374:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001384:	a901      	add	r1, sp, #4
 8001386:	a802      	add	r0, sp, #8
 8001388:	f002 f9ae 	bl	80036e8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800138c:	f002 f99a 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 8001390:	4603      	mov	r3, r0
  htim1.Instance = TIM1;
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <HAL_InitTick+0x88>)
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_InitTick+0x8c>)
 8001396:	6002      	str	r2, [r0, #0]
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001398:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139c:	60c2      	str	r2, [r0, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800139e:	005b      	lsls	r3, r3, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <HAL_InitTick+0x90>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80013aa:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013b2:	f003 fbaf 	bl	8004b14 <HAL_TIM_Base_Init>
 80013b6:	b110      	cbz	r0, 80013be <HAL_InitTick+0x76>
  return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
}
 80013ba:	b00a      	add	sp, #40	; 0x28
 80013bc:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <HAL_InitTick+0x88>)
 80013c0:	f003 fa12 	bl	80047e8 <HAL_TIM_Base_Start_IT>
 80013c4:	e7f9      	b.n	80013ba <HAL_InitTick+0x72>
 80013c6:	bf00      	nop
 80013c8:	24000010 	.word	0x24000010
 80013cc:	58024400 	.word	0x58024400
 80013d0:	2400fd28 	.word	0x2400fd28
 80013d4:	40010000 	.word	0x40010000
 80013d8:	431bde83 	.word	0x431bde83

080013dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler>

080013de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler>

080013e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler>

080013e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler>

080013e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler>

080013e6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	4770      	bx	lr

080013e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013ea:	4802      	ldr	r0, [pc, #8]	; (80013f4 <TIM1_UP_IRQHandler+0xc>)
 80013ec:	f003 fa52 	bl	8004894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013f0:	bd08      	pop	{r3, pc}
 80013f2:	bf00      	nop
 80013f4:	2400fd28 	.word	0x2400fd28

080013f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80013f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013fa:	4802      	ldr	r0, [pc, #8]	; (8001404 <LTDC_IRQHandler+0xc>)
 80013fc:	f001 f932 	bl	8002664 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001400:	bd08      	pop	{r3, pc}
 8001402:	bf00      	nop
 8001404:	2400fb08 	.word	0x2400fb08

08001408 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001408:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800140a:	4802      	ldr	r0, [pc, #8]	; (8001414 <DMA2D_IRQHandler+0xc>)
 800140c:	f000 fa64 	bl	80018d8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001410:	bd08      	pop	{r3, pc}
 8001412:	bf00      	nop
 8001414:	2400fc40 	.word	0x2400fc40

08001418 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001418:	2001      	movs	r0, #1
 800141a:	4770      	bx	lr

0800141c <_kill>:

int _kill(int pid, int sig)
{
 800141c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800141e:	f015 feb1 	bl	8017184 <__errno>
 8001422:	2316      	movs	r3, #22
 8001424:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001426:	f04f 30ff 	mov.w	r0, #4294967295
 800142a:	bd08      	pop	{r3, pc}

0800142c <_exit>:

void _exit (int status)
{
 800142c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800142e:	f015 fea9 	bl	8017184 <__errno>
 8001432:	2316      	movs	r3, #22
 8001434:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001436:	e7fe      	b.n	8001436 <_exit+0xa>

08001438 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001438:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	1e16      	subs	r6, r2, #0
 800143c:	dd07      	ble.n	800144e <_read+0x16>
 800143e:	460c      	mov	r4, r1
 8001440:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001442:	f3af 8000 	nop.w
 8001446:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	42a5      	cmp	r5, r4
 800144c:	d1f9      	bne.n	8001442 <_read+0xa>
	}

return len;
}
 800144e:	4630      	mov	r0, r6
 8001450:	bd70      	pop	{r4, r5, r6, pc}

08001452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001452:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	1e16      	subs	r6, r2, #0
 8001456:	dd07      	ble.n	8001468 <_write+0x16>
 8001458:	460c      	mov	r4, r1
 800145a:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800145c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001460:	f7ff f912 	bl	8000688 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	42a5      	cmp	r5, r4
 8001466:	d1f9      	bne.n	800145c <_write+0xa>
	}
	return len;
}
 8001468:	4630      	mov	r0, r6
 800146a:	bd70      	pop	{r4, r5, r6, pc}

0800146c <_close>:

int _close(int file)
{
	return -1;
}
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	4770      	bx	lr

08001472 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001478:	2000      	movs	r0, #0
 800147a:	4770      	bx	lr

0800147c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800147c:	2001      	movs	r0, #1
 800147e:	4770      	bx	lr

08001480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001480:	2000      	movs	r0, #0
 8001482:	4770      	bx	lr

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b508      	push	{r3, lr}
 8001486:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <_sbrk+0x38>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	b152      	cbz	r2, 80014a4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <_sbrk+0x38>)
 8001490:	6810      	ldr	r0, [r2, #0]
 8001492:	4403      	add	r3, r0
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <_sbrk+0x3c>)
 8001496:	490b      	ldr	r1, [pc, #44]	; (80014c4 <_sbrk+0x40>)
 8001498:	1a52      	subs	r2, r2, r1
 800149a:	4293      	cmp	r3, r2
 800149c:	d806      	bhi.n	80014ac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <_sbrk+0x38>)
 80014a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80014a2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_sbrk+0x38>)
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <_sbrk+0x44>)
 80014a8:	6011      	str	r1, [r2, #0]
 80014aa:	e7f0      	b.n	800148e <_sbrk+0xa>
    errno = ENOMEM;
 80014ac:	f015 fe6a 	bl	8017184 <__errno>
 80014b0:	230c      	movs	r3, #12
 80014b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	e7f3      	b.n	80014a2 <_sbrk+0x1e>
 80014ba:	bf00      	nop
 80014bc:	240000e4 	.word	0x240000e4
 80014c0:	24080000 	.word	0x24080000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	2400fdc8 	.word	0x2400fdc8

080014cc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014cc:	4a29      	ldr	r2, [pc, #164]	; (8001574 <SystemInit+0xa8>)
 80014ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <SystemInit+0xac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d806      	bhi.n	80014f4 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <SystemInit+0xac>)
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	f023 030f 	bic.w	r3, r3, #15
 80014ee:	f043 0307 	orr.w	r3, r3, #7
 80014f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <SystemInit+0xb0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001502:	6819      	ldr	r1, [r3, #0]
 8001504:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <SystemInit+0xb4>)
 8001506:	400a      	ands	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <SystemInit+0xac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f013 0f08 	tst.w	r3, #8
 8001512:	d006      	beq.n	8001522 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001514:	4a18      	ldr	r2, [pc, #96]	; (8001578 <SystemInit+0xac>)
 8001516:	6813      	ldr	r3, [r2, #0]
 8001518:	f023 030f 	bic.w	r3, r3, #15
 800151c:	f043 0307 	orr.w	r3, r3, #7
 8001520:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <SystemInit+0xb0>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001528:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800152a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800152c:	4915      	ldr	r1, [pc, #84]	; (8001584 <SystemInit+0xb8>)
 800152e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001530:	4915      	ldr	r1, [pc, #84]	; (8001588 <SystemInit+0xbc>)
 8001532:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <SystemInit+0xc0>)
 8001536:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800153a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800153e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001540:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001548:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800154a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <SystemInit+0xc4>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <SystemInit+0xc8>)
 8001552:	4013      	ands	r3, r2
 8001554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001558:	d202      	bcs.n	8001560 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <SystemInit+0xcc>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <SystemInit+0xd0>)
 8001562:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001566:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <SystemInit+0xa8>)
 800156a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800156e:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	52002000 	.word	0x52002000
 800157c:	58024400 	.word	0x58024400
 8001580:	eaf6ed7f 	.word	0xeaf6ed7f
 8001584:	02020200 	.word	0x02020200
 8001588:	01ff0000 	.word	0x01ff0000
 800158c:	01010280 	.word	0x01010280
 8001590:	5c001000 	.word	0x5c001000
 8001594:	ffff0000 	.word	0xffff0000
 8001598:	51008108 	.word	0x51008108
 800159c:	52004000 	.word	0x52004000

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015a4:	f7ff ff92 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c0:	4c0a      	ldr	r4, [pc, #40]	; (80015ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ce:	f015 fee7 	bl	80173a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff f977 	bl	80008c4 <main>
  bx  lr
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015e0:	240000c4 	.word	0x240000c4
  ldr r2, =_sidata
 80015e4:	0801bda4 	.word	0x0801bda4
  ldr r2, =_sbss
 80015e8:	240000c4 	.word	0x240000c4
  ldr r4, =_ebss
 80015ec:	2400fdc8 	.word	0x2400fdc8

080015f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC3_IRQHandler>
	...

080015f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f6:	2003      	movs	r0, #3
 80015f8:	f000 f856 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015fc:	f001 fde0 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8001600:	490f      	ldr	r1, [pc, #60]	; (8001640 <HAL_Init+0x4c>)
 8001602:	698b      	ldr	r3, [r1, #24]
 8001604:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <HAL_Init+0x50>)
 8001606:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001612:	698b      	ldr	r3, [r1, #24]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	fa20 f303 	lsr.w	r3, r0, r3
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_Init+0x54>)
 8001624:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_Init+0x58>)
 8001628:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162a:	200f      	movs	r0, #15
 800162c:	f7ff fe8c 	bl	8001348 <HAL_InitTick>
 8001630:	b110      	cbz	r0, 8001638 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8001632:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8001634:	4620      	mov	r0, r4
 8001636:	bd10      	pop	{r4, pc}
 8001638:	4604      	mov	r4, r0
  HAL_MspInit();
 800163a:	f7ff fbe1 	bl	8000e00 <HAL_MspInit>
  return HAL_OK;
 800163e:	e7f9      	b.n	8001634 <HAL_Init+0x40>
 8001640:	58024400 	.word	0x58024400
 8001644:	080182a0 	.word	0x080182a0
 8001648:	24000008 	.word	0x24000008
 800164c:	24000004 	.word	0x24000004

08001650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001650:	4a03      	ldr	r2, [pc, #12]	; (8001660 <HAL_IncTick+0x10>)
 8001652:	6811      	ldr	r1, [r2, #0]
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_IncTick+0x14>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	440b      	add	r3, r1
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2400fd74 	.word	0x2400fd74
 8001664:	2400000c 	.word	0x2400000c

08001668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <HAL_GetTick+0x8>)
 800166a:	6818      	ldr	r0, [r3, #0]
}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2400fd74 	.word	0x2400fd74

08001674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff fff6 	bl	8001668 <HAL_GetTick>
 800167c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001682:	d002      	beq.n	800168a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_Delay+0x24>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	f7ff ffed 	bl	8001668 <HAL_GetTick>
 800168e:	1b40      	subs	r0, r0, r5
 8001690:	42a0      	cmp	r0, r4
 8001692:	d3fa      	bcc.n	800168a <HAL_Delay+0x16>
  {
  }
}
 8001694:	bd38      	pop	{r3, r4, r5, pc}
 8001696:	bf00      	nop
 8001698:	2400000c 	.word	0x2400000c

0800169c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800169c:	4b01      	ldr	r3, [pc, #4]	; (80016a4 <HAL_GetREVID+0x8>)
 800169e:	6818      	ldr	r0, [r3, #0]
}
 80016a0:	0c00      	lsrs	r0, r0, #16
 80016a2:	4770      	bx	lr
 80016a4:	5c001000 	.word	0x5c001000

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80016aa:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	0200      	lsls	r0, r0, #8
 80016ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ba:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016be:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016c0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	05fa0000 	.word	0x05fa0000

080016cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_NVIC_SetPriority+0x54>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d6:	f1c3 0407 	rsb	r4, r3, #7
 80016da:	2c04      	cmp	r4, #4
 80016dc:	bf28      	it	cs
 80016de:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e0:	1d1d      	adds	r5, r3, #4
 80016e2:	2d06      	cmp	r5, #6
 80016e4:	bf8c      	ite	hi
 80016e6:	3b03      	subhi	r3, #3
 80016e8:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ea:	f04f 35ff 	mov.w	r5, #4294967295
 80016ee:	fa05 f404 	lsl.w	r4, r5, r4
 80016f2:	ea21 0104 	bic.w	r1, r1, r4
 80016f6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	fa05 f303 	lsl.w	r3, r5, r3
 80016fc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001702:	2800      	cmp	r0, #0
 8001704:	db05      	blt.n	8001712 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	0109      	lsls	r1, r1, #4
 8001708:	b2c9      	uxtb	r1, r1
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_NVIC_SetPriority+0x58>)
 800170c:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800170e:	bc30      	pop	{r4, r5}
 8001710:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	f000 000f 	and.w	r0, r0, #15
 8001716:	0109      	lsls	r1, r1, #4
 8001718:	b2c9      	uxtb	r1, r1
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_NVIC_SetPriority+0x5c>)
 800171c:	5419      	strb	r1, [r3, r0]
 800171e:	e7f6      	b.n	800170e <HAL_NVIC_SetPriority+0x42>
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	e000e400 	.word	0xe000e400
 8001728:	e000ed14 	.word	0xe000ed14

0800172c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800172c:	2800      	cmp	r0, #0
 800172e:	db08      	blt.n	8001742 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001730:	0942      	lsrs	r2, r0, #5
 8001732:	f000 001f 	and.w	r0, r0, #31
 8001736:	2301      	movs	r3, #1
 8001738:	fa03 f000 	lsl.w	r0, r3, r0
 800173c:	4b01      	ldr	r3, [pc, #4]	; (8001744 <HAL_NVIC_EnableIRQ+0x18>)
 800173e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100

08001748 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001748:	2800      	cmp	r0, #0
 800174a:	d038      	beq.n	80017be <HAL_CRC_Init+0x76>
{
 800174c:	b510      	push	{r4, lr}
 800174e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001750:	7f43      	ldrb	r3, [r0, #29]
 8001752:	b31b      	cbz	r3, 800179c <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001754:	2302      	movs	r3, #2
 8001756:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001758:	7923      	ldrb	r3, [r4, #4]
 800175a:	bb1b      	cbnz	r3, 80017a4 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_CRC_Init+0x7c>)
 8001760:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001762:	6822      	ldr	r2, [r4, #0]
 8001764:	6893      	ldr	r3, [r2, #8]
 8001766:	f023 0318 	bic.w	r3, r3, #24
 800176a:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800176c:	7963      	ldrb	r3, [r4, #5]
 800176e:	bb13      	cbnz	r3, 80017b6 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	f04f 32ff 	mov.w	r2, #4294967295
 8001776:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	6893      	ldr	r3, [r2, #8]
 800177c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001780:	6961      	ldr	r1, [r4, #20]
 8001782:	430b      	orrs	r3, r1
 8001784:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001786:	6822      	ldr	r2, [r4, #0]
 8001788:	6893      	ldr	r3, [r2, #8]
 800178a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800178e:	69a1      	ldr	r1, [r4, #24]
 8001790:	430b      	orrs	r3, r1
 8001792:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001794:	2301      	movs	r3, #1
 8001796:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8001798:	2000      	movs	r0, #0
}
 800179a:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800179c:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800179e:	f7ff fb49 	bl	8000e34 <HAL_CRC_MspInit>
 80017a2:	e7d7      	b.n	8001754 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017a4:	68e2      	ldr	r2, [r4, #12]
 80017a6:	68a1      	ldr	r1, [r4, #8]
 80017a8:	4620      	mov	r0, r4
 80017aa:	f000 f80d 	bl	80017c8 <HAL_CRCEx_Polynomial_Set>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	d0dc      	beq.n	800176c <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
 80017b4:	e7f1      	b.n	800179a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	6922      	ldr	r2, [r4, #16]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	e7dc      	b.n	8001778 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 80017be:	2001      	movs	r0, #1
}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	04c11db7 	.word	0x04c11db7

080017c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80017c8:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80017ca:	241e      	movs	r4, #30
 80017cc:	f004 031f 	and.w	r3, r4, #31
 80017d0:	fa21 f303 	lsr.w	r3, r1, r3
 80017d4:	f013 0f01 	tst.w	r3, #1
 80017d8:	d10a      	bne.n	80017f0 <HAL_CRCEx_Polynomial_Set+0x28>
 80017da:	3c01      	subs	r4, #1
 80017dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80017e0:	d1f4      	bne.n	80017cc <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80017e2:	2a10      	cmp	r2, #16
 80017e4:	d02f      	beq.n	8001846 <HAL_CRCEx_Polynomial_Set+0x7e>
 80017e6:	2a18      	cmp	r2, #24
 80017e8:	d02f      	beq.n	800184a <HAL_CRCEx_Polynomial_Set+0x82>
 80017ea:	b1a2      	cbz	r2, 8001816 <HAL_CRCEx_Polynomial_Set+0x4e>
 80017ec:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80017ee:	e01b      	b.n	8001828 <HAL_CRCEx_Polynomial_Set+0x60>
  switch (PolyLength)
 80017f0:	2a18      	cmp	r2, #24
 80017f2:	d824      	bhi.n	800183e <HAL_CRCEx_Polynomial_Set+0x76>
 80017f4:	e8df f002 	tbb	[pc, r2]
 80017f8:	2323230f 	.word	0x2323230f
 80017fc:	23232323 	.word	0x23232323
 8001800:	2323231f 	.word	0x2323231f
 8001804:	23232323 	.word	0x23232323
 8001808:	2323231b 	.word	0x2323231b
 800180c:	23232323 	.word	0x23232323
 8001810:	0d          	.byte	0x0d
 8001811:	00          	.byte	0x00
      if (msb >= HAL_CRC_LENGTH_7B)
 8001812:	2c06      	cmp	r4, #6
 8001814:	d815      	bhi.n	8001842 <HAL_CRCEx_Polynomial_Set+0x7a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001816:	6803      	ldr	r3, [r0, #0]
 8001818:	6159      	str	r1, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800181a:	6801      	ldr	r1, [r0, #0]
 800181c:	688b      	ldr	r3, [r1, #8]
 800181e:	f023 0318 	bic.w	r3, r3, #24
 8001822:	431a      	orrs	r2, r3
 8001824:	608a      	str	r2, [r1, #8]
 8001826:	2000      	movs	r0, #0
}
 8001828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800182c:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 800182e:	2c07      	cmp	r4, #7
 8001830:	d9f1      	bls.n	8001816 <HAL_CRCEx_Polynomial_Set+0x4e>
        status =   HAL_ERROR;
 8001832:	2001      	movs	r0, #1
 8001834:	e7f8      	b.n	8001828 <HAL_CRCEx_Polynomial_Set+0x60>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001836:	2c0f      	cmp	r4, #15
 8001838:	d9ed      	bls.n	8001816 <HAL_CRCEx_Polynomial_Set+0x4e>
        status =   HAL_ERROR;
 800183a:	2001      	movs	r0, #1
 800183c:	e7f4      	b.n	8001828 <HAL_CRCEx_Polynomial_Set+0x60>
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800183e:	2001      	movs	r0, #1
 8001840:	e7f2      	b.n	8001828 <HAL_CRCEx_Polynomial_Set+0x60>
        status =   HAL_ERROR;
 8001842:	2001      	movs	r0, #1
 8001844:	e7f0      	b.n	8001828 <HAL_CRCEx_Polynomial_Set+0x60>
        status =   HAL_ERROR;
 8001846:	2001      	movs	r0, #1
 8001848:	e7ee      	b.n	8001828 <HAL_CRCEx_Polynomial_Set+0x60>
        status =   HAL_ERROR;
 800184a:	2001      	movs	r0, #1
 800184c:	e7ec      	b.n	8001828 <HAL_CRCEx_Polynomial_Set+0x60>
	...

08001850 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001850:	2800      	cmp	r0, #0
 8001852:	d037      	beq.n	80018c4 <HAL_DMA2D_Init+0x74>
{
 8001854:	b510      	push	{r4, lr}
 8001856:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001858:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800185c:	2b00      	cmp	r3, #0
 800185e:	d02c      	beq.n	80018ba <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001860:	2302      	movs	r3, #2
 8001862:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001866:	6821      	ldr	r1, [r4, #0]
 8001868:	6808      	ldr	r0, [r1, #0]
 800186a:	6863      	ldr	r3, [r4, #4]
 800186c:	69e2      	ldr	r2, [r4, #28]
 800186e:	4313      	orrs	r3, r2
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_DMA2D_Init+0x78>)
 8001872:	4002      	ands	r2, r0
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001878:	6821      	ldr	r1, [r4, #0]
 800187a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800187c:	68a3      	ldr	r3, [r4, #8]
 800187e:	69a2      	ldr	r2, [r4, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <HAL_DMA2D_Init+0x7c>)
 8001884:	4002      	ands	r2, r0
 8001886:	4313      	orrs	r3, r2
 8001888:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_DMA2D_Init+0x80>)
 8001890:	400b      	ands	r3, r1
 8001892:	68e1      	ldr	r1, [r4, #12]
 8001894:	430b      	orrs	r3, r1
 8001896:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001898:	6821      	ldr	r1, [r4, #0]
 800189a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800189c:	6920      	ldr	r0, [r4, #16]
 800189e:	6963      	ldr	r3, [r4, #20]
 80018a0:	055b      	lsls	r3, r3, #21
 80018a2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 80018a6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80018aa:	4313      	orrs	r3, r2
 80018ac:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80018ae:	2000      	movs	r0, #0
 80018b0:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80018b8:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80018ba:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 80018be:	f7ff fad1 	bl	8000e64 <HAL_DMA2D_MspInit>
 80018c2:	e7cd      	b.n	8001860 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 80018c4:	2001      	movs	r0, #1
}
 80018c6:	4770      	bx	lr
 80018c8:	fff8ffbf 	.word	0xfff8ffbf
 80018cc:	fffffef8 	.word	0xfffffef8
 80018d0:	ffff0000 	.word	0xffff0000

080018d4 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80018d4:	4770      	bx	lr

080018d6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80018d6:	4770      	bx	lr

080018d8 <HAL_DMA2D_IRQHandler>:
{
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80018dc:	6803      	ldr	r3, [r0, #0]
 80018de:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80018e0:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80018e2:	f015 0f01 	tst.w	r5, #1
 80018e6:	d016      	beq.n	8001916 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80018e8:	f416 7f80 	tst.w	r6, #256	; 0x100
 80018ec:	d013      	beq.n	8001916 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f4:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80018f6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80018fe:	6803      	ldr	r3, [r0, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001904:	2304      	movs	r3, #4
 8001906:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800190a:	2300      	movs	r3, #0
 800190c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8001910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001912:	b103      	cbz	r3, 8001916 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8001914:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001916:	f015 0f20 	tst.w	r5, #32
 800191a:	d018      	beq.n	800194e <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800191c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001920:	d015      	beq.n	800194e <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001922:	6822      	ldr	r2, [r4, #0]
 8001924:	6813      	ldr	r3, [r2, #0]
 8001926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800192a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	2220      	movs	r2, #32
 8001930:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800193a:	2304      	movs	r3, #4
 800193c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8001940:	2300      	movs	r3, #0
 8001942:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8001946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001948:	b10b      	cbz	r3, 800194e <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800194a:	4620      	mov	r0, r4
 800194c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800194e:	f015 0f08 	tst.w	r5, #8
 8001952:	d018      	beq.n	8001986 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001954:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001958:	d015      	beq.n	8001986 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	6813      	ldr	r3, [r2, #0]
 800195e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001962:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	2208      	movs	r2, #8
 8001968:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800196a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001972:	2304      	movs	r3, #4
 8001974:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8001978:	2300      	movs	r3, #0
 800197a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800197e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001980:	b10b      	cbz	r3, 8001986 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8001982:	4620      	mov	r0, r4
 8001984:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001986:	f015 0f04 	tst.w	r5, #4
 800198a:	d002      	beq.n	8001992 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800198c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001990:	d120      	bne.n	80019d4 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001992:	f015 0f02 	tst.w	r5, #2
 8001996:	d016      	beq.n	80019c6 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001998:	f416 7f00 	tst.w	r6, #512	; 0x200
 800199c:	d013      	beq.n	80019c6 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800199e:	6822      	ldr	r2, [r4, #0]
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019a6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	2202      	movs	r2, #2
 80019ac:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80019ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019b0:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80019b8:	2300      	movs	r3, #0
 80019ba:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80019be:	6a23      	ldr	r3, [r4, #32]
 80019c0:	b10b      	cbz	r3, 80019c6 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 80019c2:	4620      	mov	r0, r4
 80019c4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80019c6:	f015 0f10 	tst.w	r5, #16
 80019ca:	d002      	beq.n	80019d2 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80019cc:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80019d0:	d10c      	bne.n	80019ec <HAL_DMA2D_IRQHandler+0x114>
}
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	6813      	ldr	r3, [r2, #0]
 80019d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019dc:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	2204      	movs	r2, #4
 80019e2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff ff75 	bl	80018d4 <HAL_DMA2D_LineEventCallback>
 80019ea:	e7d2      	b.n	8001992 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80019ec:	6822      	ldr	r2, [r4, #0]
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019f4:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	2210      	movs	r2, #16
 80019fa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80019fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019fe:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8001a06:	2300      	movs	r3, #0
 8001a08:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff ff62 	bl	80018d6 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8001a12:	e7de      	b.n	80019d2 <HAL_DMA2D_IRQHandler+0xfa>

08001a14 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001a14:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d070      	beq.n	8001afe <HAL_DMA2D_ConfigLayer+0xea>
{
 8001a1c:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a24:	2302      	movs	r3, #2
 8001a26:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001a2a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001a2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001a32:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8001a34:	6b15      	ldr	r5, [r2, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001a36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001a38:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001a3a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001a3e:	4323      	orrs	r3, r4
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001a40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001a42:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a46:	f1a4 0209 	sub.w	r2, r4, #9
 8001a4a:	2a01      	cmp	r2, #1
 8001a4c:	d91e      	bls.n	8001a8c <HAL_DMA2D_ConfigLayer+0x78>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001a4e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001a52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001a56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001a5c:	2900      	cmp	r1, #0
 8001a5e:	d141      	bne.n	8001ae4 <HAL_DMA2D_ConfigLayer+0xd0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001a60:	6801      	ldr	r1, [r0, #0]
 8001a62:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_DMA2D_ConfigLayer+0xf0>)
 8001a66:	4022      	ands	r2, r4
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	624b      	str	r3, [r1, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001a6c:	6803      	ldr	r3, [r0, #0]
 8001a6e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001a70:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a74:	3b09      	subs	r3, #9
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d92e      	bls.n	8001ad8 <HAL_DMA2D_ConfigLayer+0xc4>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001a80:	2300      	movs	r3, #0
 8001a82:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 8001a86:	4618      	mov	r0, r3
}
 8001a88:	bc30      	pop	{r4, r5}
 8001a8a:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001a8c:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001a90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a96:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001a9a:	4313      	orrs	r3, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001a9c:	2900      	cmp	r1, #0
 8001a9e:	d0df      	beq.n	8001a60 <HAL_DMA2D_ConfigLayer+0x4c>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001aa0:	4d19      	ldr	r5, [pc, #100]	; (8001b08 <HAL_DMA2D_ConfigLayer+0xf4>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001aa2:	6804      	ldr	r4, [r0, #0]
 8001aa4:	69e2      	ldr	r2, [r4, #28]
 8001aa6:	ea22 0205 	bic.w	r2, r2, r5
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001aae:	6802      	ldr	r2, [r0, #0]
 8001ab0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001ab4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001ab8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001aba:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	3b09      	subs	r3, #9
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d8da      	bhi.n	8001a7a <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001ac4:	6802      	ldr	r2, [r0, #0]
 8001ac6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001aca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001ace:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	e7d0      	b.n	8001a7a <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001ad8:	6802      	ldr	r2, [r0, #0]
 8001ada:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001adc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ae0:	6293      	str	r3, [r2, #40]	; 0x28
 8001ae2:	e7ca      	b.n	8001a7a <HAL_DMA2D_ConfigLayer+0x66>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001ae4:	2c0b      	cmp	r4, #11
 8001ae6:	d108      	bne.n	8001afa <HAL_DMA2D_ConfigLayer+0xe6>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8001ae8:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001aec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001af0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001af2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 8001af6:	4d05      	ldr	r5, [pc, #20]	; (8001b0c <HAL_DMA2D_ConfigLayer+0xf8>)
 8001af8:	e7d3      	b.n	8001aa2 <HAL_DMA2D_ConfigLayer+0x8e>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001afa:	4d03      	ldr	r5, [pc, #12]	; (8001b08 <HAL_DMA2D_ConfigLayer+0xf4>)
 8001afc:	e7d1      	b.n	8001aa2 <HAL_DMA2D_ConfigLayer+0x8e>
  __HAL_LOCK(hdma2d);
 8001afe:	2002      	movs	r0, #2
}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	00ccfff0 	.word	0x00ccfff0
 8001b08:	ff33000f 	.word	0xff33000f
 8001b0c:	ff3f000f 	.word	0xff3f000f

08001b10 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b10:	680a      	ldr	r2, [r1, #0]
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	f000 80f5 	beq.w	8001d02 <HAL_GPIO_Init+0x1f2>
{
 8001b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b1c:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001b1e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b20:	4f78      	ldr	r7, [pc, #480]	; (8001d04 <HAL_GPIO_Init+0x1f4>)
 8001b22:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8001d10 <HAL_GPIO_Init+0x200>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b26:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8001d14 <HAL_GPIO_Init+0x204>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b2a:	4e77      	ldr	r6, [pc, #476]	; (8001d08 <HAL_GPIO_Init+0x1f8>)
 8001b2c:	e038      	b.n	8001ba0 <HAL_GPIO_Init+0x90>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b2e:	2400      	movs	r4, #0
 8001b30:	fa04 f409 	lsl.w	r4, r4, r9
 8001b34:	ea44 040a 	orr.w	r4, r4, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b38:	f8c8 4008 	str.w	r4, [r8, #8]
        temp = EXTI_CurrentCPU->IMR1;
 8001b3c:	6834      	ldr	r4, [r6, #0]
        temp &= ~(iocurrent);
 8001b3e:	ea6f 0802 	mvn.w	r8, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b42:	684d      	ldr	r5, [r1, #4]
 8001b44:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001b48:	bf0c      	ite	eq
 8001b4a:	ea08 0404 	andeq.w	r4, r8, r4
        {
          temp |= iocurrent;
 8001b4e:	4314      	orrne	r4, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b50:	6034      	str	r4, [r6, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001b52:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b54:	684d      	ldr	r5, [r1, #4]
 8001b56:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001b5a:	bf0c      	ite	eq
 8001b5c:	ea08 0404 	andeq.w	r4, r8, r4
        {
          temp |= iocurrent;
 8001b60:	4314      	orrne	r4, r2
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b62:	6074      	str	r4, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b64:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001b68:	6824      	ldr	r4, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6a:	684d      	ldr	r5, [r1, #4]
 8001b6c:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001b70:	bf0c      	ite	eq
 8001b72:	ea08 0404 	andeq.w	r4, r8, r4
        {
          temp |= iocurrent;
 8001b76:	4314      	orrne	r4, r2
        }
        EXTI->RTSR1 = temp;
 8001b78:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001b7c:	602c      	str	r4, [r5, #0]

        temp = EXTI->FTSR1;
 8001b7e:	686c      	ldr	r4, [r5, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	684d      	ldr	r5, [r1, #4]
 8001b82:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001b86:	bf0c      	ite	eq
 8001b88:	ea08 0204 	andeq.w	r2, r8, r4
        {
          temp |= iocurrent;
 8001b8c:	4322      	orrne	r2, r4
        }
        EXTI->FTSR1 = temp;
 8001b8e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001b92:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8001b94:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b96:	680a      	ldr	r2, [r1, #0]
 8001b98:	fa32 f403 	lsrs.w	r4, r2, r3
 8001b9c:	f000 80ae 	beq.w	8001cfc <HAL_GPIO_Init+0x1ec>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ba0:	2401      	movs	r4, #1
 8001ba2:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8001ba4:	4022      	ands	r2, r4
 8001ba6:	d0f5      	beq.n	8001b94 <HAL_GPIO_Init+0x84>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba8:	684d      	ldr	r5, [r1, #4]
 8001baa:	f025 0510 	bic.w	r5, r5, #16
 8001bae:	3d01      	subs	r5, #1
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb0:	2d01      	cmp	r5, #1
 8001bb2:	d818      	bhi.n	8001be6 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8001bb4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bb6:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8001bba:	f04f 0803 	mov.w	r8, #3
 8001bbe:	fa08 f809 	lsl.w	r8, r8, r9
 8001bc2:	ea25 0808 	bic.w	r8, r5, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	68cd      	ldr	r5, [r1, #12]
 8001bc8:	fa05 f509 	lsl.w	r5, r5, r9
 8001bcc:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->OSPEEDR = temp;
 8001bd0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bd2:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd4:	ea25 0804 	bic.w	r8, r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bd8:	684d      	ldr	r5, [r1, #4]
 8001bda:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8001bde:	409c      	lsls	r4, r3
 8001be0:	ea44 0408 	orr.w	r4, r4, r8
        GPIOx->OTYPER = temp;
 8001be4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001be6:	f8d0 900c 	ldr.w	r9, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bea:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001bee:	2503      	movs	r5, #3
 8001bf0:	fa05 f508 	lsl.w	r5, r5, r8
 8001bf4:	43ec      	mvns	r4, r5
 8001bf6:	ea29 0905 	bic.w	r9, r9, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfa:	688d      	ldr	r5, [r1, #8]
 8001bfc:	fa05 f508 	lsl.w	r5, r5, r8
 8001c00:	ea45 0509 	orr.w	r5, r5, r9
      GPIOx->PUPDR = temp;
 8001c04:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c06:	684d      	ldr	r5, [r1, #4]
 8001c08:	f025 0510 	bic.w	r5, r5, #16
 8001c0c:	2d02      	cmp	r5, #2
 8001c0e:	d115      	bne.n	8001c3c <HAL_GPIO_Init+0x12c>
        temp = GPIOx->AFR[position >> 3U];
 8001c10:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001c14:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001c18:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c1c:	f003 0507 	and.w	r5, r3, #7
 8001c20:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 8001c24:	250f      	movs	r5, #15
 8001c26:	fa05 f50b 	lsl.w	r5, r5, fp
 8001c2a:	ea2a 0a05 	bic.w	sl, sl, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c2e:	690d      	ldr	r5, [r1, #16]
 8001c30:	fa05 f50b 	lsl.w	r5, r5, fp
 8001c34:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001c38:	f8c9 5020 	str.w	r5, [r9, #32]
      temp = GPIOx->MODER;
 8001c3c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c3e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	684c      	ldr	r4, [r1, #4]
 8001c42:	f004 0403 	and.w	r4, r4, #3
 8001c46:	fa04 f408 	lsl.w	r4, r4, r8
 8001c4a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001c4c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4e:	684c      	ldr	r4, [r1, #4]
 8001c50:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001c54:	d09e      	beq.n	8001b94 <HAL_GPIO_Init+0x84>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8001c5a:	f044 0402 	orr.w	r4, r4, #2
 8001c5e:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 8001c62:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8001c66:	f004 0402 	and.w	r4, r4, #2
 8001c6a:	9401      	str	r4, [sp, #4]
 8001c6c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6e:	f023 0803 	bic.w	r8, r3, #3
 8001c72:	44e0      	add	r8, ip
 8001c74:	f8d8 5008 	ldr.w	r5, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c78:	f003 0403 	and.w	r4, r3, #3
 8001c7c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8001c80:	240f      	movs	r4, #15
 8001c82:	fa04 f409 	lsl.w	r4, r4, r9
 8001c86:	ea25 0a04 	bic.w	sl, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c8a:	4570      	cmp	r0, lr
 8001c8c:	f43f af4f 	beq.w	8001b2e <HAL_GPIO_Init+0x1e>
 8001c90:	4c1e      	ldr	r4, [pc, #120]	; (8001d0c <HAL_GPIO_Init+0x1fc>)
 8001c92:	42a0      	cmp	r0, r4
 8001c94:	d022      	beq.n	8001cdc <HAL_GPIO_Init+0x1cc>
 8001c96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c9a:	42a0      	cmp	r0, r4
 8001c9c:	d020      	beq.n	8001ce0 <HAL_GPIO_Init+0x1d0>
 8001c9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ca2:	42a0      	cmp	r0, r4
 8001ca4:	d01e      	beq.n	8001ce4 <HAL_GPIO_Init+0x1d4>
 8001ca6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001caa:	42a0      	cmp	r0, r4
 8001cac:	d01c      	beq.n	8001ce8 <HAL_GPIO_Init+0x1d8>
 8001cae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001cb2:	42a0      	cmp	r0, r4
 8001cb4:	d01a      	beq.n	8001cec <HAL_GPIO_Init+0x1dc>
 8001cb6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001cba:	42a0      	cmp	r0, r4
 8001cbc:	d018      	beq.n	8001cf0 <HAL_GPIO_Init+0x1e0>
 8001cbe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001cc2:	42a0      	cmp	r0, r4
 8001cc4:	d016      	beq.n	8001cf4 <HAL_GPIO_Init+0x1e4>
 8001cc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001cca:	42a0      	cmp	r0, r4
 8001ccc:	d014      	beq.n	8001cf8 <HAL_GPIO_Init+0x1e8>
 8001cce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001cd2:	42a0      	cmp	r0, r4
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2409      	moveq	r4, #9
 8001cd8:	240a      	movne	r4, #10
 8001cda:	e729      	b.n	8001b30 <HAL_GPIO_Init+0x20>
 8001cdc:	2401      	movs	r4, #1
 8001cde:	e727      	b.n	8001b30 <HAL_GPIO_Init+0x20>
 8001ce0:	2402      	movs	r4, #2
 8001ce2:	e725      	b.n	8001b30 <HAL_GPIO_Init+0x20>
 8001ce4:	2403      	movs	r4, #3
 8001ce6:	e723      	b.n	8001b30 <HAL_GPIO_Init+0x20>
 8001ce8:	2404      	movs	r4, #4
 8001cea:	e721      	b.n	8001b30 <HAL_GPIO_Init+0x20>
 8001cec:	2405      	movs	r4, #5
 8001cee:	e71f      	b.n	8001b30 <HAL_GPIO_Init+0x20>
 8001cf0:	2406      	movs	r4, #6
 8001cf2:	e71d      	b.n	8001b30 <HAL_GPIO_Init+0x20>
 8001cf4:	2407      	movs	r4, #7
 8001cf6:	e71b      	b.n	8001b30 <HAL_GPIO_Init+0x20>
 8001cf8:	2408      	movs	r4, #8
 8001cfa:	e719      	b.n	8001b30 <HAL_GPIO_Init+0x20>
  }
}
 8001cfc:	b003      	add	sp, #12
 8001cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d02:	4770      	bx	lr
 8001d04:	58024400 	.word	0x58024400
 8001d08:	58000080 	.word	0x58000080
 8001d0c:	58020400 	.word	0x58020400
 8001d10:	58000400 	.word	0x58000400
 8001d14:	58020000 	.word	0x58020000

08001d18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d18:	b10a      	cbz	r2, 8001d1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	6181      	str	r1, [r0, #24]
 8001d1c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d1e:	0409      	lsls	r1, r1, #16
 8001d20:	6181      	str	r1, [r0, #24]
  }
}
 8001d22:	4770      	bx	lr

08001d24 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d24:	6803      	ldr	r3, [r0, #0]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	f012 0f02 	tst.w	r2, #2
 8001d2c:	d001      	beq.n	8001d32 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d2e:	2200      	movs	r2, #0
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d32:	6803      	ldr	r3, [r0, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	f012 0f01 	tst.w	r2, #1
 8001d3a:	d103      	bne.n	8001d44 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	619a      	str	r2, [r3, #24]
  }
}
 8001d44:	4770      	bx	lr

08001d46 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d46:	b470      	push	{r4, r5, r6}
 8001d48:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001d4a:	6806      	ldr	r6, [r0, #0]
 8001d4c:	6870      	ldr	r0, [r6, #4]
 8001d4e:	0d65      	lsrs	r5, r4, #21
 8001d50:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8001d54:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 8001d58:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 8001d5c:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 8001d60:	f045 0503 	orr.w	r5, r5, #3
 8001d64:	ea20 0005 	bic.w	r0, r0, r5
 8001d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001d6c:	431c      	orrs	r4, r3
 8001d6e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001d72:	430c      	orrs	r4, r1
 8001d74:	4304      	orrs	r4, r0
 8001d76:	6074      	str	r4, [r6, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001d78:	bc70      	pop	{r4, r5, r6}
 8001d7a:	4770      	bx	lr

08001d7c <I2C_IsAcknowledgeFailed>:
{
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	4605      	mov	r5, r0
 8001d80:	460c      	mov	r4, r1
 8001d82:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d84:	6803      	ldr	r3, [r0, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f013 0f10 	tst.w	r3, #16
 8001d8c:	d101      	bne.n	8001d92 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8001d8e:	2000      	movs	r0, #0
}
 8001d90:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d92:	6829      	ldr	r1, [r5, #0]
 8001d94:	698b      	ldr	r3, [r1, #24]
 8001d96:	f013 0f20 	tst.w	r3, #32
 8001d9a:	d117      	bne.n	8001dcc <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8001d9c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001da0:	d0f8      	beq.n	8001d94 <I2C_IsAcknowledgeFailed+0x18>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da2:	f7ff fc61 	bl	8001668 <HAL_GetTick>
 8001da6:	1b80      	subs	r0, r0, r6
 8001da8:	42a0      	cmp	r0, r4
 8001daa:	d801      	bhi.n	8001db0 <I2C_IsAcknowledgeFailed+0x34>
 8001dac:	2c00      	cmp	r4, #0
 8001dae:	d1f0      	bne.n	8001d92 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001db2:	f043 0320 	orr.w	r3, r3, #32
 8001db6:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	2320      	movs	r3, #32
 8001dba:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001dc4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8001dc8:	2001      	movs	r0, #1
 8001dca:	e7e1      	b.n	8001d90 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dcc:	2310      	movs	r3, #16
 8001dce:	61cb      	str	r3, [r1, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	2420      	movs	r4, #32
 8001dd4:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f7ff ffa4 	bl	8001d24 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001ddc:	682a      	ldr	r2, [r5, #0]
 8001dde:	6853      	ldr	r3, [r2, #4]
 8001de0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001de4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001de8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001df2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001e04:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8001e08:	2001      	movs	r0, #1
 8001e0a:	e7c1      	b.n	8001d90 <I2C_IsAcknowledgeFailed+0x14>

08001e0c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	4604      	mov	r4, r0
 8001e10:	460d      	mov	r5, r1
 8001e12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f013 0f02 	tst.w	r3, #2
 8001e1c:	d11d      	bne.n	8001e5a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1e:	4632      	mov	r2, r6
 8001e20:	4629      	mov	r1, r5
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7ff ffaa 	bl	8001d7c <I2C_IsAcknowledgeFailed>
 8001e28:	b9c8      	cbnz	r0, 8001e5e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001e2a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001e2e:	d0f1      	beq.n	8001e14 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e30:	f7ff fc1a 	bl	8001668 <HAL_GetTick>
 8001e34:	1b80      	subs	r0, r0, r6
 8001e36:	42a8      	cmp	r0, r5
 8001e38:	d801      	bhi.n	8001e3e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001e3a:	2d00      	cmp	r5, #0
 8001e3c:	d1ea      	bne.n	8001e14 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e40:	f043 0320 	orr.w	r3, r3, #32
 8001e44:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	2320      	movs	r3, #32
 8001e48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001e52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001e56:	2001      	movs	r0, #1
 8001e58:	e000      	b.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001e5a:	2000      	movs	r0, #0
}
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
 8001e60:	e7fc      	b.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001e62 <I2C_WaitOnFlagUntilTimeout>:
{
 8001e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e66:	4680      	mov	r8, r0
 8001e68:	460f      	mov	r7, r1
 8001e6a:	4616      	mov	r6, r2
 8001e6c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8001e72:	699c      	ldr	r4, [r3, #24]
 8001e74:	ea37 0204 	bics.w	r2, r7, r4
 8001e78:	bf0c      	ite	eq
 8001e7a:	2401      	moveq	r4, #1
 8001e7c:	2400      	movne	r4, #0
 8001e7e:	42b4      	cmp	r4, r6
 8001e80:	d11a      	bne.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001e82:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001e86:	d0f4      	beq.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e88:	f7ff fbee 	bl	8001668 <HAL_GetTick>
 8001e8c:	9b06      	ldr	r3, [sp, #24]
 8001e8e:	1ac0      	subs	r0, r0, r3
 8001e90:	42a8      	cmp	r0, r5
 8001e92:	d801      	bhi.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0x36>
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	d1ea      	bne.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e98:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
 8001ea0:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001eb0:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	e000      	b.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x58>
  return HAL_OK;
 8001eb8:	2000      	movs	r0, #0
}
 8001eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ebe <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001ebe:	b570      	push	{r4, r5, r6, lr}
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f013 0f20 	tst.w	r3, #32
 8001ece:	d11a      	bne.n	8001f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ed0:	4632      	mov	r2, r6
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f7ff ff51 	bl	8001d7c <I2C_IsAcknowledgeFailed>
 8001eda:	b9b0      	cbnz	r0, 8001f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001edc:	f7ff fbc4 	bl	8001668 <HAL_GetTick>
 8001ee0:	1b80      	subs	r0, r0, r6
 8001ee2:	42a0      	cmp	r0, r4
 8001ee4:	d801      	bhi.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001ee6:	2c00      	cmp	r4, #0
 8001ee8:	d1ed      	bne.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001eec:	f043 0320 	orr.w	r3, r3, #32
 8001ef0:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001efe:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
}
 8001f04:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001f06:	2000      	movs	r0, #0
 8001f08:	e7fc      	b.n	8001f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	e7fa      	b.n	8001f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001f0e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001f0e:	b570      	push	{r4, r5, r6, lr}
 8001f10:	4604      	mov	r4, r0
 8001f12:	460d      	mov	r5, r1
 8001f14:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f013 0f04 	tst.w	r3, #4
 8001f1e:	d13e      	bne.n	8001f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f20:	4632      	mov	r2, r6
 8001f22:	4629      	mov	r1, r5
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff ff29 	bl	8001d7c <I2C_IsAcknowledgeFailed>
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d138      	bne.n	8001fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	f012 0f20 	tst.w	r2, #32
 8001f38:	d113      	bne.n	8001f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff fb95 	bl	8001668 <HAL_GetTick>
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	42a8      	cmp	r0, r5
 8001f42:	d801      	bhi.n	8001f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8001f44:	2d00      	cmp	r5, #0
 8001f46:	d1e6      	bne.n	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f4a:	f043 0320 	orr.w	r3, r3, #32
 8001f4e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	2320      	movs	r3, #32
 8001f52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001f56:	2300      	movs	r3, #0
 8001f58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001f5c:	2101      	movs	r1, #1
}
 8001f5e:	4608      	mov	r0, r1
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	f012 0f04 	tst.w	r2, #4
 8001f68:	d002      	beq.n	8001f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001f6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d1f6      	bne.n	8001f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f70:	2220      	movs	r2, #32
 8001f72:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001f74:	6821      	ldr	r1, [r4, #0]
 8001f76:	684b      	ldr	r3, [r1, #4]
 8001f78:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001f7c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001f80:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001f96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	e7df      	b.n	8001f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	e7dd      	b.n	8001f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	e7db      	b.n	8001f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
	...

08001fa8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d053      	beq.n	8002054 <HAL_I2C_Init+0xac>
{
 8001fac:	b510      	push	{r4, lr}
 8001fae:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d043      	beq.n	8002040 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	2324      	movs	r3, #36	; 0x24
 8001fba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc8:	6822      	ldr	r2, [r4, #0]
 8001fca:	6863      	ldr	r3, [r4, #4]
 8001fcc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001fd0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	6893      	ldr	r3, [r2, #8]
 8001fd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fda:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fdc:	68e3      	ldr	r3, [r4, #12]
 8001fde:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe0:	6822      	ldr	r2, [r4, #0]
 8001fe2:	68a3      	ldr	r3, [r4, #8]
 8001fe4:	bf0c      	ite	eq
 8001fe6:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fea:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8001fee:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ff0:	68e3      	ldr	r3, [r4, #12]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d029      	beq.n	800204a <HAL_I2C_Init+0xa2>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ff6:	6822      	ldr	r2, [r4, #0]
 8001ff8:	6851      	ldr	r1, [r2, #4]
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_I2C_Init+0xb0>)
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002000:	6822      	ldr	r2, [r4, #0]
 8002002:	68d3      	ldr	r3, [r2, #12]
 8002004:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002008:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	6923      	ldr	r3, [r4, #16]
 800200e:	6961      	ldr	r1, [r4, #20]
 8002010:	430b      	orrs	r3, r1
 8002012:	69a1      	ldr	r1, [r4, #24]
 8002014:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002018:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800201a:	6822      	ldr	r2, [r4, #0]
 800201c:	69e3      	ldr	r3, [r4, #28]
 800201e:	6a21      	ldr	r1, [r4, #32]
 8002020:	430b      	orrs	r3, r1
 8002022:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002024:	6822      	ldr	r2, [r4, #0]
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202e:	2000      	movs	r0, #0
 8002030:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002032:	2320      	movs	r3, #32
 8002034:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002038:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800203a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800203e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002040:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002044:	f7fe ff32 	bl	8000eac <HAL_I2C_MspInit>
 8002048:	e7b6      	b.n	8001fb8 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	e7d0      	b.n	8001ff6 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8002054:	2001      	movs	r0, #1
}
 8002056:	4770      	bx	lr
 8002058:	02008000 	.word	0x02008000

0800205c <HAL_I2C_Master_Transmit>:
{
 800205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	460f      	mov	r7, r1
 8002064:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800206a:	b2c9      	uxtb	r1, r1
 800206c:	2920      	cmp	r1, #32
 800206e:	f040 80a8 	bne.w	80021c2 <HAL_I2C_Master_Transmit+0x166>
 8002072:	4604      	mov	r4, r0
 8002074:	4690      	mov	r8, r2
 8002076:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002078:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800207c:	2b01      	cmp	r3, #1
 800207e:	f000 80a4 	beq.w	80021ca <HAL_I2C_Master_Transmit+0x16e>
 8002082:	f04f 0a01 	mov.w	sl, #1
 8002086:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800208a:	f7ff faed 	bl	8001668 <HAL_GetTick>
 800208e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002090:	9000      	str	r0, [sp, #0]
 8002092:	2319      	movs	r3, #25
 8002094:	4652      	mov	r2, sl
 8002096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff fee1 	bl	8001e62 <I2C_WaitOnFlagUntilTimeout>
 80020a0:	2800      	cmp	r0, #0
 80020a2:	f040 8094 	bne.w	80021ce <HAL_I2C_Master_Transmit+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020a6:	2321      	movs	r3, #33	; 0x21
 80020a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ac:	2310      	movs	r3, #16
 80020ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80020b6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80020ba:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020be:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2bff      	cmp	r3, #255	; 0xff
 80020c6:	d947      	bls.n	8002158 <HAL_I2C_Master_Transmit+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c8:	22ff      	movs	r2, #255	; 0xff
 80020ca:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020cc:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <HAL_I2C_Master_Transmit+0x184>)
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d4:	4639      	mov	r1, r7
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7ff fe35 	bl	8001d46 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	f04f 0800 	mov.w	r8, #0
 80020e0:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020e4:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 80020e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d04c      	beq.n	800218a <HAL_I2C_Master_Transmit+0x12e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f0:	462a      	mov	r2, r5
 80020f2:	4631      	mov	r1, r6
 80020f4:	4620      	mov	r0, r4
 80020f6:	f7ff fe89 	bl	8001e0c <I2C_WaitOnTXISFlagUntilTimeout>
 80020fa:	2800      	cmp	r0, #0
 80020fc:	d169      	bne.n	80021d2 <HAL_I2C_Master_Transmit+0x176>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002108:	3301      	adds	r3, #1
 800210a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800210c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800210e:	3b01      	subs	r3, #1
 8002110:	b29b      	uxth	r3, r3
 8002112:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002114:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002116:	3b01      	subs	r3, #1
 8002118:	b29b      	uxth	r3, r3
 800211a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800211c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800211e:	b292      	uxth	r2, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1e1      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x8c>
 8002124:	2a00      	cmp	r2, #0
 8002126:	d0df      	beq.n	80020e8 <HAL_I2C_Master_Transmit+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002128:	9500      	str	r5, [sp, #0]
 800212a:	4633      	mov	r3, r6
 800212c:	4642      	mov	r2, r8
 800212e:	4649      	mov	r1, r9
 8002130:	4620      	mov	r0, r4
 8002132:	f7ff fe96 	bl	8001e62 <I2C_WaitOnFlagUntilTimeout>
 8002136:	2800      	cmp	r0, #0
 8002138:	d14d      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	2bff      	cmp	r3, #255	; 0xff
 8002140:	d917      	bls.n	8002172 <HAL_I2C_Master_Transmit+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002142:	22ff      	movs	r2, #255	; 0xff
 8002144:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002146:	f8cd 8000 	str.w	r8, [sp]
 800214a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800214e:	4639      	mov	r1, r7
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff fdf8 	bl	8001d46 <I2C_TransferConfig>
 8002156:	e7c7      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8002158:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800215a:	b292      	uxth	r2, r2
 800215c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_I2C_Master_Transmit+0x184>)
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	4639      	mov	r1, r7
 800216a:	4620      	mov	r0, r4
 800216c:	f7ff fdeb 	bl	8001d46 <I2C_TransferConfig>
 8002170:	e7b4      	b.n	80020dc <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 8002172:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002174:	b292      	uxth	r2, r2
 8002176:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002178:	f8cd 8000 	str.w	r8, [sp]
 800217c:	4653      	mov	r3, sl
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4639      	mov	r1, r7
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff fddf 	bl	8001d46 <I2C_TransferConfig>
 8002188:	e7ae      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218a:	462a      	mov	r2, r5
 800218c:	4631      	mov	r1, r6
 800218e:	4620      	mov	r0, r4
 8002190:	f7ff fe95 	bl	8001ebe <I2C_WaitOnSTOPFlagUntilTimeout>
 8002194:	bb08      	cbnz	r0, 80021da <HAL_I2C_Master_Transmit+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	2220      	movs	r2, #32
 800219a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800219c:	6821      	ldr	r1, [r4, #0]
 800219e:	684b      	ldr	r3, [r1, #4]
 80021a0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80021a4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80021a8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80021bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80021c0:	e000      	b.n	80021c4 <HAL_I2C_Master_Transmit+0x168>
    return HAL_BUSY;
 80021c2:	2002      	movs	r0, #2
}
 80021c4:	b002      	add	sp, #8
 80021c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80021ca:	2002      	movs	r0, #2
 80021cc:	e7fa      	b.n	80021c4 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 80021ce:	2001      	movs	r0, #1
 80021d0:	e7f8      	b.n	80021c4 <HAL_I2C_Master_Transmit+0x168>
        return HAL_ERROR;
 80021d2:	2001      	movs	r0, #1
 80021d4:	e7f6      	b.n	80021c4 <HAL_I2C_Master_Transmit+0x168>
          return HAL_ERROR;
 80021d6:	2001      	movs	r0, #1
 80021d8:	e7f4      	b.n	80021c4 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 80021da:	2001      	movs	r0, #1
 80021dc:	e7f2      	b.n	80021c4 <HAL_I2C_Master_Transmit+0x168>
 80021de:	bf00      	nop
 80021e0:	80002000 	.word	0x80002000

080021e4 <HAL_I2C_Master_Receive>:
{
 80021e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	460f      	mov	r7, r1
 80021ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ee:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80021f2:	b2c9      	uxtb	r1, r1
 80021f4:	2920      	cmp	r1, #32
 80021f6:	f040 80a8 	bne.w	800234a <HAL_I2C_Master_Receive+0x166>
 80021fa:	4604      	mov	r4, r0
 80021fc:	4690      	mov	r8, r2
 80021fe:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002200:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002204:	2b01      	cmp	r3, #1
 8002206:	f000 80a4 	beq.w	8002352 <HAL_I2C_Master_Receive+0x16e>
 800220a:	f04f 0a01 	mov.w	sl, #1
 800220e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002212:	f7ff fa29 	bl	8001668 <HAL_GetTick>
 8002216:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002218:	9000      	str	r0, [sp, #0]
 800221a:	2319      	movs	r3, #25
 800221c:	4652      	mov	r2, sl
 800221e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff fe1d 	bl	8001e62 <I2C_WaitOnFlagUntilTimeout>
 8002228:	2800      	cmp	r0, #0
 800222a:	f040 8094 	bne.w	8002356 <HAL_I2C_Master_Receive+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800222e:	2322      	movs	r3, #34	; 0x22
 8002230:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002234:	2310      	movs	r3, #16
 8002236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223a:	2300      	movs	r3, #0
 800223c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800223e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002242:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002246:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002248:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	2bff      	cmp	r3, #255	; 0xff
 800224e:	d947      	bls.n	80022e0 <HAL_I2C_Master_Receive+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002254:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_I2C_Master_Receive+0x184>)
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800225c:	4639      	mov	r1, r7
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff fd71 	bl	8001d46 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002264:	f04f 0800 	mov.w	r8, #0
 8002268:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800226c:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 8002270:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d04c      	beq.n	8002312 <HAL_I2C_Master_Receive+0x12e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	462a      	mov	r2, r5
 800227a:	4631      	mov	r1, r6
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff fe46 	bl	8001f0e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002282:	2800      	cmp	r0, #0
 8002284:	d169      	bne.n	800235a <HAL_I2C_Master_Receive+0x176>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800228c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800228e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002290:	3301      	adds	r3, #1
 8002292:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002294:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002296:	3b01      	subs	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800229c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800229e:	3a01      	subs	r2, #1
 80022a0:	b292      	uxth	r2, r2
 80022a2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80022a6:	b292      	uxth	r2, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e1      	bne.n	8002270 <HAL_I2C_Master_Receive+0x8c>
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d0df      	beq.n	8002270 <HAL_I2C_Master_Receive+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022b0:	9500      	str	r5, [sp, #0]
 80022b2:	4633      	mov	r3, r6
 80022b4:	4642      	mov	r2, r8
 80022b6:	4649      	mov	r1, r9
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fdd2 	bl	8001e62 <I2C_WaitOnFlagUntilTimeout>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d14d      	bne.n	800235e <HAL_I2C_Master_Receive+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d917      	bls.n	80022fa <HAL_I2C_Master_Receive+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ca:	22ff      	movs	r2, #255	; 0xff
 80022cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022ce:	f8cd 8000 	str.w	r8, [sp]
 80022d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d6:	4639      	mov	r1, r7
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff fd34 	bl	8001d46 <I2C_TransferConfig>
 80022de:	e7c7      	b.n	8002270 <HAL_I2C_Master_Receive+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 80022e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80022e2:	b292      	uxth	r2, r2
 80022e4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_I2C_Master_Receive+0x184>)
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4639      	mov	r1, r7
 80022f2:	4620      	mov	r0, r4
 80022f4:	f7ff fd27 	bl	8001d46 <I2C_TransferConfig>
 80022f8:	e7b4      	b.n	8002264 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 80022fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80022fc:	b292      	uxth	r2, r2
 80022fe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002300:	f8cd 8000 	str.w	r8, [sp]
 8002304:	4653      	mov	r3, sl
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4639      	mov	r1, r7
 800230a:	4620      	mov	r0, r4
 800230c:	f7ff fd1b 	bl	8001d46 <I2C_TransferConfig>
 8002310:	e7ae      	b.n	8002270 <HAL_I2C_Master_Receive+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	462a      	mov	r2, r5
 8002314:	4631      	mov	r1, r6
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff fdd1 	bl	8001ebe <I2C_WaitOnSTOPFlagUntilTimeout>
 800231c:	bb08      	cbnz	r0, 8002362 <HAL_I2C_Master_Receive+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	2220      	movs	r2, #32
 8002322:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002324:	6821      	ldr	r1, [r4, #0]
 8002326:	684b      	ldr	r3, [r1, #4]
 8002328:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800232c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002330:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800233e:	2300      	movs	r3, #0
 8002340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002344:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002348:	e000      	b.n	800234c <HAL_I2C_Master_Receive+0x168>
    return HAL_BUSY;
 800234a:	2002      	movs	r0, #2
}
 800234c:	b002      	add	sp, #8
 800234e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002352:	2002      	movs	r0, #2
 8002354:	e7fa      	b.n	800234c <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 8002356:	2001      	movs	r0, #1
 8002358:	e7f8      	b.n	800234c <HAL_I2C_Master_Receive+0x168>
        return HAL_ERROR;
 800235a:	2001      	movs	r0, #1
 800235c:	e7f6      	b.n	800234c <HAL_I2C_Master_Receive+0x168>
          return HAL_ERROR;
 800235e:	2001      	movs	r0, #1
 8002360:	e7f4      	b.n	800234c <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 8002362:	2001      	movs	r0, #1
 8002364:	e7f2      	b.n	800234c <HAL_I2C_Master_Receive+0x168>
 8002366:	bf00      	nop
 8002368:	80002400 	.word	0x80002400

0800236c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b20      	cmp	r3, #32
 8002374:	d124      	bne.n	80023c0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002376:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800237a:	2b01      	cmp	r3, #1
 800237c:	d022      	beq.n	80023c4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800237e:	2301      	movs	r3, #1
 8002380:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002384:	2324      	movs	r3, #36	; 0x24
 8002386:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800238a:	6802      	ldr	r2, [r0, #0]
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002394:	6802      	ldr	r2, [r0, #0]
 8002396:	6813      	ldr	r3, [r2, #0]
 8002398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800239c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800239e:	6802      	ldr	r2, [r0, #0]
 80023a0:	6813      	ldr	r3, [r2, #0]
 80023a2:	4319      	orrs	r1, r3
 80023a4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023a6:	6802      	ldr	r2, [r0, #0]
 80023a8:	6813      	ldr	r3, [r2, #0]
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	2320      	movs	r3, #32
 80023b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80023bc:	4618      	mov	r0, r3
 80023be:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2002      	movs	r0, #2
 80023c2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80023c4:	2002      	movs	r0, #2
  }
}
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d122      	bne.n	8002418 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d020      	beq.n	800241c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80023da:	2301      	movs	r3, #1
 80023dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e0:	2324      	movs	r3, #36	; 0x24
 80023e2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e6:	6802      	ldr	r2, [r0, #0]
 80023e8:	6813      	ldr	r3, [r2, #0]
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023f0:	6802      	ldr	r2, [r0, #0]
 80023f2:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023f8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023fc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023fe:	6802      	ldr	r2, [r0, #0]
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002408:	2320      	movs	r3, #32
 800240a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240e:	2300      	movs	r3, #0
 8002410:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002414:	4618      	mov	r0, r3
 8002416:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002418:	2002      	movs	r0, #2
 800241a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800241c:	2002      	movs	r0, #2
  }
}
 800241e:	4770      	bx	lr

08002420 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002420:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002422:	6805      	ldr	r5, [r0, #0]
 8002424:	68eb      	ldr	r3, [r5, #12]
 8002426:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800242a:	684c      	ldr	r4, [r1, #4]
 800242c:	441c      	add	r4, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800242e:	01d2      	lsls	r2, r2, #7
 8002430:	3284      	adds	r2, #132	; 0x84
 8002432:	4415      	add	r5, r2
 8002434:	686b      	ldr	r3, [r5, #4]
 8002436:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800243a:	606b      	str	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800243c:	6805      	ldr	r5, [r0, #0]
 800243e:	68eb      	ldr	r3, [r5, #12]
 8002440:	4415      	add	r5, r2
 8002442:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8002446:	680e      	ldr	r6, [r1, #0]
 8002448:	3601      	adds	r6, #1
 800244a:	4433      	add	r3, r6
 800244c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002450:	606b      	str	r3, [r5, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002452:	6805      	ldr	r5, [r0, #0]
 8002454:	68eb      	ldr	r3, [r5, #12]
 8002456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245a:	68cc      	ldr	r4, [r1, #12]
 800245c:	441c      	add	r4, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800245e:	18ab      	adds	r3, r5, r2
 8002460:	689d      	ldr	r5, [r3, #8]
 8002462:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8002466:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002468:	6805      	ldr	r5, [r0, #0]
 800246a:	68ee      	ldr	r6, [r5, #12]
 800246c:	4415      	add	r5, r2
 800246e:	688b      	ldr	r3, [r1, #8]
 8002470:	3301      	adds	r3, #1
 8002472:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002476:	4433      	add	r3, r6
 8002478:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800247c:	60ab      	str	r3, [r5, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800247e:	6803      	ldr	r3, [r0, #0]
 8002480:	4413      	add	r3, r2
 8002482:	691c      	ldr	r4, [r3, #16]
 8002484:	f024 0407 	bic.w	r4, r4, #7
 8002488:	611c      	str	r4, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800248a:	6803      	ldr	r3, [r0, #0]
 800248c:	4413      	add	r3, r2
 800248e:	690c      	ldr	r4, [r1, #16]
 8002490:	611c      	str	r4, [r3, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002492:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002496:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800249a:	f8d1 c018 	ldr.w	ip, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800249e:	6805      	ldr	r5, [r0, #0]
 80024a0:	4415      	add	r5, r2
 80024a2:	69ab      	ldr	r3, [r5, #24]
 80024a4:	2400      	movs	r4, #0
 80024a6:	61ac      	str	r4, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80024a8:	6805      	ldr	r5, [r0, #0]
 80024aa:	4415      	add	r5, r2
 80024ac:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 80024b0:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80024b4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80024b8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80024bc:	61ab      	str	r3, [r5, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	695d      	ldr	r5, [r3, #20]
 80024c4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80024c8:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80024ca:	6803      	ldr	r3, [r0, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	694d      	ldr	r5, [r1, #20]
 80024d0:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	69de      	ldr	r6, [r3, #28]
 80024d8:	4d22      	ldr	r5, [pc, #136]	; (8002564 <LTDC_SetConfig+0x144>)
 80024da:	4035      	ands	r5, r6
 80024dc:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80024de:	6803      	ldr	r3, [r0, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	69cd      	ldr	r5, [r1, #28]
 80024e4:	6a0e      	ldr	r6, [r1, #32]
 80024e6:	4335      	orrs	r5, r6
 80024e8:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80024ea:	6803      	ldr	r3, [r0, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80024f0:	629c      	str	r4, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80024f2:	6803      	ldr	r3, [r0, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80024f8:	629c      	str	r4, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80024fa:	690b      	ldr	r3, [r1, #16]
 80024fc:	b153      	cbz	r3, 8002514 <LTDC_SetConfig+0xf4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d02e      	beq.n	8002560 <LTDC_SetConfig+0x140>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002502:	1e9c      	subs	r4, r3, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002504:	2c02      	cmp	r4, #2
 8002506:	d901      	bls.n	800250c <LTDC_SetConfig+0xec>
 8002508:	2b07      	cmp	r3, #7
 800250a:	d101      	bne.n	8002510 <LTDC_SetConfig+0xf0>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800250c:	2702      	movs	r7, #2
 800250e:	e002      	b.n	8002516 <LTDC_SetConfig+0xf6>
  }
  else
  {
    tmp = 1U;
 8002510:	2701      	movs	r7, #1
 8002512:	e000      	b.n	8002516 <LTDC_SetConfig+0xf6>
    tmp = 4U;
 8002514:	2704      	movs	r7, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002516:	6804      	ldr	r4, [r0, #0]
 8002518:	4414      	add	r4, r2
 800251a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800251c:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
 8002520:	62e6      	str	r6, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002522:	6804      	ldr	r4, [r0, #0]
 8002524:	4414      	add	r4, r2
 8002526:	684b      	ldr	r3, [r1, #4]
 8002528:	680d      	ldr	r5, [r1, #0]
 800252a:	1b5b      	subs	r3, r3, r5
 800252c:	fb07 f303 	mul.w	r3, r7, r3
 8002530:	3307      	adds	r3, #7
 8002532:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8002534:	fb05 f507 	mul.w	r5, r5, r7
 8002538:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800253c:	62e3      	str	r3, [r4, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800253e:	6803      	ldr	r3, [r0, #0]
 8002540:	4413      	add	r3, r2
 8002542:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8002544:	4c08      	ldr	r4, [pc, #32]	; (8002568 <LTDC_SetConfig+0x148>)
 8002546:	402c      	ands	r4, r5
 8002548:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	4413      	add	r3, r2
 800254e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002550:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002552:	6801      	ldr	r1, [r0, #0]
 8002554:	588b      	ldr	r3, [r1, r2]
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	508b      	str	r3, [r1, r2]
}
 800255c:	bcf0      	pop	{r4, r5, r6, r7}
 800255e:	4770      	bx	lr
    tmp = 3U;
 8002560:	2703      	movs	r7, #3
 8002562:	e7d8      	b.n	8002516 <LTDC_SetConfig+0xf6>
 8002564:	fffff8f8 	.word	0xfffff8f8
 8002568:	fffff800 	.word	0xfffff800

0800256c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800256c:	2800      	cmp	r0, #0
 800256e:	d072      	beq.n	8002656 <HAL_LTDC_Init+0xea>
{
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002574:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d067      	beq.n	800264c <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800257c:	2302      	movs	r3, #2
 800257e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	6993      	ldr	r3, [r2, #24]
 8002586:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800258a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800258c:	6822      	ldr	r2, [r4, #0]
 800258e:	6991      	ldr	r1, [r2, #24]
 8002590:	6863      	ldr	r3, [r4, #4]
 8002592:	68a0      	ldr	r0, [r4, #8]
 8002594:	4303      	orrs	r3, r0
 8002596:	68e0      	ldr	r0, [r4, #12]
 8002598:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800259a:	6920      	ldr	r0, [r4, #16]
 800259c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800259e:	430b      	orrs	r3, r1
 80025a0:	6193      	str	r3, [r2, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80025a2:	6821      	ldr	r1, [r4, #0]
 80025a4:	688b      	ldr	r3, [r1, #8]
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_LTDC_Init+0xf0>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80025ac:	6821      	ldr	r1, [r4, #0]
 80025ae:	688b      	ldr	r3, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80025b0:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80025b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80025b6:	69a0      	ldr	r0, [r4, #24]
 80025b8:	4303      	orrs	r3, r0
 80025ba:	608b      	str	r3, [r1, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80025bc:	6821      	ldr	r1, [r4, #0]
 80025be:	68cb      	ldr	r3, [r1, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80025c4:	6821      	ldr	r1, [r4, #0]
 80025c6:	68cb      	ldr	r3, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80025c8:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80025ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80025ce:	6a20      	ldr	r0, [r4, #32]
 80025d0:	4303      	orrs	r3, r0
 80025d2:	60cb      	str	r3, [r1, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80025d4:	6821      	ldr	r1, [r4, #0]
 80025d6:	690b      	ldr	r3, [r1, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	610b      	str	r3, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80025dc:	6821      	ldr	r1, [r4, #0]
 80025de:	690b      	ldr	r3, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80025e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80025e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80025e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80025e8:	4303      	orrs	r3, r0
 80025ea:	610b      	str	r3, [r1, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80025ec:	6821      	ldr	r1, [r4, #0]
 80025ee:	694b      	ldr	r3, [r1, #20]
 80025f0:	401a      	ands	r2, r3
 80025f2:	614a      	str	r2, [r1, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	6953      	ldr	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80025f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80025fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80025fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002600:	430b      	orrs	r3, r1
 8002602:	6153      	str	r3, [r2, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002604:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002608:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800260c:	6821      	ldr	r1, [r4, #0]
 800260e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002610:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002614:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800261a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800261e:	430b      	orrs	r3, r1
 8002620:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002624:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002628:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800262e:	f043 0306 	orr.w	r3, r3, #6
 8002632:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002634:	6822      	ldr	r2, [r4, #0]
 8002636:	6993      	ldr	r3, [r2, #24]
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800263e:	2000      	movs	r0, #0
 8002640:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002644:	2301      	movs	r3, #1
 8002646:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800264a:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800264c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002650:	f7fe fc78 	bl	8000f44 <HAL_LTDC_MspInit>
 8002654:	e792      	b.n	800257c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	f000f800 	.word	0xf000f800

08002660 <HAL_LTDC_ErrorCallback>:
}
 8002660:	4770      	bx	lr

08002662 <HAL_LTDC_ReloadEventCallback>:
}
 8002662:	4770      	bx	lr

08002664 <HAL_LTDC_IRQHandler>:
{
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002668:	6803      	ldr	r3, [r0, #0]
 800266a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800266c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800266e:	f015 0f04 	tst.w	r5, #4
 8002672:	d002      	beq.n	800267a <HAL_LTDC_IRQHandler+0x16>
 8002674:	f016 0f04 	tst.w	r6, #4
 8002678:	d112      	bne.n	80026a0 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800267a:	f015 0f02 	tst.w	r5, #2
 800267e:	d002      	beq.n	8002686 <HAL_LTDC_IRQHandler+0x22>
 8002680:	f016 0f02 	tst.w	r6, #2
 8002684:	d121      	bne.n	80026ca <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002686:	f015 0f01 	tst.w	r5, #1
 800268a:	d002      	beq.n	8002692 <HAL_LTDC_IRQHandler+0x2e>
 800268c:	f016 0f01 	tst.w	r6, #1
 8002690:	d132      	bne.n	80026f8 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002692:	f015 0f08 	tst.w	r5, #8
 8002696:	d002      	beq.n	800269e <HAL_LTDC_IRQHandler+0x3a>
 8002698:	f016 0f08 	tst.w	r6, #8
 800269c:	d13d      	bne.n	800271a <HAL_LTDC_IRQHandler+0xb6>
}
 800269e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80026a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80026a8:	6803      	ldr	r3, [r0, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80026ae:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80026ba:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80026be:	2300      	movs	r3, #0
 80026c0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80026c4:	f7ff ffcc 	bl	8002660 <HAL_LTDC_ErrorCallback>
 80026c8:	e7d7      	b.n	800267a <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80026ca:	6822      	ldr	r2, [r4, #0]
 80026cc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80026ce:	f023 0302 	bic.w	r3, r3, #2
 80026d2:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	2202      	movs	r2, #2
 80026d8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80026da:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80026e4:	2304      	movs	r3, #4
 80026e6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80026ea:	2300      	movs	r3, #0
 80026ec:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff ffb5 	bl	8002660 <HAL_LTDC_ErrorCallback>
 80026f6:	e7c6      	b.n	8002686 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	2301      	movs	r3, #1
 8002706:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002708:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800270c:	2300      	movs	r3, #0
 800270e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002712:	4620      	mov	r0, r4
 8002714:	f007 f8f4 	bl	8009900 <HAL_LTDC_LineEventCallback>
 8002718:	e7bb      	b.n	8002692 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800271e:	f023 0308 	bic.w	r3, r3, #8
 8002722:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	2208      	movs	r2, #8
 8002728:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800272a:	2301      	movs	r3, #1
 800272c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002730:	2300      	movs	r3, #0
 8002732:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff ff93 	bl	8002662 <HAL_LTDC_ReloadEventCallback>
}
 800273c:	e7af      	b.n	800269e <HAL_LTDC_IRQHandler+0x3a>

0800273e <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 800273e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d027      	beq.n	8002796 <HAL_LTDC_ConfigLayer+0x58>
{
 8002746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800274a:	4606      	mov	r6, r0
 800274c:	460f      	mov	r7, r1
 800274e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8002750:	f04f 0801 	mov.w	r8, #1
 8002754:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002758:	2302      	movs	r3, #2
 800275a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800275e:	2434      	movs	r4, #52	; 0x34
 8002760:	fb04 0402 	mla	r4, r4, r2, r0
 8002764:	3438      	adds	r4, #56	; 0x38
 8002766:	460d      	mov	r5, r1
 8002768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002778:	4662      	mov	r2, ip
 800277a:	4639      	mov	r1, r7
 800277c:	4630      	mov	r0, r6
 800277e:	f7ff fe4f 	bl	8002420 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002782:	6833      	ldr	r3, [r6, #0]
 8002784:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002788:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800278c:	2000      	movs	r0, #0
 800278e:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8002796:	2002      	movs	r0, #2
}
 8002798:	4770      	bx	lr
	...

0800279c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800279c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d01a      	beq.n	80027da <HAL_LTDC_ProgramLineEvent+0x3e>
{
 80027a4:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 80027a6:	2201      	movs	r2, #1
 80027a8:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80027ac:	2302      	movs	r3, #2
 80027ae:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80027b2:	6804      	ldr	r4, [r0, #0]
 80027b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_LTDC_ProgramLineEvent+0x44>)
 80027be:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80027c0:	6801      	ldr	r1, [r0, #0]
 80027c2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80027c4:	4313      	orrs	r3, r2
 80027c6:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80027c8:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80027cc:	2300      	movs	r3, #0
 80027ce:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80027d2:	4618      	mov	r0, r3
}
 80027d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027d8:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80027da:	2002      	movs	r0, #2
}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	50001000 	.word	0x50001000

080027e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027e4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_PWREx_ConfigSupply+0x4c>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f013 0f04 	tst.w	r3, #4
 80027ee:	d107      	bne.n	8002800 <HAL_PWREx_ConfigSupply+0x1c>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_PWREx_ConfigSupply+0x4c>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027f8:	1a18      	subs	r0, r3, r0
 80027fa:	bf18      	it	ne
 80027fc:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002800:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <HAL_PWREx_ConfigSupply+0x4c>)
 8002802:	68d3      	ldr	r3, [r2, #12]
 8002804:	f023 0307 	bic.w	r3, r3, #7
 8002808:	4318      	orrs	r0, r3
 800280a:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick ();
 800280c:	f7fe ff2c 	bl	8001668 <HAL_GetTick>
 8002810:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002812:	4d07      	ldr	r5, [pc, #28]	; (8002830 <HAL_PWREx_ConfigSupply+0x4c>)
 8002814:	686b      	ldr	r3, [r5, #4]
 8002816:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800281a:	d107      	bne.n	800282c <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800281c:	f7fe ff24 	bl	8001668 <HAL_GetTick>
 8002820:	1b00      	subs	r0, r0, r4
 8002822:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002826:	d9f5      	bls.n	8002814 <HAL_PWREx_ConfigSupply+0x30>
      return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
 800282a:	e7e8      	b.n	80027fe <HAL_PWREx_ConfigSupply+0x1a>
  return HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	e7e6      	b.n	80027fe <HAL_PWREx_ConfigSupply+0x1a>
 8002830:	58024800 	.word	0x58024800

08002834 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002834:	b430      	push	{r4, r5}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002836:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002838:	b113      	cbz	r3, 8002840 <QSPI_Config+0xc>
 800283a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800283e:	d129      	bne.n	8002894 <QSPI_Config+0x60>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002840:	698b      	ldr	r3, [r1, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d070      	beq.n	8002928 <QSPI_Config+0xf4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002846:	6a0c      	ldr	r4, [r1, #32]
 8002848:	2c00      	cmp	r4, #0
 800284a:	d03f      	beq.n	80028cc <QSPI_Config+0x98>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800284c:	6803      	ldr	r3, [r0, #0]
 800284e:	688c      	ldr	r4, [r1, #8]
 8002850:	61dc      	str	r4, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002852:	69cb      	ldr	r3, [r1, #28]
 8002854:	b31b      	cbz	r3, 800289e <QSPI_Config+0x6a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002856:	6804      	ldr	r4, [r0, #0]
 8002858:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800285a:	432b      	orrs	r3, r5
 800285c:	4313      	orrs	r3, r2
 800285e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002860:	432b      	orrs	r3, r5
 8002862:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8002864:	432b      	orrs	r3, r5
 8002866:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8002868:	432b      	orrs	r3, r5
 800286a:	690d      	ldr	r5, [r1, #16]
 800286c:	432b      	orrs	r3, r5
 800286e:	6a0d      	ldr	r5, [r1, #32]
 8002870:	432b      	orrs	r3, r5
 8002872:	68cd      	ldr	r5, [r1, #12]
 8002874:	432b      	orrs	r3, r5
 8002876:	698d      	ldr	r5, [r1, #24]
 8002878:	432b      	orrs	r3, r5
 800287a:	680d      	ldr	r5, [r1, #0]
 800287c:	432b      	orrs	r3, r5
 800287e:	694d      	ldr	r5, [r1, #20]
 8002880:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8002884:	6163      	str	r3, [r4, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002886:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800288a:	d01d      	beq.n	80028c8 <QSPI_Config+0x94>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800288c:	6803      	ldr	r3, [r0, #0]
 800288e:	684a      	ldr	r2, [r1, #4]
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	e019      	b.n	80028c8 <QSPI_Config+0x94>
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002894:	6804      	ldr	r4, [r0, #0]
 8002896:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	6123      	str	r3, [r4, #16]
 800289c:	e7d0      	b.n	8002840 <QSPI_Config+0xc>
      }
      else
      {
        /*---- Command with instruction and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800289e:	6800      	ldr	r0, [r0, #0]
 80028a0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80028a2:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80028a4:	4323      	orrs	r3, r4
 80028a6:	4313      	orrs	r3, r2
 80028a8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80028aa:	4313      	orrs	r3, r2
 80028ac:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80028ae:	4313      	orrs	r3, r2
 80028b0:	690a      	ldr	r2, [r1, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	6a0a      	ldr	r2, [r1, #32]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	698a      	ldr	r2, [r1, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	680a      	ldr	r2, [r1, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	694a      	ldr	r2, [r1, #20]
 80028c2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80028c6:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80028c8:	bc30      	pop	{r4, r5}
 80028ca:	4770      	bx	lr
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80028cc:	69cc      	ldr	r4, [r1, #28]
 80028ce:	b1cc      	cbz	r4, 8002904 <QSPI_Config+0xd0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80028d0:	6805      	ldr	r5, [r0, #0]
 80028d2:	431c      	orrs	r4, r3
 80028d4:	4314      	orrs	r4, r2
 80028d6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80028d8:	431c      	orrs	r4, r3
 80028da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80028dc:	431c      	orrs	r4, r3
 80028de:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80028e0:	431c      	orrs	r4, r3
 80028e2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80028e4:	431c      	orrs	r4, r3
 80028e6:	68cb      	ldr	r3, [r1, #12]
 80028e8:	431c      	orrs	r4, r3
 80028ea:	680b      	ldr	r3, [r1, #0]
 80028ec:	431c      	orrs	r4, r3
 80028ee:	694b      	ldr	r3, [r1, #20]
 80028f0:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
 80028f4:	616c      	str	r4, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80028f6:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80028fa:	d0e5      	beq.n	80028c8 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80028fc:	6803      	ldr	r3, [r0, #0]
 80028fe:	684a      	ldr	r2, [r1, #4]
 8002900:	619a      	str	r2, [r3, #24]
 8002902:	e7e1      	b.n	80028c8 <QSPI_Config+0x94>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002904:	6804      	ldr	r4, [r0, #0]
 8002906:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8002908:	4318      	orrs	r0, r3
 800290a:	ea40 0302 	orr.w	r3, r0, r2
 800290e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002910:	4313      	orrs	r3, r2
 8002912:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8002914:	4313      	orrs	r3, r2
 8002916:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002918:	4313      	orrs	r3, r2
 800291a:	680a      	ldr	r2, [r1, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	694a      	ldr	r2, [r1, #20]
 8002920:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002924:	6163      	str	r3, [r4, #20]
 8002926:	e7cf      	b.n	80028c8 <QSPI_Config+0x94>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002928:	6a0b      	ldr	r3, [r1, #32]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d035      	beq.n	800299a <QSPI_Config+0x166>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800292e:	6803      	ldr	r3, [r0, #0]
 8002930:	688c      	ldr	r4, [r1, #8]
 8002932:	61dc      	str	r4, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002934:	69cb      	ldr	r3, [r1, #28]
 8002936:	b1e3      	cbz	r3, 8002972 <QSPI_Config+0x13e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002938:	6804      	ldr	r4, [r0, #0]
 800293a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800293c:	432b      	orrs	r3, r5
 800293e:	4313      	orrs	r3, r2
 8002940:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002942:	432b      	orrs	r3, r5
 8002944:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8002946:	432b      	orrs	r3, r5
 8002948:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800294a:	432b      	orrs	r3, r5
 800294c:	690d      	ldr	r5, [r1, #16]
 800294e:	432b      	orrs	r3, r5
 8002950:	6a0d      	ldr	r5, [r1, #32]
 8002952:	432b      	orrs	r3, r5
 8002954:	68cd      	ldr	r5, [r1, #12]
 8002956:	432b      	orrs	r3, r5
 8002958:	698d      	ldr	r5, [r1, #24]
 800295a:	432b      	orrs	r3, r5
 800295c:	694d      	ldr	r5, [r1, #20]
 800295e:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8002962:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002964:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8002968:	d0ae      	beq.n	80028c8 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800296a:	6803      	ldr	r3, [r0, #0]
 800296c:	684a      	ldr	r2, [r1, #4]
 800296e:	619a      	str	r2, [r3, #24]
 8002970:	e7aa      	b.n	80028c8 <QSPI_Config+0x94>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002976:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8002978:	4323      	orrs	r3, r4
 800297a:	4313      	orrs	r3, r2
 800297c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800297e:	4313      	orrs	r3, r2
 8002980:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002982:	4313      	orrs	r3, r2
 8002984:	690a      	ldr	r2, [r1, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	6a0a      	ldr	r2, [r1, #32]
 800298a:	4313      	orrs	r3, r2
 800298c:	698a      	ldr	r2, [r1, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	694a      	ldr	r2, [r1, #20]
 8002992:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002996:	6143      	str	r3, [r0, #20]
 8002998:	e796      	b.n	80028c8 <QSPI_Config+0x94>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800299a:	69cb      	ldr	r3, [r1, #28]
 800299c:	b1b3      	cbz	r3, 80029cc <QSPI_Config+0x198>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800299e:	6804      	ldr	r4, [r0, #0]
 80029a0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80029a2:	432b      	orrs	r3, r5
 80029a4:	4313      	orrs	r3, r2
 80029a6:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80029a8:	432b      	orrs	r3, r5
 80029aa:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80029ac:	432b      	orrs	r3, r5
 80029ae:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80029b0:	432b      	orrs	r3, r5
 80029b2:	68cd      	ldr	r5, [r1, #12]
 80029b4:	432b      	orrs	r3, r5
 80029b6:	694d      	ldr	r5, [r1, #20]
 80029b8:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 80029bc:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80029be:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80029c2:	d081      	beq.n	80028c8 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80029c4:	6803      	ldr	r3, [r0, #0]
 80029c6:	684a      	ldr	r2, [r1, #4]
 80029c8:	619a      	str	r2, [r3, #24]
 80029ca:	e77d      	b.n	80028c8 <QSPI_Config+0x94>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80029cc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f43f af7a 	beq.w	80028c8 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80029d4:	6800      	ldr	r0, [r0, #0]
 80029d6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80029d8:	4323      	orrs	r3, r4
 80029da:	4313      	orrs	r3, r2
 80029dc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80029de:	4313      	orrs	r3, r2
 80029e0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80029e2:	4313      	orrs	r3, r2
 80029e4:	694a      	ldr	r2, [r1, #20]
 80029e6:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80029ea:	6143      	str	r3, [r0, #20]
}
 80029ec:	e76c      	b.n	80028c8 <QSPI_Config+0x94>

080029ee <QSPI_WaitFlagStateUntilTimeout>:
{
 80029ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029f2:	4680      	mov	r8, r0
 80029f4:	460e      	mov	r6, r1
 80029f6:	4615      	mov	r5, r2
 80029f8:	4699      	mov	r9, r3
 80029fa:	9f08      	ldr	r7, [sp, #32]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029fc:	f8d8 2000 	ldr.w	r2, [r8]
 8002a00:	6894      	ldr	r4, [r2, #8]
 8002a02:	4234      	tst	r4, r6
 8002a04:	bf14      	ite	ne
 8002a06:	2401      	movne	r4, #1
 8002a08:	2400      	moveq	r4, #0
 8002a0a:	42ac      	cmp	r4, r5
 8002a0c:	d015      	beq.n	8002a3a <QSPI_WaitFlagStateUntilTimeout+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 8002a0e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002a12:	d0f5      	beq.n	8002a00 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a14:	f7fe fe28 	bl	8001668 <HAL_GetTick>
 8002a18:	eba0 0009 	sub.w	r0, r0, r9
 8002a1c:	42b8      	cmp	r0, r7
 8002a1e:	d801      	bhi.n	8002a24 <QSPI_WaitFlagStateUntilTimeout+0x36>
 8002a20:	2f00      	cmp	r7, #0
 8002a22:	d1eb      	bne.n	80029fc <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002a24:	2304      	movs	r3, #4
 8002a26:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002a2a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        return HAL_ERROR;
 8002a36:	2001      	movs	r0, #1
 8002a38:	e000      	b.n	8002a3c <QSPI_WaitFlagStateUntilTimeout+0x4e>
  return HAL_OK;
 8002a3a:	2000      	movs	r0, #0
}
 8002a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002a40 <HAL_QSPI_Init>:
{
 8002a40:	b530      	push	{r4, r5, lr}
 8002a42:	b083      	sub	sp, #12
 8002a44:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a46:	f7fe fe0f 	bl	8001668 <HAL_GetTick>
  if(hqspi == NULL)
 8002a4a:	2c00      	cmp	r4, #0
 8002a4c:	d043      	beq.n	8002ad6 <HAL_QSPI_Init+0x96>
 8002a4e:	4605      	mov	r5, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002a50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d037      	beq.n	8002ac8 <HAL_QSPI_Init+0x88>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002a58:	6821      	ldr	r1, [r4, #0]
 8002a5a:	680b      	ldr	r3, [r1, #0]
 8002a5c:	68a2      	ldr	r2, [r4, #8]
 8002a5e:	3a01      	subs	r2, #1
 8002a60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a68:	600b      	str	r3, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002a6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	462b      	mov	r3, r5
 8002a70:	2200      	movs	r2, #0
 8002a72:	2120      	movs	r1, #32
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff ffba 	bl	80029ee <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002a7a:	bb18      	cbnz	r0, 8002ac4 <HAL_QSPI_Init+0x84>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002a7c:	6821      	ldr	r1, [r4, #0]
 8002a7e:	680d      	ldr	r5, [r1, #0]
 8002a80:	68e3      	ldr	r3, [r4, #12]
 8002a82:	69e2      	ldr	r2, [r4, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	6a22      	ldr	r2, [r4, #32]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	6862      	ldr	r2, [r4, #4]
 8002a8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a90:	4a12      	ldr	r2, [pc, #72]	; (8002adc <HAL_QSPI_Init+0x9c>)
 8002a92:	402a      	ands	r2, r5
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002a98:	6821      	ldr	r1, [r4, #0]
 8002a9a:	684d      	ldr	r5, [r1, #4]
 8002a9c:	6963      	ldr	r3, [r4, #20]
 8002a9e:	69a2      	ldr	r2, [r4, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	6922      	ldr	r2, [r4, #16]
 8002aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_QSPI_Init+0xa0>)
 8002aaa:	402a      	ands	r2, r5
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8002ab0:	6822      	ldr	r2, [r4, #0]
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002ac4:	b003      	add	sp, #12
 8002ac6:	bd30      	pop	{r4, r5, pc}
    HAL_QSPI_MspInit(hqspi);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7fe facf 	bl	800106c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8002ace:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ad2:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8002ad4:	e7c0      	b.n	8002a58 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	e7f4      	b.n	8002ac4 <HAL_QSPI_Init+0x84>
 8002ada:	bf00      	nop
 8002adc:	00ffff2f 	.word	0x00ffff2f
 8002ae0:	ffe0f8fe 	.word	0xffe0f8fe

08002ae4 <HAL_QSPI_MemoryMapped>:
{
 8002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	4604      	mov	r4, r0
 8002aea:	460f      	mov	r7, r1
 8002aec:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8002aee:	f7fe fdbb 	bl	8001668 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8002af2:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
 8002af6:	b2ed      	uxtb	r5, r5
 8002af8:	2d01      	cmp	r5, #1
 8002afa:	d03a      	beq.n	8002b72 <HAL_QSPI_MemoryMapped+0x8e>
 8002afc:	2301      	movs	r3, #1
 8002afe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002b02:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8002b06:	b2ed      	uxtb	r5, r5
 8002b08:	429d      	cmp	r5, r3
 8002b0a:	d006      	beq.n	8002b1a <HAL_QSPI_MemoryMapped+0x36>
    status = HAL_BUSY;
 8002b0c:	2502      	movs	r5, #2
  __HAL_UNLOCK(hqspi);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002b14:	4628      	mov	r0, r5
 8002b16:	b003      	add	sp, #12
 8002b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8002b1e:	2382      	movs	r3, #130	; 0x82
 8002b20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002b24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff ff5e 	bl	80029ee <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8002b32:	4605      	mov	r5, r0
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d1ea      	bne.n	8002b0e <HAL_QSPI_MemoryMapped+0x2a>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	6813      	ldr	r3, [r2, #0]
 8002b3c:	f023 0308 	bic.w	r3, r3, #8
 8002b40:	6871      	ldr	r1, [r6, #4]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	6013      	str	r3, [r2, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8002b46:	6873      	ldr	r3, [r6, #4]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d006      	beq.n	8002b5a <HAL_QSPI_MemoryMapped+0x76>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8002b4c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002b50:	4639      	mov	r1, r7
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff fe6e 	bl	8002834 <QSPI_Config>
 8002b58:	e7d9      	b.n	8002b0e <HAL_QSPI_MemoryMapped+0x2a>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	6832      	ldr	r2, [r6, #0]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	2210      	movs	r2, #16
 8002b64:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8002b66:	6822      	ldr	r2, [r4, #0]
 8002b68:	6813      	ldr	r3, [r2, #0]
 8002b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	e7ec      	b.n	8002b4c <HAL_QSPI_MemoryMapped+0x68>
  __HAL_LOCK(hqspi);
 8002b72:	2502      	movs	r5, #2
 8002b74:	e7ce      	b.n	8002b14 <HAL_QSPI_MemoryMapped+0x30>
	...

08002b78 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	f000 8304 	beq.w	8003186 <HAL_RCC_OscConfig+0x60e>
{
 8002b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b80:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b82:	6803      	ldr	r3, [r0, #0]
 8002b84:	f013 0f01 	tst.w	r3, #1
 8002b88:	d025      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8a:	4aae      	ldr	r2, [pc, #696]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002b8c:	6913      	ldr	r3, [r2, #16]
 8002b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b92:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d015      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4c>
 8002b98:	2b18      	cmp	r3, #24
 8002b9a:	d00f      	beq.n	8002bbc <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9c:	6863      	ldr	r3, [r4, #4]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d03f      	beq.n	8002c24 <HAL_RCC_OscConfig+0xac>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d153      	bne.n	8002c50 <HAL_RCC_OscConfig+0xd8>
 8002ba8:	4ba6      	ldr	r3, [pc, #664]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e038      	b.n	8002c2e <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bbc:	f002 0203 	and.w	r2, r2, #3
 8002bc0:	2a02      	cmp	r2, #2
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	4b9f      	ldr	r3, [pc, #636]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
 8002bce:	6863      	ldr	r3, [r4, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 82da 	beq.w	800318a <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	f013 0f02 	tst.w	r3, #2
 8002bdc:	f000 808b 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be0:	4a98      	ldr	r2, [pc, #608]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002be2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002be4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002be6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002bea:	d05a      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x12a>
 8002bec:	2b18      	cmp	r3, #24
 8002bee:	d055      	beq.n	8002c9c <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bf0:	68e2      	ldr	r2, [r4, #12]
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	f000 80c8 	beq.w	8002d88 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bf8:	4992      	ldr	r1, [pc, #584]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002bfa:	680b      	ldr	r3, [r1, #0]
 8002bfc:	f023 0319 	bic.w	r3, r3, #25
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fd30 	bl	8001668 <HAL_GetTick>
 8002c08:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c0a:	4e8e      	ldr	r6, [pc, #568]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002c0c:	6833      	ldr	r3, [r6, #0]
 8002c0e:	f013 0f04 	tst.w	r3, #4
 8002c12:	f040 8097 	bne.w	8002d44 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fe fd27 	bl	8001668 <HAL_GetTick>
 8002c1a:	1b40      	subs	r0, r0, r5
 8002c1c:	2802      	cmp	r0, #2
 8002c1e:	d9f5      	bls.n	8002c0c <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8002c20:	2003      	movs	r0, #3
 8002c22:	e2b9      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	4a87      	ldr	r2, [pc, #540]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c2e:	6863      	ldr	r3, [r4, #4]
 8002c30:	b32b      	cbz	r3, 8002c7e <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002c32:	f7fe fd19 	bl	8001668 <HAL_GetTick>
 8002c36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c38:	4e82      	ldr	r6, [pc, #520]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002c3a:	6833      	ldr	r3, [r6, #0]
 8002c3c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c40:	d1c9      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c42:	f7fe fd11 	bl	8001668 <HAL_GetTick>
 8002c46:	1b40      	subs	r0, r0, r5
 8002c48:	2864      	cmp	r0, #100	; 0x64
 8002c4a:	d9f6      	bls.n	8002c3a <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	e2a3      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c54:	d009      	beq.n	8002c6a <HAL_RCC_OscConfig+0xf2>
 8002c56:	4b7b      	ldr	r3, [pc, #492]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e7e1      	b.n	8002c2e <HAL_RCC_OscConfig+0xb6>
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e7d7      	b.n	8002c2e <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fcf3 	bl	8001668 <HAL_GetTick>
 8002c82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c84:	4e6f      	ldr	r6, [pc, #444]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002c86:	6833      	ldr	r3, [r6, #0]
 8002c88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c8c:	d0a3      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fceb 	bl	8001668 <HAL_GetTick>
 8002c92:	1b40      	subs	r0, r0, r5
 8002c94:	2864      	cmp	r0, #100	; 0x64
 8002c96:	d9f6      	bls.n	8002c86 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8002c98:	2003      	movs	r0, #3
 8002c9a:	e27d      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c9c:	f012 0f03 	tst.w	r2, #3
 8002ca0:	d1a6      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca2:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f013 0f04 	tst.w	r3, #4
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x13c>
 8002cac:	68e3      	ldr	r3, [r4, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 826d 	beq.w	800318e <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	f7fe fcf2 	bl	800169c <HAL_GetREVID>
 8002cb8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cbc:	4298      	cmp	r0, r3
 8002cbe:	d812      	bhi.n	8002ce6 <HAL_RCC_OscConfig+0x16e>
 8002cc0:	6922      	ldr	r2, [r4, #16]
 8002cc2:	2a40      	cmp	r2, #64	; 0x40
 8002cc4:	d007      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x15e>
 8002cc6:	495f      	ldr	r1, [pc, #380]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002cc8:	684b      	ldr	r3, [r1, #4]
 8002cca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002cce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002cd2:	604b      	str	r3, [r1, #4]
 8002cd4:	e00f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x17e>
 8002cd6:	4a5b      	ldr	r2, [pc, #364]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002cd8:	6853      	ldr	r3, [r2, #4]
 8002cda:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce2:	6053      	str	r3, [r2, #4]
 8002ce4:	e007      	b.n	8002cf6 <HAL_RCC_OscConfig+0x17e>
 8002ce6:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002ce8:	6853      	ldr	r3, [r2, #4]
 8002cea:	6921      	ldr	r1, [r4, #16]
 8002cec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cf0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cf4:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	f013 0f10 	tst.w	r3, #16
 8002cfc:	f000 8086 	beq.w	8002e0c <HAL_RCC_OscConfig+0x294>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d00:	4a50      	ldr	r2, [pc, #320]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002d02:	6913      	ldr	r3, [r2, #16]
 8002d04:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d08:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d054      	beq.n	8002db8 <HAL_RCC_OscConfig+0x240>
 8002d0e:	2b18      	cmp	r3, #24
 8002d10:	d04e      	beq.n	8002db0 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d12:	69e3      	ldr	r3, [r4, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80b9 	beq.w	8002e8c <HAL_RCC_OscConfig+0x314>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002d1c:	6813      	ldr	r3, [r2, #0]
 8002d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fca0 	bl	8001668 <HAL_GetTick>
 8002d28:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d2a:	4e46      	ldr	r6, [pc, #280]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002d2c:	6833      	ldr	r3, [r6, #0]
 8002d2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d32:	f040 8089 	bne.w	8002e48 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d36:	f7fe fc97 	bl	8001668 <HAL_GetTick>
 8002d3a:	1b40      	subs	r0, r0, r5
 8002d3c:	2802      	cmp	r0, #2
 8002d3e:	d9f5      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d40:	2003      	movs	r0, #3
 8002d42:	e229      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	f7fe fcaa 	bl	800169c <HAL_GetREVID>
 8002d48:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d4c:	4298      	cmp	r0, r3
 8002d4e:	d812      	bhi.n	8002d76 <HAL_RCC_OscConfig+0x1fe>
 8002d50:	6922      	ldr	r2, [r4, #16]
 8002d52:	2a40      	cmp	r2, #64	; 0x40
 8002d54:	d007      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1ee>
 8002d56:	493b      	ldr	r1, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002d58:	684b      	ldr	r3, [r1, #4]
 8002d5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d5e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e7c7      	b.n	8002cf6 <HAL_RCC_OscConfig+0x17e>
 8002d66:	4a37      	ldr	r2, [pc, #220]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002d68:	6853      	ldr	r3, [r2, #4]
 8002d6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d72:	6053      	str	r3, [r2, #4]
 8002d74:	e7bf      	b.n	8002cf6 <HAL_RCC_OscConfig+0x17e>
 8002d76:	4a33      	ldr	r2, [pc, #204]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002d78:	6853      	ldr	r3, [r2, #4]
 8002d7a:	6921      	ldr	r1, [r4, #16]
 8002d7c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d80:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002d84:	6053      	str	r3, [r2, #4]
 8002d86:	e7b6      	b.n	8002cf6 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8002d88:	4a2e      	ldr	r2, [pc, #184]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002d8a:	6813      	ldr	r3, [r2, #0]
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d92:	f7fe fc69 	bl	8001668 <HAL_GetTick>
 8002d96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d98:	4e2a      	ldr	r6, [pc, #168]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002d9a:	6833      	ldr	r3, [r6, #0]
 8002d9c:	f013 0f04 	tst.w	r3, #4
 8002da0:	d0a9      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe fc61 	bl	8001668 <HAL_GetTick>
 8002da6:	1b40      	subs	r0, r0, r5
 8002da8:	2802      	cmp	r0, #2
 8002daa:	d9f6      	bls.n	8002d9a <HAL_RCC_OscConfig+0x222>
            return HAL_TIMEOUT;
 8002dac:	2003      	movs	r0, #3
 8002dae:	e1f3      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002db0:	f002 0203 	and.w	r2, r2, #3
 8002db4:	2a01      	cmp	r2, #1
 8002db6:	d1ac      	bne.n	8002d12 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_OscConfig+0x252>
 8002dc2:	69e3      	ldr	r3, [r4, #28]
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	f040 81e4 	bne.w	8003192 <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dca:	f7fe fc67 	bl	800169c <HAL_GetREVID>
 8002dce:	f241 0303 	movw	r3, #4099	; 0x1003
 8002dd2:	4298      	cmp	r0, r3
 8002dd4:	d812      	bhi.n	8002dfc <HAL_RCC_OscConfig+0x284>
 8002dd6:	6a22      	ldr	r2, [r4, #32]
 8002dd8:	2a20      	cmp	r2, #32
 8002dda:	d007      	beq.n	8002dec <HAL_RCC_OscConfig+0x274>
 8002ddc:	4919      	ldr	r1, [pc, #100]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002dde:	684b      	ldr	r3, [r1, #4]
 8002de0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002de4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002de8:	604b      	str	r3, [r1, #4]
 8002dea:	e00f      	b.n	8002e0c <HAL_RCC_OscConfig+0x294>
 8002dec:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002dee:	6853      	ldr	r3, [r2, #4]
 8002df0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002df8:	6053      	str	r3, [r2, #4]
 8002dfa:	e007      	b.n	8002e0c <HAL_RCC_OscConfig+0x294>
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002dfe:	68d3      	ldr	r3, [r2, #12]
 8002e00:	6a21      	ldr	r1, [r4, #32]
 8002e02:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002e06:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e0a:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	f013 0f08 	tst.w	r3, #8
 8002e12:	d063      	beq.n	8002edc <HAL_RCC_OscConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e14:	6963      	ldr	r3, [r4, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d04c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x33c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002e1c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fc20 	bl	8001668 <HAL_GetTick>
 8002e28:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e2a:	4e06      	ldr	r6, [pc, #24]	; (8002e44 <HAL_RCC_OscConfig+0x2cc>)
 8002e2c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002e2e:	f013 0f02 	tst.w	r3, #2
 8002e32:	d153      	bne.n	8002edc <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e34:	f7fe fc18 	bl	8001668 <HAL_GetTick>
 8002e38:	1b40      	subs	r0, r0, r5
 8002e3a:	2802      	cmp	r0, #2
 8002e3c:	d9f6      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_TIMEOUT;
 8002e3e:	2003      	movs	r0, #3
 8002e40:	e1aa      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 8002e42:	bf00      	nop
 8002e44:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e48:	f7fe fc28 	bl	800169c <HAL_GetREVID>
 8002e4c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e50:	4298      	cmp	r0, r3
 8002e52:	d812      	bhi.n	8002e7a <HAL_RCC_OscConfig+0x302>
 8002e54:	6a22      	ldr	r2, [r4, #32]
 8002e56:	2a20      	cmp	r2, #32
 8002e58:	d007      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2f2>
 8002e5a:	4985      	ldr	r1, [pc, #532]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	684b      	ldr	r3, [r1, #4]
 8002e5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e62:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002e66:	604b      	str	r3, [r1, #4]
 8002e68:	e7d0      	b.n	8002e0c <HAL_RCC_OscConfig+0x294>
 8002e6a:	4a81      	ldr	r2, [pc, #516]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	6853      	ldr	r3, [r2, #4]
 8002e6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e76:	6053      	str	r3, [r2, #4]
 8002e78:	e7c8      	b.n	8002e0c <HAL_RCC_OscConfig+0x294>
 8002e7a:	4a7d      	ldr	r2, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	68d3      	ldr	r3, [r2, #12]
 8002e7e:	6a21      	ldr	r1, [r4, #32]
 8002e80:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002e84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e88:	60d3      	str	r3, [r2, #12]
 8002e8a:	e7bf      	b.n	8002e0c <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_CSI_DISABLE();
 8002e8c:	4a78      	ldr	r2, [pc, #480]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	6813      	ldr	r3, [r2, #0]
 8002e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e96:	f7fe fbe7 	bl	8001668 <HAL_GetTick>
 8002e9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e9c:	4e74      	ldr	r6, [pc, #464]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	6833      	ldr	r3, [r6, #0]
 8002ea0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ea4:	d0b2      	beq.n	8002e0c <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fbdf 	bl	8001668 <HAL_GetTick>
 8002eaa:	1b40      	subs	r0, r0, r5
 8002eac:	2802      	cmp	r0, #2
 8002eae:	d9f6      	bls.n	8002e9e <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 8002eb0:	2003      	movs	r0, #3
 8002eb2:	e171      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002eb6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fbd3 	bl	8001668 <HAL_GetTick>
 8002ec2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec4:	4e6a      	ldr	r6, [pc, #424]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002ec8:	f013 0f02 	tst.w	r3, #2
 8002ecc:	d006      	beq.n	8002edc <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ece:	f7fe fbcb 	bl	8001668 <HAL_GetTick>
 8002ed2:	1b40      	subs	r0, r0, r5
 8002ed4:	2802      	cmp	r0, #2
 8002ed6:	d9f6      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
 8002eda:	e15d      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	f013 0f20 	tst.w	r3, #32
 8002ee2:	d029      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ee4:	69a3      	ldr	r3, [r4, #24]
 8002ee6:	b19b      	cbz	r3, 8002f10 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ee8:	4a61      	ldr	r2, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	6813      	ldr	r3, [r2, #0]
 8002eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fbb9 	bl	8001668 <HAL_GetTick>
 8002ef6:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ef8:	4e5d      	ldr	r6, [pc, #372]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002efa:	6833      	ldr	r3, [r6, #0]
 8002efc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002f00:	d11a      	bne.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f02:	f7fe fbb1 	bl	8001668 <HAL_GetTick>
 8002f06:	1b40      	subs	r0, r0, r5
 8002f08:	2802      	cmp	r0, #2
 8002f0a:	d9f6      	bls.n	8002efa <HAL_RCC_OscConfig+0x382>
        {
          return HAL_TIMEOUT;
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	e143      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f10:	4a57      	ldr	r2, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002f12:	6813      	ldr	r3, [r2, #0]
 8002f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fba5 	bl	8001668 <HAL_GetTick>
 8002f1e:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f20:	4e53      	ldr	r6, [pc, #332]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	6833      	ldr	r3, [r6, #0]
 8002f24:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002f28:	d006      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fe fb9d 	bl	8001668 <HAL_GetTick>
 8002f2e:	1b40      	subs	r0, r0, r5
 8002f30:	2802      	cmp	r0, #2
 8002f32:	d9f6      	bls.n	8002f22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f34:	2003      	movs	r0, #3
 8002f36:	e12f      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	f013 0f04 	tst.w	r3, #4
 8002f3e:	d121      	bne.n	8002f84 <HAL_RCC_OscConfig+0x40c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f42:	2a00      	cmp	r2, #0
 8002f44:	f000 8127 	beq.w	8003196 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f48:	4b49      	ldr	r3, [pc, #292]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f50:	2b18      	cmp	r3, #24
 8002f52:	f000 80ef 	beq.w	8003134 <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f56:	2a02      	cmp	r2, #2
 8002f58:	d075      	beq.n	8003046 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4a45      	ldr	r2, [pc, #276]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	6813      	ldr	r3, [r2, #0]
 8002f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fb80 	bl	8001668 <HAL_GetTick>
 8002f68:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f6a:	4d41      	ldr	r5, [pc, #260]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f72:	f000 80dd 	beq.w	8003130 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe fb77 	bl	8001668 <HAL_GetTick>
 8002f7a:	1b00      	subs	r0, r0, r4
 8002f7c:	2802      	cmp	r0, #2
 8002f7e:	d9f5      	bls.n	8002f6c <HAL_RCC_OscConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 8002f80:	2003      	movs	r0, #3
 8002f82:	e109      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
    PWR->CR1 |= PWR_CR1_DBP;
 8002f84:	4a3b      	ldr	r2, [pc, #236]	; (8003074 <HAL_RCC_OscConfig+0x4fc>)
 8002f86:	6813      	ldr	r3, [r2, #0]
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f8e:	f7fe fb6b 	bl	8001668 <HAL_GetTick>
 8002f92:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f94:	4e37      	ldr	r6, [pc, #220]	; (8003074 <HAL_RCC_OscConfig+0x4fc>)
 8002f96:	6833      	ldr	r3, [r6, #0]
 8002f98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x434>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fe fb63 	bl	8001668 <HAL_GetTick>
 8002fa2:	1b40      	subs	r0, r0, r5
 8002fa4:	2864      	cmp	r0, #100	; 0x64
 8002fa6:	d9f6      	bls.n	8002f96 <HAL_RCC_OscConfig+0x41e>
        return HAL_TIMEOUT;
 8002fa8:	2003      	movs	r0, #3
 8002faa:	e0f5      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fac:	68a3      	ldr	r3, [r4, #8]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x450>
 8002fb2:	bb0b      	cbnz	r3, 8002ff8 <HAL_RCC_OscConfig+0x480>
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	671a      	str	r2, [r3, #112]	; 0x70
 8002fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fc0:	f022 0204 	bic.w	r2, r2, #4
 8002fc4:	671a      	str	r2, [r3, #112]	; 0x70
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCC_OscConfig+0x45a>
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd2:	68a3      	ldr	r3, [r4, #8]
 8002fd4:	b333      	cbz	r3, 8003024 <HAL_RCC_OscConfig+0x4ac>
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fb47 	bl	8001668 <HAL_GetTick>
 8002fda:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fdc:	4e24      	ldr	r6, [pc, #144]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fe2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002fe4:	f013 0f02 	tst.w	r3, #2
 8002fe8:	d1aa      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fb3d 	bl	8001668 <HAL_GetTick>
 8002fee:	1b40      	subs	r0, r0, r5
 8002ff0:	42b8      	cmp	r0, r7
 8002ff2:	d9f6      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x46a>
          return HAL_TIMEOUT;
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	e0cf      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d009      	beq.n	8003010 <HAL_RCC_OscConfig+0x498>
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8002ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	671a      	str	r2, [r3, #112]	; 0x70
 8003006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003008:	f022 0204 	bic.w	r2, r2, #4
 800300c:	671a      	str	r2, [r3, #112]	; 0x70
 800300e:	e7e0      	b.n	8002fd2 <HAL_RCC_OscConfig+0x45a>
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8003012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003014:	f042 0204 	orr.w	r2, r2, #4
 8003018:	671a      	str	r2, [r3, #112]	; 0x70
 800301a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	671a      	str	r2, [r3, #112]	; 0x70
 8003022:	e7d6      	b.n	8002fd2 <HAL_RCC_OscConfig+0x45a>
      tickstart = HAL_GetTick();
 8003024:	f7fe fb20 	bl	8001668 <HAL_GetTick>
 8003028:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800302a:	4e11      	ldr	r6, [pc, #68]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003030:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003032:	f013 0f02 	tst.w	r3, #2
 8003036:	d083      	beq.n	8002f40 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe fb16 	bl	8001668 <HAL_GetTick>
 800303c:	1b40      	subs	r0, r0, r5
 800303e:	42b8      	cmp	r0, r7
 8003040:	d9f6      	bls.n	8003030 <HAL_RCC_OscConfig+0x4b8>
          return HAL_TIMEOUT;
 8003042:	2003      	movs	r0, #3
 8003044:	e0a8      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8003048:	6813      	ldr	r3, [r2, #0]
 800304a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003050:	f7fe fb0a 	bl	8001668 <HAL_GetTick>
 8003054:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003056:	4e06      	ldr	r6, [pc, #24]	; (8003070 <HAL_RCC_OscConfig+0x4f8>)
 8003058:	6833      	ldr	r3, [r6, #0]
 800305a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800305e:	d00b      	beq.n	8003078 <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe fb02 	bl	8001668 <HAL_GetTick>
 8003064:	1b40      	subs	r0, r0, r5
 8003066:	2802      	cmp	r0, #2
 8003068:	d9f6      	bls.n	8003058 <HAL_RCC_OscConfig+0x4e0>
            return HAL_TIMEOUT;
 800306a:	2003      	movs	r0, #3
 800306c:	e094      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 800306e:	bf00      	nop
 8003070:	58024400 	.word	0x58024400
 8003074:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003078:	4b4e      	ldr	r3, [pc, #312]	; (80031b4 <HAL_RCC_OscConfig+0x63c>)
 800307a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800307c:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_RCC_OscConfig+0x640>)
 800307e:	400a      	ands	r2, r1
 8003080:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003082:	430a      	orrs	r2, r1
 8003084:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003086:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
 800308c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800308e:	3a01      	subs	r2, #1
 8003090:	0252      	lsls	r2, r2, #9
 8003092:	b292      	uxth	r2, r2
 8003094:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003096:	3901      	subs	r1, #1
 8003098:	0409      	lsls	r1, r1, #16
 800309a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800309e:	430a      	orrs	r2, r1
 80030a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80030a2:	3901      	subs	r1, #1
 80030a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80030a8:	430a      	orrs	r2, r1
 80030aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80030ac:	3901      	subs	r1, #1
 80030ae:	0609      	lsls	r1, r1, #24
 80030b0:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80030b4:	430a      	orrs	r2, r1
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80030b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80030c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80030c4:	4a3d      	ldr	r2, [pc, #244]	; (80031bc <HAL_RCC_OscConfig+0x644>)
 80030c6:	4002      	ands	r2, r0
 80030c8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d0:	f022 020c 	bic.w	r2, r2, #12
 80030d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80030d6:	430a      	orrs	r2, r1
 80030d8:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	f022 0202 	bic.w	r2, r2, #2
 80030e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80030e2:	430a      	orrs	r2, r1
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80030fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800310c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800310e:	f7fe faab 	bl	8001668 <HAL_GetTick>
 8003112:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003114:	4d27      	ldr	r5, [pc, #156]	; (80031b4 <HAL_RCC_OscConfig+0x63c>)
 8003116:	682b      	ldr	r3, [r5, #0]
 8003118:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800311c:	d106      	bne.n	800312c <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe faa3 	bl	8001668 <HAL_GetTick>
 8003122:	1b00      	subs	r0, r0, r4
 8003124:	2802      	cmp	r0, #2
 8003126:	d9f6      	bls.n	8003116 <HAL_RCC_OscConfig+0x59e>
            return HAL_TIMEOUT;
 8003128:	2003      	movs	r0, #3
 800312a:	e035      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800312c:	2000      	movs	r0, #0
 800312e:	e033      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 8003130:	2000      	movs	r0, #0
 8003132:	e031      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_RCC_OscConfig+0x63c>)
 8003136:	6a99      	ldr	r1, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313a:	2a01      	cmp	r2, #1
 800313c:	d02d      	beq.n	800319a <HAL_RCC_OscConfig+0x622>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003142:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003144:	4282      	cmp	r2, r0
 8003146:	d12a      	bne.n	800319e <HAL_RCC_OscConfig+0x626>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003148:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800314e:	4291      	cmp	r1, r2
 8003150:	d127      	bne.n	80031a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003152:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8003156:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003158:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800315a:	4291      	cmp	r1, r2
 800315c:	d123      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800315e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003162:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003164:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003166:	4291      	cmp	r1, r2
 8003168:	d11f      	bne.n	80031aa <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800316a:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800316e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003170:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003172:	4291      	cmp	r1, r2
 8003174:	d11b      	bne.n	80031ae <HAL_RCC_OscConfig+0x636>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003176:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800317a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800317c:	3801      	subs	r0, #1
  return HAL_OK;
 800317e:	1a18      	subs	r0, r3, r0
 8003180:	bf18      	it	ne
 8003182:	2001      	movne	r0, #1
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
    return HAL_ERROR;
 8003186:	2001      	movs	r0, #1
}
 8003188:	4770      	bx	lr
        return HAL_ERROR;
 800318a:	2001      	movs	r0, #1
 800318c:	e004      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 800318e:	2001      	movs	r0, #1
 8003190:	e002      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 8003192:	2001      	movs	r0, #1
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
  return HAL_OK;
 8003196:	2000      	movs	r0, #0
}
 8003198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800319a:	2001      	movs	r0, #1
 800319c:	e7fc      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 800319e:	2001      	movs	r0, #1
 80031a0:	e7fa      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 80031a2:	2001      	movs	r0, #1
 80031a4:	e7f8      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 80031a6:	2001      	movs	r0, #1
 80031a8:	e7f6      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 80031aa:	2001      	movs	r0, #1
 80031ac:	e7f4      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 80031ae:	2001      	movs	r0, #1
 80031b0:	e7f2      	b.n	8003198 <HAL_RCC_OscConfig+0x620>
 80031b2:	bf00      	nop
 80031b4:	58024400 	.word	0x58024400
 80031b8:	fffffc0c 	.word	0xfffffc0c
 80031bc:	ffff0007 	.word	0xffff0007

080031c0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c0:	4b74      	ldr	r3, [pc, #464]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	f000 80df 	beq.w	800338c <HAL_RCC_GetSysClockFreq+0x1cc>
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x34>
 80031d2:	b10b      	cbz	r3, 80031d8 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031d4:	4870      	ldr	r0, [pc, #448]	; (8003398 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80031d6:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031d8:	4b6e      	ldr	r3, [pc, #440]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f013 0f20 	tst.w	r3, #32
 80031e0:	f000 80d6 	beq.w	8003390 <HAL_RCC_GetSysClockFreq+0x1d0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031e4:	4b6b      	ldr	r3, [pc, #428]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80031ec:	4b6b      	ldr	r3, [pc, #428]	; (800339c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80031ee:	fa23 f000 	lsr.w	r0, r3, r0
 80031f2:	4770      	bx	lr
{
 80031f4:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031f6:	4a67      	ldr	r2, [pc, #412]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031fa:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80031fc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003200:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003202:	6b52      	ldr	r2, [r2, #52]	; 0x34

    if (pllm != 0U)
 8003204:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8003208:	f000 80a0 	beq.w	800334c <HAL_RCC_GetSysClockFreq+0x18c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800320c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003210:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003214:	fb03 f302 	mul.w	r3, r3, r2
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003220:	f001 0103 	and.w	r1, r1, #3
 8003224:	2901      	cmp	r1, #1
 8003226:	d066      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x136>
 8003228:	2902      	cmp	r1, #2
 800322a:	f000 8092 	beq.w	8003352 <HAL_RCC_GetSysClockFreq+0x192>
 800322e:	b1e1      	cbz	r1, 800326a <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003230:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003238:	ee07 3a10 	vmov	s14, r3
 800323c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003240:	eddf 6a57 	vldr	s13, [pc, #348]	; 80033a0 <HAL_RCC_GetSysClockFreq+0x1e0>
 8003244:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003250:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003254:	ee07 0a10 	vmov	s14, r0
 8003258:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800325c:	ed9f 6a51 	vldr	s12, [pc, #324]	; 80033a4 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003260:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003264:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8003268:	e061      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x16e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800326a:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f013 0f20 	tst.w	r3, #32
 8003272:	d023      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0xfc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003274:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003276:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800327a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003280:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003282:	ee07 2a10 	vmov	s14, r2
 8003286:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800328a:	ee07 0a10 	vmov	s14, r0
 800328e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003292:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	ee06 3a90 	vmov	s13, r3
 800329e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80032a2:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80033a0 <HAL_RCC_GetSysClockFreq+0x1e0>
 80032a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80032aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ba:	e038      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x16e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c4:	ee07 3a10 	vmov	s14, r3
 80032c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80032cc:	eddf 6a34 	vldr	s13, [pc, #208]	; 80033a0 <HAL_RCC_GetSysClockFreq+0x1e0>
 80032d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032e0:	ee07 0a10 	vmov	s14, r0
 80032e4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80032e8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80033a8 <HAL_RCC_GetSysClockFreq+0x1e8>
 80032ec:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80032f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f4:	e01b      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x16e>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a10 	vmov	s14, r3
 8003302:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003306:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033a0 <HAL_RCC_GetSysClockFreq+0x1e0>
 800330a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800330e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003316:	ee77 7a87 	vadd.f32	s15, s15, s14
 800331a:	ee07 0a10 	vmov	s14, r0
 800331e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003322:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80033a4 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003326:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800332a:	ee67 7a87 	vmul.f32	s15, s15, s14
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003336:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003338:	ee07 3a10 	vmov	s14, r3
 800333c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003340:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003344:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003348:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800334c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003350:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335a:	ee07 3a10 	vmov	s14, r3
 800335e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003362:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80033a0 <HAL_RCC_GetSysClockFreq+0x1e0>
 8003366:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800336a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003372:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003376:	ee07 0a10 	vmov	s14, r0
 800337a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800337e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80033ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003382:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003386:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 800338a:	e7d0      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x16e>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800338c:	4808      	ldr	r0, [pc, #32]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800338e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8003392:	4770      	bx	lr
 8003394:	58024400 	.word	0x58024400
 8003398:	003d0900 	.word	0x003d0900
 800339c:	03d09000 	.word	0x03d09000
 80033a0:	39000000 	.word	0x39000000
 80033a4:	4a742400 	.word	0x4a742400
 80033a8:	4c742400 	.word	0x4c742400
 80033ac:	4bbebc20 	.word	0x4bbebc20
 80033b0:	017d7840 	.word	0x017d7840

080033b4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80033b4:	2800      	cmp	r0, #0
 80033b6:	f000 80c3 	beq.w	8003540 <HAL_RCC_ClockConfig+0x18c>
{
 80033ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033be:	460d      	mov	r5, r1
 80033c0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c2:	4ba0      	ldr	r3, [pc, #640]	; (8003644 <HAL_RCC_ClockConfig+0x290>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	428b      	cmp	r3, r1
 80033cc:	d20b      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4a9d      	ldr	r2, [pc, #628]	; (8003644 <HAL_RCC_ClockConfig+0x290>)
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	f023 030f 	bic.w	r3, r3, #15
 80033d6:	430b      	orrs	r3, r1
 80033d8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	428b      	cmp	r3, r1
 80033e2:	f040 80af 	bne.w	8003544 <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	f013 0f04 	tst.w	r3, #4
 80033ec:	d00c      	beq.n	8003408 <HAL_RCC_ClockConfig+0x54>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033ee:	6922      	ldr	r2, [r4, #16]
 80033f0:	4b95      	ldr	r3, [pc, #596]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d905      	bls.n	8003408 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033fc:	4992      	ldr	r1, [pc, #584]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80033fe:	698b      	ldr	r3, [r1, #24]
 8003400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003404:	4313      	orrs	r3, r2
 8003406:	618b      	str	r3, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	f013 0f08 	tst.w	r3, #8
 800340e:	d00c      	beq.n	800342a <HAL_RCC_ClockConfig+0x76>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003410:	6962      	ldr	r2, [r4, #20]
 8003412:	4b8d      	ldr	r3, [pc, #564]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800341a:	429a      	cmp	r2, r3
 800341c:	d905      	bls.n	800342a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800341e:	498a      	ldr	r1, [pc, #552]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003420:	69cb      	ldr	r3, [r1, #28]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	4313      	orrs	r3, r2
 8003428:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	f013 0f10 	tst.w	r3, #16
 8003430:	d00c      	beq.n	800344c <HAL_RCC_ClockConfig+0x98>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003432:	69a2      	ldr	r2, [r4, #24]
 8003434:	4b84      	ldr	r3, [pc, #528]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800343c:	429a      	cmp	r2, r3
 800343e:	d905      	bls.n	800344c <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003440:	4981      	ldr	r1, [pc, #516]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003442:	69cb      	ldr	r3, [r1, #28]
 8003444:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003448:	4313      	orrs	r3, r2
 800344a:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	f013 0f20 	tst.w	r3, #32
 8003452:	d00c      	beq.n	800346e <HAL_RCC_ClockConfig+0xba>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003454:	69e2      	ldr	r2, [r4, #28]
 8003456:	4b7c      	ldr	r3, [pc, #496]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800345e:	429a      	cmp	r2, r3
 8003460:	d905      	bls.n	800346e <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003462:	4979      	ldr	r1, [pc, #484]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003464:	6a0b      	ldr	r3, [r1, #32]
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	4313      	orrs	r3, r2
 800346c:	620b      	str	r3, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	f013 0f02 	tst.w	r3, #2
 8003474:	d070      	beq.n	8003558 <HAL_RCC_ClockConfig+0x1a4>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003476:	68e1      	ldr	r1, [r4, #12]
 8003478:	4a73      	ldr	r2, [pc, #460]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 800347a:	6992      	ldr	r2, [r2, #24]
 800347c:	f002 020f 	and.w	r2, r2, #15
 8003480:	4291      	cmp	r1, r2
 8003482:	d965      	bls.n	8003550 <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4a70      	ldr	r2, [pc, #448]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003486:	6993      	ldr	r3, [r2, #24]
 8003488:	f023 030f 	bic.w	r3, r3, #15
 800348c:	430b      	orrs	r3, r1
 800348e:	6193      	str	r3, [r2, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	f013 0f01 	tst.w	r3, #1
 8003496:	d041      	beq.n	800351c <HAL_RCC_ClockConfig+0x168>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003498:	4a6b      	ldr	r2, [pc, #428]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 800349a:	6993      	ldr	r3, [r2, #24]
 800349c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034a0:	68a1      	ldr	r1, [r4, #8]
 80034a2:	430b      	orrs	r3, r1
 80034a4:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	6862      	ldr	r2, [r4, #4]
 80034a8:	2a02      	cmp	r2, #2
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ac:	2a03      	cmp	r2, #3
 80034ae:	d027      	beq.n	8003500 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034b0:	2a01      	cmp	r2, #1
 80034b2:	d02c      	beq.n	800350e <HAL_RCC_ClockConfig+0x15a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b4:	4b64      	ldr	r3, [pc, #400]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f013 0f04 	tst.w	r3, #4
 80034bc:	d106      	bne.n	80034cc <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 80034be:	2001      	movs	r0, #1
 80034c0:	e0bd      	b.n	800363e <HAL_RCC_ClockConfig+0x28a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034c2:	4b61      	ldr	r3, [pc, #388]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034ca:	d03d      	beq.n	8003548 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034cc:	495e      	ldr	r1, [pc, #376]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80034ce:	690b      	ldr	r3, [r1, #16]
 80034d0:	f023 0307 	bic.w	r3, r3, #7
 80034d4:	4313      	orrs	r3, r2
 80034d6:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80034d8:	f7fe f8c6 	bl	8001668 <HAL_GetTick>
 80034dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4f5a      	ldr	r7, [pc, #360]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ea:	6862      	ldr	r2, [r4, #4]
 80034ec:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80034f0:	d014      	beq.n	800351c <HAL_RCC_ClockConfig+0x168>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f2:	f7fe f8b9 	bl	8001668 <HAL_GetTick>
 80034f6:	1b80      	subs	r0, r0, r6
 80034f8:	4540      	cmp	r0, r8
 80034fa:	d9f3      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x130>
            return HAL_TIMEOUT;
 80034fc:	2003      	movs	r0, #3
 80034fe:	e09e      	b.n	800363e <HAL_RCC_ClockConfig+0x28a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003500:	4b51      	ldr	r3, [pc, #324]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003508:	d1e0      	bne.n	80034cc <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 800350a:	2001      	movs	r0, #1
 800350c:	e097      	b.n	800363e <HAL_RCC_ClockConfig+0x28a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800350e:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003516:	d1d9      	bne.n	80034cc <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 8003518:	2001      	movs	r0, #1
 800351a:	e090      	b.n	800363e <HAL_RCC_ClockConfig+0x28a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	f013 0f02 	tst.w	r3, #2
 8003522:	d01c      	beq.n	800355e <HAL_RCC_ClockConfig+0x1aa>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003524:	68e2      	ldr	r2, [r4, #12]
 8003526:	4b48      	ldr	r3, [pc, #288]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	429a      	cmp	r2, r3
 8003530:	d215      	bcs.n	800355e <HAL_RCC_ClockConfig+0x1aa>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003532:	4945      	ldr	r1, [pc, #276]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003534:	698b      	ldr	r3, [r1, #24]
 8003536:	f023 030f 	bic.w	r3, r3, #15
 800353a:	4313      	orrs	r3, r2
 800353c:	618b      	str	r3, [r1, #24]
 800353e:	e00e      	b.n	800355e <HAL_RCC_ClockConfig+0x1aa>
    return HAL_ERROR;
 8003540:	2001      	movs	r0, #1
}
 8003542:	4770      	bx	lr
      return HAL_ERROR;
 8003544:	2001      	movs	r0, #1
 8003546:	e07a      	b.n	800363e <HAL_RCC_ClockConfig+0x28a>
          return HAL_ERROR;
 8003548:	2001      	movs	r0, #1
 800354a:	e078      	b.n	800363e <HAL_RCC_ClockConfig+0x28a>
      return HAL_ERROR;
 800354c:	2001      	movs	r0, #1
 800354e:	e076      	b.n	800363e <HAL_RCC_ClockConfig+0x28a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003550:	f013 0f01 	tst.w	r3, #1
 8003554:	d1a0      	bne.n	8003498 <HAL_RCC_ClockConfig+0xe4>
 8003556:	e7e5      	b.n	8003524 <HAL_RCC_ClockConfig+0x170>
 8003558:	f013 0f01 	tst.w	r3, #1
 800355c:	d19c      	bne.n	8003498 <HAL_RCC_ClockConfig+0xe4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800355e:	4b39      	ldr	r3, [pc, #228]	; (8003644 <HAL_RCC_ClockConfig+0x290>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	42ab      	cmp	r3, r5
 8003568:	d90a      	bls.n	8003580 <HAL_RCC_ClockConfig+0x1cc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4a36      	ldr	r2, [pc, #216]	; (8003644 <HAL_RCC_ClockConfig+0x290>)
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	432b      	orrs	r3, r5
 8003574:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	42ab      	cmp	r3, r5
 800357e:	d1e5      	bne.n	800354c <HAL_RCC_ClockConfig+0x198>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	f013 0f04 	tst.w	r3, #4
 8003586:	d00c      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003588:	6922      	ldr	r2, [r4, #16]
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003592:	429a      	cmp	r2, r3
 8003594:	d205      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003596:	492c      	ldr	r1, [pc, #176]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 8003598:	698b      	ldr	r3, [r1, #24]
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	4313      	orrs	r3, r2
 80035a0:	618b      	str	r3, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	f013 0f08 	tst.w	r3, #8
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035aa:	6962      	ldr	r2, [r4, #20]
 80035ac:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d205      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035b8:	4923      	ldr	r1, [pc, #140]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80035ba:	69cb      	ldr	r3, [r1, #28]
 80035bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	f013 0f10 	tst.w	r3, #16
 80035ca:	d00c      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035cc:	69a2      	ldr	r2, [r4, #24]
 80035ce:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d205      	bcs.n	80035e6 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035da:	491b      	ldr	r1, [pc, #108]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80035dc:	69cb      	ldr	r3, [r1, #28]
 80035de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	f013 0f20 	tst.w	r3, #32
 80035ec:	d00c      	beq.n	8003608 <HAL_RCC_ClockConfig+0x254>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ee:	69e2      	ldr	r2, [r4, #28]
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d205      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x254>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035fc:	4912      	ldr	r1, [pc, #72]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 80035fe:	6a0b      	ldr	r3, [r1, #32]
 8003600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003604:	4313      	orrs	r3, r2
 8003606:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003608:	f7ff fdda 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800360c:	490e      	ldr	r1, [pc, #56]	; (8003648 <HAL_RCC_ClockConfig+0x294>)
 800360e:	698b      	ldr	r3, [r1, #24]
 8003610:	4a0e      	ldr	r2, [pc, #56]	; (800364c <HAL_RCC_ClockConfig+0x298>)
 8003612:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800361e:	698b      	ldr	r3, [r1, #24]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	5cd3      	ldrb	r3, [r2, r3]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	fa20 f303 	lsr.w	r3, r0, r3
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <HAL_RCC_ClockConfig+0x29c>)
 8003630:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCC_ClockConfig+0x2a0>)
 8003634:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_RCC_ClockConfig+0x2a4>)
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	f7fd fe85 	bl	8001348 <HAL_InitTick>
}
 800363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003642:	bf00      	nop
 8003644:	52002000 	.word	0x52002000
 8003648:	58024400 	.word	0x58024400
 800364c:	080182a0 	.word	0x080182a0
 8003650:	24000008 	.word	0x24000008
 8003654:	24000004 	.word	0x24000004
 8003658:	24000010 	.word	0x24000010

0800365c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800365c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800365e:	f7ff fdaf 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8003662:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <HAL_RCC_GetHCLKFreq+0x34>)
 8003664:	6993      	ldr	r3, [r2, #24]
 8003666:	490b      	ldr	r1, [pc, #44]	; (8003694 <HAL_RCC_GetHCLKFreq+0x38>)
 8003668:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800366c:	5ccb      	ldrb	r3, [r1, r3]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003676:	6992      	ldr	r2, [r2, #24]
 8003678:	f002 020f 	and.w	r2, r2, #15
 800367c:	5c88      	ldrb	r0, [r1, r2]
 800367e:	f000 001f 	and.w	r0, r0, #31
 8003682:	fa23 f000 	lsr.w	r0, r3, r0
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003688:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <HAL_RCC_GetHCLKFreq+0x40>)
 800368c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800368e:	bd08      	pop	{r3, pc}
 8003690:	58024400 	.word	0x58024400
 8003694:	080182a0 	.word	0x080182a0
 8003698:	24000008 	.word	0x24000008
 800369c:	24000004 	.word	0x24000004

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036a2:	f7ff ffdb 	bl	800365c <HAL_RCC_GetHCLKFreq>
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036ae:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b0:	5cd3      	ldrb	r3, [r2, r3]
 80036b2:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036b6:	40d8      	lsrs	r0, r3
 80036b8:	bd08      	pop	{r3, pc}
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400
 80036c0:	080182a0 	.word	0x080182a0

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036c6:	f7ff ffc9 	bl	800365c <HAL_RCC_GetHCLKFreq>
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80036d2:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036da:	40d8      	lsrs	r0, r3
 80036dc:	bd08      	pop	{r3, pc}
 80036de:	bf00      	nop
 80036e0:	58024400 	.word	0x58024400
 80036e4:	080182a0 	.word	0x080182a0

080036e8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80036e8:	233f      	movs	r3, #63	; 0x3f
 80036ea:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_RCC_GetClockConfig+0x4c>)
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	f002 0207 	and.w	r2, r2, #7
 80036f4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80036fc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	f002 020f 	and.w	r2, r2, #15
 8003704:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800370c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003714:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800371c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003724:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003726:	4b04      	ldr	r3, [pc, #16]	; (8003738 <HAL_RCC_GetClockConfig+0x50>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	600b      	str	r3, [r1, #0]
}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	58024400 	.word	0x58024400
 8003738:	52002000 	.word	0x52002000

0800373c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800373e:	4b3e      	ldr	r3, [pc, #248]	; (8003838 <RCCEx_PLL2_Config+0xfc>)
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b03      	cmp	r3, #3
 8003748:	d074      	beq.n	8003834 <RCCEx_PLL2_Config+0xf8>
 800374a:	4606      	mov	r6, r0
 800374c:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800374e:	4a3a      	ldr	r2, [pc, #232]	; (8003838 <RCCEx_PLL2_Config+0xfc>)
 8003750:	6813      	ldr	r3, [r2, #0]
 8003752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fd ff86 	bl	8001668 <HAL_GetTick>
 800375c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800375e:	4d36      	ldr	r5, [pc, #216]	; (8003838 <RCCEx_PLL2_Config+0xfc>)
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003766:	d006      	beq.n	8003776 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003768:	f7fd ff7e 	bl	8001668 <HAL_GetTick>
 800376c:	1b03      	subs	r3, r0, r4
 800376e:	2b02      	cmp	r3, #2
 8003770:	d9f6      	bls.n	8003760 <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 8003772:	2003      	movs	r0, #3
 8003774:	e05f      	b.n	8003836 <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <RCCEx_PLL2_Config+0xfc>)
 8003778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800377a:	6831      	ldr	r1, [r6, #0]
 800377c:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003780:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
 8003786:	68b2      	ldr	r2, [r6, #8]
 8003788:	3a01      	subs	r2, #1
 800378a:	0252      	lsls	r2, r2, #9
 800378c:	b292      	uxth	r2, r2
 800378e:	68f1      	ldr	r1, [r6, #12]
 8003790:	3901      	subs	r1, #1
 8003792:	0409      	lsls	r1, r1, #16
 8003794:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003798:	430a      	orrs	r2, r1
 800379a:	6871      	ldr	r1, [r6, #4]
 800379c:	3901      	subs	r1, #1
 800379e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80037a2:	430a      	orrs	r2, r1
 80037a4:	6931      	ldr	r1, [r6, #16]
 80037a6:	3901      	subs	r1, #1
 80037a8:	0609      	lsls	r1, r1, #24
 80037aa:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80037ae:	430a      	orrs	r2, r1
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80037b8:	6971      	ldr	r1, [r6, #20]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	f022 0220 	bic.w	r2, r2, #32
 80037c4:	69b1      	ldr	r1, [r6, #24]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	f022 0210 	bic.w	r2, r2, #16
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80037d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80037d4:	69f1      	ldr	r1, [r6, #28]
 80037d6:	4a19      	ldr	r2, [pc, #100]	; (800383c <RCCEx_PLL2_Config+0x100>)
 80037d8:	4002      	ands	r2, r0
 80037da:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80037de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	f042 0210 	orr.w	r2, r2, #16
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80037e8:	b9c7      	cbnz	r7, 800381c <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80037ea:	461a      	mov	r2, r3
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037f2:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80037f4:	4a10      	ldr	r2, [pc, #64]	; (8003838 <RCCEx_PLL2_Config+0xfc>)
 80037f6:	6813      	ldr	r3, [r2, #0]
 80037f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fe:	f7fd ff33 	bl	8001668 <HAL_GetTick>
 8003802:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003804:	4d0c      	ldr	r5, [pc, #48]	; (8003838 <RCCEx_PLL2_Config+0xfc>)
 8003806:	682b      	ldr	r3, [r5, #0]
 8003808:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800380c:	d110      	bne.n	8003830 <RCCEx_PLL2_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800380e:	f7fd ff2b 	bl	8001668 <HAL_GetTick>
 8003812:	1b00      	subs	r0, r0, r4
 8003814:	2802      	cmp	r0, #2
 8003816:	d9f6      	bls.n	8003806 <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 8003818:	2003      	movs	r0, #3
 800381a:	e00c      	b.n	8003836 <RCCEx_PLL2_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 800381c:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800381e:	4a06      	ldr	r2, [pc, #24]	; (8003838 <RCCEx_PLL2_Config+0xfc>)
 8003820:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003822:	bf0c      	ite	eq
 8003824:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003828:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800382e:	e7e1      	b.n	80037f4 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8003830:	2000      	movs	r0, #0
 8003832:	e000      	b.n	8003836 <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 8003834:	2001      	movs	r0, #1
}
 8003836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003838:	58024400 	.word	0x58024400
 800383c:	ffff0007 	.word	0xffff0007

08003840 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003842:	4b3e      	ldr	r3, [pc, #248]	; (800393c <RCCEx_PLL3_Config+0xfc>)
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b03      	cmp	r3, #3
 800384c:	d074      	beq.n	8003938 <RCCEx_PLL3_Config+0xf8>
 800384e:	4606      	mov	r6, r0
 8003850:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003852:	4a3a      	ldr	r2, [pc, #232]	; (800393c <RCCEx_PLL3_Config+0xfc>)
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385c:	f7fd ff04 	bl	8001668 <HAL_GetTick>
 8003860:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003862:	4d36      	ldr	r5, [pc, #216]	; (800393c <RCCEx_PLL3_Config+0xfc>)
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800386a:	d006      	beq.n	800387a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800386c:	f7fd fefc 	bl	8001668 <HAL_GetTick>
 8003870:	1b03      	subs	r3, r0, r4
 8003872:	2b02      	cmp	r3, #2
 8003874:	d9f6      	bls.n	8003864 <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 8003876:	2003      	movs	r0, #3
 8003878:	e05f      	b.n	800393a <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800387a:	4b30      	ldr	r3, [pc, #192]	; (800393c <RCCEx_PLL3_Config+0xfc>)
 800387c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387e:	6831      	ldr	r1, [r6, #0]
 8003880:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003884:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
 800388a:	68b2      	ldr	r2, [r6, #8]
 800388c:	3a01      	subs	r2, #1
 800388e:	0252      	lsls	r2, r2, #9
 8003890:	b292      	uxth	r2, r2
 8003892:	68f1      	ldr	r1, [r6, #12]
 8003894:	3901      	subs	r1, #1
 8003896:	0409      	lsls	r1, r1, #16
 8003898:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800389c:	430a      	orrs	r2, r1
 800389e:	6871      	ldr	r1, [r6, #4]
 80038a0:	3901      	subs	r1, #1
 80038a2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80038a6:	430a      	orrs	r2, r1
 80038a8:	6931      	ldr	r1, [r6, #16]
 80038aa:	3901      	subs	r1, #1
 80038ac:	0609      	lsls	r1, r1, #24
 80038ae:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80038b2:	430a      	orrs	r2, r1
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80038bc:	6971      	ldr	r1, [r6, #20]
 80038be:	430a      	orrs	r2, r1
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038c8:	69b1      	ldr	r1, [r6, #24]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80038d6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80038d8:	69f1      	ldr	r1, [r6, #28]
 80038da:	4a19      	ldr	r2, [pc, #100]	; (8003940 <RCCEx_PLL3_Config+0x100>)
 80038dc:	4002      	ands	r2, r0
 80038de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80038e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038ec:	b9c7      	cbnz	r7, 8003920 <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038ee:	461a      	mov	r2, r3
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80038f8:	4a10      	ldr	r2, [pc, #64]	; (800393c <RCCEx_PLL3_Config+0xfc>)
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003902:	f7fd feb1 	bl	8001668 <HAL_GetTick>
 8003906:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003908:	4d0c      	ldr	r5, [pc, #48]	; (800393c <RCCEx_PLL3_Config+0xfc>)
 800390a:	682b      	ldr	r3, [r5, #0]
 800390c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003910:	d110      	bne.n	8003934 <RCCEx_PLL3_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003912:	f7fd fea9 	bl	8001668 <HAL_GetTick>
 8003916:	1b00      	subs	r0, r0, r4
 8003918:	2802      	cmp	r0, #2
 800391a:	d9f6      	bls.n	800390a <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 800391c:	2003      	movs	r0, #3
 800391e:	e00c      	b.n	800393a <RCCEx_PLL3_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003920:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003922:	4a06      	ldr	r2, [pc, #24]	; (800393c <RCCEx_PLL3_Config+0xfc>)
 8003924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003926:	bf0c      	ite	eq
 8003928:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800392c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003930:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003932:	e7e1      	b.n	80038f8 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8003934:	2000      	movs	r0, #0
 8003936:	e000      	b.n	800393a <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 8003938:	2001      	movs	r0, #1
}
 800393a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800393c:	58024400 	.word	0x58024400
 8003940:	ffff0007 	.word	0xffff0007

08003944 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003948:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800394a:	6803      	ldr	r3, [r0, #0]
 800394c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003950:	d02b      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003952:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003958:	d021      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800395a:	d80c      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800395c:	b1cb      	cbz	r3, 8003992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800395e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003962:	d106      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003964:	2102      	movs	r1, #2
 8003966:	3004      	adds	r0, #4
 8003968:	f7ff fee8 	bl	800373c <RCCEx_PLL2_Config>
 800396c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800396e:	b9ee      	cbnz	r6, 80039ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003970:	e004      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003972:	2601      	movs	r6, #1
 8003974:	e01a      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800397a:	d108      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800397c:	4a96      	ldr	r2, [pc, #600]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800397e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003980:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003984:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003986:	430b      	orrs	r3, r1
 8003988:	6513      	str	r3, [r2, #80]	; 0x50
 800398a:	2600      	movs	r6, #0
 800398c:	e00e      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800398e:	2601      	movs	r6, #1
 8003990:	e00c      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4a91      	ldr	r2, [pc, #580]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003994:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800399c:	e7ee      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800399e:	2102      	movs	r1, #2
 80039a0:	3024      	adds	r0, #36	; 0x24
 80039a2:	f7ff ff4d 	bl	8003840 <RCCEx_PLL3_Config>
 80039a6:	4606      	mov	r6, r0
      break;
 80039a8:	e7e1      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039aa:	2600      	movs	r6, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039b2:	d025      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai1ClockSelection)
 80039b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d834      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80039ba:	e8df f003 	tbb	[pc, r3]
 80039be:	0a03      	.short	0x0a03
 80039c0:	1710      	.short	0x1710
 80039c2:	17          	.byte	0x17
 80039c3:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4a84      	ldr	r2, [pc, #528]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80039c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039cc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80039ce:	4635      	mov	r5, r6
 80039d0:	e00d      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039d2:	2100      	movs	r1, #0
 80039d4:	1d20      	adds	r0, r4, #4
 80039d6:	f7ff feb1 	bl	800373c <RCCEx_PLL2_Config>
 80039da:	4605      	mov	r5, r0
      break;
 80039dc:	e007      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039de:	2100      	movs	r1, #0
 80039e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80039e4:	f7ff ff2c 	bl	8003840 <RCCEx_PLL3_Config>
 80039e8:	4605      	mov	r5, r0
      break;
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai1ClockSelection)
 80039ec:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80039ee:	b9e5      	cbnz	r5, 8003a2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f0:	4a79      	ldr	r2, [pc, #484]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80039f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80039f4:	f023 0307 	bic.w	r3, r3, #7
 80039f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6513      	str	r3, [r2, #80]	; 0x50
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003a00:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003a08:	d021      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a0c:	2b80      	cmp	r3, #128	; 0x80
 8003a0e:	d03c      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x146>
 8003a10:	d810      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8003a12:	b3a3      	cbz	r3, 8003a7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d10a      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a18:	2100      	movs	r1, #0
 8003a1a:	1d20      	adds	r0, r4, #4
 8003a1c:	f7ff fe8e 	bl	800373c <RCCEx_PLL2_Config>
 8003a20:	4605      	mov	r5, r0
      break;
 8003a22:	e00c      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a24:	2601      	movs	r6, #1
 8003a26:	4635      	mov	r5, r6
 8003a28:	e7eb      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003a2a:	462e      	mov	r6, r5
 8003a2c:	e7e9      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a2e:	2601      	movs	r6, #1
 8003a30:	4635      	mov	r5, r6
 8003a32:	e00c      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8003a34:	2bc0      	cmp	r3, #192	; 0xc0
 8003a36:	d002      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d11c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8003a3e:	bb5d      	cbnz	r5, 8003a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a40:	4a65      	ldr	r2, [pc, #404]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003a42:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003a44:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003a48:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003a54:	d034      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a56:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5e:	d04d      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a60:	d81f      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d044      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a6a:	d117      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	1d20      	adds	r0, r4, #4
 8003a70:	f7ff fe64 	bl	800373c <RCCEx_PLL2_Config>
 8003a74:	4605      	mov	r5, r0
      break;
 8003a76:	e01a      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a78:	2601      	movs	r6, #1
 8003a7a:	4635      	mov	r5, r6
 8003a7c:	e7e7      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7e:	4a56      	ldr	r2, [pc, #344]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003a80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a86:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003a88:	e7d9      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a90:	f7ff fed6 	bl	8003840 <RCCEx_PLL3_Config>
 8003a94:	4605      	mov	r5, r0
      break;
 8003a96:	e7d2      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003a98:	462e      	mov	r6, r5
 8003a9a:	e7d8      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a9c:	2601      	movs	r6, #1
 8003a9e:	4635      	mov	r5, r6
 8003aa0:	e00e      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003aa2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003aa6:	d002      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aac:	d11d      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    if(ret == HAL_OK)
 8003aae:	bb65      	cbnz	r5, 8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ab0:	4a49      	ldr	r2, [pc, #292]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003ab2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ab4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003ab8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003ac6:	d035      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003ac8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ad0:	d053      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003ad2:	d81f      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d04a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003adc:	d117      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	1d20      	adds	r0, r4, #4
 8003ae2:	f7ff fe2b 	bl	800373c <RCCEx_PLL2_Config>
 8003ae6:	4605      	mov	r5, r0
      break;
 8003ae8:	e01a      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003aea:	2601      	movs	r6, #1
 8003aec:	4635      	mov	r5, r6
 8003aee:	e7e7      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af0:	4a39      	ldr	r2, [pc, #228]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003af2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003afa:	e7d8      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003afc:	2100      	movs	r1, #0
 8003afe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b02:	f7ff fe9d 	bl	8003840 <RCCEx_PLL3_Config>
 8003b06:	4605      	mov	r5, r0
      break;
 8003b08:	e7d1      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003b0a:	462e      	mov	r6, r5
 8003b0c:	e7d8      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b0e:	2601      	movs	r6, #1
 8003b10:	4635      	mov	r5, r6
 8003b12:	e00f      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003b14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b18:	d002      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b1e:	d123      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8003b20:	2d00      	cmp	r5, #0
 8003b22:	d131      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b24:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003b26:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b28:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b2c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b3a:	d02e      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 8003b3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d03f      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003b42:	d826      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003b44:	b133      	cbz	r3, 8003b54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d120      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4a:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003b4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b52:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003b54:	2d00      	cmp	r5, #0
 8003b56:	d13a      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b58:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003b5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003b5c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003b62:	430b      	orrs	r3, r1
 8003b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b66:	e018      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b68:	2601      	movs	r6, #1
 8003b6a:	4635      	mov	r5, r6
 8003b6c:	e7e2      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6e:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003b70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b76:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003b78:	e7d2      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b80:	f7ff fe5e 	bl	8003840 <RCCEx_PLL3_Config>
 8003b84:	4605      	mov	r5, r0
      break;
 8003b86:	e7cb      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b88:	462e      	mov	r6, r5
 8003b8a:	e7d3      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 8003b8c:	2601      	movs	r6, #1
 8003b8e:	4635      	mov	r5, r6
 8003b90:	e003      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003b92:	2b30      	cmp	r3, #48	; 0x30
 8003b94:	d0de      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b96:	2601      	movs	r6, #1
 8003b98:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003ba0:	d02b      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ba2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba8:	d04c      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003baa:	d817      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d043      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	1d20      	adds	r0, r4, #4
 8003bba:	f7ff fdbf 	bl	800373c <RCCEx_PLL2_Config>
 8003bbe:	4605      	mov	r5, r0
      break;
 8003bc0:	e012      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	1d20      	adds	r0, r4, #4
 8003bc6:	f7ff fdb9 	bl	800373c <RCCEx_PLL2_Config>
 8003bca:	4605      	mov	r5, r0
      break;
 8003bcc:	e7c2      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003bce:	462e      	mov	r6, r5
 8003bd0:	e7e3      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003bd2:	2601      	movs	r6, #1
 8003bd4:	4635      	mov	r5, r6
 8003bd6:	e010      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003be0:	d002      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8003be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be6:	d124      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8003be8:	2d00      	cmp	r5, #0
 8003bea:	d132      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bec:	4a98      	ldr	r2, [pc, #608]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003c00:	d036      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c08:	d050      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003c0a:	d827      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003c0c:	b13b      	cbz	r3, 8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c12:	d120      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c14:	2101      	movs	r1, #1
 8003c16:	1d20      	adds	r0, r4, #4
 8003c18:	f7ff fd90 	bl	800373c <RCCEx_PLL2_Config>
 8003c1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c1e:	2d00      	cmp	r5, #0
 8003c20:	d14b      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c22:	4a8b      	ldr	r2, [pc, #556]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c24:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c26:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003c2a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c30:	e01e      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c32:	2601      	movs	r6, #1
 8003c34:	4635      	mov	r5, r6
 8003c36:	e7e0      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c38:	4a85      	ldr	r2, [pc, #532]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c40:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003c42:	e7d1      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c44:	2100      	movs	r1, #0
 8003c46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c4a:	f7ff fdf9 	bl	8003840 <RCCEx_PLL3_Config>
 8003c4e:	4605      	mov	r5, r0
      break;
 8003c50:	e7ca      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8003c52:	462e      	mov	r6, r5
 8003c54:	e7d1      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c56:	2601      	movs	r6, #1
 8003c58:	4635      	mov	r5, r6
 8003c5a:	e009      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003c5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c60:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8003c64:	d0db      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c6a:	d0d8      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003c6c:	2601      	movs	r6, #1
 8003c6e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003c76:	d02f      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c78:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c80:	d043      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8003c82:	d81f      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8003c84:	b13b      	cbz	r3, 8003c96 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c8a:	d118      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	1d20      	adds	r0, r4, #4
 8003c90:	f7ff fd54 	bl	800373c <RCCEx_PLL2_Config>
 8003c94:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c96:	2d00      	cmp	r5, #0
 8003c98:	d13e      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c9a:	4a6d      	ldr	r2, [pc, #436]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c9c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003c9e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003ca2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8003caa:	e015      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cac:	2101      	movs	r1, #1
 8003cae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cb2:	f7ff fdc5 	bl	8003840 <RCCEx_PLL3_Config>
 8003cb6:	4605      	mov	r5, r0
      break;
 8003cb8:	e7b1      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003cba:	462e      	mov	r6, r5
 8003cbc:	e7d8      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cbe:	2601      	movs	r6, #1
 8003cc0:	4635      	mov	r5, r6
 8003cc2:	e009      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8003cc4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cc8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003ccc:	d0e3      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003cce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cd2:	d0e0      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003cd4:	2601      	movs	r6, #1
 8003cd6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003cde:	d009      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8003ce0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce6:	d019      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8003ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cec:	d024      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003cee:	b1d3      	cbz	r3, 8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003cf0:	2601      	movs	r6, #1
 8003cf2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003cfa:	d03d      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch(PeriphClkInit->FmcClockSelection)
 8003cfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d836      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003d02:	e8df f003 	tbb	[pc, r3]
 8003d06:	2126      	.short	0x2126
 8003d08:	262f      	.short	0x262f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d10:	f7ff fd96 	bl	8003840 <RCCEx_PLL3_Config>
 8003d14:	4605      	mov	r5, r0
      break;
 8003d16:	e7be      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003d18:	462e      	mov	r6, r5
 8003d1a:	e7dd      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d24:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003d26:	b96d      	cbnz	r5, 8003d44 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d28:	4a49      	ldr	r2, [pc, #292]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003d2c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003d30:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6513      	str	r3, [r2, #80]	; 0x50
 8003d36:	e7dd      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d38:	2101      	movs	r1, #1
 8003d3a:	1d20      	adds	r0, r4, #4
 8003d3c:	f7ff fcfe 	bl	800373c <RCCEx_PLL2_Config>
 8003d40:	4605      	mov	r5, r0
      break;
 8003d42:	e7f0      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003d44:	462e      	mov	r6, r5
 8003d46:	e7d5      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d48:	4a41      	ldr	r2, [pc, #260]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d50:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003d52:	b985      	cbnz	r5, 8003d76 <HAL_RCCEx_PeriphCLKConfig+0x432>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d54:	4a3e      	ldr	r2, [pc, #248]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d56:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d58:	f023 0303 	bic.w	r3, r3, #3
 8003d5c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d62:	e009      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x434>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d64:	2102      	movs	r1, #2
 8003d66:	1d20      	adds	r0, r4, #4
 8003d68:	f7ff fce8 	bl	800373c <RCCEx_PLL2_Config>
 8003d6c:	4605      	mov	r5, r0
      break;
 8003d6e:	e7f0      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->FmcClockSelection)
 8003d70:	2601      	movs	r6, #1
 8003d72:	4635      	mov	r5, r6
 8003d74:	e000      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003d76:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003d7e:	d11f      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	f013 0f01 	tst.w	r3, #1
 8003d86:	f000 809e 	beq.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d8a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003d8c:	2b28      	cmp	r3, #40	; 0x28
 8003d8e:	f200 8098 	bhi.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003d92:	e8df f003 	tbb	[pc, r3]
 8003d96:	9686      	.short	0x9686
 8003d98:	96969696 	.word	0x96969696
 8003d9c:	96819696 	.word	0x96819696
 8003da0:	96969696 	.word	0x96969696
 8003da4:	968f9696 	.word	0x968f9696
 8003da8:	96969696 	.word	0x96969696
 8003dac:	96869696 	.word	0x96869696
 8003db0:	96969696 	.word	0x96969696
 8003db4:	96869696 	.word	0x96869696
 8003db8:	96969696 	.word	0x96969696
 8003dbc:	9696      	.short	0x9696
 8003dbe:	86          	.byte	0x86
 8003dbf:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc0:	4a24      	ldr	r2, [pc, #144]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003dc2:	6813      	ldr	r3, [r2, #0]
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003dca:	f7fd fc4d 	bl	8001668 <HAL_GetTick>
 8003dce:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8003e54 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003dd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ddc:	d107      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fd fc43 	bl	8001668 <HAL_GetTick>
 8003de2:	1bc0      	subs	r0, r0, r7
 8003de4:	2864      	cmp	r0, #100	; 0x64
 8003de6:	d9f5      	bls.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>
        ret = HAL_TIMEOUT;
 8003de8:	2603      	movs	r6, #3
 8003dea:	4635      	mov	r5, r6
 8003dec:	e7c8      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    if(ret == HAL_OK)
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	d150      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x550>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003df2:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003dfa:	4053      	eors	r3, r2
 8003dfc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003e00:	d00c      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e0a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e0c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003e10:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e12:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e14:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003e18:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003e1a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e1c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e24:	d018      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x514>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e26:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003e2a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003e2e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003e32:	d025      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8003e34:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e36:	6913      	ldr	r3, [r2, #16]
 8003e38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e3c:	6113      	str	r3, [r2, #16]
 8003e3e:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e40:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003e42:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4e:	e797      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8003e50:	58024400 	.word	0x58024400
 8003e54:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8003e58:	f7fd fc06 	bl	8001668 <HAL_GetTick>
 8003e5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e5e:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8004078 <HAL_RCCEx_PeriphCLKConfig+0x734>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e66:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8003e6a:	f013 0f02 	tst.w	r3, #2
 8003e6e:	d1da      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fd fbfa 	bl	8001668 <HAL_GetTick>
 8003e74:	1bc0      	subs	r0, r0, r7
 8003e76:	4548      	cmp	r0, r9
 8003e78:	d9f5      	bls.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x522>
            ret = HAL_TIMEOUT;
 8003e7a:	2603      	movs	r6, #3
 8003e7c:	4635      	mov	r5, r6
 8003e7e:	e77f      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e80:	487d      	ldr	r0, [pc, #500]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x734>)
 8003e82:	6901      	ldr	r1, [r0, #16]
 8003e84:	4a7d      	ldr	r2, [pc, #500]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003e86:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 8003e8a:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	6103      	str	r3, [r0, #16]
 8003e92:	e7d4      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003e94:	462e      	mov	r6, r5
 8003e96:	e773      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e98:	2101      	movs	r1, #1
 8003e9a:	1d20      	adds	r0, r4, #4
 8003e9c:	f7ff fc4e 	bl	800373c <RCCEx_PLL2_Config>
 8003ea0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ea2:	b9e5      	cbnz	r5, 8003ede <HAL_RCCEx_PeriphCLKConfig+0x59a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ea4:	4a74      	ldr	r2, [pc, #464]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x734>)
 8003ea6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ea8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003eac:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	6553      	str	r3, [r2, #84]	; 0x54
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003eba:	f7ff fcc1 	bl	8003840 <RCCEx_PLL3_Config>
 8003ebe:	4605      	mov	r5, r0
      break;
 8003ec0:	e7ef      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003ec2:	2601      	movs	r6, #1
 8003ec4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	f013 0f02 	tst.w	r3, #2
 8003ecc:	d022      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ece:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d81b      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ed4:	e8df f003 	tbb	[pc, r3]
 8003ed8:	0a13050a 	.word	0x0a13050a
 8003edc:	0a0a      	.short	0x0a0a
 8003ede:	462e      	mov	r6, r5
 8003ee0:	e7f1      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	1d20      	adds	r0, r4, #4
 8003ee6:	f7ff fc29 	bl	800373c <RCCEx_PLL2_Config>
 8003eea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003eec:	b98d      	cbnz	r5, 8003f12 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003eee:	4a62      	ldr	r2, [pc, #392]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x734>)
 8003ef0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6553      	str	r3, [r2, #84]	; 0x54
 8003efc:	e00a      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003efe:	2101      	movs	r1, #1
 8003f00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f04:	f7ff fc9c 	bl	8003840 <RCCEx_PLL3_Config>
 8003f08:	4605      	mov	r5, r0
      break;
 8003f0a:	e7ef      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f0c:	2601      	movs	r6, #1
 8003f0e:	4635      	mov	r5, r6
 8003f10:	e000      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003f12:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f013 0f04 	tst.w	r3, #4
 8003f1a:	d022      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003f20:	2b05      	cmp	r3, #5
 8003f22:	d81a      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x616>
 8003f24:	e8df f003 	tbb	[pc, r3]
 8003f28:	08120308 	.word	0x08120308
 8003f2c:	0808      	.short	0x0808
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f2e:	2101      	movs	r1, #1
 8003f30:	1d20      	adds	r0, r4, #4
 8003f32:	f7ff fc03 	bl	800373c <RCCEx_PLL2_Config>
 8003f36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f38:	b995      	cbnz	r5, 8003f60 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f3a:	4a4f      	ldr	r2, [pc, #316]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x734>)
 8003f3c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6593      	str	r3, [r2, #88]	; 0x58
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f52:	f7ff fc75 	bl	8003840 <RCCEx_PLL3_Config>
 8003f56:	4605      	mov	r5, r0
      break;
 8003f58:	e7ee      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f5a:	2601      	movs	r6, #1
 8003f5c:	4635      	mov	r5, r6
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8003f60:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	f013 0f20 	tst.w	r3, #32
 8003f68:	d026      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f6a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f72:	d03f      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003f74:	d816      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8003f76:	b13b      	cbz	r3, 8003f88 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8003f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x65a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f7e:	2100      	movs	r1, #0
 8003f80:	1d20      	adds	r0, r4, #4
 8003f82:	f7ff fbdb 	bl	800373c <RCCEx_PLL2_Config>
 8003f86:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	d13a      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8c:	4a3a      	ldr	r2, [pc, #232]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x734>)
 8003f8e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f90:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003f94:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6553      	str	r3, [r2, #84]	; 0x54
 8003f9c:	e00c      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f9e:	2601      	movs	r6, #1
 8003fa0:	4635      	mov	r5, r6
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8003fa4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fa8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003fac:	d0ec      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8003fae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fb2:	d0e9      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8003fb4:	2601      	movs	r6, #1
 8003fb6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fbe:	d02f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fc0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc8:	d04a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003fca:	d81f      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8003fcc:	b13b      	cbz	r3, 8003fde <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd2:	d118      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	1d20      	adds	r0, r4, #4
 8003fd8:	f7ff fbb0 	bl	800373c <RCCEx_PLL2_Config>
 8003fdc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fde:	2d00      	cmp	r5, #0
 8003fe0:	d145      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x72a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x734>)
 8003fe4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003fe6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003fea:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff2:	e015      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ffa:	f7ff fc21 	bl	8003840 <RCCEx_PLL3_Config>
 8003ffe:	4605      	mov	r5, r0
      break;
 8004000:	e7c2      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8004002:	462e      	mov	r6, r5
 8004004:	e7d8      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004006:	2601      	movs	r6, #1
 8004008:	4635      	mov	r5, r6
 800400a:	e009      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800400c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004010:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004014:	d0e3      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8004016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401a:	d0e0      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800401c:	2601      	movs	r6, #1
 800401e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004026:	d035      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x750>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004028:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800402c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004030:	f000 80e5 	beq.w	80041fe <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8004034:	d824      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8004036:	b13b      	cbz	r3, 8004048 <HAL_RCCEx_PeriphCLKConfig+0x704>
 8004038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403c:	d119      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800403e:	2100      	movs	r1, #0
 8004040:	1d20      	adds	r0, r4, #4
 8004042:	f7ff fb7b 	bl	800373c <RCCEx_PLL2_Config>
 8004046:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004048:	2d00      	cmp	r5, #0
 800404a:	f040 80df 	bne.w	800420c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x734>)
 8004050:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004052:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004056:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800405a:	430b      	orrs	r3, r1
 800405c:	6593      	str	r3, [r2, #88]	; 0x58
 800405e:	e019      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x750>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004060:	2102      	movs	r1, #2
 8004062:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004066:	f7ff fbeb 	bl	8003840 <RCCEx_PLL3_Config>
 800406a:	4605      	mov	r5, r0
      break;
 800406c:	e7b7      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800406e:	462e      	mov	r6, r5
 8004070:	e7d6      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004072:	2601      	movs	r6, #1
 8004074:	4635      	mov	r5, r6
 8004076:	e00d      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004078:	58024400 	.word	0x58024400
 800407c:	00ffffcf 	.word	0x00ffffcf
 8004080:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004084:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004088:	d0de      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x704>
 800408a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800408e:	d0db      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x704>
 8004090:	2601      	movs	r6, #1
 8004092:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	f013 0f08 	tst.w	r3, #8
 800409a:	d00d      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x774>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800409c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	f000 80b4 	beq.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040a8:	4a97      	ldr	r2, [pc, #604]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80040aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040b0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	f013 0f10 	tst.w	r3, #16
 80040be:	d00d      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c8:	f000 80ab 	beq.w	8004222 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040cc:	4a8e      	ldr	r2, [pc, #568]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80040ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80040d8:	430b      	orrs	r3, r1
 80040da:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80040e2:	d00e      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch(PeriphClkInit->AdcClockSelection)
 80040e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	f000 80b1 	beq.w	8004252 <HAL_RCCEx_PeriphCLKConfig+0x90e>
 80040f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f4:	f000 80a3 	beq.w	800423e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 809b 	beq.w	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80040fe:	2601      	movs	r6, #1
 8004100:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004108:	d00f      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch(PeriphClkInit->UsbClockSelection)
 800410a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800410e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004112:	f000 80b6 	beq.w	8004282 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004116:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800411a:	f000 80a8 	beq.w	800426e <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800411e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004122:	f000 809f 	beq.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x920>
 8004126:	2601      	movs	r6, #1
 8004128:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004130:	d009      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x802>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004132:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80ad 	beq.w	8004294 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	f000 80b7 	beq.w	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 8004142:	2601      	movs	r6, #1
 8004144:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800414c:	f040 80b8 	bne.w	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004156:	d00d      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x830>
    switch(PeriphClkInit->RngClockSelection)
 8004158:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800415a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415e:	f000 80bb 	beq.w	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8004162:	f240 80b6 	bls.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 8004166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800416e:	f000 80b8 	beq.w	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8004172:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800417a:	d006      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x846>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800417c:	4a62      	ldr	r2, [pc, #392]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800417e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004184:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004186:	430b      	orrs	r3, r1
 8004188:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004190:	d007      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004192:	4a5d      	ldr	r2, [pc, #372]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8004194:	6913      	ldr	r3, [r2, #16]
 8004196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800419a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800419e:	430b      	orrs	r3, r1
 80041a0:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80041a8:	d006      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041aa:	4a57      	ldr	r2, [pc, #348]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80041ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80041be:	d009      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x890>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041c0:	4b51      	ldr	r3, [pc, #324]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c8:	611a      	str	r2, [r3, #16]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80041d0:	430a      	orrs	r2, r1
 80041d2:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f2c0 808e 	blt.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80041e2:	d007      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041e4:	4a48      	ldr	r2, [pc, #288]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80041e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80041e8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80041ec:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 80041f4:	1e30      	subs	r0, r6, #0
 80041f6:	bf18      	it	ne
 80041f8:	2001      	movne	r0, #1
}
 80041fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041fe:	2102      	movs	r1, #2
 8004200:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004204:	f7ff fb1c 	bl	8003840 <RCCEx_PLL3_Config>
 8004208:	4605      	mov	r5, r0
      break;
 800420a:	e71d      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x704>
 800420c:	462e      	mov	r6, r5
 800420e:	e741      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x750>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004210:	2102      	movs	r1, #2
 8004212:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004216:	f7ff fb13 	bl	8003840 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800421a:	2800      	cmp	r0, #0
 800421c:	bf18      	it	ne
 800421e:	2601      	movne	r6, #1
 8004220:	e742      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x764>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004222:	2102      	movs	r1, #2
 8004224:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004228:	f7ff fb0a 	bl	8003840 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800422c:	2800      	cmp	r0, #0
 800422e:	bf18      	it	ne
 8004230:	2601      	movne	r6, #1
 8004232:	e74b      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004234:	2100      	movs	r1, #0
 8004236:	1d20      	adds	r0, r4, #4
 8004238:	f7ff fa80 	bl	800373c <RCCEx_PLL2_Config>
 800423c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800423e:	b97d      	cbnz	r5, 8004260 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004240:	4a31      	ldr	r2, [pc, #196]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8004242:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004244:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004248:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800424c:	430b      	orrs	r3, r1
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
 8004250:	e757      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004252:	2102      	movs	r1, #2
 8004254:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004258:	f7ff faf2 	bl	8003840 <RCCEx_PLL3_Config>
 800425c:	4605      	mov	r5, r0
      break;
 800425e:	e7ee      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8004260:	462e      	mov	r6, r5
 8004262:	e74e      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004264:	4a28      	ldr	r2, [pc, #160]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8004266:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800426e:	b97d      	cbnz	r5, 8004290 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004270:	4a25      	ldr	r2, [pc, #148]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8004272:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004274:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004278:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800427c:	430b      	orrs	r3, r1
 800427e:	6553      	str	r3, [r2, #84]	; 0x54
 8004280:	e753      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004282:	2101      	movs	r1, #1
 8004284:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004288:	f7ff fada 	bl	8003840 <RCCEx_PLL3_Config>
 800428c:	4605      	mov	r5, r0
      break;
 800428e:	e7ee      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8004290:	462e      	mov	r6, r5
 8004292:	e74a      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8004296:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800429e:	b96d      	cbnz	r5, 80042bc <HAL_RCCEx_PeriphCLKConfig+0x978>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042a0:	4a19      	ldr	r2, [pc, #100]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80042a2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80042aa:	430b      	orrs	r3, r1
 80042ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ae:	e74a      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042b0:	2102      	movs	r1, #2
 80042b2:	1d20      	adds	r0, r4, #4
 80042b4:	f7ff fa42 	bl	800373c <RCCEx_PLL2_Config>
 80042b8:	4605      	mov	r5, r0
      break;
 80042ba:	e7f0      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80042bc:	462e      	mov	r6, r5
 80042be:	e742      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x802>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042c0:	2102      	movs	r1, #2
 80042c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042c6:	f7ff fabb 	bl	8003840 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80042ca:	2800      	cmp	r0, #0
 80042cc:	bf18      	it	ne
 80042ce:	2601      	movne	r6, #1
 80042d0:	e73e      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    switch(PeriphClkInit->RngClockSelection)
 80042d2:	b133      	cbz	r3, 80042e2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80042d4:	2601      	movs	r6, #1
 80042d6:	e74d      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80042da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80042e2:	b93d      	cbnz	r5, 80042f4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042e4:	4a08      	ldr	r2, [pc, #32]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80042e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ec:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80042ee:	430b      	orrs	r3, r1
 80042f0:	6553      	str	r3, [r2, #84]	; 0x54
 80042f2:	e73f      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x830>
 80042f4:	462e      	mov	r6, r5
 80042f6:	e73d      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x830>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042f8:	4a03      	ldr	r2, [pc, #12]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80042fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042fc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004300:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004302:	430b      	orrs	r3, r1
 8004304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004306:	e769      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x898>
 8004308:	58024400 	.word	0x58024400

0800430c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800430c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800430e:	f7ff f9a5 	bl	800365c <HAL_RCC_GetHCLKFreq>
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800431c:	5cd3      	ldrb	r3, [r2, r3]
 800431e:	f003 031f 	and.w	r3, r3, #31
}
 8004322:	40d8      	lsrs	r0, r3
 8004324:	bd08      	pop	{r3, pc}
 8004326:	bf00      	nop
 8004328:	58024400 	.word	0x58024400
 800432c:	080182a0 	.word	0x080182a0

08004330 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004330:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004332:	4a78      	ldr	r2, [pc, #480]	; (8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004334:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004336:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8004338:	f3c5 3105 	ubfx	r1, r5, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800433c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800433e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8004340:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
 8004344:	f000 80e0 	beq.w	8004508 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004348:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800434c:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004350:	fb03 f302 	mul.w	r3, r3, r2
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800435c:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8004360:	2c01      	cmp	r4, #1
 8004362:	d066      	beq.n	8004432 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8004364:	2c02      	cmp	r4, #2
 8004366:	f000 80b2 	beq.w	80044ce <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
 800436a:	b1e4      	cbz	r4, 80043a6 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800436c:	4b69      	ldr	r3, [pc, #420]	; (8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004380:	ee66 6a87 	vmul.f32	s13, s13, s14
 8004384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800438c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004390:	ee07 1a10 	vmov	s14, r1
 8004394:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004398:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800451c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800439c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80043a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 80043a4:	e061      	b.n	800446a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a6:	4b5b      	ldr	r3, [pc, #364]	; (8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f013 0f20 	tst.w	r3, #32
 80043ae:	d023      	beq.n	80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043b0:	4b58      	ldr	r3, [pc, #352]	; (8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80043b2:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043b6:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80043ba:	4a59      	ldr	r2, [pc, #356]	; (8004520 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 80043bc:	40e2      	lsrs	r2, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043be:	ee07 2a90 	vmov	s15, r2
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	ee07 1a10 	vmov	s14, r1
 80043ca:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80043ce:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80043e2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80043e6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80043ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	e038      	b.n	800446a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043f8:	4b46      	ldr	r3, [pc, #280]	; (8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004408:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800440c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800441c:	ee07 1a10 	vmov	s14, r1
 8004420:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004424:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8004428:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800442c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004430:	e01b      	b.n	800446a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004432:	4b38      	ldr	r3, [pc, #224]	; (8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004446:	ee66 6a87 	vmul.f32	s13, s13, s14
 800444a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004456:	ee07 1a10 	vmov	s14, r1
 800445a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800445e:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800451c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004462:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004466:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800446a:	4a2a      	ldr	r2, [pc, #168]	; (8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800446c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800446e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004472:	ee06 3a90 	vmov	s13, r3
 8004476:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800447a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800447e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004482:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004486:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800448a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800448e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004490:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004494:	ee06 3a90 	vmov	s13, r3
 8004498:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800449c:	ee76 6a86 	vadd.f32	s13, s13, s12
 80044a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044a4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80044a8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80044ac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80044ae:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80044b2:	ee07 3a10 	vmov	s14, r3
 80044b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 80044be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044c2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80044c6:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80044ca:	bc30      	pop	{r4, r5}
 80044cc:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80044e2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80044e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044f2:	ee07 1a10 	vmov	s14, r1
 80044f6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80044fa:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 80044fe:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004502:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8004506:	e7b0      	b.n	800446a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800450c:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800450e:	6083      	str	r3, [r0, #8]
}
 8004510:	e7db      	b.n	80044ca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8004512:	bf00      	nop
 8004514:	58024400 	.word	0x58024400
 8004518:	39000000 	.word	0x39000000
 800451c:	4a742400 	.word	0x4a742400
 8004520:	03d09000 	.word	0x03d09000
 8004524:	4c742400 	.word	0x4c742400
 8004528:	4bbebc20 	.word	0x4bbebc20

0800452c <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800452c:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800452e:	4a78      	ldr	r2, [pc, #480]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004530:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004532:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8004534:	f3c5 5105 	ubfx	r1, r5, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004538:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800453a:	6c52      	ldr	r2, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800453c:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
 8004540:	f000 80e0 	beq.w	8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004544:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004548:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800454c:	fb03 f302 	mul.w	r3, r3, r2
 8004550:	ee07 3a90 	vmov	s15, r3
 8004554:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004558:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 800455c:	2c01      	cmp	r4, #1
 800455e:	d066      	beq.n	800462e <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8004560:	2c02      	cmp	r4, #2
 8004562:	f000 80b2 	beq.w	80046ca <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
 8004566:	b1e4      	cbz	r4, 80045a2 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004568:	4b69      	ldr	r3, [pc, #420]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004578:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800457c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8004580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800458c:	ee07 1a10 	vmov	s14, r1
 8004590:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004594:	ed9f 6a60 	vldr	s12, [pc, #384]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004598:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800459c:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 80045a0:	e061      	b.n	8004666 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a2:	4b5b      	ldr	r3, [pc, #364]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f013 0f20 	tst.w	r3, #32
 80045aa:	d023      	beq.n	80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045ac:	4b58      	ldr	r3, [pc, #352]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80045ae:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80045b6:	4a59      	ldr	r2, [pc, #356]	; (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 80045b8:	40e2      	lsrs	r2, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045ba:	ee07 2a90 	vmov	s15, r2
 80045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c2:	ee07 1a10 	vmov	s14, r1
 80045c6:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80045ca:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80045de:	ee66 6a86 	vmul.f32	s13, s13, s12
 80045e2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80045e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f2:	e038      	b.n	8004666 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045f4:	4b46      	ldr	r3, [pc, #280]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004604:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800460c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004618:	ee07 1a10 	vmov	s14, r1
 800461c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004620:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8004624:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800462c:	e01b      	b.n	8004666 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800462e:	4b38      	ldr	r3, [pc, #224]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004642:	ee66 6a87 	vmul.f32	s13, s13, s14
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800464e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004652:	ee07 1a10 	vmov	s14, r1
 8004656:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800465a:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800465e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004662:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004666:	4a2a      	ldr	r2, [pc, #168]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004668:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800466a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800466e:	ee06 3a90 	vmov	s13, r3
 8004672:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004676:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800467a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800467e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004682:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004686:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800468a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800468c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004690:	ee06 3a90 	vmov	s13, r3
 8004694:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004698:	ee76 6a86 	vadd.f32	s13, s13, s12
 800469c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80046a0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80046a4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046aa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80046ae:	ee07 3a10 	vmov	s14, r3
 80046b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046b6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80046ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046be:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80046c2:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80046c6:	bc30      	pop	{r4, r5}
 80046c8:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046da:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80046de:	ee66 6a87 	vmul.f32	s13, s13, s14
 80046e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ee:	ee07 1a10 	vmov	s14, r1
 80046f2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80046f6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 80046fa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80046fe:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8004702:	e7b0      	b.n	8004666 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004708:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800470a:	6083      	str	r3, [r0, #8]
}
 800470c:	e7db      	b.n	80046c6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800470e:	bf00      	nop
 8004710:	58024400 	.word	0x58024400
 8004714:	39000000 	.word	0x39000000
 8004718:	4a742400 	.word	0x4a742400
 800471c:	03d09000 	.word	0x03d09000
 8004720:	4c742400 	.word	0x4c742400
 8004724:	4bbebc20 	.word	0x4bbebc20

08004728 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004728:	b308      	cbz	r0, 800476e <HAL_SDRAM_Init+0x46>
{
 800472a:	b538      	push	{r3, r4, r5, lr}
 800472c:	460d      	mov	r5, r1
 800472e:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004730:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004734:	b1b3      	cbz	r3, 8004764 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004736:	2302      	movs	r3, #2
 8004738:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800473c:	4621      	mov	r1, r4
 800473e:	f851 0b04 	ldr.w	r0, [r1], #4
 8004742:	f000 ff69 	bl	8005618 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004746:	6862      	ldr	r2, [r4, #4]
 8004748:	4629      	mov	r1, r5
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	f000 ff9c 	bl	8005688 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <HAL_SDRAM_Init+0x4c>)
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004758:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800475a:	2301      	movs	r3, #1
 800475c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8004760:	2000      	movs	r0, #0
}
 8004762:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004764:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004768:	f7fc fd60 	bl	800122c <HAL_SDRAM_MspInit>
 800476c:	e7e3      	b.n	8004736 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800476e:	2001      	movs	r0, #1
}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	52004000 	.word	0x52004000

08004778 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800477c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004780:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004782:	2802      	cmp	r0, #2
 8004784:	d005      	beq.n	8004792 <HAL_SDRAM_SendCommand+0x1a>
 8004786:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004788:	f000 03fb 	and.w	r3, r0, #251	; 0xfb
 800478c:	2b01      	cmp	r3, #1
 800478e:	d001      	beq.n	8004794 <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8004790:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8004792:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004794:	2302      	movs	r3, #2
 8004796:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800479a:	6820      	ldr	r0, [r4, #0]
 800479c:	f000 ffc0 	bl	8005720 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	2b02      	cmp	r3, #2
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80047a4:	bf0c      	ite	eq
 80047a6:	2305      	moveq	r3, #5
      hsdram->State = HAL_SDRAM_STATE_READY;
 80047a8:	2301      	movne	r3, #1
 80047aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80047ae:	2000      	movs	r0, #0
 80047b0:	e7ef      	b.n	8004792 <HAL_SDRAM_SendCommand+0x1a>

080047b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80047b2:	b510      	push	{r4, lr}
 80047b4:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80047b6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80047ba:	b2d8      	uxtb	r0, r3
 80047bc:	2802      	cmp	r0, #2
 80047be:	d005      	beq.n	80047cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80047c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d001      	beq.n	80047ce <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80047ca:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80047cc:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80047ce:	2302      	movs	r3, #2
 80047d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80047d4:	6820      	ldr	r0, [r4, #0]
 80047d6:	f000 ffb9 	bl	800574c <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 80047da:	2301      	movs	r3, #1
 80047dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80047e0:	2000      	movs	r0, #0
 80047e2:	e7f3      	b.n	80047cc <HAL_SDRAM_ProgramRefreshRate+0x1a>

080047e4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d13f      	bne.n	8004872 <HAL_TIM_Base_Start_IT+0x8a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	2302      	movs	r3, #2
 80047f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f8:	6802      	ldr	r2, [r0, #0]
 80047fa:	68d3      	ldr	r3, [r2, #12]
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	6802      	ldr	r2, [r0, #0]
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_TIM_Base_Start_IT+0x94>)
 8004806:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800480a:	bf18      	it	ne
 800480c:	429a      	cmpne	r2, r3
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	491a      	ldr	r1, [pc, #104]	; (8004880 <HAL_TIM_Base_Start_IT+0x98>)
 8004816:	428a      	cmp	r2, r1
 8004818:	bf08      	it	eq
 800481a:	f043 0301 	orreq.w	r3, r3, #1
 800481e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004822:	428a      	cmp	r2, r1
 8004824:	bf08      	it	eq
 8004826:	f043 0301 	orreq.w	r3, r3, #1
 800482a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800482e:	428a      	cmp	r2, r1
 8004830:	bf08      	it	eq
 8004832:	f043 0301 	orreq.w	r3, r3, #1
 8004836:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800483a:	428a      	cmp	r2, r1
 800483c:	bf08      	it	eq
 800483e:	f043 0301 	orreq.w	r3, r3, #1
 8004842:	b913      	cbnz	r3, 800484a <HAL_TIM_Base_Start_IT+0x62>
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <HAL_TIM_Base_Start_IT+0x9c>)
 8004846:	429a      	cmp	r2, r3
 8004848:	d10d      	bne.n	8004866 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484a:	6891      	ldr	r1, [r2, #8]
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <HAL_TIM_Base_Start_IT+0xa0>)
 800484e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	2b06      	cmp	r3, #6
 8004852:	d010      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0x8e>
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d00d      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004862:	2000      	movs	r0, #0
 8004864:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800486e:	2000      	movs	r0, #0
 8004870:	4770      	bx	lr
    return HAL_ERROR;
 8004872:	2001      	movs	r0, #1
 8004874:	4770      	bx	lr
  return HAL_OK;
 8004876:	2000      	movs	r0, #0
}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40001800 	.word	0x40001800
 8004888:	00010007 	.word	0x00010007

0800488c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800488c:	4770      	bx	lr

0800488e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800488e:	4770      	bx	lr

08004890 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_IRQHandler>:
{
 8004894:	b510      	push	{r4, lr}
 8004896:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004898:	6803      	ldr	r3, [r0, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	f012 0f02 	tst.w	r2, #2
 80048a0:	d011      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	f012 0f02 	tst.w	r2, #2
 80048a8:	d00d      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048aa:	f06f 0202 	mvn.w	r2, #2
 80048ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b0:	2301      	movs	r3, #1
 80048b2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b4:	6803      	ldr	r3, [r0, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f013 0f03 	tst.w	r3, #3
 80048bc:	d079      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80048be:	f7ff ffe6 	bl	800488e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	2300      	movs	r3, #0
 80048c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	f012 0f04 	tst.w	r2, #4
 80048ce:	d012      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	f012 0f04 	tst.w	r2, #4
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d8:	f06f 0204 	mvn.w	r2, #4
 80048dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048de:	2302      	movs	r3, #2
 80048e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80048ea:	d068      	beq.n	80049be <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80048ec:	4620      	mov	r0, r4
 80048ee:	f7ff ffce 	bl	800488e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	2300      	movs	r3, #0
 80048f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	f012 0f08 	tst.w	r2, #8
 80048fe:	d012      	beq.n	8004926 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	f012 0f08 	tst.w	r2, #8
 8004906:	d00e      	beq.n	8004926 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004908:	f06f 0208 	mvn.w	r2, #8
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490e:	2304      	movs	r3, #4
 8004910:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f013 0f03 	tst.w	r3, #3
 800491a:	d057      	beq.n	80049cc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800491c:	4620      	mov	r0, r4
 800491e:	f7ff ffb6 	bl	800488e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	2300      	movs	r3, #0
 8004924:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	f012 0f10 	tst.w	r2, #16
 800492e:	d012      	beq.n	8004956 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	f012 0f10 	tst.w	r2, #16
 8004936:	d00e      	beq.n	8004956 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004938:	f06f 0210 	mvn.w	r2, #16
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493e:	2308      	movs	r3, #8
 8004940:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f413 7f40 	tst.w	r3, #768	; 0x300
 800494a:	d046      	beq.n	80049da <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800494c:	4620      	mov	r0, r4
 800494e:	f7ff ff9e 	bl	800488e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	2300      	movs	r3, #0
 8004954:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	f012 0f01 	tst.w	r2, #1
 800495e:	d003      	beq.n	8004968 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	f012 0f01 	tst.w	r2, #1
 8004966:	d13f      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004978:	d13d      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004982:	d003      	beq.n	800498c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	f012 0f80 	tst.w	r2, #128	; 0x80
 800498a:	d13b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	f012 0f40 	tst.w	r2, #64	; 0x40
 800499c:	d139      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	f012 0f20 	tst.w	r2, #32
 80049a6:	d003      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	f012 0f20 	tst.w	r2, #32
 80049ae:	d137      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x18c>
}
 80049b0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	f7ff ff6b 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b6:	4620      	mov	r0, r4
 80049b8:	f7ff ff6a 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
 80049bc:	e781      	b.n	80048c2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	4620      	mov	r0, r4
 80049c0:	f7ff ff64 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7ff ff63 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
 80049ca:	e792      	b.n	80048f2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7ff ff5d 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7ff ff5c 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
 80049d8:	e7a3      	b.n	8004922 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	4620      	mov	r0, r4
 80049dc:	f7ff ff56 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff ff55 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
 80049e6:	e7b4      	b.n	8004952 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e8:	f06f 0201 	mvn.w	r2, #1
 80049ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ee:	4620      	mov	r0, r4
 80049f0:	f7fc f9f8 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
 80049f4:	e7b8      	b.n	8004968 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80049fc:	4620      	mov	r0, r4
 80049fe:	f000 f8ba 	bl	8004b76 <HAL_TIMEx_BreakCallback>
 8004a02:	e7ba      	b.n	800497a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f000 f8b4 	bl	8004b78 <HAL_TIMEx_Break2Callback>
 8004a10:	e7bc      	b.n	800498c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a16:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7ff ff3a 	bl	8004892 <HAL_TIM_TriggerCallback>
 8004a1e:	e7be      	b.n	800499e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a20:	f06f 0220 	mvn.w	r2, #32
 8004a24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004a26:	4620      	mov	r0, r4
 8004a28:	f000 f8a4 	bl	8004b74 <HAL_TIMEx_CommutCallback>
}
 8004a2c:	e7c0      	b.n	80049b0 <HAL_TIM_IRQHandler+0x11c>
	...

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b430      	push	{r4, r5}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a34:	4a32      	ldr	r2, [pc, #200]	; (8004b00 <TIM_Base_SetConfig+0xd0>)
 8004a36:	4290      	cmp	r0, r2
 8004a38:	bf14      	ite	ne
 8004a3a:	2200      	movne	r2, #0
 8004a3c:	2201      	moveq	r2, #1
 8004a3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004a42:	d037      	beq.n	8004ab4 <TIM_Base_SetConfig+0x84>
 8004a44:	2a00      	cmp	r2, #0
 8004a46:	d135      	bne.n	8004ab4 <TIM_Base_SetConfig+0x84>
 8004a48:	4c2e      	ldr	r4, [pc, #184]	; (8004b04 <TIM_Base_SetConfig+0xd4>)
 8004a4a:	42a0      	cmp	r0, r4
 8004a4c:	d00b      	beq.n	8004a66 <TIM_Base_SetConfig+0x36>
 8004a4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a52:	42a0      	cmp	r0, r4
 8004a54:	d007      	beq.n	8004a66 <TIM_Base_SetConfig+0x36>
 8004a56:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a5a:	42a0      	cmp	r0, r4
 8004a5c:	d003      	beq.n	8004a66 <TIM_Base_SetConfig+0x36>
 8004a5e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8004a62:	42a0      	cmp	r0, r4
 8004a64:	d10a      	bne.n	8004a7c <TIM_Base_SetConfig+0x4c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a6a:	684c      	ldr	r4, [r1, #4]
 8004a6c:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6e:	4c25      	ldr	r4, [pc, #148]	; (8004b04 <TIM_Base_SetConfig+0xd4>)
 8004a70:	42a0      	cmp	r0, r4
 8004a72:	d023      	beq.n	8004abc <TIM_Base_SetConfig+0x8c>
 8004a74:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a78:	42a0      	cmp	r0, r4
 8004a7a:	d01f      	beq.n	8004abc <TIM_Base_SetConfig+0x8c>
 8004a7c:	4c22      	ldr	r4, [pc, #136]	; (8004b08 <TIM_Base_SetConfig+0xd8>)
 8004a7e:	42a0      	cmp	r0, r4
 8004a80:	d01c      	beq.n	8004abc <TIM_Base_SetConfig+0x8c>
 8004a82:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8004a86:	42a0      	cmp	r0, r4
 8004a88:	d018      	beq.n	8004abc <TIM_Base_SetConfig+0x8c>
 8004a8a:	4d20      	ldr	r5, [pc, #128]	; (8004b0c <TIM_Base_SetConfig+0xdc>)
 8004a8c:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 8004a90:	42a0      	cmp	r0, r4
 8004a92:	bf18      	it	ne
 8004a94:	42a8      	cmpne	r0, r5
 8004a96:	d011      	beq.n	8004abc <TIM_Base_SetConfig+0x8c>
 8004a98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a9c:	42a0      	cmp	r0, r4
 8004a9e:	d00d      	beq.n	8004abc <TIM_Base_SetConfig+0x8c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa4:	694a      	ldr	r2, [r1, #20]
 8004aa6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004aa8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aaa:	688b      	ldr	r3, [r1, #8]
 8004aac:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aae:	680b      	ldr	r3, [r1, #0]
 8004ab0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab2:	e021      	b.n	8004af8 <TIM_Base_SetConfig+0xc8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ab8:	684c      	ldr	r4, [r1, #4]
 8004aba:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac0:	68cc      	ldr	r4, [r1, #12]
 8004ac2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac8:	694c      	ldr	r4, [r1, #20]
 8004aca:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8004acc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ace:	688b      	ldr	r3, [r1, #8]
 8004ad0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ad2:	680b      	ldr	r3, [r1, #0]
 8004ad4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <TIM_Base_SetConfig+0xe0>)
 8004ad8:	4298      	cmp	r0, r3
 8004ada:	d00b      	beq.n	8004af4 <TIM_Base_SetConfig+0xc4>
 8004adc:	b952      	cbnz	r2, 8004af4 <TIM_Base_SetConfig+0xc4>
 8004ade:	4a0b      	ldr	r2, [pc, #44]	; (8004b0c <TIM_Base_SetConfig+0xdc>)
 8004ae0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004ae4:	4298      	cmp	r0, r3
 8004ae6:	bf18      	it	ne
 8004ae8:	4290      	cmpne	r0, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_Base_SetConfig+0xc4>
 8004aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af0:	4298      	cmp	r0, r3
 8004af2:	d101      	bne.n	8004af8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af4:	690b      	ldr	r3, [r1, #16]
 8004af6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af8:	2301      	movs	r3, #1
 8004afa:	6143      	str	r3, [r0, #20]
}
 8004afc:	bc30      	pop	{r4, r5}
 8004afe:	4770      	bx	lr
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40010400 	.word	0x40010400

08004b14 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004b14:	b360      	cbz	r0, 8004b70 <HAL_TIM_Base_Init+0x5c>
{
 8004b16:	b510      	push	{r4, lr}
 8004b18:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b1e:	b313      	cbz	r3, 8004b66 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	2302      	movs	r3, #2
 8004b22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b26:	4621      	mov	r1, r4
 8004b28:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b2c:	f7ff ff80 	bl	8004a30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004b3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004b5a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004b5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004b62:	2000      	movs	r0, #0
}
 8004b64:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004b6a:	f7ff fe3b 	bl	80047e4 <HAL_TIM_Base_MspInit>
 8004b6e:	e7d7      	b.n	8004b20 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004b70:	2001      	movs	r0, #1
}
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b74:	4770      	bx	lr

08004b76 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b76:	4770      	bx	lr

08004b78 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b78:	4770      	bx	lr
	...

08004b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b84:	6801      	ldr	r1, [r0, #0]
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b86:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b88:	68a3      	ldr	r3, [r4, #8]
 8004b8a:	6922      	ldr	r2, [r4, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	6962      	ldr	r2, [r4, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	69e2      	ldr	r2, [r4, #28]
 8004b94:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b96:	4a85      	ldr	r2, [pc, #532]	; (8004dac <UART_SetConfig+0x230>)
 8004b98:	4002      	ands	r2, r0
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	6853      	ldr	r3, [r2, #4]
 8004ba2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ba6:	68e1      	ldr	r1, [r4, #12]
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bac:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	4b7f      	ldr	r3, [pc, #508]	; (8004db0 <UART_SetConfig+0x234>)
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d001      	beq.n	8004bba <UART_SetConfig+0x3e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bb6:	6a23      	ldr	r3, [r4, #32]
 8004bb8:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bba:	6890      	ldr	r0, [r2, #8]
 8004bbc:	4b7d      	ldr	r3, [pc, #500]	; (8004db4 <UART_SetConfig+0x238>)
 8004bbe:	4003      	ands	r3, r0
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004bc8:	f023 030f 	bic.w	r3, r3, #15
 8004bcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	4b78      	ldr	r3, [pc, #480]	; (8004db8 <UART_SetConfig+0x23c>)
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d021      	beq.n	8004c1e <UART_SetConfig+0xa2>
 8004bda:	4b78      	ldr	r3, [pc, #480]	; (8004dbc <UART_SetConfig+0x240>)
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	f000 8084 	beq.w	8004cea <UART_SetConfig+0x16e>
 8004be2:	4b77      	ldr	r3, [pc, #476]	; (8004dc0 <UART_SetConfig+0x244>)
 8004be4:	429a      	cmp	r2, r3
 8004be6:	f000 8098 	beq.w	8004d1a <UART_SetConfig+0x19e>
 8004bea:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <UART_SetConfig+0x248>)
 8004bec:	429a      	cmp	r2, r3
 8004bee:	f000 80ac 	beq.w	8004d4a <UART_SetConfig+0x1ce>
 8004bf2:	4b75      	ldr	r3, [pc, #468]	; (8004dc8 <UART_SetConfig+0x24c>)
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	f000 80c0 	beq.w	8004d7a <UART_SetConfig+0x1fe>
 8004bfa:	4b74      	ldr	r3, [pc, #464]	; (8004dcc <UART_SetConfig+0x250>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	f000 80ed 	beq.w	8004ddc <UART_SetConfig+0x260>
 8004c02:	4b73      	ldr	r3, [pc, #460]	; (8004dd0 <UART_SetConfig+0x254>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	f000 8124 	beq.w	8004e52 <UART_SetConfig+0x2d6>
 8004c0a:	4b72      	ldr	r3, [pc, #456]	; (8004dd4 <UART_SetConfig+0x258>)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	f000 8138 	beq.w	8004e82 <UART_SetConfig+0x306>
 8004c12:	4b67      	ldr	r3, [pc, #412]	; (8004db0 <UART_SetConfig+0x234>)
 8004c14:	429a      	cmp	r2, r3
 8004c16:	f000 814c 	beq.w	8004eb2 <UART_SetConfig+0x336>
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	e033      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004c1e:	4b6e      	ldr	r3, [pc, #440]	; (8004dd8 <UART_SetConfig+0x25c>)
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c26:	2b28      	cmp	r3, #40	; 0x28
 8004c28:	d85d      	bhi.n	8004ce6 <UART_SetConfig+0x16a>
 8004c2a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004c2e:	0152      	.short	0x0152
 8004c30:	005c005c 	.word	0x005c005c
 8004c34:	005c005c 	.word	0x005c005c
 8004c38:	005c005c 	.word	0x005c005c
 8004c3c:	02a5005c 	.word	0x02a5005c
 8004c40:	005c005c 	.word	0x005c005c
 8004c44:	005c005c 	.word	0x005c005c
 8004c48:	005c005c 	.word	0x005c005c
 8004c4c:	0029005c 	.word	0x0029005c
 8004c50:	005c005c 	.word	0x005c005c
 8004c54:	005c005c 	.word	0x005c005c
 8004c58:	005c005c 	.word	0x005c005c
 8004c5c:	02a7005c 	.word	0x02a7005c
 8004c60:	005c005c 	.word	0x005c005c
 8004c64:	005c005c 	.word	0x005c005c
 8004c68:	005c005c 	.word	0x005c005c
 8004c6c:	002b005c 	.word	0x002b005c
 8004c70:	005c005c 	.word	0x005c005c
 8004c74:	005c005c 	.word	0x005c005c
 8004c78:	005c005c 	.word	0x005c005c
 8004c7c:	005a005c 	.word	0x005a005c
 8004c80:	2308      	movs	r3, #8
 8004c82:	e000      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004c84:	2320      	movs	r3, #32
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c86:	69e0      	ldr	r0, [r4, #28]
 8004c88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004c8c:	f000 81ba 	beq.w	8005004 <UART_SetConfig+0x488>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	f200 8214 	bhi.w	80050be <UART_SetConfig+0x542>
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	f200 826a 	bhi.w	8005170 <UART_SetConfig+0x5f4>
 8004c9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ca0:	023b0235 	.word	0x023b0235
 8004ca4:	02680268 	.word	0x02680268
 8004ca8:	0268023e 	.word	0x0268023e
 8004cac:	02680268 	.word	0x02680268
 8004cb0:	02680243 	.word	0x02680243
 8004cb4:	02680268 	.word	0x02680268
 8004cb8:	02680268 	.word	0x02680268
 8004cbc:	02680268 	.word	0x02680268
 8004cc0:	02680248 	.word	0x02680248
 8004cc4:	02680268 	.word	0x02680268
 8004cc8:	02680268 	.word	0x02680268
 8004ccc:	02680268 	.word	0x02680268
 8004cd0:	02680268 	.word	0x02680268
 8004cd4:	02680268 	.word	0x02680268
 8004cd8:	02680268 	.word	0x02680268
 8004cdc:	02680268 	.word	0x02680268
 8004ce0:	0254      	.short	0x0254
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	e7cf      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	e7cd      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004cea:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <UART_SetConfig+0x25c>)
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d80f      	bhi.n	8004d16 <UART_SetConfig+0x19a>
 8004cf6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004cfa:	00ee      	.short	0x00ee
 8004cfc:	00060243 	.word	0x00060243
 8004d00:	000a0008 	.word	0x000a0008
 8004d04:	000c      	.short	0x000c
 8004d06:	2308      	movs	r3, #8
 8004d08:	e7bd      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d0a:	2310      	movs	r3, #16
 8004d0c:	e7bb      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d0e:	2320      	movs	r3, #32
 8004d10:	e7b9      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d12:	2340      	movs	r3, #64	; 0x40
 8004d14:	e7b7      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	e7b5      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d1a:	4b2f      	ldr	r3, [pc, #188]	; (8004dd8 <UART_SetConfig+0x25c>)
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d80f      	bhi.n	8004d46 <UART_SetConfig+0x1ca>
 8004d26:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d2a:	0105      	.short	0x0105
 8004d2c:	0006022d 	.word	0x0006022d
 8004d30:	000a0008 	.word	0x000a0008
 8004d34:	000c      	.short	0x000c
 8004d36:	2308      	movs	r3, #8
 8004d38:	e7a5      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	e7a3      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d3e:	2320      	movs	r3, #32
 8004d40:	e7a1      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d42:	2340      	movs	r3, #64	; 0x40
 8004d44:	e79f      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d46:	2380      	movs	r3, #128	; 0x80
 8004d48:	e79d      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <UART_SetConfig+0x25c>)
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	d80f      	bhi.n	8004d76 <UART_SetConfig+0x1fa>
 8004d56:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d5a:	00ef      	.short	0x00ef
 8004d5c:	00060217 	.word	0x00060217
 8004d60:	000a0008 	.word	0x000a0008
 8004d64:	000c      	.short	0x000c
 8004d66:	2308      	movs	r3, #8
 8004d68:	e78d      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	e78b      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d6e:	2320      	movs	r3, #32
 8004d70:	e789      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d72:	2340      	movs	r3, #64	; 0x40
 8004d74:	e787      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	e785      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d7a:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <UART_SetConfig+0x25c>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	2b05      	cmp	r3, #5
 8004d84:	d80f      	bhi.n	8004da6 <UART_SetConfig+0x22a>
 8004d86:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d8a:	00d9      	.short	0x00d9
 8004d8c:	00060201 	.word	0x00060201
 8004d90:	000a0008 	.word	0x000a0008
 8004d94:	000c      	.short	0x000c
 8004d96:	2308      	movs	r3, #8
 8004d98:	e775      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	e773      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004d9e:	2320      	movs	r3, #32
 8004da0:	e771      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004da2:	2340      	movs	r3, #64	; 0x40
 8004da4:	e76f      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	e76d      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004daa:	bf00      	nop
 8004dac:	cfff69f3 	.word	0xcfff69f3
 8004db0:	58000c00 	.word	0x58000c00
 8004db4:	11fff4ff 	.word	0x11fff4ff
 8004db8:	40011000 	.word	0x40011000
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	40004800 	.word	0x40004800
 8004dc4:	40004c00 	.word	0x40004c00
 8004dc8:	40005000 	.word	0x40005000
 8004dcc:	40011400 	.word	0x40011400
 8004dd0:	40007800 	.word	0x40007800
 8004dd4:	40007c00 	.word	0x40007c00
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	4b83      	ldr	r3, [pc, #524]	; (8004fec <UART_SetConfig+0x470>)
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004de4:	2b28      	cmp	r3, #40	; 0x28
 8004de6:	d832      	bhi.n	8004e4e <UART_SetConfig+0x2d2>
 8004de8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004dec:	003100aa 	.word	0x003100aa
 8004df0:	00310031 	.word	0x00310031
 8004df4:	00310031 	.word	0x00310031
 8004df8:	00310031 	.word	0x00310031
 8004dfc:	003101d2 	.word	0x003101d2
 8004e00:	00310031 	.word	0x00310031
 8004e04:	00310031 	.word	0x00310031
 8004e08:	00310031 	.word	0x00310031
 8004e0c:	00310029 	.word	0x00310029
 8004e10:	00310031 	.word	0x00310031
 8004e14:	00310031 	.word	0x00310031
 8004e18:	00310031 	.word	0x00310031
 8004e1c:	0031002b 	.word	0x0031002b
 8004e20:	00310031 	.word	0x00310031
 8004e24:	00310031 	.word	0x00310031
 8004e28:	00310031 	.word	0x00310031
 8004e2c:	0031002d 	.word	0x0031002d
 8004e30:	00310031 	.word	0x00310031
 8004e34:	00310031 	.word	0x00310031
 8004e38:	00310031 	.word	0x00310031
 8004e3c:	002f      	.short	0x002f
 8004e3e:	2308      	movs	r3, #8
 8004e40:	e721      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e42:	2310      	movs	r3, #16
 8004e44:	e71f      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e46:	2320      	movs	r3, #32
 8004e48:	e71d      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	e71b      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	e719      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e52:	4b66      	ldr	r3, [pc, #408]	; (8004fec <UART_SetConfig+0x470>)
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	d80f      	bhi.n	8004e7e <UART_SetConfig+0x302>
 8004e5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e62:	0071      	.short	0x0071
 8004e64:	00060199 	.word	0x00060199
 8004e68:	000a0008 	.word	0x000a0008
 8004e6c:	000c      	.short	0x000c
 8004e6e:	2308      	movs	r3, #8
 8004e70:	e709      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e72:	2310      	movs	r3, #16
 8004e74:	e707      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e76:	2320      	movs	r3, #32
 8004e78:	e705      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	e703      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	e701      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004e82:	4b5a      	ldr	r3, [pc, #360]	; (8004fec <UART_SetConfig+0x470>)
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d80f      	bhi.n	8004eae <UART_SetConfig+0x332>
 8004e8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e92:	005b      	.short	0x005b
 8004e94:	00060183 	.word	0x00060183
 8004e98:	000a0008 	.word	0x000a0008
 8004e9c:	000c      	.short	0x000c
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	e6f1      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	e6ef      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	e6ed      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004eaa:	2340      	movs	r3, #64	; 0x40
 8004eac:	e6eb      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	e6e9      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004eb2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	f200 8147 	bhi.w	8005150 <UART_SetConfig+0x5d4>
 8004ec2:	e8df f003 	tbb	[pc, r3]
 8004ec6:	4a43      	.short	0x4a43
 8004ec8:	038c544f 	.word	0x038c544f
 8004ecc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ed0:	e058      	b.n	8004f84 <UART_SetConfig+0x408>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <UART_SetConfig+0x35c>
 8004ed6:	2300      	movs	r3, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ed8:	4945      	ldr	r1, [pc, #276]	; (8004ff0 <UART_SetConfig+0x474>)
 8004eda:	428a      	cmp	r2, r1
 8004edc:	f040 815e 	bne.w	800519c <UART_SetConfig+0x620>
    switch (clocksource)
 8004ee0:	1e9a      	subs	r2, r3, #2
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	2a1e      	cmp	r2, #30
 8004ee6:	f200 8135 	bhi.w	8005154 <UART_SetConfig+0x5d8>
 8004eea:	3b02      	subs	r3, #2
 8004eec:	2b1e      	cmp	r3, #30
 8004eee:	f200 8133 	bhi.w	8005158 <UART_SetConfig+0x5dc>
 8004ef2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ef6:	002d      	.short	0x002d
 8004ef8:	00320131 	.word	0x00320131
 8004efc:	01310131 	.word	0x01310131
 8004f00:	00370131 	.word	0x00370131
 8004f04:	01310131 	.word	0x01310131
 8004f08:	01310131 	.word	0x01310131
 8004f0c:	01310131 	.word	0x01310131
 8004f10:	003c0131 	.word	0x003c0131
 8004f14:	01310131 	.word	0x01310131
 8004f18:	01310131 	.word	0x01310131
 8004f1c:	01310131 	.word	0x01310131
 8004f20:	01310131 	.word	0x01310131
 8004f24:	01310131 	.word	0x01310131
 8004f28:	01310131 	.word	0x01310131
 8004f2c:	01310131 	.word	0x01310131
 8004f30:	00760131 	.word	0x00760131
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f34:	2300      	movs	r3, #0
 8004f36:	e7cf      	b.n	8004ed8 <UART_SetConfig+0x35c>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e7cd      	b.n	8004ed8 <UART_SetConfig+0x35c>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e7cb      	b.n	8004ed8 <UART_SetConfig+0x35c>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e7c9      	b.n	8004ed8 <UART_SetConfig+0x35c>
 8004f44:	2300      	movs	r3, #0
 8004f46:	e7c7      	b.n	8004ed8 <UART_SetConfig+0x35c>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e7c5      	b.n	8004ed8 <UART_SetConfig+0x35c>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e7c3      	b.n	8004ed8 <UART_SetConfig+0x35c>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f50:	f7ff f9dc 	bl	800430c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8004f54:	b9b0      	cbnz	r0, 8004f84 <UART_SetConfig+0x408>
 8004f56:	2000      	movs	r0, #0
 8004f58:	e0cc      	b.n	80050f4 <UART_SetConfig+0x578>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f5a:	a803      	add	r0, sp, #12
 8004f5c:	f7ff f9e8 	bl	8004330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f60:	9804      	ldr	r0, [sp, #16]
        break;
 8004f62:	e7f7      	b.n	8004f54 <UART_SetConfig+0x3d8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f64:	4668      	mov	r0, sp
 8004f66:	f7ff fae1 	bl	800452c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f6a:	9801      	ldr	r0, [sp, #4]
        break;
 8004f6c:	e7f2      	b.n	8004f54 <UART_SetConfig+0x3d8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f6e:	4b1f      	ldr	r3, [pc, #124]	; (8004fec <UART_SetConfig+0x470>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f013 0f20 	tst.w	r3, #32
 8004f76:	d036      	beq.n	8004fe6 <UART_SetConfig+0x46a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f78:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <UART_SetConfig+0x470>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004f80:	481c      	ldr	r0, [pc, #112]	; (8004ff4 <UART_SetConfig+0x478>)
 8004f82:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f86:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <UART_SetConfig+0x47c>)
 8004f88:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004f8c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f90:	6865      	ldr	r5, [r4, #4]
 8004f92:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004f96:	4299      	cmp	r1, r3
 8004f98:	f200 80e0 	bhi.w	800515c <UART_SetConfig+0x5e0>
 8004f9c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004fa0:	f200 80de 	bhi.w	8005160 <UART_SetConfig+0x5e4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fa4:	f04f 0800 	mov.w	r8, #0
 8004fa8:	b292      	uxth	r2, r2
 8004faa:	2300      	movs	r3, #0
 8004fac:	4641      	mov	r1, r8
 8004fae:	f7fb f9e7 	bl	8000380 <__aeabi_uldivmod>
 8004fb2:	020f      	lsls	r7, r1, #8
 8004fb4:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8004fb8:	0206      	lsls	r6, r0, #8
 8004fba:	0868      	lsrs	r0, r5, #1
 8004fbc:	462a      	mov	r2, r5
 8004fbe:	4643      	mov	r3, r8
 8004fc0:	1830      	adds	r0, r6, r0
 8004fc2:	f147 0100 	adc.w	r1, r7, #0
 8004fc6:	f7fb f9db 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fca:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <UART_SetConfig+0x480>)
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	f200 80c7 	bhi.w	8005164 <UART_SetConfig+0x5e8>
          huart->Instance->BRR = usartdiv;
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	60d8      	str	r0, [r3, #12]
 8004fda:	4640      	mov	r0, r8
 8004fdc:	e08a      	b.n	80050f4 <UART_SetConfig+0x578>
        pclk = (uint32_t) CSI_VALUE;
 8004fde:	4808      	ldr	r0, [pc, #32]	; (8005000 <UART_SetConfig+0x484>)
 8004fe0:	e7d0      	b.n	8004f84 <UART_SetConfig+0x408>
    switch (clocksource)
 8004fe2:	4807      	ldr	r0, [pc, #28]	; (8005000 <UART_SetConfig+0x484>)
 8004fe4:	e7ce      	b.n	8004f84 <UART_SetConfig+0x408>
          pclk = (uint32_t) HSI_VALUE;
 8004fe6:	4803      	ldr	r0, [pc, #12]	; (8004ff4 <UART_SetConfig+0x478>)
 8004fe8:	e7cc      	b.n	8004f84 <UART_SetConfig+0x408>
 8004fea:	bf00      	nop
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	58000c00 	.word	0x58000c00
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	080182b0 	.word	0x080182b0
 8004ffc:	000ffcff 	.word	0x000ffcff
 8005000:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8005004:	2b20      	cmp	r3, #32
 8005006:	d815      	bhi.n	8005034 <UART_SetConfig+0x4b8>
 8005008:	2b20      	cmp	r3, #32
 800500a:	f200 80ad 	bhi.w	8005168 <UART_SetConfig+0x5ec>
 800500e:	e8df f003 	tbb	[pc, r3]
 8005012:	3933      	.short	0x3933
 8005014:	ab3cabab 	.word	0xab3cabab
 8005018:	ab41abab 	.word	0xab41abab
 800501c:	abababab 	.word	0xabababab
 8005020:	ab46abab 	.word	0xab46abab
 8005024:	abababab 	.word	0xabababab
 8005028:	abababab 	.word	0xabababab
 800502c:	abababab 	.word	0xabababab
 8005030:	abab      	.short	0xabab
 8005032:	52          	.byte	0x52
 8005033:	00          	.byte	0x00
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d11d      	bne.n	8005074 <UART_SetConfig+0x4f8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005038:	6862      	ldr	r2, [r4, #4]
 800503a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800503c:	4b5a      	ldr	r3, [pc, #360]	; (80051a8 <UART_SetConfig+0x62c>)
 800503e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005042:	fbb0 f0f3 	udiv	r0, r0, r3
 8005046:	0853      	lsrs	r3, r2, #1
 8005048:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800504c:	fbb0 f0f2 	udiv	r0, r0, r2
 8005050:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005052:	f1a3 0110 	sub.w	r1, r3, #16
 8005056:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800505a:	4291      	cmp	r1, r2
 800505c:	f200 8086 	bhi.w	800516c <UART_SetConfig+0x5f0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005060:	f020 000f 	bic.w	r0, r0, #15
 8005064:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005066:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005068:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800506c:	4318      	orrs	r0, r3
 800506e:	60d0      	str	r0, [r2, #12]
 8005070:	2000      	movs	r0, #0
 8005072:	e03f      	b.n	80050f4 <UART_SetConfig+0x578>
    switch (clocksource)
 8005074:	2001      	movs	r0, #1
 8005076:	e03d      	b.n	80050f4 <UART_SetConfig+0x578>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fe fb12 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800507c:	2800      	cmp	r0, #0
 800507e:	d1db      	bne.n	8005038 <UART_SetConfig+0x4bc>
 8005080:	2000      	movs	r0, #0
 8005082:	e037      	b.n	80050f4 <UART_SetConfig+0x578>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe fb1e 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005088:	e7f8      	b.n	800507c <UART_SetConfig+0x500>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800508a:	a803      	add	r0, sp, #12
 800508c:	f7ff f950 	bl	8004330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005090:	9804      	ldr	r0, [sp, #16]
        break;
 8005092:	e7f3      	b.n	800507c <UART_SetConfig+0x500>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005094:	4668      	mov	r0, sp
 8005096:	f7ff fa49 	bl	800452c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800509a:	9801      	ldr	r0, [sp, #4]
        break;
 800509c:	e7ee      	b.n	800507c <UART_SetConfig+0x500>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800509e:	4b43      	ldr	r3, [pc, #268]	; (80051ac <UART_SetConfig+0x630>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f013 0f20 	tst.w	r3, #32
 80050a6:	d008      	beq.n	80050ba <UART_SetConfig+0x53e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050a8:	4b40      	ldr	r3, [pc, #256]	; (80051ac <UART_SetConfig+0x630>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80050b0:	483f      	ldr	r0, [pc, #252]	; (80051b0 <UART_SetConfig+0x634>)
 80050b2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80050b4:	e7c0      	b.n	8005038 <UART_SetConfig+0x4bc>
        pclk = (uint32_t) CSI_VALUE;
 80050b6:	483f      	ldr	r0, [pc, #252]	; (80051b4 <UART_SetConfig+0x638>)
 80050b8:	e7be      	b.n	8005038 <UART_SetConfig+0x4bc>
          pclk = (uint32_t) HSI_VALUE;
 80050ba:	483d      	ldr	r0, [pc, #244]	; (80051b0 <UART_SetConfig+0x634>)
 80050bc:	e7bc      	b.n	8005038 <UART_SetConfig+0x4bc>
    switch (clocksource)
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d117      	bne.n	80050f2 <UART_SetConfig+0x576>
 80050c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050ca:	4a37      	ldr	r2, [pc, #220]	; (80051a8 <UART_SetConfig+0x62c>)
 80050cc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80050d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80050d4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80050d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80050dc:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050de:	f1a0 0210 	sub.w	r2, r0, #16
 80050e2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d844      	bhi.n	8005174 <UART_SetConfig+0x5f8>
      {
        huart->Instance->BRR = usartdiv;
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	60d8      	str	r0, [r3, #12]
 80050ee:	2000      	movs	r0, #0
 80050f0:	e000      	b.n	80050f4 <UART_SetConfig+0x578>
    switch (clocksource)
 80050f2:	2001      	movs	r0, #1
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050fa:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005102:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8005104:	b006      	add	sp, #24
 8005106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800510a:	f7fe fac9 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800510e:	2800      	cmp	r0, #0
 8005110:	d1d9      	bne.n	80050c6 <UART_SetConfig+0x54a>
 8005112:	2000      	movs	r0, #0
 8005114:	e7ee      	b.n	80050f4 <UART_SetConfig+0x578>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005116:	f7fe fad5 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
        break;
 800511a:	e7f8      	b.n	800510e <UART_SetConfig+0x592>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800511c:	a803      	add	r0, sp, #12
 800511e:	f7ff f907 	bl	8004330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005122:	9804      	ldr	r0, [sp, #16]
        break;
 8005124:	e7f3      	b.n	800510e <UART_SetConfig+0x592>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005126:	4668      	mov	r0, sp
 8005128:	f7ff fa00 	bl	800452c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800512c:	9801      	ldr	r0, [sp, #4]
        break;
 800512e:	e7ee      	b.n	800510e <UART_SetConfig+0x592>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005130:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <UART_SetConfig+0x630>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f013 0f20 	tst.w	r3, #32
 8005138:	d008      	beq.n	800514c <UART_SetConfig+0x5d0>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800513a:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <UART_SetConfig+0x630>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005142:	481b      	ldr	r0, [pc, #108]	; (80051b0 <UART_SetConfig+0x634>)
 8005144:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8005146:	e7be      	b.n	80050c6 <UART_SetConfig+0x54a>
        pclk = (uint32_t) CSI_VALUE;
 8005148:	481a      	ldr	r0, [pc, #104]	; (80051b4 <UART_SetConfig+0x638>)
 800514a:	e7bc      	b.n	80050c6 <UART_SetConfig+0x54a>
          pclk = (uint32_t) HSI_VALUE;
 800514c:	4818      	ldr	r0, [pc, #96]	; (80051b0 <UART_SetConfig+0x634>)
 800514e:	e7ba      	b.n	80050c6 <UART_SetConfig+0x54a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005150:	2001      	movs	r0, #1
 8005152:	e7cf      	b.n	80050f4 <UART_SetConfig+0x578>
    switch (clocksource)
 8005154:	2001      	movs	r0, #1
 8005156:	e7cd      	b.n	80050f4 <UART_SetConfig+0x578>
 8005158:	2001      	movs	r0, #1
 800515a:	e7cb      	b.n	80050f4 <UART_SetConfig+0x578>
        ret = HAL_ERROR;
 800515c:	2001      	movs	r0, #1
 800515e:	e7c9      	b.n	80050f4 <UART_SetConfig+0x578>
 8005160:	2001      	movs	r0, #1
 8005162:	e7c7      	b.n	80050f4 <UART_SetConfig+0x578>
          ret = HAL_ERROR;
 8005164:	2001      	movs	r0, #1
 8005166:	e7c5      	b.n	80050f4 <UART_SetConfig+0x578>
 8005168:	2001      	movs	r0, #1
 800516a:	e7c3      	b.n	80050f4 <UART_SetConfig+0x578>
        ret = HAL_ERROR;
 800516c:	2001      	movs	r0, #1
 800516e:	e7c1      	b.n	80050f4 <UART_SetConfig+0x578>
    switch (clocksource)
 8005170:	2001      	movs	r0, #1
 8005172:	e7bf      	b.n	80050f4 <UART_SetConfig+0x578>
        ret = HAL_ERROR;
 8005174:	2001      	movs	r0, #1
 8005176:	e7bd      	b.n	80050f4 <UART_SetConfig+0x578>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005178:	2304      	movs	r3, #4
 800517a:	e584      	b.n	8004c86 <UART_SetConfig+0x10a>
 800517c:	2310      	movs	r3, #16
 800517e:	e582      	b.n	8004c86 <UART_SetConfig+0x10a>
 8005180:	2304      	movs	r3, #4
 8005182:	e580      	b.n	8004c86 <UART_SetConfig+0x10a>
 8005184:	2304      	movs	r3, #4
 8005186:	e57e      	b.n	8004c86 <UART_SetConfig+0x10a>
 8005188:	2304      	movs	r3, #4
 800518a:	e57c      	b.n	8004c86 <UART_SetConfig+0x10a>
 800518c:	2304      	movs	r3, #4
 800518e:	e57a      	b.n	8004c86 <UART_SetConfig+0x10a>
 8005190:	2304      	movs	r3, #4
 8005192:	e578      	b.n	8004c86 <UART_SetConfig+0x10a>
 8005194:	2304      	movs	r3, #4
 8005196:	e576      	b.n	8004c86 <UART_SetConfig+0x10a>
 8005198:	2304      	movs	r3, #4
 800519a:	e574      	b.n	8004c86 <UART_SetConfig+0x10a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519c:	69e2      	ldr	r2, [r4, #28]
 800519e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80051a2:	f47f ad75 	bne.w	8004c90 <UART_SetConfig+0x114>
 80051a6:	e72f      	b.n	8005008 <UART_SetConfig+0x48c>
 80051a8:	080182b0 	.word	0x080182b0
 80051ac:	58024400 	.word	0x58024400
 80051b0:	03d09000 	.word	0x03d09000
 80051b4:	003d0900 	.word	0x003d0900

080051b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051ba:	f013 0f01 	tst.w	r3, #1
 80051be:	d006      	beq.n	80051ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051c0:	6802      	ldr	r2, [r0, #0]
 80051c2:	6853      	ldr	r3, [r2, #4]
 80051c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051d0:	f013 0f02 	tst.w	r3, #2
 80051d4:	d006      	beq.n	80051e4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051d6:	6802      	ldr	r2, [r0, #0]
 80051d8:	6853      	ldr	r3, [r2, #4]
 80051da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051de:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051e6:	f013 0f04 	tst.w	r3, #4
 80051ea:	d006      	beq.n	80051fa <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ec:	6802      	ldr	r2, [r0, #0]
 80051ee:	6853      	ldr	r3, [r2, #4]
 80051f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80051f6:	430b      	orrs	r3, r1
 80051f8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051fc:	f013 0f08 	tst.w	r3, #8
 8005200:	d006      	beq.n	8005210 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005202:	6802      	ldr	r2, [r0, #0]
 8005204:	6853      	ldr	r3, [r2, #4]
 8005206:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800520a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800520c:	430b      	orrs	r3, r1
 800520e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005210:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005212:	f013 0f10 	tst.w	r3, #16
 8005216:	d006      	beq.n	8005226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005218:	6802      	ldr	r2, [r0, #0]
 800521a:	6893      	ldr	r3, [r2, #8]
 800521c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005220:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005222:	430b      	orrs	r3, r1
 8005224:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005226:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005228:	f013 0f20 	tst.w	r3, #32
 800522c:	d006      	beq.n	800523c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522e:	6802      	ldr	r2, [r0, #0]
 8005230:	6893      	ldr	r3, [r2, #8]
 8005232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005236:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005238:	430b      	orrs	r3, r1
 800523a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800523c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800523e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005244:	6802      	ldr	r2, [r0, #0]
 8005246:	6853      	ldr	r3, [r2, #4]
 8005248:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800524c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800524e:	430b      	orrs	r3, r1
 8005250:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005252:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005258:	d00b      	beq.n	8005272 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800525a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800525c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005260:	d006      	beq.n	8005270 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005262:	6802      	ldr	r2, [r0, #0]
 8005264:	6853      	ldr	r3, [r2, #4]
 8005266:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800526a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800526c:	430b      	orrs	r3, r1
 800526e:	6053      	str	r3, [r2, #4]
  }
}
 8005270:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005272:	6802      	ldr	r2, [r0, #0]
 8005274:	6853      	ldr	r3, [r2, #4]
 8005276:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800527a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800527c:	430b      	orrs	r3, r1
 800527e:	6053      	str	r3, [r2, #4]
 8005280:	e7eb      	b.n	800525a <UART_AdvFeatureConfig+0xa2>

08005282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005282:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005286:	4680      	mov	r8, r0
 8005288:	460e      	mov	r6, r1
 800528a:	4615      	mov	r5, r2
 800528c:	4699      	mov	r9, r3
 800528e:	9f08      	ldr	r7, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005290:	f8d8 2000 	ldr.w	r2, [r8]
 8005294:	69d4      	ldr	r4, [r2, #28]
 8005296:	ea36 0304 	bics.w	r3, r6, r4
 800529a:	bf0c      	ite	eq
 800529c:	2401      	moveq	r4, #1
 800529e:	2400      	movne	r4, #0
 80052a0:	42ac      	cmp	r4, r5
 80052a2:	d144      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0xac>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	f1b7 3fff 	cmp.w	r7, #4294967295
 80052a8:	d0f4      	beq.n	8005294 <UART_WaitOnFlagUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052aa:	f7fc f9dd 	bl	8001668 <HAL_GetTick>
 80052ae:	eba0 0009 	sub.w	r0, r0, r9
 80052b2:	42b8      	cmp	r0, r7
 80052b4:	d825      	bhi.n	8005302 <UART_WaitOnFlagUntilTimeout+0x80>
 80052b6:	b327      	cbz	r7, 8005302 <UART_WaitOnFlagUntilTimeout+0x80>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052b8:	f8d8 3000 	ldr.w	r3, [r8]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	f012 0f04 	tst.w	r2, #4
 80052c2:	d0e5      	beq.n	8005290 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80052ca:	d0e1      	beq.n	8005290 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80052d2:	f8d8 2000 	ldr.w	r2, [r8]
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052dc:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052de:	f8d8 2000 	ldr.w	r2, [r8]
 80052e2:	6893      	ldr	r3, [r2, #8]
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052ea:	2320      	movs	r3, #32
 80052ec:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052f0:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052f4:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f8:	2300      	movs	r3, #0
 80052fa:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80

          return HAL_TIMEOUT;
 80052fe:	2003      	movs	r0, #3
 8005300:	e016      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0xae>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005302:	f8d8 2000 	ldr.w	r2, [r8]
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800530c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	f8d8 2000 	ldr.w	r2, [r8]
 8005312:	6893      	ldr	r3, [r2, #8]
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800531a:	2320      	movs	r3, #32
 800531c:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005320:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005324:	2300      	movs	r3, #0
 8005326:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 800532a:	2003      	movs	r0, #3
 800532c:	e000      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0xae>
        }
      }
    }
  }
  return HAL_OK;
 800532e:	2000      	movs	r0, #0
}
 8005330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005334 <HAL_UART_Transmit>:
{
 8005334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800533c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005340:	2b20      	cmp	r3, #32
 8005342:	d15f      	bne.n	8005404 <HAL_UART_Transmit+0xd0>
 8005344:	4604      	mov	r4, r0
 8005346:	460d      	mov	r5, r1
 8005348:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800534a:	2900      	cmp	r1, #0
 800534c:	d05e      	beq.n	800540c <HAL_UART_Transmit+0xd8>
 800534e:	2a00      	cmp	r2, #0
 8005350:	d05c      	beq.n	800540c <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 8005352:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005356:	2b01      	cmp	r3, #1
 8005358:	d05a      	beq.n	8005410 <HAL_UART_Transmit+0xdc>
 800535a:	2301      	movs	r3, #1
 800535c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	2300      	movs	r3, #0
 8005362:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005366:	2321      	movs	r3, #33	; 0x21
 8005368:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 800536c:	f7fc f97c 	bl	8001668 <HAL_GetTick>
 8005370:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8005372:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8005376:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005380:	d00d      	beq.n	800539e <HAL_UART_Transmit+0x6a>
      pdata16bits = NULL;
 8005382:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8005386:	2300      	movs	r3, #0
 8005388:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 800538c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8005390:	b29b      	uxth	r3, r3
 8005392:	b35b      	cbz	r3, 80053ec <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005394:	f04f 0900 	mov.w	r9, #0
 8005398:	f04f 0880 	mov.w	r8, #128	; 0x80
 800539c:	e017      	b.n	80053ce <HAL_UART_Transmit+0x9a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	b913      	cbnz	r3, 80053a8 <HAL_UART_Transmit+0x74>
      pdata16bits = (uint16_t *) pData;
 80053a2:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80053a4:	2500      	movs	r5, #0
 80053a6:	e7ee      	b.n	8005386 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 80053a8:	f04f 0a00 	mov.w	sl, #0
 80053ac:	e7eb      	b.n	8005386 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80053b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80053ba:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 80053be:	3a01      	subs	r2, #1
 80053c0:	b292      	uxth	r2, r2
 80053c2:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053c6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	b173      	cbz	r3, 80053ec <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ce:	9600      	str	r6, [sp, #0]
 80053d0:	463b      	mov	r3, r7
 80053d2:	464a      	mov	r2, r9
 80053d4:	4641      	mov	r1, r8
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff ff53 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 80053dc:	b9d0      	cbnz	r0, 8005414 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 80053de:	2d00      	cmp	r5, #0
 80053e0:	d0e5      	beq.n	80053ae <HAL_UART_Transmit+0x7a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053ea:	e7e6      	b.n	80053ba <HAL_UART_Transmit+0x86>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ec:	9600      	str	r6, [sp, #0]
 80053ee:	463b      	mov	r3, r7
 80053f0:	2200      	movs	r2, #0
 80053f2:	2140      	movs	r1, #64	; 0x40
 80053f4:	4620      	mov	r0, r4
 80053f6:	f7ff ff44 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 80053fa:	b968      	cbnz	r0, 8005418 <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 80053fc:	2320      	movs	r3, #32
 80053fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8005402:	e000      	b.n	8005406 <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;
 8005404:	2002      	movs	r0, #2
}
 8005406:	b002      	add	sp, #8
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800540c:	2001      	movs	r0, #1
 800540e:	e7fa      	b.n	8005406 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8005410:	2002      	movs	r0, #2
 8005412:	e7f8      	b.n	8005406 <HAL_UART_Transmit+0xd2>
        return HAL_TIMEOUT;
 8005414:	2003      	movs	r0, #3
 8005416:	e7f6      	b.n	8005406 <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 8005418:	2003      	movs	r0, #3
 800541a:	e7f4      	b.n	8005406 <HAL_UART_Transmit+0xd2>

0800541c <UART_CheckIdleState>:
{
 800541c:	b530      	push	{r4, r5, lr}
 800541e:	b083      	sub	sp, #12
 8005420:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005422:	2300      	movs	r3, #0
 8005424:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005428:	f7fc f91e 	bl	8001668 <HAL_GetTick>
 800542c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f013 0f08 	tst.w	r3, #8
 8005436:	d10f      	bne.n	8005458 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f013 0f04 	tst.w	r3, #4
 8005440:	d118      	bne.n	8005474 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005442:	2320      	movs	r3, #32
 8005444:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544c:	2000      	movs	r0, #0
 800544e:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005450:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005454:	b003      	add	sp, #12
 8005456:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	4603      	mov	r3, r0
 8005460:	2200      	movs	r2, #0
 8005462:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005466:	4620      	mov	r0, r4
 8005468:	f7ff ff0b 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 800546c:	2800      	cmp	r0, #0
 800546e:	d0e3      	beq.n	8005438 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005470:	2003      	movs	r0, #3
 8005472:	e7ef      	b.n	8005454 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	462b      	mov	r3, r5
 800547c:	2200      	movs	r2, #0
 800547e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005482:	4620      	mov	r0, r4
 8005484:	f7ff fefd 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8005488:	2800      	cmp	r0, #0
 800548a:	d0da      	beq.n	8005442 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800548c:	2003      	movs	r0, #3
 800548e:	e7e1      	b.n	8005454 <UART_CheckIdleState+0x38>

08005490 <HAL_UART_Init>:
  if (huart == NULL)
 8005490:	b378      	cbz	r0, 80054f2 <HAL_UART_Init+0x62>
{
 8005492:	b510      	push	{r4, lr}
 8005494:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005496:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800549a:	b30b      	cbz	r3, 80054e0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800549c:	2324      	movs	r3, #36	; 0x24
 800549e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7ff fb65 	bl	8004b7c <UART_SetConfig>
 80054b2:	2801      	cmp	r0, #1
 80054b4:	d013      	beq.n	80054de <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054b8:	b9bb      	cbnz	r3, 80054ea <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	6853      	ldr	r3, [r2, #4]
 80054be:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80054c2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054c4:	6822      	ldr	r2, [r4, #0]
 80054c6:	6893      	ldr	r3, [r2, #8]
 80054c8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80054cc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	6813      	ldr	r3, [r2, #0]
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80054d8:	4620      	mov	r0, r4
 80054da:	f7ff ff9f 	bl	800541c <UART_CheckIdleState>
}
 80054de:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80054e0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80054e4:	f7fb fe3c 	bl	8001160 <HAL_UART_MspInit>
 80054e8:	e7d8      	b.n	800549c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80054ea:	4620      	mov	r0, r4
 80054ec:	f7ff fe64 	bl	80051b8 <UART_AdvFeatureConfig>
 80054f0:	e7e3      	b.n	80054ba <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80054f2:	2001      	movs	r0, #1
}
 80054f4:	4770      	bx	lr
	...

080054f8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80054fa:	b92b      	cbnz	r3, 8005508 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005502:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005506:	4770      	bx	lr
{
 8005508:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800550a:	6803      	ldr	r3, [r0, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800550e:	6899      	ldr	r1, [r3, #8]
 8005510:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005512:	4d0a      	ldr	r5, [pc, #40]	; (800553c <UARTEx_SetNbDataToProcess+0x44>)
 8005514:	5c6b      	ldrb	r3, [r5, r1]
 8005516:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 8005518:	4c09      	ldr	r4, [pc, #36]	; (8005540 <UARTEx_SetNbDataToProcess+0x48>)
 800551a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800551c:	fb93 f3f1 	sdiv	r3, r3, r1
 8005520:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005524:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8005528:	5cab      	ldrb	r3, [r5, r2]
 800552a:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800552c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800552e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005532:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005536:	bc30      	pop	{r4, r5}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	080182d0 	.word	0x080182d0
 8005540:	080182c8 	.word	0x080182c8

08005544 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005544:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005548:	2b01      	cmp	r3, #1
 800554a:	d018      	beq.n	800557e <HAL_UARTEx_DisableFifoMode+0x3a>
 800554c:	2301      	movs	r3, #1
 800554e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005552:	2324      	movs	r3, #36	; 0x24
 8005554:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005558:	6803      	ldr	r3, [r0, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800555c:	6819      	ldr	r1, [r3, #0]
 800555e:	f021 0101 	bic.w	r1, r1, #1
 8005562:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005564:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005568:	2300      	movs	r3, #0
 800556a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800556c:	6801      	ldr	r1, [r0, #0]
 800556e:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005570:	2220      	movs	r2, #32
 8005572:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005576:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800557a:	4618      	mov	r0, r3
 800557c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800557e:	2002      	movs	r0, #2
}
 8005580:	4770      	bx	lr

08005582 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005582:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005584:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005588:	2b01      	cmp	r3, #1
 800558a:	d01d      	beq.n	80055c8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800558c:	4604      	mov	r4, r0
 800558e:	2301      	movs	r3, #1
 8005590:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005594:	2324      	movs	r3, #36	; 0x24
 8005596:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800559a:	6803      	ldr	r3, [r0, #0]
 800559c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055a6:	6802      	ldr	r2, [r0, #0]
 80055a8:	6893      	ldr	r3, [r2, #8]
 80055aa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80055ae:	4319      	orrs	r1, r3
 80055b0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80055b2:	f7ff ffa1 	bl	80054f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80055ba:	2320      	movs	r3, #32
 80055bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80055c0:	2000      	movs	r0, #0
 80055c2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80055c8:	2002      	movs	r0, #2
 80055ca:	e7fc      	b.n	80055c6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080055cc <HAL_UARTEx_SetRxFifoThreshold>:
{
 80055cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80055ce:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d01d      	beq.n	8005612 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80055d6:	4604      	mov	r4, r0
 80055d8:	2301      	movs	r3, #1
 80055da:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80055de:	2324      	movs	r3, #36	; 0x24
 80055e0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e4:	6803      	ldr	r3, [r0, #0]
 80055e6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	f022 0201 	bic.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055f0:	6802      	ldr	r2, [r0, #0]
 80055f2:	6893      	ldr	r3, [r2, #8]
 80055f4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80055f8:	4319      	orrs	r1, r3
 80055fa:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80055fc:	f7ff ff7c 	bl	80054f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005604:	2320      	movs	r3, #32
 8005606:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800560a:	2000      	movs	r0, #0
 800560c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005610:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005612:	2002      	movs	r0, #2
 8005614:	e7fc      	b.n	8005610 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08005618 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005618:	680b      	ldr	r3, [r1, #0]
 800561a:	b9c3      	cbnz	r3, 800564e <FMC_SDRAM_Init+0x36>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800561c:	6802      	ldr	r2, [r0, #0]
 800561e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005622:	4013      	ands	r3, r2
 8005624:	684a      	ldr	r2, [r1, #4]
 8005626:	4313      	orrs	r3, r2
 8005628:	688a      	ldr	r2, [r1, #8]
 800562a:	4313      	orrs	r3, r2
 800562c:	68ca      	ldr	r2, [r1, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	690a      	ldr	r2, [r1, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	694a      	ldr	r2, [r1, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	698a      	ldr	r2, [r1, #24]
 800563a:	4313      	orrs	r3, r2
 800563c:	69ca      	ldr	r2, [r1, #28]
 800563e:	4313      	orrs	r3, r2
 8005640:	6a0a      	ldr	r2, [r1, #32]
 8005642:	4313      	orrs	r3, r2
 8005644:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005646:	4313      	orrs	r3, r2
 8005648:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800564a:	2000      	movs	r0, #0
 800564c:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800564e:	6803      	ldr	r3, [r0, #0]
 8005650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005654:	69ca      	ldr	r2, [r1, #28]
 8005656:	4313      	orrs	r3, r2
 8005658:	6a0a      	ldr	r2, [r1, #32]
 800565a:	4313      	orrs	r3, r2
 800565c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800565e:	4313      	orrs	r3, r2
 8005660:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005662:	6842      	ldr	r2, [r0, #4]
 8005664:	4b07      	ldr	r3, [pc, #28]	; (8005684 <FMC_SDRAM_Init+0x6c>)
 8005666:	4013      	ands	r3, r2
 8005668:	684a      	ldr	r2, [r1, #4]
 800566a:	4313      	orrs	r3, r2
 800566c:	688a      	ldr	r2, [r1, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	68ca      	ldr	r2, [r1, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	690a      	ldr	r2, [r1, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	694a      	ldr	r2, [r1, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	698a      	ldr	r2, [r1, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	6043      	str	r3, [r0, #4]
 8005682:	e7e2      	b.n	800564a <FMC_SDRAM_Init+0x32>
 8005684:	ffff8000 	.word	0xffff8000

08005688 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005688:	bb02      	cbnz	r2, 80056cc <FMC_SDRAM_Timing_Init+0x44>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800568a:	6883      	ldr	r3, [r0, #8]
 800568c:	684a      	ldr	r2, [r1, #4]
 800568e:	3a01      	subs	r2, #1
 8005690:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005694:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005698:	680a      	ldr	r2, [r1, #0]
 800569a:	3a01      	subs	r2, #1
 800569c:	4313      	orrs	r3, r2
 800569e:	688a      	ldr	r2, [r1, #8]
 80056a0:	3a01      	subs	r2, #1
 80056a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80056a6:	68ca      	ldr	r2, [r1, #12]
 80056a8:	3a01      	subs	r2, #1
 80056aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80056ae:	690a      	ldr	r2, [r1, #16]
 80056b0:	3a01      	subs	r2, #1
 80056b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056b6:	694a      	ldr	r2, [r1, #20]
 80056b8:	3a01      	subs	r2, #1
 80056ba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80056be:	698a      	ldr	r2, [r1, #24]
 80056c0:	3a01      	subs	r2, #1
 80056c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80056c6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80056c8:	2000      	movs	r0, #0
 80056ca:	4770      	bx	lr
{
 80056cc:	b410      	push	{r4}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80056ce:	6884      	ldr	r4, [r0, #8]
 80056d0:	68cb      	ldr	r3, [r1, #12]
 80056d2:	1e5a      	subs	r2, r3, #1
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <FMC_SDRAM_Timing_Init+0x94>)
 80056d6:	4023      	ands	r3, r4
 80056d8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80056dc:	694a      	ldr	r2, [r1, #20]
 80056de:	3a01      	subs	r2, #1
 80056e0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80056e4:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80056e6:	68c3      	ldr	r3, [r0, #12]
 80056e8:	684a      	ldr	r2, [r1, #4]
 80056ea:	3a01      	subs	r2, #1
 80056ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80056f0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80056f4:	680a      	ldr	r2, [r1, #0]
 80056f6:	3a01      	subs	r2, #1
 80056f8:	4313      	orrs	r3, r2
 80056fa:	688a      	ldr	r2, [r1, #8]
 80056fc:	3a01      	subs	r2, #1
 80056fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005702:	690a      	ldr	r2, [r1, #16]
 8005704:	3a01      	subs	r2, #1
 8005706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800570a:	698a      	ldr	r2, [r1, #24]
 800570c:	3a01      	subs	r2, #1
 800570e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005712:	60c3      	str	r3, [r0, #12]
}
 8005714:	2000      	movs	r0, #0
 8005716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	ff0f0fff 	.word	0xff0f0fff

08005720 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005720:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8005722:	6904      	ldr	r4, [r0, #16]
 8005724:	680b      	ldr	r3, [r1, #0]
 8005726:	684a      	ldr	r2, [r1, #4]
 8005728:	4313      	orrs	r3, r2
 800572a:	68ca      	ldr	r2, [r1, #12]
 800572c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8005730:	4a05      	ldr	r2, [pc, #20]	; (8005748 <FMC_SDRAM_SendCommand+0x28>)
 8005732:	4022      	ands	r2, r4
 8005734:	4313      	orrs	r3, r2
 8005736:	688a      	ldr	r2, [r1, #8]
 8005738:	3a01      	subs	r2, #1
 800573a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800573e:	6103      	str	r3, [r0, #16]
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8005740:	2000      	movs	r0, #0
 8005742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	ffc00000 	.word	0xffc00000

0800574c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800574c:	6942      	ldr	r2, [r0, #20]
 800574e:	4b03      	ldr	r3, [pc, #12]	; (800575c <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8005750:	4013      	ands	r3, r2
 8005752:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005756:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8005758:	2000      	movs	r0, #0
 800575a:	4770      	bx	lr
 800575c:	ffffc001 	.word	0xffffc001

08005760 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005760:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <SysTick_Handler+0x18>)
 8005764:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005766:	f001 fc7d 	bl	8007064 <xTaskGetSchedulerState>
 800576a:	2801      	cmp	r0, #1
 800576c:	d100      	bne.n	8005770 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800576e:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8005770:	f002 f868 	bl	8007844 <xPortSysTickHandler>
}
 8005774:	e7fb      	b.n	800576e <SysTick_Handler+0xe>
 8005776:	bf00      	nop
 8005778:	e000e010 	.word	0xe000e010

0800577c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800577c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005780:	b92b      	cbnz	r3, 800578e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <osKernelInitialize+0x20>)
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	b928      	cbnz	r0, 8005794 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005788:	2201      	movs	r2, #1
 800578a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800578c:	4770      	bx	lr
    stat = osErrorISR;
 800578e:	f06f 0005 	mvn.w	r0, #5
 8005792:	4770      	bx	lr
    } else {
      stat = osError;
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	240003a4 	.word	0x240003a4

080057a0 <osKernelStart>:
 80057a0:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80057a4:	b973      	cbnz	r3, 80057c4 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <osKernelStart+0x30>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10d      	bne.n	80057ca <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80057ae:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b0:	2400      	movs	r4, #0
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <osKernelStart+0x34>)
 80057b4:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <osKernelStart+0x30>)
 80057b8:	2202      	movs	r2, #2
 80057ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057bc:	f001 f990 	bl	8006ae0 <vTaskStartScheduler>
      stat = osOK;
 80057c0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80057c2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80057c4:	f06f 0005 	mvn.w	r0, #5
 80057c8:	4770      	bx	lr
      stat = osError;
 80057ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80057ce:	4770      	bx	lr
 80057d0:	240003a4 	.word	0x240003a4
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057da:	b087      	sub	sp, #28
 80057dc:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057de:	2200      	movs	r2, #0
 80057e0:	9205      	str	r2, [sp, #20]
 80057e2:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80057e6:	b320      	cbz	r0, 8005832 <osThreadNew+0x5a>
 80057e8:	bb1b      	cbnz	r3, 8005832 <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80057ea:	2c00      	cmp	r4, #0
 80057ec:	d02e      	beq.n	800584c <osThreadNew+0x74>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80057ee:	69a3      	ldr	r3, [r4, #24]
 80057f0:	b12b      	cbz	r3, 80057fe <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 80057f2:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057f4:	3b01      	subs	r3, #1
 80057f6:	2b37      	cmp	r3, #55	; 0x37
 80057f8:	d902      	bls.n	8005800 <osThreadNew+0x28>
        return (NULL);
 80057fa:	2000      	movs	r0, #0
 80057fc:	e01a      	b.n	8005834 <osThreadNew+0x5c>
 80057fe:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	f013 0f01 	tst.w	r3, #1
 8005806:	d130      	bne.n	800586a <osThreadNew+0x92>
      }

      if (attr->stack_size > 0U) {
 8005808:	6963      	ldr	r3, [r4, #20]
 800580a:	b1ab      	cbz	r3, 8005838 <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800580c:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 800580e:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005812:	68a6      	ldr	r6, [r4, #8]
 8005814:	b196      	cbz	r6, 800583c <osThreadNew+0x64>
 8005816:	68e7      	ldr	r7, [r4, #12]
 8005818:	2fbb      	cmp	r7, #187	; 0xbb
 800581a:	d90a      	bls.n	8005832 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800581c:	6924      	ldr	r4, [r4, #16]
 800581e:	b143      	cbz	r3, 8005832 <osThreadNew+0x5a>
 8005820:	b13c      	cbz	r4, 8005832 <osThreadNew+0x5a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005822:	9602      	str	r6, [sp, #8]
 8005824:	9401      	str	r4, [sp, #4]
 8005826:	9500      	str	r5, [sp, #0]
 8005828:	460b      	mov	r3, r1
 800582a:	4661      	mov	r1, ip
 800582c:	f001 f8ec 	bl	8006a08 <xTaskCreateStatic>
 8005830:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005832:	9805      	ldr	r0, [sp, #20]
}
 8005834:	b007      	add	sp, #28
 8005836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8005838:	2280      	movs	r2, #128	; 0x80
 800583a:	e7e8      	b.n	800580e <osThreadNew+0x36>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800583c:	68e3      	ldr	r3, [r4, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f7      	bne.n	8005832 <osThreadNew+0x5a>
      if (mem == 0) {
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f4      	bne.n	8005832 <osThreadNew+0x5a>
 8005848:	4664      	mov	r4, ip
 800584a:	e001      	b.n	8005850 <osThreadNew+0x78>
    prio  = (UBaseType_t)osPriorityNormal;
 800584c:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800584e:	2280      	movs	r2, #128	; 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005850:	ab05      	add	r3, sp, #20
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	9500      	str	r5, [sp, #0]
 8005856:	460b      	mov	r3, r1
 8005858:	b292      	uxth	r2, r2
 800585a:	4621      	mov	r1, r4
 800585c:	f001 f90e 	bl	8006a7c <xTaskCreate>
 8005860:	2801      	cmp	r0, #1
 8005862:	d0e6      	beq.n	8005832 <osThreadNew+0x5a>
            hTask = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	9305      	str	r3, [sp, #20]
 8005868:	e7e3      	b.n	8005832 <osThreadNew+0x5a>
        return (NULL);
 800586a:	2000      	movs	r0, #0
 800586c:	e7e2      	b.n	8005834 <osThreadNew+0x5c>

0800586e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800586e:	b508      	push	{r3, lr}
 8005870:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005874:	b933      	cbnz	r3, 8005884 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8005876:	b908      	cbnz	r0, 800587c <osDelay+0xe>
    stat = osOK;
 8005878:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800587a:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800587c:	f001 faa6 	bl	8006dcc <vTaskDelay>
    stat = osOK;
 8005880:	2000      	movs	r0, #0
 8005882:	e7fa      	b.n	800587a <osDelay+0xc>
    stat = osErrorISR;
 8005884:	f06f 0005 	mvn.w	r0, #5
 8005888:	e7f7      	b.n	800587a <osDelay+0xc>

0800588a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800588a:	b570      	push	{r4, r5, r6, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005892:	bb7b      	cbnz	r3, 80058f4 <osSemaphoreNew+0x6a>
 8005894:	460e      	mov	r6, r1
 8005896:	4614      	mov	r4, r2
 8005898:	b380      	cbz	r0, 80058fc <osSemaphoreNew+0x72>
 800589a:	4288      	cmp	r0, r1
 800589c:	d32e      	bcc.n	80058fc <osSemaphoreNew+0x72>
    mem = -1;

    if (attr != NULL) {
 800589e:	b37a      	cbz	r2, 8005900 <osSemaphoreNew+0x76>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058a0:	6895      	ldr	r5, [r2, #8]
 80058a2:	b125      	cbz	r5, 80058ae <osSemaphoreNew+0x24>
 80058a4:	68d3      	ldr	r3, [r2, #12]
 80058a6:	2b4f      	cmp	r3, #79	; 0x4f
 80058a8:	d839      	bhi.n	800591e <osSemaphoreNew+0x94>
  hSemaphore = NULL;
 80058aa:	2500      	movs	r5, #0
 80058ac:	e023      	b.n	80058f6 <osSemaphoreNew+0x6c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058ae:	68d3      	ldr	r3, [r2, #12]
 80058b0:	bb0b      	cbnz	r3, 80058f6 <osSemaphoreNew+0x6c>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80058b2:	2801      	cmp	r0, #1
 80058b4:	d126      	bne.n	8005904 <osSemaphoreNew+0x7a>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80058b6:	2203      	movs	r2, #3
 80058b8:	2100      	movs	r1, #0
 80058ba:	2001      	movs	r0, #1
 80058bc:	f000 fadb 	bl	8005e76 <xQueueGenericCreate>
 80058c0:	4605      	mov	r5, r0
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80058c2:	b31d      	cbz	r5, 800590c <osSemaphoreNew+0x82>
 80058c4:	b316      	cbz	r6, 800590c <osSemaphoreNew+0x82>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80058c6:	2300      	movs	r3, #0
 80058c8:	461a      	mov	r2, r3
 80058ca:	4619      	mov	r1, r3
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 fb3f 	bl	8005f50 <xQueueGenericSend>
 80058d2:	2801      	cmp	r0, #1
 80058d4:	d01c      	beq.n	8005910 <osSemaphoreNew+0x86>
            vSemaphoreDelete (hSemaphore);
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 feca 	bl	8006670 <vQueueDelete>
            hSemaphore = NULL;
 80058dc:	2500      	movs	r5, #0
 80058de:	e00a      	b.n	80058f6 <osSemaphoreNew+0x6c>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058e0:	2303      	movs	r3, #3
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	462b      	mov	r3, r5
 80058e6:	2200      	movs	r2, #0
 80058e8:	4611      	mov	r1, r2
 80058ea:	2001      	movs	r0, #1
 80058ec:	f000 fa72 	bl	8005dd4 <xQueueGenericCreateStatic>
 80058f0:	4605      	mov	r5, r0
 80058f2:	e7e6      	b.n	80058c2 <osSemaphoreNew+0x38>
  hSemaphore = NULL;
 80058f4:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80058f6:	4628      	mov	r0, r5
 80058f8:	b002      	add	sp, #8
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 80058fc:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 80058fe:	e7fa      	b.n	80058f6 <osSemaphoreNew+0x6c>
      if (max_count == 1U) {
 8005900:	2801      	cmp	r0, #1
 8005902:	d0d8      	beq.n	80058b6 <osSemaphoreNew+0x2c>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005904:	4631      	mov	r1, r6
 8005906:	f000 fb03 	bl	8005f10 <xQueueCreateCountingSemaphore>
 800590a:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 800590c:	2d00      	cmp	r5, #0
 800590e:	d0f2      	beq.n	80058f6 <osSemaphoreNew+0x6c>
        if (attr != NULL) {
 8005910:	b104      	cbz	r4, 8005914 <osSemaphoreNew+0x8a>
          name = attr->name;
 8005912:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8005914:	4621      	mov	r1, r4
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fe7e 	bl	8006618 <vQueueAddToRegistry>
 800591c:	e7eb      	b.n	80058f6 <osSemaphoreNew+0x6c>
      if (max_count == 1U) {
 800591e:	2801      	cmp	r0, #1
 8005920:	d0de      	beq.n	80058e0 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005922:	462a      	mov	r2, r5
 8005924:	f000 facf 	bl	8005ec6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8005928:	4605      	mov	r5, r0
 800592a:	2800      	cmp	r0, #0
 800592c:	d1f1      	bne.n	8005912 <osSemaphoreNew+0x88>
 800592e:	e7e2      	b.n	80058f6 <osSemaphoreNew+0x6c>

08005930 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005930:	b328      	cbz	r0, 800597e <osSemaphoreAcquire+0x4e>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005932:	b530      	push	{r4, r5, lr}
 8005934:	b083      	sub	sp, #12
 8005936:	460c      	mov	r4, r1
 8005938:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800593c:	b1a3      	cbz	r3, 8005968 <osSemaphoreAcquire+0x38>
    if (timeout != 0U) {
 800593e:	bb09      	cbnz	r1, 8005984 <osSemaphoreAcquire+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8005940:	2100      	movs	r1, #0
 8005942:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005944:	aa01      	add	r2, sp, #4
 8005946:	f000 fe13 	bl	8006570 <xQueueReceiveFromISR>
 800594a:	2801      	cmp	r0, #1
 800594c:	d11d      	bne.n	800598a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800594e:	9801      	ldr	r0, [sp, #4]
 8005950:	b140      	cbz	r0, 8005964 <osSemaphoreAcquire+0x34>
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <osSemaphoreAcquire+0x64>)
 8005954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005962:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005964:	b003      	add	sp, #12
 8005966:	bd30      	pop	{r4, r5, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005968:	f000 fd2a 	bl	80063c0 <xQueueSemaphoreTake>
 800596c:	2801      	cmp	r0, #1
 800596e:	d00f      	beq.n	8005990 <osSemaphoreAcquire+0x60>
        stat = osErrorResource;
 8005970:	2c00      	cmp	r4, #0
 8005972:	bf14      	ite	ne
 8005974:	f06f 0001 	mvnne.w	r0, #1
 8005978:	f06f 0002 	mvneq.w	r0, #2
 800597c:	e7f2      	b.n	8005964 <osSemaphoreAcquire+0x34>
    stat = osErrorParameter;
 800597e:	f06f 0003 	mvn.w	r0, #3
}
 8005982:	4770      	bx	lr
      stat = osErrorParameter;
 8005984:	f06f 0003 	mvn.w	r0, #3
 8005988:	e7ec      	b.n	8005964 <osSemaphoreAcquire+0x34>
        stat = osErrorResource;
 800598a:	f06f 0002 	mvn.w	r0, #2
 800598e:	e7e9      	b.n	8005964 <osSemaphoreAcquire+0x34>
  stat = osOK;
 8005990:	2000      	movs	r0, #0
 8005992:	e7e7      	b.n	8005964 <osSemaphoreAcquire+0x34>
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005998:	b318      	cbz	r0, 80059e2 <osSemaphoreRelease+0x4a>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800599a:	b510      	push	{r4, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80059a2:	b193      	cbz	r3, 80059ca <osSemaphoreRelease+0x32>
    yield = pdFALSE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80059a8:	a901      	add	r1, sp, #4
 80059aa:	f000 fbff 	bl	80061ac <xQueueGiveFromISR>
 80059ae:	2801      	cmp	r0, #1
 80059b0:	d11a      	bne.n	80059e8 <osSemaphoreRelease+0x50>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80059b2:	9801      	ldr	r0, [sp, #4]
 80059b4:	b198      	cbz	r0, 80059de <osSemaphoreRelease+0x46>
 80059b6:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <osSemaphoreRelease+0x58>)
 80059b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80059c6:	2000      	movs	r0, #0
 80059c8:	e009      	b.n	80059de <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80059ca:	2300      	movs	r3, #0
 80059cc:	461a      	mov	r2, r3
 80059ce:	4619      	mov	r1, r3
 80059d0:	f000 fabe 	bl	8005f50 <xQueueGenericSend>
      stat = osErrorResource;
 80059d4:	2801      	cmp	r0, #1
 80059d6:	bf0c      	ite	eq
 80059d8:	2000      	moveq	r0, #0
 80059da:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
 80059de:	b002      	add	sp, #8
 80059e0:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80059e2:	f06f 0003 	mvn.w	r0, #3
}
 80059e6:	4770      	bx	lr
      stat = osErrorResource;
 80059e8:	f06f 0002 	mvn.w	r0, #2
 80059ec:	e7f7      	b.n	80059de <osSemaphoreRelease+0x46>
 80059ee:	bf00      	nop
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80059fc:	bb6b      	cbnz	r3, 8005a5a <osMessageQueueNew+0x66>
 80059fe:	4614      	mov	r4, r2
 8005a00:	b378      	cbz	r0, 8005a62 <osMessageQueueNew+0x6e>
 8005a02:	b371      	cbz	r1, 8005a62 <osMessageQueueNew+0x6e>
    mem = -1;

    if (attr != NULL) {
 8005a04:	b39a      	cbz	r2, 8005a6e <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a06:	6895      	ldr	r5, [r2, #8]
 8005a08:	b15d      	cbz	r5, 8005a22 <osMessageQueueNew+0x2e>
 8005a0a:	68d3      	ldr	r3, [r2, #12]
 8005a0c:	2b4f      	cmp	r3, #79	; 0x4f
 8005a0e:	d92a      	bls.n	8005a66 <osMessageQueueNew+0x72>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a10:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a12:	b352      	cbz	r2, 8005a6a <osMessageQueueNew+0x76>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a14:	fb01 f300 	mul.w	r3, r1, r0
 8005a18:	6966      	ldr	r6, [r4, #20]
 8005a1a:	429e      	cmp	r6, r3
 8005a1c:	d214      	bcs.n	8005a48 <osMessageQueueNew+0x54>
  hQueue = NULL;
 8005a1e:	2500      	movs	r5, #0
 8005a20:	e01c      	b.n	8005a5c <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a22:	68d3      	ldr	r3, [r2, #12]
 8005a24:	b9d3      	cbnz	r3, 8005a5c <osMessageQueueNew+0x68>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a26:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a28:	b9c2      	cbnz	r2, 8005a5c <osMessageQueueNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8005a2a:	6963      	ldr	r3, [r4, #20]
 8005a2c:	b953      	cbnz	r3, 8005a44 <osMessageQueueNew+0x50>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f000 fa21 	bl	8005e76 <xQueueGenericCreate>
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a34:	4605      	mov	r5, r0
 8005a36:	b188      	cbz	r0, 8005a5c <osMessageQueueNew+0x68>
      if (attr != NULL) {
        name = attr->name;
 8005a38:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 fdeb 	bl	8006618 <vQueueAddToRegistry>
 8005a42:	e00b      	b.n	8005a5c <osMessageQueueNew+0x68>
  hQueue = NULL;
 8005a44:	4615      	mov	r5, r2
 8005a46:	e009      	b.n	8005a5c <osMessageQueueNew+0x68>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	f000 f9c1 	bl	8005dd4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8005a52:	4605      	mov	r5, r0
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d1ef      	bne.n	8005a38 <osMessageQueueNew+0x44>
 8005a58:	e000      	b.n	8005a5c <osMessageQueueNew+0x68>
  hQueue = NULL;
 8005a5a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	b002      	add	sp, #8
 8005a60:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8005a62:	2500      	movs	r5, #0
 8005a64:	e7fa      	b.n	8005a5c <osMessageQueueNew+0x68>
 8005a66:	2500      	movs	r5, #0
 8005a68:	e7f8      	b.n	8005a5c <osMessageQueueNew+0x68>
 8005a6a:	4615      	mov	r5, r2
  return ((osMessageQueueId_t)hQueue);
 8005a6c:	e7f6      	b.n	8005a5c <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f000 fa01 	bl	8005e76 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8005a74:	4605      	mov	r5, r0
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d0f0      	beq.n	8005a5c <osMessageQueueNew+0x68>
 8005a7a:	e7de      	b.n	8005a3a <osMessageQueueNew+0x46>

08005a7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	461c      	mov	r4, r3
 8005a82:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005a86:	b1d3      	cbz	r3, 8005abe <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a88:	3c00      	subs	r4, #0
 8005a8a:	bf18      	it	ne
 8005a8c:	2401      	movne	r4, #1
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	bf08      	it	eq
 8005a92:	2401      	moveq	r4, #1
 8005a94:	bb1c      	cbnz	r4, 8005ade <osMessageQueuePut+0x62>
 8005a96:	b310      	cbz	r0, 8005ade <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005a9c:	aa01      	add	r2, sp, #4
 8005a9e:	f000 fb1f 	bl	80060e0 <xQueueGenericSendFromISR>
 8005aa2:	2801      	cmp	r0, #1
 8005aa4:	d11e      	bne.n	8005ae4 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8005aa6:	9801      	ldr	r0, [sp, #4]
 8005aa8:	b1b8      	cbz	r0, 8005ada <osMessageQueuePut+0x5e>
 8005aaa:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <osMessageQueuePut+0x78>)
 8005aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005aba:	2000      	movs	r0, #0
 8005abc:	e00d      	b.n	8005ada <osMessageQueuePut+0x5e>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005abe:	b1a0      	cbz	r0, 8005aea <osMessageQueuePut+0x6e>
 8005ac0:	b199      	cbz	r1, 8005aea <osMessageQueuePut+0x6e>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	f000 fa43 	bl	8005f50 <xQueueGenericSend>
 8005aca:	2801      	cmp	r0, #1
 8005acc:	d010      	beq.n	8005af0 <osMessageQueuePut+0x74>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8005ace:	2c00      	cmp	r4, #0
 8005ad0:	bf14      	ite	ne
 8005ad2:	f06f 0001 	mvnne.w	r0, #1
 8005ad6:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8005ada:	b002      	add	sp, #8
 8005adc:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005ade:	f06f 0003 	mvn.w	r0, #3
 8005ae2:	e7fa      	b.n	8005ada <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005ae4:	f06f 0002 	mvn.w	r0, #2
 8005ae8:	e7f7      	b.n	8005ada <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005aea:	f06f 0003 	mvn.w	r0, #3
 8005aee:	e7f4      	b.n	8005ada <osMessageQueuePut+0x5e>
  stat = osOK;
 8005af0:	2000      	movs	r0, #0
 8005af2:	e7f2      	b.n	8005ada <osMessageQueuePut+0x5e>
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005af8:	b510      	push	{r4, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	461c      	mov	r4, r3
 8005afe:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005b02:	b1d3      	cbz	r3, 8005b3a <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b04:	3c00      	subs	r4, #0
 8005b06:	bf18      	it	ne
 8005b08:	2401      	movne	r4, #1
 8005b0a:	2900      	cmp	r1, #0
 8005b0c:	bf08      	it	eq
 8005b0e:	2401      	moveq	r4, #1
 8005b10:	bb14      	cbnz	r4, 8005b58 <osMessageQueueGet+0x60>
 8005b12:	b308      	cbz	r0, 8005b58 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b18:	aa01      	add	r2, sp, #4
 8005b1a:	f000 fd29 	bl	8006570 <xQueueReceiveFromISR>
 8005b1e:	2801      	cmp	r0, #1
 8005b20:	d11d      	bne.n	8005b5e <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8005b22:	9801      	ldr	r0, [sp, #4]
 8005b24:	b1b0      	cbz	r0, 8005b54 <osMessageQueueGet+0x5c>
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <osMessageQueueGet+0x78>)
 8005b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005b36:	2000      	movs	r0, #0
 8005b38:	e00c      	b.n	8005b54 <osMessageQueueGet+0x5c>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b3a:	b198      	cbz	r0, 8005b64 <osMessageQueueGet+0x6c>
 8005b3c:	b191      	cbz	r1, 8005b64 <osMessageQueueGet+0x6c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b3e:	4622      	mov	r2, r4
 8005b40:	f000 fb8c 	bl	800625c <xQueueReceive>
 8005b44:	2801      	cmp	r0, #1
 8005b46:	d010      	beq.n	8005b6a <osMessageQueueGet+0x72>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8005b48:	2c00      	cmp	r4, #0
 8005b4a:	bf14      	ite	ne
 8005b4c:	f06f 0001 	mvnne.w	r0, #1
 8005b50:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8005b54:	b002      	add	sp, #8
 8005b56:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005b58:	f06f 0003 	mvn.w	r0, #3
 8005b5c:	e7fa      	b.n	8005b54 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005b5e:	f06f 0002 	mvn.w	r0, #2
 8005b62:	e7f7      	b.n	8005b54 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005b64:	f06f 0003 	mvn.w	r0, #3
 8005b68:	e7f4      	b.n	8005b54 <osMessageQueueGet+0x5c>
  stat = osOK;
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e7f2      	b.n	8005b54 <osMessageQueueGet+0x5c>
 8005b6e:	bf00      	nop
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <vApplicationGetIdleTaskMemory+0x10>)
 8005b76:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b78:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <vApplicationGetIdleTaskMemory+0x14>)
 8005b7a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	6013      	str	r3, [r2, #0]
}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	240002e8 	.word	0x240002e8
 8005b88:	240000e8 	.word	0x240000e8

08005b8c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <vApplicationGetTimerTaskMemory+0x10>)
 8005b8e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <vApplicationGetTimerTaskMemory+0x14>)
 8005b92:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b98:	6013      	str	r3, [r2, #0]
}
 8005b9a:	4770      	bx	lr
 8005b9c:	240007a8 	.word	0x240007a8
 8005ba0:	240003a8 	.word	0x240003a8

08005ba4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba4:	f100 0308 	add.w	r3, r0, #8
 8005ba8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005baa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bae:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb8:	4770      	bx	lr

08005bba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bbe:	4770      	bx	lr

08005bc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bc0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bc2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bc8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bca:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bcc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005bce:	6803      	ldr	r3, [r0, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	6003      	str	r3, [r0, #0]
}
 8005bd4:	4770      	bx	lr

08005bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bd6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bd8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bda:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005bde:	d011      	beq.n	8005c04 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005be0:	f100 0308 	add.w	r3, r0, #8
 8005be4:	461c      	mov	r4, r3
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	42aa      	cmp	r2, r5
 8005bec:	d9fa      	bls.n	8005be4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bee:	6863      	ldr	r3, [r4, #4]
 8005bf0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bf2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bf4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bf6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bf8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005bfa:	6803      	ldr	r3, [r0, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	6003      	str	r3, [r0, #0]
}
 8005c00:	bc30      	pop	{r4, r5}
 8005c02:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c04:	6904      	ldr	r4, [r0, #16]
 8005c06:	e7f2      	b.n	8005bee <vListInsert+0x18>

08005c08 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c08:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c0a:	6841      	ldr	r1, [r0, #4]
 8005c0c:	6882      	ldr	r2, [r0, #8]
 8005c0e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c10:	6841      	ldr	r1, [r0, #4]
 8005c12:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	4282      	cmp	r2, r0
 8005c18:	d006      	beq.n	8005c28 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	3a01      	subs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c24:	6818      	ldr	r0, [r3, #0]
}
 8005c26:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c28:	6882      	ldr	r2, [r0, #8]
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	e7f5      	b.n	8005c1a <uxListRemove+0x12>

08005c2e <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c32:	f001 fd97 	bl	8007764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c36:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005c38:	f001 fdb6 	bl	80077a8 <vPortExitCritical>

	return xReturn;
}
 8005c3c:	fab4 f084 	clz	r0, r4
 8005c40:	0940      	lsrs	r0, r0, #5
 8005c42:	bd10      	pop	{r4, pc}

08005c44 <prvCopyDataToQueue>:
{
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4604      	mov	r4, r0
 8005c48:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c4a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c4c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005c4e:	b95a      	cbnz	r2, 8005c68 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c50:	6803      	ldr	r3, [r0, #0]
 8005c52:	b11b      	cbz	r3, 8005c5c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005c54:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c56:	3601      	adds	r6, #1
 8005c58:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c5c:	6880      	ldr	r0, [r0, #8]
 8005c5e:	f001 fa5b 	bl	8007118 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60a3      	str	r3, [r4, #8]
 8005c66:	e7f6      	b.n	8005c56 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005c68:	b96d      	cbnz	r5, 8005c86 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c6a:	6840      	ldr	r0, [r0, #4]
 8005c6c:	f011 fbc8 	bl	8017400 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c74:	4413      	add	r3, r2
 8005c76:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c78:	68a2      	ldr	r2, [r4, #8]
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d319      	bcc.n	8005cb2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8005c82:	4628      	mov	r0, r5
 8005c84:	e7e7      	b.n	8005c56 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c86:	68c0      	ldr	r0, [r0, #12]
 8005c88:	f011 fbba 	bl	8017400 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c8e:	4251      	negs	r1, r2
 8005c90:	68e3      	ldr	r3, [r4, #12]
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d202      	bcs.n	8005ca2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c9c:	68a3      	ldr	r3, [r4, #8]
 8005c9e:	440b      	add	r3, r1
 8005ca0:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ca2:	b10e      	cbz	r6, 8005ca8 <prvCopyDataToQueue+0x64>
 8005ca4:	2d02      	cmp	r5, #2
 8005ca6:	d001      	beq.n	8005cac <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e7d4      	b.n	8005c56 <prvCopyDataToQueue+0x12>
				--uxMessagesWaiting;
 8005cac:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005cae:	2000      	movs	r0, #0
 8005cb0:	e7d1      	b.n	8005c56 <prvCopyDataToQueue+0x12>
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	e7cf      	b.n	8005c56 <prvCopyDataToQueue+0x12>

08005cb6 <prvCopyDataFromQueue>:
{
 8005cb6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cb8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005cba:	b16a      	cbz	r2, 8005cd8 <prvCopyDataFromQueue+0x22>
{
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cc0:	68d9      	ldr	r1, [r3, #12]
 8005cc2:	4411      	add	r1, r2
 8005cc4:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc6:	689c      	ldr	r4, [r3, #8]
 8005cc8:	42a1      	cmp	r1, r4
 8005cca:	d301      	bcc.n	8005cd0 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cd0:	68d9      	ldr	r1, [r3, #12]
 8005cd2:	f011 fb95 	bl	8017400 <memcpy>
}
 8005cd6:	bd10      	pop	{r4, pc}
 8005cd8:	4770      	bx	lr

08005cda <prvUnlockQueue>:
{
 8005cda:	b570      	push	{r4, r5, r6, lr}
 8005cdc:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005cde:	f001 fd41 	bl	8007764 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005ce2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005ce6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce8:	2c00      	cmp	r4, #0
 8005cea:	dd0f      	ble.n	8005d0c <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cec:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005cf0:	e004      	b.n	8005cfc <prvUnlockQueue+0x22>
						vTaskMissedYield();
 8005cf2:	f001 f9b1 	bl	8007058 <vTaskMissedYield>
			--cTxLock;
 8005cf6:	3c01      	subs	r4, #1
 8005cf8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfa:	b13c      	cbz	r4, 8005d0c <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cfc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cfe:	b12b      	cbz	r3, 8005d0c <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d00:	4630      	mov	r0, r6
 8005d02:	f001 f915 	bl	8006f30 <xTaskRemoveFromEventList>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d0f5      	beq.n	8005cf6 <prvUnlockQueue+0x1c>
 8005d0a:	e7f2      	b.n	8005cf2 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005d0c:	23ff      	movs	r3, #255	; 0xff
 8005d0e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005d12:	f001 fd49 	bl	80077a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005d16:	f001 fd25 	bl	8007764 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005d1a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005d1e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d20:	2c00      	cmp	r4, #0
 8005d22:	dd0f      	ble.n	8005d44 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d24:	f105 0610 	add.w	r6, r5, #16
 8005d28:	e004      	b.n	8005d34 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8005d2a:	f001 f995 	bl	8007058 <vTaskMissedYield>
				--cRxLock;
 8005d2e:	3c01      	subs	r4, #1
 8005d30:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d32:	b13c      	cbz	r4, 8005d44 <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d34:	692b      	ldr	r3, [r5, #16]
 8005d36:	b12b      	cbz	r3, 8005d44 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f001 f8f9 	bl	8006f30 <xTaskRemoveFromEventList>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d0f5      	beq.n	8005d2e <prvUnlockQueue+0x54>
 8005d42:	e7f2      	b.n	8005d2a <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8005d44:	23ff      	movs	r3, #255	; 0xff
 8005d46:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005d4a:	f001 fd2d 	bl	80077a8 <vPortExitCritical>
}
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}

08005d50 <xQueueGenericReset>:
{
 8005d50:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005d52:	b1e0      	cbz	r0, 8005d8e <xQueueGenericReset+0x3e>
 8005d54:	460d      	mov	r5, r1
 8005d56:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005d58:	f001 fd04 	bl	8007764 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d62:	fb03 f301 	mul.w	r3, r3, r1
 8005d66:	18d0      	adds	r0, r2, r3
 8005d68:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d6e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d70:	1a5b      	subs	r3, r3, r1
 8005d72:	4413      	add	r3, r2
 8005d74:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d76:	23ff      	movs	r3, #255	; 0xff
 8005d78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005d80:	b9ed      	cbnz	r5, 8005dbe <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	b963      	cbnz	r3, 8005da0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005d86:	f001 fd0f 	bl	80077a8 <vPortExitCritical>
}
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005d9e:	e7fe      	b.n	8005d9e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005da0:	f104 0010 	add.w	r0, r4, #16
 8005da4:	f001 f8c4 	bl	8006f30 <xTaskRemoveFromEventList>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d0ec      	beq.n	8005d86 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005dac:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <xQueueGenericReset+0x80>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	e7e3      	b.n	8005d86 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dbe:	f104 0010 	add.w	r0, r4, #16
 8005dc2:	f7ff feef 	bl	8005ba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005dc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005dca:	f7ff feeb 	bl	8005ba4 <vListInitialise>
 8005dce:	e7da      	b.n	8005d86 <xQueueGenericReset+0x36>
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dd4:	b940      	cbnz	r0, 8005de8 <xQueueGenericCreateStatic+0x14>
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	e7fe      	b.n	8005de6 <xQueueGenericCreateStatic+0x12>
	{
 8005de8:	b510      	push	{r4, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	461c      	mov	r4, r3
 8005dee:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8005df0:	b154      	cbz	r4, 8005e08 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005df2:	b192      	cbz	r2, 8005e1a <xQueueGenericCreateStatic+0x46>
 8005df4:	b989      	cbnz	r1, 8005e1a <xQueueGenericCreateStatic+0x46>
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	e7fe      	b.n	8005e06 <xQueueGenericCreateStatic+0x32>
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e1a:	b94a      	cbnz	r2, 8005e30 <xQueueGenericCreateStatic+0x5c>
 8005e1c:	b141      	cbz	r1, 8005e30 <xQueueGenericCreateStatic+0x5c>
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	e7fe      	b.n	8005e2e <xQueueGenericCreateStatic+0x5a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e30:	2050      	movs	r0, #80	; 0x50
 8005e32:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e34:	9801      	ldr	r0, [sp, #4]
 8005e36:	2850      	cmp	r0, #80	; 0x50
 8005e38:	d008      	beq.n	8005e4c <xQueueGenericCreateStatic+0x78>
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	e7fe      	b.n	8005e4a <xQueueGenericCreateStatic+0x76>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e4c:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e54:	2900      	cmp	r1, #0
 8005e56:	bf08      	it	eq
 8005e58:	4622      	moveq	r2, r4
 8005e5a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005e5c:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e5e:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e60:	4601      	mov	r1, r0
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff ff74 	bl	8005d50 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005e68:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005e6c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005e70:	4620      	mov	r0, r4
 8005e72:	b002      	add	sp, #8
 8005e74:	bd10      	pop	{r4, pc}

08005e76 <xQueueGenericCreate>:
	{
 8005e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e78:	b940      	cbnz	r0, 8005e8c <xQueueGenericCreate+0x16>
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	e7fe      	b.n	8005e8a <xQueueGenericCreate+0x14>
 8005e8c:	460d      	mov	r5, r1
 8005e8e:	4616      	mov	r6, r2
 8005e90:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e92:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e96:	3050      	adds	r0, #80	; 0x50
 8005e98:	f001 fdea 	bl	8007a70 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	b170      	cbz	r0, 8005ebe <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ea6:	b165      	cbz	r5, 8005ec2 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea8:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005eac:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005eae:	63e7      	str	r7, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005eb0:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff ff4b 	bl	8005d50 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005eba:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	}
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	e7f2      	b.n	8005eac <xQueueGenericCreate+0x36>

08005ec6 <xQueueCreateCountingSemaphoreStatic>:
	{
 8005ec6:	b530      	push	{r4, r5, lr}
 8005ec8:	b083      	sub	sp, #12
		configASSERT( uxMaxCount != 0 );
 8005eca:	b940      	cbnz	r0, 8005ede <xQueueCreateCountingSemaphoreStatic+0x18>
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	e7fe      	b.n	8005edc <xQueueCreateCountingSemaphoreStatic+0x16>
 8005ede:	460c      	mov	r4, r1
 8005ee0:	4613      	mov	r3, r2
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ee2:	4288      	cmp	r0, r1
 8005ee4:	d208      	bcs.n	8005ef8 <xQueueCreateCountingSemaphoreStatic+0x32>
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	e7fe      	b.n	8005ef6 <xQueueCreateCountingSemaphoreStatic+0x30>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ef8:	2202      	movs	r2, #2
 8005efa:	9200      	str	r2, [sp, #0]
 8005efc:	2200      	movs	r2, #0
 8005efe:	4611      	mov	r1, r2
 8005f00:	f7ff ff68 	bl	8005dd4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005f04:	4603      	mov	r3, r0
 8005f06:	b100      	cbz	r0, 8005f0a <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f08:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	b003      	add	sp, #12
 8005f0e:	bd30      	pop	{r4, r5, pc}

08005f10 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8005f10:	b940      	cbnz	r0, 8005f24 <xQueueCreateCountingSemaphore+0x14>
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	e7fe      	b.n	8005f22 <xQueueCreateCountingSemaphore+0x12>
	{
 8005f24:	b510      	push	{r4, lr}
 8005f26:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f28:	4288      	cmp	r0, r1
 8005f2a:	d208      	bcs.n	8005f3e <xQueueCreateCountingSemaphore+0x2e>
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	e7fe      	b.n	8005f3c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f3e:	2202      	movs	r2, #2
 8005f40:	2100      	movs	r1, #0
 8005f42:	f7ff ff98 	bl	8005e76 <xQueueGenericCreate>
		if( xHandle != NULL )
 8005f46:	4603      	mov	r3, r0
 8005f48:	b100      	cbz	r0, 8005f4c <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f4a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	bd10      	pop	{r4, pc}

08005f50 <xQueueGenericSend>:
{
 8005f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005f58:	b188      	cbz	r0, 8005f7e <xQueueGenericSend+0x2e>
 8005f5a:	460e      	mov	r6, r1
 8005f5c:	461d      	mov	r5, r3
 8005f5e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f60:	b1b1      	cbz	r1, 8005f90 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f62:	2d02      	cmp	r5, #2
 8005f64:	d120      	bne.n	8005fa8 <xQueueGenericSend+0x58>
 8005f66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d01d      	beq.n	8005fa8 <xQueueGenericSend+0x58>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	e7fe      	b.n	8005f7c <xQueueGenericSend+0x2c>
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005f8e:	e7fe      	b.n	8005f8e <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0e5      	beq.n	8005f62 <xQueueGenericSend+0x12>
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	e7fe      	b.n	8005fa6 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa8:	f001 f85c 	bl	8007064 <xTaskGetSchedulerState>
 8005fac:	b950      	cbnz	r0, 8005fc4 <xQueueGenericSend+0x74>
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	b173      	cbz	r3, 8005fd0 <xQueueGenericSend+0x80>
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	e7fe      	b.n	8005fc2 <xQueueGenericSend+0x72>
 8005fc4:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 8005fc6:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8005fca:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80060dc <xQueueGenericSend+0x18c>
 8005fce:	e03a      	b.n	8006046 <xQueueGenericSend+0xf6>
 8005fd0:	2700      	movs	r7, #0
 8005fd2:	e7f8      	b.n	8005fc6 <xQueueGenericSend+0x76>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f7ff fe33 	bl	8005c44 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005fe0:	b972      	cbnz	r2, 8006000 <xQueueGenericSend+0xb0>
					else if( xYieldRequired != pdFALSE )
 8005fe2:	b138      	cbz	r0, 8005ff4 <xQueueGenericSend+0xa4>
						queueYIELD_IF_USING_PREEMPTION();
 8005fe4:	4b3d      	ldr	r3, [pc, #244]	; (80060dc <xQueueGenericSend+0x18c>)
 8005fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005ff4:	f001 fbd8 	bl	80077a8 <vPortExitCritical>
				return pdPASS;
 8005ff8:	2001      	movs	r0, #1
}
 8005ffa:	b004      	add	sp, #16
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006000:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006004:	f000 ff94 	bl	8006f30 <xTaskRemoveFromEventList>
 8006008:	2800      	cmp	r0, #0
 800600a:	d0f3      	beq.n	8005ff4 <xQueueGenericSend+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
 800600c:	4b33      	ldr	r3, [pc, #204]	; (80060dc <xQueueGenericSend+0x18c>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	e7ea      	b.n	8005ff4 <xQueueGenericSend+0xa4>
					taskEXIT_CRITICAL();
 800601e:	f001 fbc3 	bl	80077a8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006022:	2000      	movs	r0, #0
 8006024:	e7e9      	b.n	8005ffa <xQueueGenericSend+0xaa>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006026:	a802      	add	r0, sp, #8
 8006028:	f000 ffc8 	bl	8006fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800602c:	e018      	b.n	8006060 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800602e:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8006032:	e021      	b.n	8006078 <xQueueGenericSend+0x128>
 8006034:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8006038:	e024      	b.n	8006084 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800603a:	4620      	mov	r0, r4
 800603c:	f7ff fe4d 	bl	8005cda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006040:	f000 fe42 	bl	8006cc8 <xTaskResumeAll>
 8006044:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8006046:	f001 fb8d 	bl	8007764 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800604a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800604c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800604e:	429a      	cmp	r2, r3
 8006050:	d3c0      	bcc.n	8005fd4 <xQueueGenericSend+0x84>
 8006052:	2d02      	cmp	r5, #2
 8006054:	d0be      	beq.n	8005fd4 <xQueueGenericSend+0x84>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0e0      	beq.n	800601e <xQueueGenericSend+0xce>
				else if( xEntryTimeSet == pdFALSE )
 800605c:	2f00      	cmp	r7, #0
 800605e:	d0e2      	beq.n	8006026 <xQueueGenericSend+0xd6>
		taskEXIT_CRITICAL();
 8006060:	f001 fba2 	bl	80077a8 <vPortExitCritical>
		vTaskSuspendAll();
 8006064:	f000 fd8a 	bl	8006b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006068:	f001 fb7c 	bl	8007764 <vPortEnterCritical>
 800606c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006070:	b25b      	sxtb	r3, r3
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d0da      	beq.n	800602e <xQueueGenericSend+0xde>
 8006078:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800607c:	b25b      	sxtb	r3, r3
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006082:	d0d7      	beq.n	8006034 <xQueueGenericSend+0xe4>
 8006084:	f001 fb90 	bl	80077a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006088:	a901      	add	r1, sp, #4
 800608a:	a802      	add	r0, sp, #8
 800608c:	f000 ffa2 	bl	8006fd4 <xTaskCheckForTimeOut>
 8006090:	b9e8      	cbnz	r0, 80060ce <xQueueGenericSend+0x17e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006092:	f001 fb67 	bl	8007764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006096:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 800609a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800609c:	f001 fb84 	bl	80077a8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060a0:	45ba      	cmp	sl, r7
 80060a2:	d1ca      	bne.n	800603a <xQueueGenericSend+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060a4:	9901      	ldr	r1, [sp, #4]
 80060a6:	f104 0010 	add.w	r0, r4, #16
 80060aa:	f000 ff0b 	bl	8006ec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7ff fe13 	bl	8005cda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060b4:	f000 fe08 	bl	8006cc8 <xTaskResumeAll>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d1c3      	bne.n	8006044 <xQueueGenericSend+0xf4>
					portYIELD_WITHIN_API();
 80060bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060c0:	f8c9 3000 	str.w	r3, [r9]
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	e7ba      	b.n	8006044 <xQueueGenericSend+0xf4>
			prvUnlockQueue( pxQueue );
 80060ce:	4620      	mov	r0, r4
 80060d0:	f7ff fe03 	bl	8005cda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060d4:	f000 fdf8 	bl	8006cc8 <xTaskResumeAll>
			return errQUEUE_FULL;
 80060d8:	2000      	movs	r0, #0
 80060da:	e78e      	b.n	8005ffa <xQueueGenericSend+0xaa>
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <xQueueGenericSendFromISR>:
{
 80060e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80060e4:	b190      	cbz	r0, 800610c <xQueueGenericSendFromISR+0x2c>
 80060e6:	4689      	mov	r9, r1
 80060e8:	4690      	mov	r8, r2
 80060ea:	461f      	mov	r7, r3
 80060ec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ee:	b1b1      	cbz	r1, 800611e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060f0:	2f02      	cmp	r7, #2
 80060f2:	d120      	bne.n	8006136 <xQueueGenericSendFromISR+0x56>
 80060f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d01d      	beq.n	8006136 <xQueueGenericSendFromISR+0x56>
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	e7fe      	b.n	800610a <xQueueGenericSendFromISR+0x2a>
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800611c:	e7fe      	b.n	800611c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800611e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0e5      	beq.n	80060f0 <xQueueGenericSendFromISR+0x10>
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	e7fe      	b.n	8006134 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006136:	f001 fc41 	bl	80079bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800613a:	f3ef 8611 	mrs	r6, BASEPRI
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800614e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006152:	429a      	cmp	r2, r3
 8006154:	d306      	bcc.n	8006164 <xQueueGenericSendFromISR+0x84>
 8006156:	2f02      	cmp	r7, #2
 8006158:	d004      	beq.n	8006164 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800615a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800615c:	f386 8811 	msr	BASEPRI, r6
}
 8006160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8006164:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8006168:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800616a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800616c:	463a      	mov	r2, r7
 800616e:	4649      	mov	r1, r9
 8006170:	4620      	mov	r0, r4
 8006172:	f7ff fd67 	bl	8005c44 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006176:	f1b5 3fff 	cmp.w	r5, #4294967295
 800617a:	d005      	beq.n	8006188 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800617c:	1c6b      	adds	r3, r5, #1
 800617e:	b25b      	sxtb	r3, r3
 8006180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8006184:	2001      	movs	r0, #1
 8006186:	e7e9      	b.n	800615c <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800618a:	b90b      	cbnz	r3, 8006190 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 800618c:	2001      	movs	r0, #1
 800618e:	e7e5      	b.n	800615c <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006190:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006194:	f000 fecc 	bl	8006f30 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8006198:	f1b8 0f00 	cmp.w	r8, #0
 800619c:	d004      	beq.n	80061a8 <xQueueGenericSendFromISR+0xc8>
 800619e:	b118      	cbz	r0, 80061a8 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061a0:	2001      	movs	r0, #1
 80061a2:	f8c8 0000 	str.w	r0, [r8]
 80061a6:	e7d9      	b.n	800615c <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80061a8:	2001      	movs	r0, #1
 80061aa:	e7d7      	b.n	800615c <xQueueGenericSendFromISR+0x7c>

080061ac <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80061ac:	b168      	cbz	r0, 80061ca <xQueueGiveFromISR+0x1e>
{
 80061ae:	b570      	push	{r4, r5, r6, lr}
 80061b0:	460e      	mov	r6, r1
 80061b2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80061b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80061b6:	b18b      	cbz	r3, 80061dc <xQueueGiveFromISR+0x30>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	e7fe      	b.n	80061c8 <xQueueGiveFromISR+0x1c>
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80061da:	e7fe      	b.n	80061da <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80061dc:	6803      	ldr	r3, [r0, #0]
 80061de:	b1eb      	cbz	r3, 800621c <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061e0:	f001 fbec 	bl	80079bc <vPortValidateInterruptPriority>
	__asm volatile
 80061e4:	f3ef 8511 	mrs	r5, BASEPRI
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80061fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d926      	bls.n	800624e <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006200:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006204:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006206:	3201      	adds	r2, #1
 8006208:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d011      	beq.n	8006234 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006210:	3301      	adds	r3, #1
 8006212:	b25b      	sxtb	r3, r3
 8006214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8006218:	2001      	movs	r0, #1
 800621a:	e019      	b.n	8006250 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800621c:	6883      	ldr	r3, [r0, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0de      	beq.n	80061e0 <xQueueGiveFromISR+0x34>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	e7fe      	b.n	8006232 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006236:	b90b      	cbnz	r3, 800623c <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8006238:	2001      	movs	r0, #1
 800623a:	e009      	b.n	8006250 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800623c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006240:	f000 fe76 	bl	8006f30 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8006244:	b13e      	cbz	r6, 8006256 <xQueueGiveFromISR+0xaa>
 8006246:	b130      	cbz	r0, 8006256 <xQueueGiveFromISR+0xaa>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006248:	2001      	movs	r0, #1
 800624a:	6030      	str	r0, [r6, #0]
 800624c:	e000      	b.n	8006250 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800624e:	2000      	movs	r0, #0
	__asm volatile
 8006250:	f385 8811 	msr	BASEPRI, r5
}
 8006254:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8006256:	2001      	movs	r0, #1
 8006258:	e7fa      	b.n	8006250 <xQueueGiveFromISR+0xa4>
	...

0800625c <xQueueReceive>:
{
 800625c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006260:	b085      	sub	sp, #20
 8006262:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006264:	b180      	cbz	r0, 8006288 <xQueueReceive+0x2c>
 8006266:	460e      	mov	r6, r1
 8006268:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800626a:	b1b1      	cbz	r1, 800629a <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800626c:	f000 fefa 	bl	8007064 <xTaskGetSchedulerState>
 8006270:	b9f8      	cbnz	r0, 80062b2 <xQueueReceive+0x56>
 8006272:	9b01      	ldr	r3, [sp, #4]
 8006274:	b31b      	cbz	r3, 80062be <xQueueReceive+0x62>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	e7fe      	b.n	8006286 <xQueueReceive+0x2a>
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006298:	e7fe      	b.n	8006298 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800629a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0e5      	beq.n	800626c <xQueueReceive+0x10>
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	e7fe      	b.n	80062b0 <xQueueReceive+0x54>
 80062b2:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 80062b4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80062b8:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80063bc <xQueueReceive+0x160>
 80062bc:	e03d      	b.n	800633a <xQueueReceive+0xde>
 80062be:	2700      	movs	r7, #0
 80062c0:	e7f8      	b.n	80062b4 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062c2:	4631      	mov	r1, r6
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff fcf6 	bl	8005cb6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062ca:	3d01      	subs	r5, #1
 80062cc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ce:	6923      	ldr	r3, [r4, #16]
 80062d0:	b92b      	cbnz	r3, 80062de <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 80062d2:	f001 fa69 	bl	80077a8 <vPortExitCritical>
				return pdPASS;
 80062d6:	2001      	movs	r0, #1
}
 80062d8:	b005      	add	sp, #20
 80062da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062de:	f104 0010 	add.w	r0, r4, #16
 80062e2:	f000 fe25 	bl	8006f30 <xTaskRemoveFromEventList>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d0f3      	beq.n	80062d2 <xQueueReceive+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 80062ea:	4b34      	ldr	r3, [pc, #208]	; (80063bc <xQueueReceive+0x160>)
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	e7ea      	b.n	80062d2 <xQueueReceive+0x76>
					taskEXIT_CRITICAL();
 80062fc:	f001 fa54 	bl	80077a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006300:	2000      	movs	r0, #0
 8006302:	e7e9      	b.n	80062d8 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006304:	a802      	add	r0, sp, #8
 8006306:	f000 fe59 	bl	8006fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800630a:	e020      	b.n	800634e <xQueueReceive+0xf2>
		prvLockQueue( pxQueue );
 800630c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8006310:	e029      	b.n	8006366 <xQueueReceive+0x10a>
 8006312:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8006316:	e02c      	b.n	8006372 <xQueueReceive+0x116>
				prvUnlockQueue( pxQueue );
 8006318:	4620      	mov	r0, r4
 800631a:	f7ff fcde 	bl	8005cda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800631e:	f000 fcd3 	bl	8006cc8 <xTaskResumeAll>
 8006322:	e009      	b.n	8006338 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 8006324:	4620      	mov	r0, r4
 8006326:	f7ff fcd8 	bl	8005cda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800632a:	f000 fccd 	bl	8006cc8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff fc7d 	bl	8005c2e <prvIsQueueEmpty>
 8006334:	2800      	cmp	r0, #0
 8006336:	d13e      	bne.n	80063b6 <xQueueReceive+0x15a>
 8006338:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800633a:	f001 fa13 	bl	8007764 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800633e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006340:	2d00      	cmp	r5, #0
 8006342:	d1be      	bne.n	80062c2 <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006344:	9b01      	ldr	r3, [sp, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0d8      	beq.n	80062fc <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800634a:	2f00      	cmp	r7, #0
 800634c:	d0da      	beq.n	8006304 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
 800634e:	f001 fa2b 	bl	80077a8 <vPortExitCritical>
		vTaskSuspendAll();
 8006352:	f000 fc13 	bl	8006b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006356:	f001 fa05 	bl	8007764 <vPortEnterCritical>
 800635a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800635e:	b25b      	sxtb	r3, r3
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d0d2      	beq.n	800630c <xQueueReceive+0xb0>
 8006366:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800636a:	b25b      	sxtb	r3, r3
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d0cf      	beq.n	8006312 <xQueueReceive+0xb6>
 8006372:	f001 fa19 	bl	80077a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006376:	a901      	add	r1, sp, #4
 8006378:	a802      	add	r0, sp, #8
 800637a:	f000 fe2b 	bl	8006fd4 <xTaskCheckForTimeOut>
 800637e:	2800      	cmp	r0, #0
 8006380:	d1d0      	bne.n	8006324 <xQueueReceive+0xc8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006382:	4620      	mov	r0, r4
 8006384:	f7ff fc53 	bl	8005c2e <prvIsQueueEmpty>
 8006388:	2800      	cmp	r0, #0
 800638a:	d0c5      	beq.n	8006318 <xQueueReceive+0xbc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800638c:	9901      	ldr	r1, [sp, #4]
 800638e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006392:	f000 fd97 	bl	8006ec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006396:	4620      	mov	r0, r4
 8006398:	f7ff fc9f 	bl	8005cda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800639c:	f000 fc94 	bl	8006cc8 <xTaskResumeAll>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d1c9      	bne.n	8006338 <xQueueReceive+0xdc>
					portYIELD_WITHIN_API();
 80063a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063a8:	f8c9 3000 	str.w	r3, [r9]
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	e7c0      	b.n	8006338 <xQueueReceive+0xdc>
				return errQUEUE_EMPTY;
 80063b6:	2000      	movs	r0, #0
 80063b8:	e78e      	b.n	80062d8 <xQueueReceive+0x7c>
 80063ba:	bf00      	nop
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <xQueueSemaphoreTake>:
{
 80063c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80063c8:	b158      	cbz	r0, 80063e2 <xQueueSemaphoreTake+0x22>
 80063ca:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80063cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063ce:	b18b      	cbz	r3, 80063f4 <xQueueSemaphoreTake+0x34>
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	e7fe      	b.n	80063e0 <xQueueSemaphoreTake+0x20>
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80063f2:	e7fe      	b.n	80063f2 <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063f4:	f000 fe36 	bl	8007064 <xTaskGetSchedulerState>
 80063f8:	b950      	cbnz	r0, 8006410 <xQueueSemaphoreTake+0x50>
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	b173      	cbz	r3, 800641c <xQueueSemaphoreTake+0x5c>
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	e7fe      	b.n	800640e <xQueueSemaphoreTake+0x4e>
 8006410:	2500      	movs	r5, #0
 8006412:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006414:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8006416:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800656c <xQueueSemaphoreTake+0x1ac>
 800641a:	e053      	b.n	80064c4 <xQueueSemaphoreTake+0x104>
 800641c:	2500      	movs	r5, #0
 800641e:	462e      	mov	r6, r5
 8006420:	e7f8      	b.n	8006414 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006422:	3b01      	subs	r3, #1
 8006424:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	b143      	cbz	r3, 800643c <xQueueSemaphoreTake+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	b953      	cbnz	r3, 8006444 <xQueueSemaphoreTake+0x84>
				taskEXIT_CRITICAL();
 800642e:	f001 f9bb 	bl	80077a8 <vPortExitCritical>
				return pdPASS;
 8006432:	2501      	movs	r5, #1
}
 8006434:	4628      	mov	r0, r5
 8006436:	b004      	add	sp, #16
 8006438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800643c:	f000 ff04 	bl	8007248 <pvTaskIncrementMutexHeldCount>
 8006440:	60a0      	str	r0, [r4, #8]
 8006442:	e7f2      	b.n	800642a <xQueueSemaphoreTake+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006444:	f104 0010 	add.w	r0, r4, #16
 8006448:	f000 fd72 	bl	8006f30 <xTaskRemoveFromEventList>
 800644c:	2800      	cmp	r0, #0
 800644e:	d0ee      	beq.n	800642e <xQueueSemaphoreTake+0x6e>
						queueYIELD_IF_USING_PREEMPTION();
 8006450:	4b46      	ldr	r3, [pc, #280]	; (800656c <xQueueSemaphoreTake+0x1ac>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	e7e5      	b.n	800642e <xQueueSemaphoreTake+0x6e>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006462:	b145      	cbz	r5, 8006476 <xQueueSemaphoreTake+0xb6>
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	e7fe      	b.n	8006474 <xQueueSemaphoreTake+0xb4>
					taskEXIT_CRITICAL();
 8006476:	f001 f997 	bl	80077a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800647a:	e7db      	b.n	8006434 <xQueueSemaphoreTake+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800647c:	a802      	add	r0, sp, #8
 800647e:	f000 fd9d 	bl	8006fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006482:	e029      	b.n	80064d8 <xQueueSemaphoreTake+0x118>
		prvLockQueue( pxQueue );
 8006484:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8006488:	e032      	b.n	80064f0 <xQueueSemaphoreTake+0x130>
 800648a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800648e:	e035      	b.n	80064fc <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 8006490:	f001 f968 	bl	8007764 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006494:	68a0      	ldr	r0, [r4, #8]
 8006496:	f000 fdf5 	bl	8007084 <xTaskPriorityInherit>
 800649a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800649c:	f001 f984 	bl	80077a8 <vPortExitCritical>
 80064a0:	e03c      	b.n	800651c <xQueueSemaphoreTake+0x15c>
				prvUnlockQueue( pxQueue );
 80064a2:	4620      	mov	r0, r4
 80064a4:	f7ff fc19 	bl	8005cda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064a8:	f000 fc0e 	bl	8006cc8 <xTaskResumeAll>
 80064ac:	e009      	b.n	80064c2 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80064ae:	4620      	mov	r0, r4
 80064b0:	f7ff fc13 	bl	8005cda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064b4:	f000 fc08 	bl	8006cc8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064b8:	4620      	mov	r0, r4
 80064ba:	f7ff fbb8 	bl	8005c2e <prvIsQueueEmpty>
 80064be:	2800      	cmp	r0, #0
 80064c0:	d141      	bne.n	8006546 <xQueueSemaphoreTake+0x186>
 80064c2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80064c4:	f001 f94e 	bl	8007764 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80064c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1a9      	bne.n	8006422 <xQueueSemaphoreTake+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ce:	9b01      	ldr	r3, [sp, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0c6      	beq.n	8006462 <xQueueSemaphoreTake+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 80064d4:	2e00      	cmp	r6, #0
 80064d6:	d0d1      	beq.n	800647c <xQueueSemaphoreTake+0xbc>
		taskEXIT_CRITICAL();
 80064d8:	f001 f966 	bl	80077a8 <vPortExitCritical>
		vTaskSuspendAll();
 80064dc:	f000 fb4e 	bl	8006b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064e0:	f001 f940 	bl	8007764 <vPortEnterCritical>
 80064e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d0c9      	beq.n	8006484 <xQueueSemaphoreTake+0xc4>
 80064f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80064f4:	b25b      	sxtb	r3, r3
 80064f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fa:	d0c6      	beq.n	800648a <xQueueSemaphoreTake+0xca>
 80064fc:	f001 f954 	bl	80077a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006500:	a901      	add	r1, sp, #4
 8006502:	a802      	add	r0, sp, #8
 8006504:	f000 fd66 	bl	8006fd4 <xTaskCheckForTimeOut>
 8006508:	2800      	cmp	r0, #0
 800650a:	d1d0      	bne.n	80064ae <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800650c:	4620      	mov	r0, r4
 800650e:	f7ff fb8e 	bl	8005c2e <prvIsQueueEmpty>
 8006512:	2800      	cmp	r0, #0
 8006514:	d0c5      	beq.n	80064a2 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0b9      	beq.n	8006490 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800651c:	9901      	ldr	r1, [sp, #4]
 800651e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006522:	f000 fccf 	bl	8006ec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fbd7 	bl	8005cda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800652c:	f000 fbcc 	bl	8006cc8 <xTaskResumeAll>
 8006530:	2800      	cmp	r0, #0
 8006532:	d1c6      	bne.n	80064c2 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8006534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006538:	f8c8 3000 	str.w	r3, [r8]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	e7bd      	b.n	80064c2 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8006546:	2d00      	cmp	r5, #0
 8006548:	f43f af74 	beq.w	8006434 <xQueueSemaphoreTake+0x74>
						taskENTER_CRITICAL();
 800654c:	f001 f90a 	bl	8007764 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006550:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006552:	b119      	cbz	r1, 800655c <xQueueSemaphoreTake+0x19c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006554:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800655c:	68a0      	ldr	r0, [r4, #8]
 800655e:	f000 fe21 	bl	80071a4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006562:	f001 f921 	bl	80077a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006566:	2500      	movs	r5, #0
 8006568:	e764      	b.n	8006434 <xQueueSemaphoreTake+0x74>
 800656a:	bf00      	nop
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <xQueueReceiveFromISR>:
{
 8006570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006574:	b1c8      	cbz	r0, 80065aa <xQueueReceiveFromISR+0x3a>
 8006576:	4689      	mov	r9, r1
 8006578:	4617      	mov	r7, r2
 800657a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800657c:	b1f1      	cbz	r1, 80065bc <xQueueReceiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800657e:	f001 fa1d 	bl	80079bc <vPortValidateInterruptPriority>
	__asm volatile
 8006582:	f3ef 8611 	mrs	r6, BASEPRI
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006596:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800659a:	f1b8 0f00 	cmp.w	r8, #0
 800659e:	d119      	bne.n	80065d4 <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
 80065a0:	2000      	movs	r0, #0
	__asm volatile
 80065a2:	f386 8811 	msr	BASEPRI, r6
}
 80065a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80065ba:	e7fe      	b.n	80065ba <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0dd      	beq.n	800657e <xQueueReceiveFromISR+0xe>
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	e7fe      	b.n	80065d2 <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
 80065d4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80065d8:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065da:	4649      	mov	r1, r9
 80065dc:	4620      	mov	r0, r4
 80065de:	f7ff fb6a 	bl	8005cb6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80065e6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80065e8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80065ec:	d005      	beq.n	80065fa <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80065ee:	1c6b      	adds	r3, r5, #1
 80065f0:	b25b      	sxtb	r3, r3
 80065f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80065f6:	2001      	movs	r0, #1
 80065f8:	e7d3      	b.n	80065a2 <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	b90b      	cbnz	r3, 8006602 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 80065fe:	2001      	movs	r0, #1
 8006600:	e7cf      	b.n	80065a2 <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006602:	f104 0010 	add.w	r0, r4, #16
 8006606:	f000 fc93 	bl	8006f30 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 800660a:	b11f      	cbz	r7, 8006614 <xQueueReceiveFromISR+0xa4>
 800660c:	b110      	cbz	r0, 8006614 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800660e:	2001      	movs	r0, #1
 8006610:	6038      	str	r0, [r7, #0]
 8006612:	e7c6      	b.n	80065a2 <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
 8006614:	2001      	movs	r0, #1
 8006616:	e7c4      	b.n	80065a2 <xQueueReceiveFromISR+0x32>

08006618 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006618:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800661a:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800661c:	4c08      	ldr	r4, [pc, #32]	; (8006640 <vQueueAddToRegistry+0x28>)
 800661e:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8006622:	b12a      	cbz	r2, 8006630 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006624:	3301      	adds	r3, #1
 8006626:	2b08      	cmp	r3, #8
 8006628:	d1f9      	bne.n	800661e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800662a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800662e:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006630:	4a03      	ldr	r2, [pc, #12]	; (8006640 <vQueueAddToRegistry+0x28>)
 8006632:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800663a:	6058      	str	r0, [r3, #4]
				break;
 800663c:	e7f5      	b.n	800662a <vQueueAddToRegistry+0x12>
 800663e:	bf00      	nop
 8006640:	2400fd78 	.word	0x2400fd78

08006644 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006644:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006646:	4908      	ldr	r1, [pc, #32]	; (8006668 <vQueueUnregisterQueue+0x24>)
 8006648:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800664c:	4282      	cmp	r2, r0
 800664e:	d003      	beq.n	8006658 <vQueueUnregisterQueue+0x14>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006650:	3301      	adds	r3, #1
 8006652:	2b08      	cmp	r3, #8
 8006654:	d1f8      	bne.n	8006648 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006656:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006658:	4a04      	ldr	r2, [pc, #16]	; (800666c <vQueueUnregisterQueue+0x28>)
 800665a:	2100      	movs	r1, #0
 800665c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006664:	6059      	str	r1, [r3, #4]
				break;
 8006666:	4770      	bx	lr
 8006668:	2400fd7c 	.word	0x2400fd7c
 800666c:	2400fd78 	.word	0x2400fd78

08006670 <vQueueDelete>:
	configASSERT( pxQueue );
 8006670:	b138      	cbz	r0, 8006682 <vQueueDelete+0x12>
{
 8006672:	b510      	push	{r4, lr}
 8006674:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8006676:	f7ff ffe5 	bl	8006644 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800667a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800667e:	b14b      	cbz	r3, 8006694 <vQueueDelete+0x24>
}
 8006680:	bd10      	pop	{r4, pc}
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006692:	e7fe      	b.n	8006692 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8006694:	4620      	mov	r0, r4
 8006696:	f001 fa87 	bl	8007ba8 <vPortFree>
}
 800669a:	e7f1      	b.n	8006680 <vQueueDelete+0x10>

0800669c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4604      	mov	r4, r0
 80066a0:	460d      	mov	r5, r1
 80066a2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066a4:	f001 f85e 	bl	8007764 <vPortEnterCritical>
 80066a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d00d      	beq.n	80066d0 <vQueueWaitForMessageRestricted+0x34>
 80066b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d00b      	beq.n	80066d8 <vQueueWaitForMessageRestricted+0x3c>
 80066c0:	f001 f872 	bl	80077a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066c6:	b15b      	cbz	r3, 80066e0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff fb06 	bl	8005cda <prvUnlockQueue>
	}
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80066d0:	2300      	movs	r3, #0
 80066d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80066d6:	e7ed      	b.n	80066b4 <vQueueWaitForMessageRestricted+0x18>
 80066d8:	2300      	movs	r3, #0
 80066da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066de:	e7ef      	b.n	80066c0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066e0:	4632      	mov	r2, r6
 80066e2:	4629      	mov	r1, r5
 80066e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066e8:	f000 fc04 	bl	8006ef4 <vTaskPlaceOnEventListRestricted>
 80066ec:	e7ec      	b.n	80066c8 <vQueueWaitForMessageRestricted+0x2c>
	...

080066f0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f0:	4b08      	ldr	r3, [pc, #32]	; (8006714 <prvResetNextTaskUnblockTime+0x24>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	b923      	cbnz	r3, 8006702 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066f8:	4b07      	ldr	r3, [pc, #28]	; (8006718 <prvResetNextTaskUnblockTime+0x28>)
 80066fa:	f04f 32ff 	mov.w	r2, #4294967295
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <prvResetNextTaskUnblockTime+0x24>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	4b02      	ldr	r3, [pc, #8]	; (8006718 <prvResetNextTaskUnblockTime+0x28>)
 800670e:	601a      	str	r2, [r3, #0]
	}
}
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	24000868 	.word	0x24000868
 8006718:	24000d0c 	.word	0x24000d0c

0800671c <prvInitialiseNewTask>:
{
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	4607      	mov	r7, r0
 8006722:	468a      	mov	sl, r1
 8006724:	4698      	mov	r8, r3
 8006726:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800672a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800672c:	0096      	lsls	r6, r2, #2
 800672e:	4632      	mov	r2, r6
 8006730:	21a5      	movs	r1, #165	; 0xa5
 8006732:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006734:	f010 fe72 	bl	801741c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006738:	3e04      	subs	r6, #4
 800673a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800673c:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800673e:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8006742:	f1ba 0f00 	cmp.w	sl, #0
 8006746:	d042      	beq.n	80067ce <prvInitialiseNewTask+0xb2>
 8006748:	f10a 32ff 	add.w	r2, sl, #4294967295
 800674c:	f104 0533 	add.w	r5, r4, #51	; 0x33
 8006750:	f10a 030f 	add.w	r3, sl, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006754:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8006758:	f805 1f01 	strb.w	r1, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800675c:	b109      	cbz	r1, 8006762 <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800675e:	429a      	cmp	r2, r3
 8006760:	d1f8      	bne.n	8006754 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006762:	2300      	movs	r3, #0
 8006764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006768:	9d08      	ldr	r5, [sp, #32]
 800676a:	2d37      	cmp	r5, #55	; 0x37
 800676c:	bf28      	it	cs
 800676e:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8006770:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006772:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006774:	f04f 0a00 	mov.w	sl, #0
 8006778:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800677c:	1d20      	adds	r0, r4, #4
 800677e:	f7ff fa1c 	bl	8005bba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006782:	f104 0018 	add.w	r0, r4, #24
 8006786:	f7ff fa18 	bl	8005bba <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800678a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800678c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
 8006790:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006792:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006794:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006798:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800679c:	2260      	movs	r2, #96	; 0x60
 800679e:	4651      	mov	r1, sl
 80067a0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80067a4:	f010 fe3a 	bl	801741c <memset>
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <prvInitialiseNewTask+0xbc>)
 80067aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80067ac:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <prvInitialiseNewTask+0xc0>)
 80067ae:	65e3      	str	r3, [r4, #92]	; 0x5c
 80067b0:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <prvInitialiseNewTask+0xc4>)
 80067b2:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067b4:	4642      	mov	r2, r8
 80067b6:	4639      	mov	r1, r7
 80067b8:	4630      	mov	r0, r6
 80067ba:	f000 ffa9 	bl	8007710 <pxPortInitialiseStack>
 80067be:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80067c0:	f1b9 0f00 	cmp.w	r9, #0
 80067c4:	d001      	beq.n	80067ca <prvInitialiseNewTask+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067c6:	f8c9 4000 	str.w	r4, [r9]
}
 80067ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067ce:	2300      	movs	r3, #0
 80067d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80067d4:	e7c8      	b.n	8006768 <prvInitialiseNewTask+0x4c>
 80067d6:	bf00      	nop
 80067d8:	0801bd0c 	.word	0x0801bd0c
 80067dc:	0801bd2c 	.word	0x0801bd2c
 80067e0:	0801bcec 	.word	0x0801bcec

080067e4 <prvAddNewTaskToReadyList>:
{
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80067e8:	f000 ffbc 	bl	8007764 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80067ec:	4a2f      	ldr	r2, [pc, #188]	; (80068ac <prvAddNewTaskToReadyList+0xc8>)
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067f4:	4b2e      	ldr	r3, [pc, #184]	; (80068b0 <prvAddNewTaskToReadyList+0xcc>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b15b      	cbz	r3, 8006812 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80067fa:	4b2e      	ldr	r3, [pc, #184]	; (80068b4 <prvAddNewTaskToReadyList+0xd0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	b96b      	cbnz	r3, 800681c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006800:	4b2b      	ldr	r3, [pc, #172]	; (80068b0 <prvAddNewTaskToReadyList+0xcc>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006806:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006808:	429a      	cmp	r2, r3
 800680a:	d807      	bhi.n	800681c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800680c:	4b28      	ldr	r3, [pc, #160]	; (80068b0 <prvAddNewTaskToReadyList+0xcc>)
 800680e:	601c      	str	r4, [r3, #0]
 8006810:	e004      	b.n	800681c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006812:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <prvAddNewTaskToReadyList+0xcc>)
 8006814:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006816:	6813      	ldr	r3, [r2, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d027      	beq.n	800686c <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 800681c:	4a26      	ldr	r2, [pc, #152]	; (80068b8 <prvAddNewTaskToReadyList+0xd4>)
 800681e:	6813      	ldr	r3, [r2, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006824:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006826:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006828:	4b24      	ldr	r3, [pc, #144]	; (80068bc <prvAddNewTaskToReadyList+0xd8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4298      	cmp	r0, r3
 800682e:	d901      	bls.n	8006834 <prvAddNewTaskToReadyList+0x50>
 8006830:	4b22      	ldr	r3, [pc, #136]	; (80068bc <prvAddNewTaskToReadyList+0xd8>)
 8006832:	6018      	str	r0, [r3, #0]
 8006834:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006838:	1d21      	adds	r1, r4, #4
 800683a:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <prvAddNewTaskToReadyList+0xdc>)
 800683c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006840:	f7ff f9be 	bl	8005bc0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006844:	f000 ffb0 	bl	80077a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006848:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <prvAddNewTaskToReadyList+0xd0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	b16b      	cbz	r3, 800686a <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800684e:	4b18      	ldr	r3, [pc, #96]	; (80068b0 <prvAddNewTaskToReadyList+0xcc>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006856:	429a      	cmp	r2, r3
 8006858:	d207      	bcs.n	800686a <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800685a:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <prvAddNewTaskToReadyList+0xe0>)
 800685c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	f3bf 8f6f 	isb	sy
}
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	4d14      	ldr	r5, [pc, #80]	; (80068c0 <prvAddNewTaskToReadyList+0xdc>)
 800686e:	f505 668c 	add.w	r6, r5, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006872:	4628      	mov	r0, r5
 8006874:	f7ff f996 	bl	8005ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006878:	3514      	adds	r5, #20
 800687a:	42b5      	cmp	r5, r6
 800687c:	d1f9      	bne.n	8006872 <prvAddNewTaskToReadyList+0x8e>
	vListInitialise( &xDelayedTaskList1 );
 800687e:	4e12      	ldr	r6, [pc, #72]	; (80068c8 <prvAddNewTaskToReadyList+0xe4>)
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff f98f 	bl	8005ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006886:	4d11      	ldr	r5, [pc, #68]	; (80068cc <prvAddNewTaskToReadyList+0xe8>)
 8006888:	4628      	mov	r0, r5
 800688a:	f7ff f98b 	bl	8005ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800688e:	4810      	ldr	r0, [pc, #64]	; (80068d0 <prvAddNewTaskToReadyList+0xec>)
 8006890:	f7ff f988 	bl	8005ba4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006894:	480f      	ldr	r0, [pc, #60]	; (80068d4 <prvAddNewTaskToReadyList+0xf0>)
 8006896:	f7ff f985 	bl	8005ba4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800689a:	480f      	ldr	r0, [pc, #60]	; (80068d8 <prvAddNewTaskToReadyList+0xf4>)
 800689c:	f7ff f982 	bl	8005ba4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <prvAddNewTaskToReadyList+0xf8>)
 80068a2:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068a4:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <prvAddNewTaskToReadyList+0xfc>)
 80068a6:	601d      	str	r5, [r3, #0]
}
 80068a8:	e7b8      	b.n	800681c <prvAddNewTaskToReadyList+0x38>
 80068aa:	bf00      	nop
 80068ac:	24000cd0 	.word	0x24000cd0
 80068b0:	24000864 	.word	0x24000864
 80068b4:	24000d2c 	.word	0x24000d2c
 80068b8:	24000cdc 	.word	0x24000cdc
 80068bc:	24000ce0 	.word	0x24000ce0
 80068c0:	24000870 	.word	0x24000870
 80068c4:	e000ed04 	.word	0xe000ed04
 80068c8:	24000ce4 	.word	0x24000ce4
 80068cc:	24000cf8 	.word	0x24000cf8
 80068d0:	24000d18 	.word	0x24000d18
 80068d4:	24000d44 	.word	0x24000d44
 80068d8:	24000d30 	.word	0x24000d30
 80068dc:	24000868 	.word	0x24000868
 80068e0:	2400086c 	.word	0x2400086c

080068e4 <prvDeleteTCB>:
	{
 80068e4:	b510      	push	{r4, lr}
 80068e6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068e8:	3054      	adds	r0, #84	; 0x54
 80068ea:	f011 f945 	bl	8017b78 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068ee:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80068f2:	b163      	cbz	r3, 800690e <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d011      	beq.n	800691c <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d00e      	beq.n	800691a <prvDeleteTCB+0x36>
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	e7fe      	b.n	800690c <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800690e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006910:	f001 f94a 	bl	8007ba8 <vPortFree>
				vPortFree( pxTCB );
 8006914:	4620      	mov	r0, r4
 8006916:	f001 f947 	bl	8007ba8 <vPortFree>
	}
 800691a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800691c:	4620      	mov	r0, r4
 800691e:	f001 f943 	bl	8007ba8 <vPortFree>
 8006922:	e7fa      	b.n	800691a <prvDeleteTCB+0x36>

08006924 <prvIdleTask>:
{
 8006924:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006926:	4c14      	ldr	r4, [pc, #80]	; (8006978 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006928:	4f14      	ldr	r7, [pc, #80]	; (800697c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800692a:	4e15      	ldr	r6, [pc, #84]	; (8006980 <prvIdleTask+0x5c>)
				taskYIELD();
 800692c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006988 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	b1a3      	cbz	r3, 800695e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8006934:	f000 ff16 	bl	8007764 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800693c:	1d28      	adds	r0, r5, #4
 800693e:	f7ff f963 	bl	8005c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006942:	6833      	ldr	r3, [r6, #0]
 8006944:	3b01      	subs	r3, #1
 8006946:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	3b01      	subs	r3, #1
 800694c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800694e:	f000 ff2b 	bl	80077a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006952:	4628      	mov	r0, r5
 8006954:	f7ff ffc6 	bl	80068e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1ea      	bne.n	8006934 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <prvIdleTask+0x60>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d9e4      	bls.n	8006930 <prvIdleTask+0xc>
				taskYIELD();
 8006966:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800696a:	f8c8 3000 	str.w	r3, [r8]
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	e7db      	b.n	8006930 <prvIdleTask+0xc>
 8006978:	24000cd4 	.word	0x24000cd4
 800697c:	24000d44 	.word	0x24000d44
 8006980:	24000cd0 	.word	0x24000cd0
 8006984:	24000870 	.word	0x24000870
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4604      	mov	r4, r0
 8006990:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006992:	4b17      	ldr	r3, [pc, #92]	; (80069f0 <prvAddCurrentTaskToDelayedList+0x64>)
 8006994:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006996:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	3004      	adds	r0, #4
 800699c:	f7ff f934 	bl	8005c08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80069a4:	d100      	bne.n	80069a8 <prvAddCurrentTaskToDelayedList+0x1c>
 80069a6:	b96d      	cbnz	r5, 80069c4 <prvAddCurrentTaskToDelayedList+0x38>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069a8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069aa:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x68>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80069b0:	42a6      	cmp	r6, r4
 80069b2:	d90e      	bls.n	80069d2 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <prvAddCurrentTaskToDelayedList+0x6c>)
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x68>)
 80069ba:	6819      	ldr	r1, [r3, #0]
 80069bc:	3104      	adds	r1, #4
 80069be:	f7ff f90a 	bl	8005bd6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c4:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x68>)
 80069c6:	6819      	ldr	r1, [r3, #0]
 80069c8:	3104      	adds	r1, #4
 80069ca:	480c      	ldr	r0, [pc, #48]	; (80069fc <prvAddCurrentTaskToDelayedList+0x70>)
 80069cc:	f7ff f8f8 	bl	8005bc0 <vListInsertEnd>
 80069d0:	e7f7      	b.n	80069c2 <prvAddCurrentTaskToDelayedList+0x36>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <prvAddCurrentTaskToDelayedList+0x74>)
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x68>)
 80069d8:	6819      	ldr	r1, [r3, #0]
 80069da:	3104      	adds	r1, #4
 80069dc:	f7ff f8fb 	bl	8005bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069e0:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <prvAddCurrentTaskToDelayedList+0x78>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	d9ec      	bls.n	80069c2 <prvAddCurrentTaskToDelayedList+0x36>
					xNextTaskUnblockTime = xTimeToWake;
 80069e8:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <prvAddCurrentTaskToDelayedList+0x78>)
 80069ea:	601c      	str	r4, [r3, #0]
}
 80069ec:	e7e9      	b.n	80069c2 <prvAddCurrentTaskToDelayedList+0x36>
 80069ee:	bf00      	nop
 80069f0:	24000d58 	.word	0x24000d58
 80069f4:	24000864 	.word	0x24000864
 80069f8:	2400086c 	.word	0x2400086c
 80069fc:	24000d30 	.word	0x24000d30
 8006a00:	24000868 	.word	0x24000868
 8006a04:	24000d0c 	.word	0x24000d0c

08006a08 <xTaskCreateStatic>:
	{
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006a0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006a10:	b175      	cbz	r5, 8006a30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a12:	b1b4      	cbz	r4, 8006a42 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a14:	26bc      	movs	r6, #188	; 0xbc
 8006a16:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a18:	9e04      	ldr	r6, [sp, #16]
 8006a1a:	2ebc      	cmp	r6, #188	; 0xbc
 8006a1c:	d01a      	beq.n	8006a54 <xTaskCreateStatic+0x4c>
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	e7fe      	b.n	8006a2e <xTaskCreateStatic+0x26>
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006a40:	e7fe      	b.n	8006a40 <xTaskCreateStatic+0x38>
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006a52:	e7fe      	b.n	8006a52 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a54:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a56:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a58:	2502      	movs	r5, #2
 8006a5a:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a5e:	2500      	movs	r5, #0
 8006a60:	9503      	str	r5, [sp, #12]
 8006a62:	9402      	str	r4, [sp, #8]
 8006a64:	ad05      	add	r5, sp, #20
 8006a66:	9501      	str	r5, [sp, #4]
 8006a68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006a6a:	9500      	str	r5, [sp, #0]
 8006a6c:	f7ff fe56 	bl	800671c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7ff feb7 	bl	80067e4 <prvAddNewTaskToReadyList>
	}
 8006a76:	9805      	ldr	r0, [sp, #20]
 8006a78:	b006      	add	sp, #24
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}

08006a7c <xTaskCreate>:
	{
 8006a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a80:	b085      	sub	sp, #20
 8006a82:	4607      	mov	r7, r0
 8006a84:	4688      	mov	r8, r1
 8006a86:	4614      	mov	r4, r2
 8006a88:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a8a:	0090      	lsls	r0, r2, #2
 8006a8c:	f000 fff0 	bl	8007a70 <pvPortMalloc>
			if( pxStack != NULL )
 8006a90:	b308      	cbz	r0, 8006ad6 <xTaskCreate+0x5a>
 8006a92:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a94:	20bc      	movs	r0, #188	; 0xbc
 8006a96:	f000 ffeb 	bl	8007a70 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	b1a8      	cbz	r0, 8006aca <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006a9e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	9002      	str	r0, [sp, #8]
 8006aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4633      	mov	r3, r6
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	4641      	mov	r1, r8
 8006aba:	4638      	mov	r0, r7
 8006abc:	f7ff fe2e 	bl	800671c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f7ff fe8f 	bl	80067e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e007      	b.n	8006ada <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006aca:	4648      	mov	r0, r9
 8006acc:	f001 f86c 	bl	8007ba8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	e001      	b.n	8006ada <xTaskCreate+0x5e>
 8006ad6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006ada:	b005      	add	sp, #20
 8006adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006ae0 <vTaskStartScheduler>:
{
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ae4:	2400      	movs	r4, #0
 8006ae6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ae8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006aea:	aa07      	add	r2, sp, #28
 8006aec:	a906      	add	r1, sp, #24
 8006aee:	a805      	add	r0, sp, #20
 8006af0:	f7ff f840 	bl	8005b74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006af4:	9b05      	ldr	r3, [sp, #20]
 8006af6:	9302      	str	r3, [sp, #8]
 8006af8:	9b06      	ldr	r3, [sp, #24]
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	9400      	str	r4, [sp, #0]
 8006afe:	4623      	mov	r3, r4
 8006b00:	9a07      	ldr	r2, [sp, #28]
 8006b02:	4917      	ldr	r1, [pc, #92]	; (8006b60 <vTaskStartScheduler+0x80>)
 8006b04:	4817      	ldr	r0, [pc, #92]	; (8006b64 <vTaskStartScheduler+0x84>)
 8006b06:	f7ff ff7f 	bl	8006a08 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006b0a:	b338      	cbz	r0, 8006b5c <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8006b0c:	f000 fc06 	bl	800731c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006b10:	2801      	cmp	r0, #1
 8006b12:	d00b      	beq.n	8006b2c <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b18:	d120      	bne.n	8006b5c <vTaskStartScheduler+0x7c>
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	e7fe      	b.n	8006b2a <vTaskStartScheduler+0x4a>
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <vTaskStartScheduler+0x88>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3354      	adds	r3, #84	; 0x54
 8006b42:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <vTaskStartScheduler+0x8c>)
 8006b44:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b46:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <vTaskStartScheduler+0x90>)
 8006b48:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b4e:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <vTaskStartScheduler+0x94>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b54:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <vTaskStartScheduler+0x98>)
 8006b56:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006b58:	f000 fea6 	bl	80078a8 <xPortStartScheduler>
}
 8006b5c:	b008      	add	sp, #32
 8006b5e:	bd10      	pop	{r4, pc}
 8006b60:	080182d8 	.word	0x080182d8
 8006b64:	08006925 	.word	0x08006925
 8006b68:	24000864 	.word	0x24000864
 8006b6c:	24000060 	.word	0x24000060
 8006b70:	24000d0c 	.word	0x24000d0c
 8006b74:	24000d2c 	.word	0x24000d2c
 8006b78:	24000d58 	.word	0x24000d58

08006b7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006b7c:	4a02      	ldr	r2, [pc, #8]	; (8006b88 <vTaskSuspendAll+0xc>)
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	6013      	str	r3, [r2, #0]
}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	24000cd8 	.word	0x24000cd8

08006b8c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006b8c:	4b01      	ldr	r3, [pc, #4]	; (8006b94 <xTaskGetTickCount+0x8>)
 8006b8e:	6818      	ldr	r0, [r3, #0]
}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	24000d58 	.word	0x24000d58

08006b98 <xTaskIncrementTick>:
{
 8006b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b9c:	4b3f      	ldr	r3, [pc, #252]	; (8006c9c <xTaskIncrementTick+0x104>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d172      	bne.n	8006c8a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ba4:	4b3e      	ldr	r3, [pc, #248]	; (8006ca0 <xTaskIncrementTick+0x108>)
 8006ba6:	681d      	ldr	r5, [r3, #0]
 8006ba8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006baa:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bac:	b9c5      	cbnz	r5, 8006be0 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8006bae:	4b3d      	ldr	r3, [pc, #244]	; (8006ca4 <xTaskIncrementTick+0x10c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b143      	cbz	r3, 8006bc8 <xTaskIncrementTick+0x30>
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	e7fe      	b.n	8006bc6 <xTaskIncrementTick+0x2e>
 8006bc8:	4a36      	ldr	r2, [pc, #216]	; (8006ca4 <xTaskIncrementTick+0x10c>)
 8006bca:	6811      	ldr	r1, [r2, #0]
 8006bcc:	4b36      	ldr	r3, [pc, #216]	; (8006ca8 <xTaskIncrementTick+0x110>)
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	6010      	str	r0, [r2, #0]
 8006bd2:	6019      	str	r1, [r3, #0]
 8006bd4:	4a35      	ldr	r2, [pc, #212]	; (8006cac <xTaskIncrementTick+0x114>)
 8006bd6:	6813      	ldr	r3, [r2, #0]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	f7ff fd88 	bl	80066f0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006be0:	4b33      	ldr	r3, [pc, #204]	; (8006cb0 <xTaskIncrementTick+0x118>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	d83e      	bhi.n	8006c66 <xTaskIncrementTick+0xce>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be8:	4b2e      	ldr	r3, [pc, #184]	; (8006ca4 <xTaskIncrementTick+0x10c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	b133      	cbz	r3, 8006bfe <xTaskIncrementTick+0x66>
BaseType_t xSwitchRequired = pdFALSE;
 8006bf0:	2400      	movs	r4, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006ca4 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8006bf6:	4f2f      	ldr	r7, [pc, #188]	; (8006cb4 <xTaskIncrementTick+0x11c>)
 8006bf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8006cbc <xTaskIncrementTick+0x124>
 8006bfc:	e01b      	b.n	8006c36 <xTaskIncrementTick+0x9e>
BaseType_t xSwitchRequired = pdFALSE;
 8006bfe:	2400      	movs	r4, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c00:	4b2b      	ldr	r3, [pc, #172]	; (8006cb0 <xTaskIncrementTick+0x118>)
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295
 8006c06:	601a      	str	r2, [r3, #0]
					break;
 8006c08:	e02e      	b.n	8006c68 <xTaskIncrementTick+0xd0>
						xNextTaskUnblockTime = xItemValue;
 8006c0a:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <xTaskIncrementTick+0x118>)
 8006c0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c0e:	e02b      	b.n	8006c68 <xTaskIncrementTick+0xd0>
					prvAddTaskToReadyList( pxTCB );
 8006c10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c14:	4649      	mov	r1, r9
 8006c16:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006c1a:	f7fe ffd1 	bl	8005bc0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c1e:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <xTaskIncrementTick+0x120>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006c26:	429a      	cmp	r2, r3
 8006c28:	bf28      	it	cs
 8006c2a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0e4      	beq.n	8006c00 <xTaskIncrementTick+0x68>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c36:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c3e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006c40:	429d      	cmp	r5, r3
 8006c42:	d3e2      	bcc.n	8006c0a <xTaskIncrementTick+0x72>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c44:	f106 0904 	add.w	r9, r6, #4
 8006c48:	4648      	mov	r0, r9
 8006c4a:	f7fe ffdd 	bl	8005c08 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c4e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006c50:	b11b      	cbz	r3, 8006c5a <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c52:	f106 0018 	add.w	r0, r6, #24
 8006c56:	f7fe ffd7 	bl	8005c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c5a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4298      	cmp	r0, r3
 8006c60:	d9d6      	bls.n	8006c10 <xTaskIncrementTick+0x78>
 8006c62:	6038      	str	r0, [r7, #0]
 8006c64:	e7d4      	b.n	8006c10 <xTaskIncrementTick+0x78>
BaseType_t xSwitchRequired = pdFALSE;
 8006c66:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <xTaskIncrementTick+0x120>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4a11      	ldr	r2, [pc, #68]	; (8006cbc <xTaskIncrementTick+0x124>)
 8006c76:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	bf28      	it	cs
 8006c7c:	2401      	movcs	r4, #1
			if( xYieldPending != pdFALSE )
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <xTaskIncrementTick+0x128>)
 8006c80:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bf18      	it	ne
 8006c86:	2401      	movne	r4, #1
 8006c88:	e004      	b.n	8006c94 <xTaskIncrementTick+0xfc>
		++xPendedTicks;
 8006c8a:	4a0e      	ldr	r2, [pc, #56]	; (8006cc4 <xTaskIncrementTick+0x12c>)
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006c92:	2400      	movs	r4, #0
}
 8006c94:	4620      	mov	r0, r4
 8006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9a:	bf00      	nop
 8006c9c:	24000cd8 	.word	0x24000cd8
 8006ca0:	24000d58 	.word	0x24000d58
 8006ca4:	24000868 	.word	0x24000868
 8006ca8:	2400086c 	.word	0x2400086c
 8006cac:	24000d10 	.word	0x24000d10
 8006cb0:	24000d0c 	.word	0x24000d0c
 8006cb4:	24000ce0 	.word	0x24000ce0
 8006cb8:	24000864 	.word	0x24000864
 8006cbc:	24000870 	.word	0x24000870
 8006cc0:	24000d5c 	.word	0x24000d5c
 8006cc4:	24000d14 	.word	0x24000d14

08006cc8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006cc8:	4b37      	ldr	r3, [pc, #220]	; (8006da8 <xTaskResumeAll+0xe0>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	b943      	cbnz	r3, 8006ce0 <xTaskResumeAll+0x18>
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	e7fe      	b.n	8006cde <xTaskResumeAll+0x16>
{
 8006ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006ce4:	f000 fd3e 	bl	8007764 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006ce8:	4b2f      	ldr	r3, [pc, #188]	; (8006da8 <xTaskResumeAll+0xe0>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	3a01      	subs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d147      	bne.n	8006d86 <xTaskResumeAll+0xbe>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cf6:	4b2d      	ldr	r3, [pc, #180]	; (8006dac <xTaskResumeAll+0xe4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d049      	beq.n	8006d92 <xTaskResumeAll+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cfe:	4b2c      	ldr	r3, [pc, #176]	; (8006db0 <xTaskResumeAll+0xe8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d049      	beq.n	8006d9a <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d06:	4e2a      	ldr	r6, [pc, #168]	; (8006db0 <xTaskResumeAll+0xe8>)
					prvAddTaskToReadyList( pxTCB );
 8006d08:	4d2a      	ldr	r5, [pc, #168]	; (8006db4 <xTaskResumeAll+0xec>)
 8006d0a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8006dc8 <xTaskResumeAll+0x100>
 8006d0e:	e002      	b.n	8006d16 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d10:	6833      	ldr	r3, [r6, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d03f      	beq.n	8006d96 <xTaskResumeAll+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d16:	68f3      	ldr	r3, [r6, #12]
 8006d18:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d1a:	f104 0018 	add.w	r0, r4, #24
 8006d1e:	f7fe ff73 	bl	8005c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d22:	1d27      	adds	r7, r4, #4
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7fe ff6f 	bl	8005c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	4298      	cmp	r0, r3
 8006d30:	d900      	bls.n	8006d34 <xTaskResumeAll+0x6c>
 8006d32:	6028      	str	r0, [r5, #0]
 8006d34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d38:	4639      	mov	r1, r7
 8006d3a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006d3e:	f7fe ff3f 	bl	8005bc0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d42:	4b1d      	ldr	r3, [pc, #116]	; (8006db8 <xTaskResumeAll+0xf0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d3e0      	bcc.n	8006d10 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006d4e:	4b1b      	ldr	r3, [pc, #108]	; (8006dbc <xTaskResumeAll+0xf4>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e7dc      	b.n	8006d10 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d56:	3c01      	subs	r4, #1
 8006d58:	d005      	beq.n	8006d66 <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8006d5a:	f7ff ff1d 	bl	8006b98 <xTaskIncrementTick>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0f9      	beq.n	8006d56 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8006d62:	6035      	str	r5, [r6, #0]
 8006d64:	e7f7      	b.n	8006d56 <xTaskResumeAll+0x8e>
						xPendedTicks = 0;
 8006d66:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <xTaskResumeAll+0xf8>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006d6c:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <xTaskResumeAll+0xf4>)
 8006d6e:	681c      	ldr	r4, [r3, #0]
 8006d70:	b154      	cbz	r4, 8006d88 <xTaskResumeAll+0xc0>
					taskYIELD_IF_USING_PREEMPTION();
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <xTaskResumeAll+0xfc>)
 8006d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006d82:	2401      	movs	r4, #1
 8006d84:	e000      	b.n	8006d88 <xTaskResumeAll+0xc0>
BaseType_t xAlreadyYielded = pdFALSE;
 8006d86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006d88:	f000 fd0e 	bl	80077a8 <vPortExitCritical>
}
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006d92:	2400      	movs	r4, #0
 8006d94:	e7f8      	b.n	8006d88 <xTaskResumeAll+0xc0>
					prvResetNextTaskUnblockTime();
 8006d96:	f7ff fcab 	bl	80066f0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <xTaskResumeAll+0xf8>)
 8006d9c:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006d9e:	2c00      	cmp	r4, #0
 8006da0:	d0e4      	beq.n	8006d6c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006da2:	4e06      	ldr	r6, [pc, #24]	; (8006dbc <xTaskResumeAll+0xf4>)
 8006da4:	2501      	movs	r5, #1
 8006da6:	e7d8      	b.n	8006d5a <xTaskResumeAll+0x92>
 8006da8:	24000cd8 	.word	0x24000cd8
 8006dac:	24000cd0 	.word	0x24000cd0
 8006db0:	24000d18 	.word	0x24000d18
 8006db4:	24000ce0 	.word	0x24000ce0
 8006db8:	24000864 	.word	0x24000864
 8006dbc:	24000d5c 	.word	0x24000d5c
 8006dc0:	24000d14 	.word	0x24000d14
 8006dc4:	e000ed04 	.word	0xe000ed04
 8006dc8:	24000870 	.word	0x24000870

08006dcc <vTaskDelay>:
	{
 8006dcc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dce:	b1a8      	cbz	r0, 8006dfc <vTaskDelay+0x30>
 8006dd0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <vTaskDelay+0x44>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	b143      	cbz	r3, 8006dea <vTaskDelay+0x1e>
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	e7fe      	b.n	8006de8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006dea:	f7ff fec7 	bl	8006b7c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dee:	2100      	movs	r1, #0
 8006df0:	4620      	mov	r0, r4
 8006df2:	f7ff fdcb 	bl	800698c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006df6:	f7ff ff67 	bl	8006cc8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006dfa:	b938      	cbnz	r0, 8006e0c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <vTaskDelay+0x48>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
	}
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	bf00      	nop
 8006e10:	24000cd8 	.word	0x24000cd8
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e18:	4b24      	ldr	r3, [pc, #144]	; (8006eac <vTaskSwitchContext+0x94>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	b11b      	cbz	r3, 8006e26 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006e1e:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <vTaskSwitchContext+0x98>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006e26:	4b22      	ldr	r3, [pc, #136]	; (8006eb0 <vTaskSwitchContext+0x98>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e2c:	4b21      	ldr	r3, [pc, #132]	; (8006eb4 <vTaskSwitchContext+0x9c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006e34:	0092      	lsls	r2, r2, #2
 8006e36:	4920      	ldr	r1, [pc, #128]	; (8006eb8 <vTaskSwitchContext+0xa0>)
 8006e38:	588a      	ldr	r2, [r1, r2]
 8006e3a:	b992      	cbnz	r2, 8006e62 <vTaskSwitchContext+0x4a>
 8006e3c:	b143      	cbz	r3, 8006e50 <vTaskSwitchContext+0x38>
 8006e3e:	460a      	mov	r2, r1
 8006e40:	3b01      	subs	r3, #1
 8006e42:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006e46:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006e4a:	b951      	cbnz	r1, 8006e62 <vTaskSwitchContext+0x4a>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f7      	bne.n	8006e40 <vTaskSwitchContext+0x28>
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	e7fe      	b.n	8006e60 <vTaskSwitchContext+0x48>
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <vTaskSwitchContext+0xa0>)
 8006e64:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006e68:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006e6c:	6848      	ldr	r0, [r1, #4]
 8006e6e:	6840      	ldr	r0, [r0, #4]
 8006e70:	6048      	str	r0, [r1, #4]
 8006e72:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006e76:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006e7a:	3208      	adds	r2, #8
 8006e7c:	4290      	cmp	r0, r2
 8006e7e:	d00f      	beq.n	8006ea0 <vTaskSwitchContext+0x88>
 8006e80:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006e84:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <vTaskSwitchContext+0xa0>)
 8006e86:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006e8a:	6852      	ldr	r2, [r2, #4]
 8006e8c:	68d1      	ldr	r1, [r2, #12]
 8006e8e:	4a0b      	ldr	r2, [pc, #44]	; (8006ebc <vTaskSwitchContext+0xa4>)
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	4908      	ldr	r1, [pc, #32]	; (8006eb4 <vTaskSwitchContext+0x9c>)
 8006e94:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e96:	6813      	ldr	r3, [r2, #0]
 8006e98:	3354      	adds	r3, #84	; 0x54
 8006e9a:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <vTaskSwitchContext+0xa8>)
 8006e9c:	6013      	str	r3, [r2, #0]
}
 8006e9e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea0:	6840      	ldr	r0, [r0, #4]
 8006ea2:	4a05      	ldr	r2, [pc, #20]	; (8006eb8 <vTaskSwitchContext+0xa0>)
 8006ea4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006ea8:	6050      	str	r0, [r2, #4]
 8006eaa:	e7e9      	b.n	8006e80 <vTaskSwitchContext+0x68>
 8006eac:	24000cd8 	.word	0x24000cd8
 8006eb0:	24000d5c 	.word	0x24000d5c
 8006eb4:	24000ce0 	.word	0x24000ce0
 8006eb8:	24000870 	.word	0x24000870
 8006ebc:	24000864 	.word	0x24000864
 8006ec0:	24000060 	.word	0x24000060

08006ec4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006ec4:	b158      	cbz	r0, 8006ede <vTaskPlaceOnEventList+0x1a>
{
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <vTaskPlaceOnEventList+0x2c>)
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	3118      	adds	r1, #24
 8006ed0:	f7fe fe81 	bl	8005bd6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7ff fd58 	bl	800698c <prvAddCurrentTaskToDelayedList>
}
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006eee:	e7fe      	b.n	8006eee <vTaskPlaceOnEventList+0x2a>
 8006ef0:	24000864 	.word	0x24000864

08006ef4 <vTaskPlaceOnEventListRestricted>:
	{
 8006ef4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006ef6:	b178      	cbz	r0, 8006f18 <vTaskPlaceOnEventListRestricted+0x24>
 8006ef8:	460d      	mov	r5, r1
 8006efa:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <vTaskPlaceOnEventListRestricted+0x38>)
 8006efe:	6819      	ldr	r1, [r3, #0]
 8006f00:	3118      	adds	r1, #24
 8006f02:	f7fe fe5d 	bl	8005bc0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006f06:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f08:	4621      	mov	r1, r4
 8006f0a:	bf0c      	ite	eq
 8006f0c:	4628      	moveq	r0, r5
 8006f0e:	f04f 30ff 	movne.w	r0, #4294967295
 8006f12:	f7ff fd3b 	bl	800698c <prvAddCurrentTaskToDelayedList>
	}
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006f28:	e7fe      	b.n	8006f28 <vTaskPlaceOnEventListRestricted+0x34>
 8006f2a:	bf00      	nop
 8006f2c:	24000864 	.word	0x24000864

08006f30 <xTaskRemoveFromEventList>:
{
 8006f30:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f32:	68c3      	ldr	r3, [r0, #12]
 8006f34:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006f36:	b324      	cbz	r4, 8006f82 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f38:	f104 0518 	add.w	r5, r4, #24
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f7fe fe63 	bl	8005c08 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f42:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <xTaskRemoveFromEventList+0x74>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	bb2b      	cbnz	r3, 8006f94 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f48:	1d25      	adds	r5, r4, #4
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f7fe fe5c 	bl	8005c08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <xTaskRemoveFromEventList+0x78>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4298      	cmp	r0, r3
 8006f58:	d901      	bls.n	8006f5e <xTaskRemoveFromEventList+0x2e>
 8006f5a:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <xTaskRemoveFromEventList+0x78>)
 8006f5c:	6018      	str	r0, [r3, #0]
 8006f5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f62:	4629      	mov	r1, r5
 8006f64:	4b11      	ldr	r3, [pc, #68]	; (8006fac <xTaskRemoveFromEventList+0x7c>)
 8006f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f6a:	f7fe fe29 	bl	8005bc0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <xTaskRemoveFromEventList+0x80>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d911      	bls.n	8006f9e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <xTaskRemoveFromEventList+0x84>)
 8006f7e:	6018      	str	r0, [r3, #0]
 8006f80:	e00e      	b.n	8006fa0 <xTaskRemoveFromEventList+0x70>
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006f92:	e7fe      	b.n	8006f92 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f94:	4629      	mov	r1, r5
 8006f96:	4808      	ldr	r0, [pc, #32]	; (8006fb8 <xTaskRemoveFromEventList+0x88>)
 8006f98:	f7fe fe12 	bl	8005bc0 <vListInsertEnd>
 8006f9c:	e7e7      	b.n	8006f6e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8006f9e:	2000      	movs	r0, #0
}
 8006fa0:	bd38      	pop	{r3, r4, r5, pc}
 8006fa2:	bf00      	nop
 8006fa4:	24000cd8 	.word	0x24000cd8
 8006fa8:	24000ce0 	.word	0x24000ce0
 8006fac:	24000870 	.word	0x24000870
 8006fb0:	24000864 	.word	0x24000864
 8006fb4:	24000d5c 	.word	0x24000d5c
 8006fb8:	24000d18 	.word	0x24000d18

08006fbc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fbc:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <vTaskInternalSetTimeOutState+0x10>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fc2:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <vTaskInternalSetTimeOutState+0x14>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6043      	str	r3, [r0, #4]
}
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	24000d10 	.word	0x24000d10
 8006fd0:	24000d58 	.word	0x24000d58

08006fd4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8006fd4:	b1d0      	cbz	r0, 800700c <xTaskCheckForTimeOut+0x38>
{
 8006fd6:	b570      	push	{r4, r5, r6, lr}
 8006fd8:	460c      	mov	r4, r1
 8006fda:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006fdc:	b1f9      	cbz	r1, 800701e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8006fde:	f000 fbc1 	bl	8007764 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <xTaskCheckForTimeOut+0x7c>)
 8006fe4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d028      	beq.n	8007040 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fee:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ff0:	4818      	ldr	r0, [pc, #96]	; (8007054 <xTaskCheckForTimeOut+0x80>)
 8006ff2:	6800      	ldr	r0, [r0, #0]
 8006ff4:	682e      	ldr	r6, [r5, #0]
 8006ff6:	4286      	cmp	r6, r0
 8006ff8:	d001      	beq.n	8006ffe <xTaskCheckForTimeOut+0x2a>
 8006ffa:	428a      	cmp	r2, r1
 8006ffc:	d925      	bls.n	800704a <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ffe:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007000:	4283      	cmp	r3, r0
 8007002:	d815      	bhi.n	8007030 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007008:	2401      	movs	r4, #1
 800700a:	e01a      	b.n	8007042 <xTaskCheckForTimeOut+0x6e>
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800701c:	e7fe      	b.n	800701c <xTaskCheckForTimeOut+0x48>
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800702e:	e7fe      	b.n	800702e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8007030:	1a5b      	subs	r3, r3, r1
 8007032:	4413      	add	r3, r2
 8007034:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007036:	4628      	mov	r0, r5
 8007038:	f7ff ffc0 	bl	8006fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800703c:	2400      	movs	r4, #0
 800703e:	e000      	b.n	8007042 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8007040:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007042:	f000 fbb1 	bl	80077a8 <vPortExitCritical>
}
 8007046:	4620      	mov	r0, r4
 8007048:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800704a:	2401      	movs	r4, #1
 800704c:	e7f9      	b.n	8007042 <xTaskCheckForTimeOut+0x6e>
 800704e:	bf00      	nop
 8007050:	24000d58 	.word	0x24000d58
 8007054:	24000d10 	.word	0x24000d10

08007058 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007058:	4b01      	ldr	r3, [pc, #4]	; (8007060 <vTaskMissedYield+0x8>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
}
 800705e:	4770      	bx	lr
 8007060:	24000d5c 	.word	0x24000d5c

08007064 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <xTaskGetSchedulerState+0x18>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	b133      	cbz	r3, 8007078 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <xTaskGetSchedulerState+0x1c>)
 800706c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf0c      	ite	eq
 8007072:	2002      	moveq	r0, #2
 8007074:	2000      	movne	r0, #0
 8007076:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007078:	2001      	movs	r0, #1
	}
 800707a:	4770      	bx	lr
 800707c:	24000d2c 	.word	0x24000d2c
 8007080:	24000cd8 	.word	0x24000cd8

08007084 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007084:	2800      	cmp	r0, #0
 8007086:	d03f      	beq.n	8007108 <xTaskPriorityInherit+0x84>
	{
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800708c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800708e:	4a1f      	ldr	r2, [pc, #124]	; (800710c <xTaskPriorityInherit+0x88>)
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007094:	4293      	cmp	r3, r2
 8007096:	d22e      	bcs.n	80070f6 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007098:	6982      	ldr	r2, [r0, #24]
 800709a:	2a00      	cmp	r2, #0
 800709c:	db05      	blt.n	80070aa <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800709e:	4a1b      	ldr	r2, [pc, #108]	; (800710c <xTaskPriorityInherit+0x88>)
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070a4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80070a8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80070ae:	4a18      	ldr	r2, [pc, #96]	; (8007110 <xTaskPriorityInherit+0x8c>)
 80070b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070b4:	6962      	ldr	r2, [r4, #20]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d005      	beq.n	80070c6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070ba:	4b14      	ldr	r3, [pc, #80]	; (800710c <xTaskPriorityInherit+0x88>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80070c2:	2001      	movs	r0, #1
 80070c4:	e01f      	b.n	8007106 <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c6:	1d25      	adds	r5, r4, #4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f7fe fd9d 	bl	8005c08 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070ce:	4b0f      	ldr	r3, [pc, #60]	; (800710c <xTaskPriorityInherit+0x88>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070d4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80070d6:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <xTaskPriorityInherit+0x90>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4298      	cmp	r0, r3
 80070dc:	d901      	bls.n	80070e2 <xTaskPriorityInherit+0x5e>
 80070de:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <xTaskPriorityInherit+0x90>)
 80070e0:	6018      	str	r0, [r3, #0]
 80070e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070e6:	4629      	mov	r1, r5
 80070e8:	4b09      	ldr	r3, [pc, #36]	; (8007110 <xTaskPriorityInherit+0x8c>)
 80070ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070ee:	f7fe fd67 	bl	8005bc0 <vListInsertEnd>
				xReturn = pdTRUE;
 80070f2:	2001      	movs	r0, #1
 80070f4:	e007      	b.n	8007106 <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070f6:	4b05      	ldr	r3, [pc, #20]	; (800710c <xTaskPriorityInherit+0x88>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	4298      	cmp	r0, r3
 8007100:	bf2c      	ite	cs
 8007102:	2000      	movcs	r0, #0
 8007104:	2001      	movcc	r0, #1
	}
 8007106:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8007108:	2000      	movs	r0, #0
	}
 800710a:	4770      	bx	lr
 800710c:	24000864 	.word	0x24000864
 8007110:	24000870 	.word	0x24000870
 8007114:	24000ce0 	.word	0x24000ce0

08007118 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007118:	2800      	cmp	r0, #0
 800711a:	d03b      	beq.n	8007194 <xTaskPriorityDisinherit+0x7c>
	{
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007120:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <xTaskPriorityDisinherit+0x80>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4283      	cmp	r3, r0
 8007126:	d008      	beq.n	800713a <xTaskPriorityDisinherit+0x22>
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	e7fe      	b.n	8007138 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800713a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800713c:	b943      	cbnz	r3, 8007150 <xTaskPriorityDisinherit+0x38>
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	e7fe      	b.n	800714e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007150:	3b01      	subs	r3, #1
 8007152:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007154:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007156:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007158:	4291      	cmp	r1, r2
 800715a:	d000      	beq.n	800715e <xTaskPriorityDisinherit+0x46>
 800715c:	b10b      	cbz	r3, 8007162 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800715e:	2000      	movs	r0, #0
	}
 8007160:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007162:	1d05      	adds	r5, r0, #4
 8007164:	4628      	mov	r0, r5
 8007166:	f7fe fd4f 	bl	8005c08 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800716a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800716c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716e:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8007172:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007174:	4b09      	ldr	r3, [pc, #36]	; (800719c <xTaskPriorityDisinherit+0x84>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4298      	cmp	r0, r3
 800717a:	d901      	bls.n	8007180 <xTaskPriorityDisinherit+0x68>
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <xTaskPriorityDisinherit+0x84>)
 800717e:	6018      	str	r0, [r3, #0]
 8007180:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007184:	4629      	mov	r1, r5
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <xTaskPriorityDisinherit+0x88>)
 8007188:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800718c:	f7fe fd18 	bl	8005bc0 <vListInsertEnd>
					xReturn = pdTRUE;
 8007190:	2001      	movs	r0, #1
 8007192:	e7e5      	b.n	8007160 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8007194:	2000      	movs	r0, #0
	}
 8007196:	4770      	bx	lr
 8007198:	24000864 	.word	0x24000864
 800719c:	24000ce0 	.word	0x24000ce0
 80071a0:	24000870 	.word	0x24000870

080071a4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d047      	beq.n	8007238 <vTaskPriorityDisinheritAfterTimeout+0x94>
	{
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	460b      	mov	r3, r1
 80071ac:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80071ae:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80071b0:	b941      	cbnz	r1, 80071c4 <vTaskPriorityDisinheritAfterTimeout+0x20>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	e7fe      	b.n	80071c2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071c4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bf38      	it	cc
 80071ca:	4613      	movcc	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80071cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80071ce:	2901      	cmp	r1, #1
 80071d0:	d101      	bne.n	80071d6 <vTaskPriorityDisinheritAfterTimeout+0x32>
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d100      	bne.n	80071d8 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80071d8:	4918      	ldr	r1, [pc, #96]	; (800723c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80071da:	6809      	ldr	r1, [r1, #0]
 80071dc:	4281      	cmp	r1, r0
 80071de:	d022      	beq.n	8007226 <vTaskPriorityDisinheritAfterTimeout+0x82>
					pxTCB->uxPriority = uxPriorityToUse;
 80071e0:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071e2:	6981      	ldr	r1, [r0, #24]
 80071e4:	2900      	cmp	r1, #0
 80071e6:	db02      	blt.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80071ec:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80071f2:	4b13      	ldr	r3, [pc, #76]	; (8007240 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80071f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80071f8:	6963      	ldr	r3, [r4, #20]
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d1eb      	bne.n	80071d6 <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071fe:	1d25      	adds	r5, r4, #4
 8007200:	4628      	mov	r0, r5
 8007202:	f7fe fd01 	bl	8005c08 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007206:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4298      	cmp	r0, r3
 800720e:	d901      	bls.n	8007214 <vTaskPriorityDisinheritAfterTimeout+0x70>
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8007212:	6018      	str	r0, [r3, #0]
 8007214:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007218:	4629      	mov	r1, r5
 800721a:	4b09      	ldr	r3, [pc, #36]	; (8007240 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800721c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007220:	f7fe fcce 	bl	8005bc0 <vListInsertEnd>
	}
 8007224:	e7d7      	b.n	80071d6 <vTaskPriorityDisinheritAfterTimeout+0x32>
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8007236:	e7fe      	b.n	8007236 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	24000864 	.word	0x24000864
 8007240:	24000870 	.word	0x24000870
 8007244:	24000ce0 	.word	0x24000ce0

08007248 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <pvTaskIncrementMutexHeldCount+0x18>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	b123      	cbz	r3, 8007258 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800724e:	4b04      	ldr	r3, [pc, #16]	; (8007260 <pvTaskIncrementMutexHeldCount+0x18>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007254:	3301      	adds	r3, #1
 8007256:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8007258:	4b01      	ldr	r3, [pc, #4]	; (8007260 <pvTaskIncrementMutexHeldCount+0x18>)
 800725a:	6818      	ldr	r0, [r3, #0]
	}
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	24000864 	.word	0x24000864

08007264 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007264:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007266:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007268:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800726a:	4291      	cmp	r1, r2
 800726c:	d80c      	bhi.n	8007288 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	6983      	ldr	r3, [r0, #24]
 8007272:	429a      	cmp	r2, r3
 8007274:	d301      	bcc.n	800727a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007276:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8007278:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800727a:	1d01      	adds	r1, r0, #4
 800727c:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <prvInsertTimerInActiveList+0x40>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	f7fe fca9 	bl	8005bd6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007284:	2000      	movs	r0, #0
 8007286:	e7f7      	b.n	8007278 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007288:	429a      	cmp	r2, r3
 800728a:	d203      	bcs.n	8007294 <prvInsertTimerInActiveList+0x30>
 800728c:	4299      	cmp	r1, r3
 800728e:	d301      	bcc.n	8007294 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 8007290:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007292:	e7f1      	b.n	8007278 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007294:	1d01      	adds	r1, r0, #4
 8007296:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <prvInsertTimerInActiveList+0x44>)
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	f7fe fc9c 	bl	8005bd6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800729e:	2000      	movs	r0, #0
 80072a0:	e7ea      	b.n	8007278 <prvInsertTimerInActiveList+0x14>
 80072a2:	bf00      	nop
 80072a4:	24000d64 	.word	0x24000d64
 80072a8:	24000d60 	.word	0x24000d60

080072ac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072ac:	b530      	push	{r4, r5, lr}
 80072ae:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072b0:	f000 fa58 	bl	8007764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072b4:	4b11      	ldr	r3, [pc, #68]	; (80072fc <prvCheckForValidListAndQueue+0x50>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	b11b      	cbz	r3, 80072c2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072ba:	f000 fa75 	bl	80077a8 <vPortExitCritical>
}
 80072be:	b003      	add	sp, #12
 80072c0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80072c2:	4d0f      	ldr	r5, [pc, #60]	; (8007300 <prvCheckForValidListAndQueue+0x54>)
 80072c4:	4628      	mov	r0, r5
 80072c6:	f7fe fc6d 	bl	8005ba4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072ca:	4c0e      	ldr	r4, [pc, #56]	; (8007304 <prvCheckForValidListAndQueue+0x58>)
 80072cc:	4620      	mov	r0, r4
 80072ce:	f7fe fc69 	bl	8005ba4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072d2:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <prvCheckForValidListAndQueue+0x5c>)
 80072d4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072d8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072da:	2300      	movs	r3, #0
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	4b0c      	ldr	r3, [pc, #48]	; (8007310 <prvCheckForValidListAndQueue+0x64>)
 80072e0:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <prvCheckForValidListAndQueue+0x68>)
 80072e2:	2110      	movs	r1, #16
 80072e4:	200a      	movs	r0, #10
 80072e6:	f7fe fd75 	bl	8005dd4 <xQueueGenericCreateStatic>
 80072ea:	4b04      	ldr	r3, [pc, #16]	; (80072fc <prvCheckForValidListAndQueue+0x50>)
 80072ec:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d0e3      	beq.n	80072ba <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072f2:	4909      	ldr	r1, [pc, #36]	; (8007318 <prvCheckForValidListAndQueue+0x6c>)
 80072f4:	f7ff f990 	bl	8006618 <vQueueAddToRegistry>
 80072f8:	e7df      	b.n	80072ba <prvCheckForValidListAndQueue+0xe>
 80072fa:	bf00      	nop
 80072fc:	24000e84 	.word	0x24000e84
 8007300:	24000e08 	.word	0x24000e08
 8007304:	24000e1c 	.word	0x24000e1c
 8007308:	24000d60 	.word	0x24000d60
 800730c:	24000d64 	.word	0x24000d64
 8007310:	24000e34 	.word	0x24000e34
 8007314:	24000d68 	.word	0x24000d68
 8007318:	080182e0 	.word	0x080182e0

0800731c <xTimerCreateTimerTask>:
{
 800731c:	b510      	push	{r4, lr}
 800731e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007320:	f7ff ffc4 	bl	80072ac <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007324:	4b12      	ldr	r3, [pc, #72]	; (8007370 <xTimerCreateTimerTask+0x54>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	b1cb      	cbz	r3, 800735e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800732a:	2400      	movs	r4, #0
 800732c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800732e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007330:	aa07      	add	r2, sp, #28
 8007332:	a906      	add	r1, sp, #24
 8007334:	a805      	add	r0, sp, #20
 8007336:	f7fe fc29 	bl	8005b8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800733a:	9b05      	ldr	r3, [sp, #20]
 800733c:	9302      	str	r3, [sp, #8]
 800733e:	9b06      	ldr	r3, [sp, #24]
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	2302      	movs	r3, #2
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4623      	mov	r3, r4
 8007348:	9a07      	ldr	r2, [sp, #28]
 800734a:	490a      	ldr	r1, [pc, #40]	; (8007374 <xTimerCreateTimerTask+0x58>)
 800734c:	480a      	ldr	r0, [pc, #40]	; (8007378 <xTimerCreateTimerTask+0x5c>)
 800734e:	f7ff fb5b 	bl	8006a08 <xTaskCreateStatic>
 8007352:	4a0a      	ldr	r2, [pc, #40]	; (800737c <xTimerCreateTimerTask+0x60>)
 8007354:	6010      	str	r0, [r2, #0]
			if( xTimerTaskHandle != NULL )
 8007356:	b110      	cbz	r0, 800735e <xTimerCreateTimerTask+0x42>
}
 8007358:	2001      	movs	r0, #1
 800735a:	b008      	add	sp, #32
 800735c:	bd10      	pop	{r4, pc}
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800736e:	e7fe      	b.n	800736e <xTimerCreateTimerTask+0x52>
 8007370:	24000e84 	.word	0x24000e84
 8007374:	080182e8 	.word	0x080182e8
 8007378:	08007491 	.word	0x08007491
 800737c:	24000e88 	.word	0x24000e88

08007380 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007380:	b1d8      	cbz	r0, 80073ba <xTimerGenericCommand+0x3a>
{
 8007382:	b510      	push	{r4, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	4614      	mov	r4, r2
 8007388:	461a      	mov	r2, r3
 800738a:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800738c:	4813      	ldr	r0, [pc, #76]	; (80073dc <xTimerGenericCommand+0x5c>)
 800738e:	6800      	ldr	r0, [r0, #0]
 8007390:	b308      	cbz	r0, 80073d6 <xTimerGenericCommand+0x56>
		xMessage.xMessageID = xCommandID;
 8007392:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007394:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007396:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007398:	2905      	cmp	r1, #5
 800739a:	dc17      	bgt.n	80073cc <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800739c:	f7ff fe62 	bl	8007064 <xTaskGetSchedulerState>
 80073a0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	bf0c      	ite	eq
 80073a8:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073aa:	461a      	movne	r2, r3
 80073ac:	4669      	mov	r1, sp
 80073ae:	480b      	ldr	r0, [pc, #44]	; (80073dc <xTimerGenericCommand+0x5c>)
 80073b0:	6800      	ldr	r0, [r0, #0]
 80073b2:	f7fe fdcd 	bl	8005f50 <xQueueGenericSend>
}
 80073b6:	b004      	add	sp, #16
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80073ca:	e7fe      	b.n	80073ca <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073cc:	2300      	movs	r3, #0
 80073ce:	4669      	mov	r1, sp
 80073d0:	f7fe fe86 	bl	80060e0 <xQueueGenericSendFromISR>
 80073d4:	e7ef      	b.n	80073b6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
 80073d6:	2000      	movs	r0, #0
	return xReturn;
 80073d8:	e7ed      	b.n	80073b6 <xTimerGenericCommand+0x36>
 80073da:	bf00      	nop
 80073dc:	24000e84 	.word	0x24000e84

080073e0 <prvSampleTimeNow>:
{
 80073e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80073e8:	f7ff fbd0 	bl	8006b8c <xTaskGetTickCount>
 80073ec:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80073ee:	4b25      	ldr	r3, [pc, #148]	; (8007484 <prvSampleTimeNow+0xa4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4283      	cmp	r3, r0
 80073f4:	d807      	bhi.n	8007406 <prvSampleTimeNow+0x26>
		*pxTimerListsWereSwitched = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80073fa:	4b22      	ldr	r3, [pc, #136]	; (8007484 <prvSampleTimeNow+0xa4>)
 80073fc:	601c      	str	r4, [r3, #0]
}
 80073fe:	4620      	mov	r0, r4
 8007400:	b002      	add	sp, #8
 8007402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007406:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800748c <prvSampleTimeNow+0xac>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800740a:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800740e:	f8d8 3000 	ldr.w	r3, [r8]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	b372      	cbz	r2, 8007474 <prvSampleTimeNow+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800741c:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800741e:	1d2f      	adds	r7, r5, #4
 8007420:	4638      	mov	r0, r7
 8007422:	f7fe fbf1 	bl	8005c08 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007426:	6a2b      	ldr	r3, [r5, #32]
 8007428:	4628      	mov	r0, r5
 800742a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800742c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8007430:	f013 0f04 	tst.w	r3, #4
 8007434:	d0eb      	beq.n	800740e <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007436:	69ab      	ldr	r3, [r5, #24]
 8007438:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800743a:	459a      	cmp	sl, r3
 800743c:	d207      	bcs.n	800744e <prvSampleTimeNow+0x6e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800743e:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007440:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007442:	4639      	mov	r1, r7
 8007444:	f8d8 0000 	ldr.w	r0, [r8]
 8007448:	f7fe fbc5 	bl	8005bd6 <vListInsert>
 800744c:	e7df      	b.n	800740e <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800744e:	f8cd 9000 	str.w	r9, [sp]
 8007452:	464b      	mov	r3, r9
 8007454:	4652      	mov	r2, sl
 8007456:	4649      	mov	r1, r9
 8007458:	4628      	mov	r0, r5
 800745a:	f7ff ff91 	bl	8007380 <xTimerGenericCommand>
				configASSERT( xResult );
 800745e:	2800      	cmp	r0, #0
 8007460:	d1d5      	bne.n	800740e <prvSampleTimeNow+0x2e>
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	e7fe      	b.n	8007472 <prvSampleTimeNow+0x92>
	pxCurrentTimerList = pxOverflowTimerList;
 8007474:	4a04      	ldr	r2, [pc, #16]	; (8007488 <prvSampleTimeNow+0xa8>)
 8007476:	6810      	ldr	r0, [r2, #0]
 8007478:	4904      	ldr	r1, [pc, #16]	; (800748c <prvSampleTimeNow+0xac>)
 800747a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800747c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800747e:	2301      	movs	r3, #1
 8007480:	6033      	str	r3, [r6, #0]
 8007482:	e7ba      	b.n	80073fa <prvSampleTimeNow+0x1a>
 8007484:	24000e30 	.word	0x24000e30
 8007488:	24000d64 	.word	0x24000d64
 800748c:	24000d60 	.word	0x24000d60

08007490 <prvTimerTask>:
{
 8007490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007494:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007496:	4e7b      	ldr	r6, [pc, #492]	; (8007684 <prvTimerTask+0x1f4>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007498:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8007690 <prvTimerTask+0x200>
					portYIELD_WITHIN_API();
 800749c:	4f7a      	ldr	r7, [pc, #488]	; (8007688 <prvTimerTask+0x1f8>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800749e:	6833      	ldr	r3, [r6, #0]
 80074a0:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074a2:	2c00      	cmp	r4, #0
 80074a4:	f000 80df 	beq.w	8007666 <prvTimerTask+0x1d6>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 80074ac:	f7ff fb66 	bl	8006b7c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b0:	a804      	add	r0, sp, #16
 80074b2:	f7ff ff95 	bl	80073e0 <prvSampleTimeNow>
 80074b6:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80074b8:	9a04      	ldr	r2, [sp, #16]
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	f040 80dd 	bne.w	800767a <prvTimerTask+0x1ea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d211      	bcs.n	80074e8 <prvTimerTask+0x58>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074c4:	1b61      	subs	r1, r4, r5
 80074c6:	4b71      	ldr	r3, [pc, #452]	; (800768c <prvTimerTask+0x1fc>)
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f7ff f8e7 	bl	800669c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074ce:	f7ff fbfb 	bl	8006cc8 <xTaskResumeAll>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f040 80d3 	bne.w	800767e <prvTimerTask+0x1ee>
					portYIELD_WITHIN_API();
 80074d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074dc:	603b      	str	r3, [r7, #0]
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	e0ca      	b.n	800767e <prvTimerTask+0x1ee>
				( void ) xTaskResumeAll();
 80074e8:	f7ff fbee 	bl	8006cc8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ec:	6833      	ldr	r3, [r6, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074f4:	f109 0004 	add.w	r0, r9, #4
 80074f8:	f7fe fb86 	bl	8005c08 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074fc:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8007500:	f013 0f04 	tst.w	r3, #4
 8007504:	d108      	bne.n	8007518 <prvTimerTask+0x88>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800750e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8007512:	4648      	mov	r0, r9
 8007514:	4798      	blx	r3
}
 8007516:	e0b2      	b.n	800767e <prvTimerTask+0x1ee>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007518:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800751c:	4623      	mov	r3, r4
 800751e:	462a      	mov	r2, r5
 8007520:	4421      	add	r1, r4
 8007522:	4648      	mov	r0, r9
 8007524:	f7ff fe9e 	bl	8007264 <prvInsertTimerInActiveList>
 8007528:	2800      	cmp	r0, #0
 800752a:	d0f0      	beq.n	800750e <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800752c:	2100      	movs	r1, #0
 800752e:	9100      	str	r1, [sp, #0]
 8007530:	460b      	mov	r3, r1
 8007532:	4622      	mov	r2, r4
 8007534:	4648      	mov	r0, r9
 8007536:	f7ff ff23 	bl	8007380 <xTimerGenericCommand>
			configASSERT( xResult );
 800753a:	2800      	cmp	r0, #0
 800753c:	d1e7      	bne.n	800750e <prvTimerTask+0x7e>
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	e7fe      	b.n	800754e <prvTimerTask+0xbe>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007550:	f8d8 3000 	ldr.w	r3, [r8]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	fab2 f282 	clz	r2, r2
 800755a:	0952      	lsrs	r2, r2, #5
 800755c:	e7b2      	b.n	80074c4 <prvTimerTask+0x34>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800755e:	9907      	ldr	r1, [sp, #28]
 8007560:	9806      	ldr	r0, [sp, #24]
 8007562:	9b05      	ldr	r3, [sp, #20]
 8007564:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	da09      	bge.n	8007580 <prvTimerTask+0xf0>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800756c:	4622      	mov	r2, r4
 800756e:	a904      	add	r1, sp, #16
 8007570:	6828      	ldr	r0, [r5, #0]
 8007572:	f7fe fe73 	bl	800625c <xQueueReceive>
 8007576:	2800      	cmp	r0, #0
 8007578:	d091      	beq.n	800749e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800757a:	9b04      	ldr	r3, [sp, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	dbee      	blt.n	800755e <prvTimerTask+0xce>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007580:	f8dd 9018 	ldr.w	r9, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007584:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007588:	b11b      	cbz	r3, 8007592 <prvTimerTask+0x102>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800758a:	f109 0004 	add.w	r0, r9, #4
 800758e:	f7fe fb3b 	bl	8005c08 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007592:	a803      	add	r0, sp, #12
 8007594:	f7ff ff24 	bl	80073e0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007598:	9b04      	ldr	r3, [sp, #16]
 800759a:	2b09      	cmp	r3, #9
 800759c:	d8e6      	bhi.n	800756c <prvTimerTask+0xdc>
 800759e:	e8df f003 	tbb	[pc, r3]
 80075a2:	0505      	.short	0x0505
 80075a4:	543a3305 	.word	0x543a3305
 80075a8:	3a330505 	.word	0x3a330505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075ac:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075b8:	9b05      	ldr	r3, [sp, #20]
 80075ba:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80075be:	4602      	mov	r2, r0
 80075c0:	4419      	add	r1, r3
 80075c2:	4648      	mov	r0, r9
 80075c4:	f7ff fe4e 	bl	8007264 <prvInsertTimerInActiveList>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d0cf      	beq.n	800756c <prvTimerTask+0xdc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075cc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80075d0:	4648      	mov	r0, r9
 80075d2:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075d4:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 80075d8:	f013 0f04 	tst.w	r3, #4
 80075dc:	d0c6      	beq.n	800756c <prvTimerTask+0xdc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075de:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80075e2:	9400      	str	r4, [sp, #0]
 80075e4:	4623      	mov	r3, r4
 80075e6:	9905      	ldr	r1, [sp, #20]
 80075e8:	440a      	add	r2, r1
 80075ea:	4621      	mov	r1, r4
 80075ec:	4648      	mov	r0, r9
 80075ee:	f7ff fec7 	bl	8007380 <xTimerGenericCommand>
							configASSERT( xResult );
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d1ba      	bne.n	800756c <prvTimerTask+0xdc>
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	e7fe      	b.n	8007606 <prvTimerTask+0x176>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007608:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
					break;
 8007614:	e7aa      	b.n	800756c <prvTimerTask+0xdc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007616:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007622:	9905      	ldr	r1, [sp, #20]
 8007624:	f8c9 1018 	str.w	r1, [r9, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007628:	b131      	cbz	r1, 8007638 <prvTimerTask+0x1a8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800762a:	4603      	mov	r3, r0
 800762c:	4602      	mov	r2, r0
 800762e:	4401      	add	r1, r0
 8007630:	4648      	mov	r0, r9
 8007632:	f7ff fe17 	bl	8007264 <prvInsertTimerInActiveList>
					break;
 8007636:	e799      	b.n	800756c <prvTimerTask+0xdc>
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007648:	e7fe      	b.n	8007648 <prvTimerTask+0x1b8>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800764a:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800764e:	f013 0f02 	tst.w	r3, #2
 8007652:	d004      	beq.n	800765e <prvTimerTask+0x1ce>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
 800765c:	e786      	b.n	800756c <prvTimerTask+0xdc>
							vPortFree( pxTimer );
 800765e:	4648      	mov	r0, r9
 8007660:	f000 faa2 	bl	8007ba8 <vPortFree>
 8007664:	e782      	b.n	800756c <prvTimerTask+0xdc>
	vTaskSuspendAll();
 8007666:	f7ff fa89 	bl	8006b7c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800766a:	a804      	add	r0, sp, #16
 800766c:	f7ff feb8 	bl	80073e0 <prvSampleTimeNow>
 8007670:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	f43f af6b 	beq.w	8007550 <prvTimerTask+0xc0>
			( void ) xTaskResumeAll();
 800767a:	f7ff fb25 	bl	8006cc8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800767e:	4d03      	ldr	r5, [pc, #12]	; (800768c <prvTimerTask+0x1fc>)
 8007680:	2400      	movs	r4, #0
}
 8007682:	e773      	b.n	800756c <prvTimerTask+0xdc>
 8007684:	24000d60 	.word	0x24000d60
 8007688:	e000ed04 	.word	0xe000ed04
 800768c:	24000e84 	.word	0x24000e84
 8007690:	24000d64 	.word	0x24000d64

08007694 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007694:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800769a:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <prvTaskExitError+0x3c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d008      	beq.n	80076b6 <prvTaskExitError+0x22>
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	e7fe      	b.n	80076b4 <prvTaskExitError+0x20>
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0fc      	beq.n	80076c6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076cc:	b002      	add	sp, #8
 80076ce:	4770      	bx	lr
 80076d0:	24000014 	.word	0x24000014

080076d4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076d4:	4808      	ldr	r0, [pc, #32]	; (80076f8 <prvPortStartFirstTask+0x24>)
 80076d6:	6800      	ldr	r0, [r0, #0]
 80076d8:	6800      	ldr	r0, [r0, #0]
 80076da:	f380 8808 	msr	MSP, r0
 80076de:	f04f 0000 	mov.w	r0, #0
 80076e2:	f380 8814 	msr	CONTROL, r0
 80076e6:	b662      	cpsie	i
 80076e8:	b661      	cpsie	f
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	df00      	svc	0
 80076f4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076f6:	0000      	.short	0x0000
 80076f8:	e000ed08 	.word	0xe000ed08

080076fc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076fc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800770c <vPortEnableVFP+0x10>
 8007700:	6801      	ldr	r1, [r0, #0]
 8007702:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007706:	6001      	str	r1, [r0, #0]
 8007708:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800770a:	0000      	.short	0x0000
 800770c:	e000ed88 	.word	0xe000ed88

08007710 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007714:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007718:	f021 0101 	bic.w	r1, r1, #1
 800771c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <pxPortInitialiseStack+0x28>)
 8007722:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007726:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800772a:	f06f 0302 	mvn.w	r3, #2
 800772e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007732:	3844      	subs	r0, #68	; 0x44
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	08007695 	.word	0x08007695
 800773c:	00000000 	.word	0x00000000

08007740 <SVC_Handler>:
	__asm volatile (
 8007740:	4b07      	ldr	r3, [pc, #28]	; (8007760 <pxCurrentTCBConst2>)
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	f380 8809 	msr	PSP, r0
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8811 	msr	BASEPRI, r0
 800775a:	4770      	bx	lr
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst2>:
 8007760:	24000864 	.word	0x24000864

08007764 <vPortEnterCritical>:
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007774:	4a0a      	ldr	r2, [pc, #40]	; (80077a0 <vPortEnterCritical+0x3c>)
 8007776:	6813      	ldr	r3, [r2, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800777c:	2b01      	cmp	r3, #1
 800777e:	d000      	beq.n	8007782 <vPortEnterCritical+0x1e>
}
 8007780:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007782:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <vPortEnterCritical+0x40>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f013 0fff 	tst.w	r3, #255	; 0xff
 800778a:	d0f9      	beq.n	8007780 <vPortEnterCritical+0x1c>
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	e7fe      	b.n	800779c <vPortEnterCritical+0x38>
 800779e:	bf00      	nop
 80077a0:	24000014 	.word	0x24000014
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80077a8:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <vPortExitCritical+0x28>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	b943      	cbnz	r3, 80077c0 <vPortExitCritical+0x18>
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	e7fe      	b.n	80077be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80077c0:	3b01      	subs	r3, #1
 80077c2:	4a03      	ldr	r2, [pc, #12]	; (80077d0 <vPortExitCritical+0x28>)
 80077c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077c6:	b90b      	cbnz	r3, 80077cc <vPortExitCritical+0x24>
	__asm volatile
 80077c8:	f383 8811 	msr	BASEPRI, r3
}
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	24000014 	.word	0x24000014
	...

080077e0 <PendSV_Handler>:
	__asm volatile
 80077e0:	f3ef 8009 	mrs	r0, PSP
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4b15      	ldr	r3, [pc, #84]	; (8007840 <pxCurrentTCBConst>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	f01e 0f10 	tst.w	lr, #16
 80077f0:	bf08      	it	eq
 80077f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	6010      	str	r0, [r2, #0]
 80077fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007804:	f380 8811 	msr	BASEPRI, r0
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f7ff fb02 	bl	8006e18 <vTaskSwitchContext>
 8007814:	f04f 0000 	mov.w	r0, #0
 8007818:	f380 8811 	msr	BASEPRI, r0
 800781c:	bc09      	pop	{r0, r3}
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	6808      	ldr	r0, [r1, #0]
 8007822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007826:	f01e 0f10 	tst.w	lr, #16
 800782a:	bf08      	it	eq
 800782c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007830:	f380 8809 	msr	PSP, r0
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst>:
 8007840:	24000864 	.word	0x24000864

08007844 <xPortSysTickHandler>:
{
 8007844:	b508      	push	{r3, lr}
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007856:	f7ff f99f 	bl	8006b98 <xTaskIncrementTick>
 800785a:	b118      	cbz	r0, 8007864 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800785c:	4b03      	ldr	r3, [pc, #12]	; (800786c <xPortSysTickHandler+0x28>)
 800785e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007862:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007864:	2300      	movs	r3, #0
 8007866:	f383 8811 	msr	BASEPRI, r3
}
 800786a:	bd08      	pop	{r3, pc}
 800786c:	e000ed04 	.word	0xe000ed04

08007870 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007870:	4a08      	ldr	r2, [pc, #32]	; (8007894 <vPortSetupTimerInterrupt+0x24>)
 8007872:	2300      	movs	r3, #0
 8007874:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007876:	4908      	ldr	r1, [pc, #32]	; (8007898 <vPortSetupTimerInterrupt+0x28>)
 8007878:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800787a:	4b08      	ldr	r3, [pc, #32]	; (800789c <vPortSetupTimerInterrupt+0x2c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4908      	ldr	r1, [pc, #32]	; (80078a0 <vPortSetupTimerInterrupt+0x30>)
 8007880:	fba1 1303 	umull	r1, r3, r1, r3
 8007884:	099b      	lsrs	r3, r3, #6
 8007886:	3b01      	subs	r3, #1
 8007888:	4906      	ldr	r1, [pc, #24]	; (80078a4 <vPortSetupTimerInterrupt+0x34>)
 800788a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800788c:	2307      	movs	r3, #7
 800788e:	6013      	str	r3, [r2, #0]
}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	e000e010 	.word	0xe000e010
 8007898:	e000e018 	.word	0xe000e018
 800789c:	24000004 	.word	0x24000004
 80078a0:	10624dd3 	.word	0x10624dd3
 80078a4:	e000e014 	.word	0xe000e014

080078a8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078a8:	4b3b      	ldr	r3, [pc, #236]	; (8007998 <xPortStartScheduler+0xf0>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	4b3b      	ldr	r3, [pc, #236]	; (800799c <xPortStartScheduler+0xf4>)
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d039      	beq.n	8007926 <xPortStartScheduler+0x7e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078b2:	4b39      	ldr	r3, [pc, #228]	; (8007998 <xPortStartScheduler+0xf0>)
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4b3a      	ldr	r3, [pc, #232]	; (80079a0 <xPortStartScheduler+0xf8>)
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d03d      	beq.n	8007938 <xPortStartScheduler+0x90>
{
 80078bc:	b510      	push	{r4, lr}
 80078be:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078c0:	4b38      	ldr	r3, [pc, #224]	; (80079a4 <xPortStartScheduler+0xfc>)
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078c8:	22ff      	movs	r2, #255	; 0xff
 80078ca:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80078d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078dc:	4a32      	ldr	r2, [pc, #200]	; (80079a8 <xPortStartScheduler+0x100>)
 80078de:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078e0:	4b32      	ldr	r3, [pc, #200]	; (80079ac <xPortStartScheduler+0x104>)
 80078e2:	2207      	movs	r2, #7
 80078e4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80078ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078ee:	d011      	beq.n	8007914 <xPortStartScheduler+0x6c>
 80078f0:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078fe:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8007902:	4613      	mov	r3, r2
 8007904:	3a01      	subs	r2, #1
 8007906:	f011 0f80 	tst.w	r1, #128	; 0x80
 800790a:	d1f2      	bne.n	80078f2 <xPortStartScheduler+0x4a>
 800790c:	4a27      	ldr	r2, [pc, #156]	; (80079ac <xPortStartScheduler+0x104>)
 800790e:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007910:	2b03      	cmp	r3, #3
 8007912:	d01a      	beq.n	800794a <xPortStartScheduler+0xa2>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	e7fe      	b.n	8007924 <xPortStartScheduler+0x7c>
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007936:	e7fe      	b.n	8007936 <xPortStartScheduler+0x8e>
 8007938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007948:	e7fe      	b.n	8007948 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800794a:	4b18      	ldr	r3, [pc, #96]	; (80079ac <xPortStartScheduler+0x104>)
 800794c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007950:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <xPortStartScheduler+0xfc>)
 8007958:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800795a:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <xPortStartScheduler+0x108>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007962:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800796a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800796c:	f7ff ff80 	bl	8007870 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007970:	2400      	movs	r4, #0
 8007972:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <xPortStartScheduler+0x10c>)
 8007974:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007976:	f7ff fec1 	bl	80076fc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800797a:	4a0f      	ldr	r2, [pc, #60]	; (80079b8 <xPortStartScheduler+0x110>)
 800797c:	6813      	ldr	r3, [r2, #0]
 800797e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007982:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007984:	f7ff fea6 	bl	80076d4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007988:	f7ff fa46 	bl	8006e18 <vTaskSwitchContext>
	prvTaskExitError();
 800798c:	f7ff fe82 	bl	8007694 <prvTaskExitError>
}
 8007990:	4620      	mov	r0, r4
 8007992:	b002      	add	sp, #8
 8007994:	bd10      	pop	{r4, pc}
 8007996:	bf00      	nop
 8007998:	e000ed00 	.word	0xe000ed00
 800799c:	410fc271 	.word	0x410fc271
 80079a0:	410fc270 	.word	0x410fc270
 80079a4:	e000e400 	.word	0xe000e400
 80079a8:	24000e8c 	.word	0x24000e8c
 80079ac:	24000e90 	.word	0x24000e90
 80079b0:	e000ed20 	.word	0xe000ed20
 80079b4:	24000014 	.word	0x24000014
 80079b8:	e000ef34 	.word	0xe000ef34

080079bc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079bc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079c0:	2b0f      	cmp	r3, #15
 80079c2:	d90f      	bls.n	80079e4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079c4:	4a10      	ldr	r2, [pc, #64]	; (8007a08 <vPortValidateInterruptPriority+0x4c>)
 80079c6:	5c9b      	ldrb	r3, [r3, r2]
 80079c8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079ca:	4a10      	ldr	r2, [pc, #64]	; (8007a0c <vPortValidateInterruptPriority+0x50>)
 80079cc:	7812      	ldrb	r2, [r2, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d908      	bls.n	80079e4 <vPortValidateInterruptPriority+0x28>
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	e7fe      	b.n	80079e2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079e4:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <vPortValidateInterruptPriority+0x54>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079ec:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <vPortValidateInterruptPriority+0x58>)
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d908      	bls.n	8007a06 <vPortValidateInterruptPriority+0x4a>
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	e7fe      	b.n	8007a04 <vPortValidateInterruptPriority+0x48>
	}
 8007a06:	4770      	bx	lr
 8007a08:	e000e3f0 	.word	0xe000e3f0
 8007a0c:	24000e8c 	.word	0x24000e8c
 8007a10:	e000ed0c 	.word	0xe000ed0c
 8007a14:	24000e90 	.word	0x24000e90

08007a18 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a18:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a1a:	4b13      	ldr	r3, [pc, #76]	; (8007a68 <prvInsertBlockIntoFreeList+0x50>)
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4283      	cmp	r3, r0
 8007a22:	d3fb      	bcc.n	8007a1c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a24:	6851      	ldr	r1, [r2, #4]
 8007a26:	1854      	adds	r4, r2, r1
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	d00a      	beq.n	8007a42 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a2c:	6841      	ldr	r1, [r0, #4]
 8007a2e:	1844      	adds	r4, r0, r1
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d00b      	beq.n	8007a4c <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a34:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a36:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a38:	bf18      	it	ne
 8007a3a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a40:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a42:	6840      	ldr	r0, [r0, #4]
 8007a44:	4401      	add	r1, r0
 8007a46:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007a48:	4610      	mov	r0, r2
 8007a4a:	e7ef      	b.n	8007a2c <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a4c:	4c07      	ldr	r4, [pc, #28]	; (8007a6c <prvInsertBlockIntoFreeList+0x54>)
 8007a4e:	6824      	ldr	r4, [r4, #0]
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	d006      	beq.n	8007a62 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	4419      	add	r1, r3
 8007a58:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a5a:	6813      	ldr	r3, [r2, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6003      	str	r3, [r0, #0]
 8007a60:	e7e9      	b.n	8007a36 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a62:	6004      	str	r4, [r0, #0]
 8007a64:	e7e7      	b.n	8007a36 <prvInsertBlockIntoFreeList+0x1e>
 8007a66:	bf00      	nop
 8007a68:	2400aeac 	.word	0x2400aeac
 8007a6c:	24000e94 	.word	0x24000e94

08007a70 <pvPortMalloc>:
{
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007a74:	f7ff f882 	bl	8006b7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007a78:	4b44      	ldr	r3, [pc, #272]	; (8007b8c <pvPortMalloc+0x11c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	b1b3      	cbz	r3, 8007aac <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a7e:	4b44      	ldr	r3, [pc, #272]	; (8007b90 <pvPortMalloc+0x120>)
 8007a80:	681e      	ldr	r6, [r3, #0]
 8007a82:	4226      	tst	r6, r4
 8007a84:	d17d      	bne.n	8007b82 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 8007a86:	2c00      	cmp	r4, #0
 8007a88:	d07b      	beq.n	8007b82 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 8007a8a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a8e:	f014 0f07 	tst.w	r4, #7
 8007a92:	d002      	beq.n	8007a9a <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a94:	f023 0307 	bic.w	r3, r3, #7
 8007a98:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d071      	beq.n	8007b82 <pvPortMalloc+0x112>
 8007a9e:	4a3d      	ldr	r2, [pc, #244]	; (8007b94 <pvPortMalloc+0x124>)
 8007aa0:	6815      	ldr	r5, [r2, #0]
 8007aa2:	429d      	cmp	r5, r3
 8007aa4:	d36d      	bcc.n	8007b82 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 8007aa6:	4a3c      	ldr	r2, [pc, #240]	; (8007b98 <pvPortMalloc+0x128>)
 8007aa8:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aaa:	e027      	b.n	8007afc <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007aac:	4a3b      	ldr	r2, [pc, #236]	; (8007b9c <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aae:	f012 0f07 	tst.w	r2, #7
 8007ab2:	d01e      	beq.n	8007af2 <pvPortMalloc+0x82>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ab4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aba:	f502 4320 	add.w	r3, r2, #40960	; 0xa000
 8007abe:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ac0:	460a      	mov	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ac2:	4835      	ldr	r0, [pc, #212]	; (8007b98 <pvPortMalloc+0x128>)
 8007ac4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007aca:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007acc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ace:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007ad2:	482e      	ldr	r0, [pc, #184]	; (8007b8c <pvPortMalloc+0x11c>)
 8007ad4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007ad6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ad8:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ada:	1a99      	subs	r1, r3, r2
 8007adc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ade:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ae0:	4b2f      	ldr	r3, [pc, #188]	; (8007ba0 <pvPortMalloc+0x130>)
 8007ae2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ae4:	4b2b      	ldr	r3, [pc, #172]	; (8007b94 <pvPortMalloc+0x124>)
 8007ae6:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ae8:	4b29      	ldr	r3, [pc, #164]	; (8007b90 <pvPortMalloc+0x120>)
 8007aea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007aee:	601a      	str	r2, [r3, #0]
}
 8007af0:	e7c5      	b.n	8007a7e <pvPortMalloc+0xe>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007af2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007af6:	e7e4      	b.n	8007ac2 <pvPortMalloc+0x52>
 8007af8:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007afa:	460c      	mov	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007afc:	6861      	ldr	r1, [r4, #4]
 8007afe:	4299      	cmp	r1, r3
 8007b00:	d202      	bcs.n	8007b08 <pvPortMalloc+0x98>
 8007b02:	6821      	ldr	r1, [r4, #0]
 8007b04:	2900      	cmp	r1, #0
 8007b06:	d1f7      	bne.n	8007af8 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8007b08:	4920      	ldr	r1, [pc, #128]	; (8007b8c <pvPortMalloc+0x11c>)
 8007b0a:	6809      	ldr	r1, [r1, #0]
 8007b0c:	42a1      	cmp	r1, r4
 8007b0e:	d038      	beq.n	8007b82 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b10:	6817      	ldr	r7, [r2, #0]
 8007b12:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b14:	6821      	ldr	r1, [r4, #0]
 8007b16:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b18:	6862      	ldr	r2, [r4, #4]
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	2a10      	cmp	r2, #16
 8007b1e:	d910      	bls.n	8007b42 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b20:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b22:	f010 0f07 	tst.w	r0, #7
 8007b26:	d008      	beq.n	8007b3a <pvPortMalloc+0xca>
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	e7fe      	b.n	8007b38 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b3a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b3c:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b3e:	f7ff ff6b 	bl	8007a18 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b42:	6862      	ldr	r2, [r4, #4]
 8007b44:	1aad      	subs	r5, r5, r2
 8007b46:	4913      	ldr	r1, [pc, #76]	; (8007b94 <pvPortMalloc+0x124>)
 8007b48:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b4a:	4915      	ldr	r1, [pc, #84]	; (8007ba0 <pvPortMalloc+0x130>)
 8007b4c:	6809      	ldr	r1, [r1, #0]
 8007b4e:	428d      	cmp	r5, r1
 8007b50:	d201      	bcs.n	8007b56 <pvPortMalloc+0xe6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b52:	4913      	ldr	r1, [pc, #76]	; (8007ba0 <pvPortMalloc+0x130>)
 8007b54:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b56:	4316      	orrs	r6, r2
 8007b58:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8007b5e:	4a11      	ldr	r2, [pc, #68]	; (8007ba4 <pvPortMalloc+0x134>)
 8007b60:	6813      	ldr	r3, [r2, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8007b66:	f7ff f8af 	bl	8006cc8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b6a:	f017 0f07 	tst.w	r7, #7
 8007b6e:	d00b      	beq.n	8007b88 <pvPortMalloc+0x118>
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	e7fe      	b.n	8007b80 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 8007b82:	f7ff f8a1 	bl	8006cc8 <xTaskResumeAll>
 8007b86:	2700      	movs	r7, #0
}
 8007b88:	4638      	mov	r0, r7
 8007b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b8c:	24000e94 	.word	0x24000e94
 8007b90:	2400ae98 	.word	0x2400ae98
 8007b94:	2400ae9c 	.word	0x2400ae9c
 8007b98:	2400aeac 	.word	0x2400aeac
 8007b9c:	24000e98 	.word	0x24000e98
 8007ba0:	2400aea0 	.word	0x2400aea0
 8007ba4:	2400aea4 	.word	0x2400aea4

08007ba8 <vPortFree>:
	if( pv != NULL )
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d033      	beq.n	8007c14 <vPortFree+0x6c>
{
 8007bac:	b510      	push	{r4, lr}
 8007bae:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bb0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007bb4:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <vPortFree+0x70>)
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	4213      	tst	r3, r2
 8007bba:	d108      	bne.n	8007bce <vPortFree+0x26>
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	e7fe      	b.n	8007bcc <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bce:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007bd2:	b141      	cbz	r1, 8007be6 <vPortFree+0x3e>
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	e7fe      	b.n	8007be4 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007be6:	ea23 0302 	bic.w	r3, r3, r2
 8007bea:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007bee:	f7fe ffc5 	bl	8006b7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bf2:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <vPortFree+0x74>)
 8007bf4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007bf8:	6811      	ldr	r1, [r2, #0]
 8007bfa:	440b      	add	r3, r1
 8007bfc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bfe:	f1a4 0008 	sub.w	r0, r4, #8
 8007c02:	f7ff ff09 	bl	8007a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c06:	4a06      	ldr	r2, [pc, #24]	; (8007c20 <vPortFree+0x78>)
 8007c08:	6813      	ldr	r3, [r2, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8007c0e:	f7ff f85b 	bl	8006cc8 <xTaskResumeAll>
}
 8007c12:	bd10      	pop	{r4, pc}
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	2400ae98 	.word	0x2400ae98
 8007c1c:	2400ae9c 	.word	0x2400ae9c
 8007c20:	2400aea8 	.word	0x2400aea8

08007c24 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8007c24:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8007c26:	f001 fc47 	bl	80094b8 <touchgfx_init>
}
 8007c2a:	bd08      	pop	{r3, pc}

08007c2c <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8007c2c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8007c2e:	f001 fcb1 	bl	8009594 <touchgfx_taskEntry>
}
 8007c32:	bd08      	pop	{r3, pc}

08007c34 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId CON = 3;     // consolab_40_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8007c34:	4770      	bx	lr

08007c36 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8007c36:	b508      	push	{r3, lr}
    switch (typography)
 8007c38:	2903      	cmp	r1, #3
 8007c3a:	d813      	bhi.n	8007c64 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8007c3c:	e8df f001 	tbb	[pc, r1]
 8007c40:	0e0a0602 	.word	0x0e0a0602
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8007c44:	f000 fe1c 	bl	8008880 <_ZN17TypedTextDatabase8getFontsEv>
 8007c48:	6800      	ldr	r0, [r0, #0]
        // consolab_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8007c4a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8007c4c:	f000 fe18 	bl	8008880 <_ZN17TypedTextDatabase8getFontsEv>
 8007c50:	6840      	ldr	r0, [r0, #4]
 8007c52:	e7fa      	b.n	8007c4a <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8007c54:	f000 fe14 	bl	8008880 <_ZN17TypedTextDatabase8getFontsEv>
 8007c58:	6880      	ldr	r0, [r0, #8]
 8007c5a:	e7f6      	b.n	8007c4a <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8007c5c:	f000 fe10 	bl	8008880 <_ZN17TypedTextDatabase8getFontsEv>
 8007c60:	68c0      	ldr	r0, [r0, #12]
 8007c62:	e7f2      	b.n	8007c4a <_ZN23ApplicationFontProvider7getFontEt+0x14>
{
 8007c64:	2000      	movs	r0, #0
 8007c66:	e7f0      	b.n	8007c4a <_ZN23ApplicationFontProvider7getFontEt+0x14>

08007c68 <_ZN23ApplicationFontProviderD0Ev>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	2104      	movs	r1, #4
 8007c6e:	f00e fc4d 	bl	801650c <_ZdlPvj>
 8007c72:	4620      	mov	r0, r4
 8007c74:	bd10      	pop	{r4, pc}

08007c76 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 8007c76:	b169      	cbz	r1, 8007c94 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8007c78:	b530      	push	{r4, r5, lr}
 8007c7a:	b083      	sub	sp, #12
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8007c80:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8007c84:	6803      	ldr	r3, [r0, #0]
 8007c86:	689d      	ldr	r5, [r3, #8]
 8007c88:	f10d 0303 	add.w	r3, sp, #3
 8007c8c:	aa01      	add	r2, sp, #4
 8007c8e:	47a8      	blx	r5
        return glyph;
    }
 8007c90:	b003      	add	sp, #12
 8007c92:	bd30      	pop	{r4, r5, pc}
            return 0;
 8007c94:	2000      	movs	r0, #0
    }
 8007c96:	4770      	bx	lr

08007c98 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8007c98:	8940      	ldrh	r0, [r0, #10]
 8007c9a:	4770      	bx	lr

08007c9c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8007c9c:	8980      	ldrh	r0, [r0, #12]
 8007c9e:	4770      	bx	lr

08007ca0 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8007ca0:	8880      	ldrh	r0, [r0, #4]
 8007ca2:	4770      	bx	lr

08007ca4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8007ca4:	7983      	ldrb	r3, [r0, #6]
 8007ca6:	8880      	ldrh	r0, [r0, #4]
 8007ca8:	4418      	add	r0, r3
    }
 8007caa:	b280      	uxth	r0, r0
 8007cac:	4770      	bx	lr

08007cae <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8007cae:	79c0      	ldrb	r0, [r0, #7]
    }
 8007cb0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007cb4:	4770      	bx	lr

08007cb6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8007cb6:	79c0      	ldrb	r0, [r0, #7]
    }
 8007cb8:	09c0      	lsrs	r0, r0, #7
 8007cba:	4770      	bx	lr

08007cbc <_ZN8touchgfx9TypedTextD1Ev>:
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
    }
 8007cbc:	4770      	bx	lr

08007cbe <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	4604      	mov	r4, r0
    }
 8007cc2:	2108      	movs	r1, #8
 8007cc4:	f00e fc22 	bl	801650c <_ZdlPvj>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	bd10      	pop	{r4, pc}

08007ccc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8007ccc:	6a00      	ldr	r0, [r0, #32]
 8007cce:	4770      	bx	lr

08007cd0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8007cd0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007cd2:	4770      	bx	lr

08007cd4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8007cd4:	4770      	bx	lr

08007cd6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8007cd6:	888b      	ldrh	r3, [r1, #4]
 8007cd8:	0adb      	lsrs	r3, r3, #11
 8007cda:	6980      	ldr	r0, [r0, #24]
 8007cdc:	680a      	ldr	r2, [r1, #0]
 8007cde:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8007ce2:	4410      	add	r0, r2
 8007ce4:	4770      	bx	lr

08007ce6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8007ce6:	b1f2      	cbz	r2, 8007d26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
{
 8007ce8:	b410      	push	{r4}
 8007cea:	4614      	mov	r4, r2
    if (!glyph || glyph->kerningTableSize == 0)
 8007cec:	7b12      	ldrb	r2, [r2, #12]
 8007cee:	b1e2      	cbz	r2, 8007d2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8007cf0:	7b63      	ldrb	r3, [r4, #13]
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cf8:	7ae4      	ldrb	r4, [r4, #11]
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8007cfa:	431c      	orrs	r4, r3
 8007cfc:	69c3      	ldr	r3, [r0, #28]
 8007cfe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007d02:	1e50      	subs	r0, r2, #1
 8007d04:	b280      	uxth	r0, r0
 8007d06:	3001      	adds	r0, #1
 8007d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8007d0c:	881a      	ldrh	r2, [r3, #0]
 8007d0e:	428a      	cmp	r2, r1
 8007d10:	d006      	beq.n	8007d20 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 8007d12:	428a      	cmp	r2, r1
 8007d14:	d80d      	bhi.n	8007d32 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4c>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007d16:	3304      	adds	r3, #4
 8007d18:	4283      	cmp	r3, r0
 8007d1a:	d1f7      	bne.n	8007d0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        {
            break;
        }
    }
    return 0;
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e005      	b.n	8007d2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x46>
            return kerndata->distance;
 8007d20:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8007d24:	e002      	b.n	8007d2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x46>
        return 0;
 8007d26:	2000      	movs	r0, #0
}
 8007d28:	4770      	bx	lr
        return 0;
 8007d2a:	2000      	movs	r0, #0
}
 8007d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d30:	4770      	bx	lr
    return 0;
 8007d32:	2000      	movs	r0, #0
 8007d34:	e7fa      	b.n	8007d2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x46>

08007d36 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8007d36:	b510      	push	{r4, lr}
 8007d38:	4604      	mov	r4, r0
 8007d3a:	2128      	movs	r1, #40	; 0x28
 8007d3c:	f00e fbe6 	bl	801650c <_ZdlPvj>
 8007d40:	4620      	mov	r0, r4
 8007d42:	bd10      	pop	{r4, pc}

08007d44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8007d44:	b530      	push	{r4, r5, lr}
 8007d46:	b089      	sub	sp, #36	; 0x24
 8007d48:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8007d4a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8007d4e:	9506      	str	r5, [sp, #24]
 8007d50:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8007d54:	9505      	str	r5, [sp, #20]
 8007d56:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8007d5a:	9504      	str	r5, [sp, #16]
 8007d5c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8007d60:	9503      	str	r5, [sp, #12]
 8007d62:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8007d66:	9502      	str	r5, [sp, #8]
 8007d68:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8007d6c:	9501      	str	r5, [sp, #4]
 8007d6e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8007d72:	9500      	str	r5, [sp, #0]
 8007d74:	f007 f85e 	bl	800ee34 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8007d78:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d7e:	61a3      	str	r3, [r4, #24]
 8007d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d82:	61e3      	str	r3, [r4, #28]
 8007d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d86:	6223      	str	r3, [r4, #32]
 8007d88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d8a:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	b009      	add	sp, #36	; 0x24
 8007d90:	bd30      	pop	{r4, r5, pc}
 8007d92:	bf00      	nop
 8007d94:	0801831c 	.word	0x0801831c

08007d98 <_Z24getFont_consolab_40_4bppv>:
KEEP extern const touchgfx::KerningNode kerning_consolab_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_40_4bpp();

touchgfx::GeneratedFont& getFont_consolab_40_4bpp()
{
    static touchgfx::GeneratedFont consolab_40_4bpp(glyphs_consolab_40_4bpp, 19, 40, 0, 4, 1, 0, 0, unicodes_consolab_40_4bpp, kerning_consolab_40_4bpp, 63, 0, 0, 0);
 8007d98:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <_Z24getFont_consolab_40_4bppv+0x58>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f013 0f01 	tst.w	r3, #1
 8007da0:	d001      	beq.n	8007da6 <_Z24getFont_consolab_40_4bppv+0xe>
    return consolab_40_4bpp;
}
 8007da2:	4814      	ldr	r0, [pc, #80]	; (8007df4 <_Z24getFont_consolab_40_4bppv+0x5c>)
 8007da4:	4770      	bx	lr
{
 8007da6:	b530      	push	{r4, r5, lr}
 8007da8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont consolab_40_4bpp(glyphs_consolab_40_4bpp, 19, 40, 0, 4, 1, 0, 0, unicodes_consolab_40_4bpp, kerning_consolab_40_4bpp, 63, 0, 0, 0);
 8007daa:	4c12      	ldr	r4, [pc, #72]	; (8007df4 <_Z24getFont_consolab_40_4bppv+0x5c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	930a      	str	r3, [sp, #40]	; 0x28
 8007db0:	9309      	str	r3, [sp, #36]	; 0x24
 8007db2:	9308      	str	r3, [sp, #32]
 8007db4:	223f      	movs	r2, #63	; 0x3f
 8007db6:	9207      	str	r2, [sp, #28]
 8007db8:	4a0f      	ldr	r2, [pc, #60]	; (8007df8 <_Z24getFont_consolab_40_4bppv+0x60>)
 8007dba:	9206      	str	r2, [sp, #24]
 8007dbc:	4a0f      	ldr	r2, [pc, #60]	; (8007dfc <_Z24getFont_consolab_40_4bppv+0x64>)
 8007dbe:	9205      	str	r2, [sp, #20]
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	9303      	str	r3, [sp, #12]
 8007dc4:	2501      	movs	r5, #1
 8007dc6:	9502      	str	r5, [sp, #8]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	9201      	str	r2, [sp, #4]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	2328      	movs	r3, #40	; 0x28
 8007dd0:	2213      	movs	r2, #19
 8007dd2:	490b      	ldr	r1, [pc, #44]	; (8007e00 <_Z24getFont_consolab_40_4bppv+0x68>)
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7ff ffb5 	bl	8007d44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <_Z24getFont_consolab_40_4bppv+0x58>)
 8007ddc:	601d      	str	r5, [r3, #0]
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <_Z24getFont_consolab_40_4bppv+0x6c>)
 8007de0:	4909      	ldr	r1, [pc, #36]	; (8007e08 <_Z24getFont_consolab_40_4bppv+0x70>)
 8007de2:	4620      	mov	r0, r4
 8007de4:	f00e fb8d 	bl	8016502 <__aeabi_atexit>
}
 8007de8:	4802      	ldr	r0, [pc, #8]	; (8007df4 <_Z24getFont_consolab_40_4bppv+0x5c>)
 8007dea:	b00d      	add	sp, #52	; 0x34
 8007dec:	bd30      	pop	{r4, r5, pc}
 8007dee:	bf00      	nop
 8007df0:	2400aeb4 	.word	0x2400aeb4
 8007df4:	2400aeb8 	.word	0x2400aeb8
 8007df8:	9000ab40 	.word	0x9000ab40
 8007dfc:	9000ab50 	.word	0x9000ab50
 8007e00:	9000a9d8 	.word	0x9000a9d8
 8007e04:	24000000 	.word	0x24000000
 8007e08:	08007cd5 	.word	0x08007cd5

08007e0c <_Z23getFont_verdana_10_4bppv>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007e0c:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <_Z23getFont_verdana_10_4bppv+0x58>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f013 0f01 	tst.w	r3, #1
 8007e14:	d001      	beq.n	8007e1a <_Z23getFont_verdana_10_4bppv+0xe>
    return verdana_10_4bpp;
}
 8007e16:	4814      	ldr	r0, [pc, #80]	; (8007e68 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8007e18:	4770      	bx	lr
{
 8007e1a:	b530      	push	{r4, r5, lr}
 8007e1c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007e1e:	4d12      	ldr	r5, [pc, #72]	; (8007e68 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8007e20:	2300      	movs	r3, #0
 8007e22:	930a      	str	r3, [sp, #40]	; 0x28
 8007e24:	9309      	str	r3, [sp, #36]	; 0x24
 8007e26:	9308      	str	r3, [sp, #32]
 8007e28:	223f      	movs	r2, #63	; 0x3f
 8007e2a:	9207      	str	r2, [sp, #28]
 8007e2c:	4a0f      	ldr	r2, [pc, #60]	; (8007e6c <_Z23getFont_verdana_10_4bppv+0x60>)
 8007e2e:	9206      	str	r2, [sp, #24]
 8007e30:	4a0f      	ldr	r2, [pc, #60]	; (8007e70 <_Z23getFont_verdana_10_4bppv+0x64>)
 8007e32:	9205      	str	r2, [sp, #20]
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	2401      	movs	r4, #1
 8007e3a:	9402      	str	r4, [sp, #8]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	9201      	str	r2, [sp, #4]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	230a      	movs	r3, #10
 8007e44:	4622      	mov	r2, r4
 8007e46:	490b      	ldr	r1, [pc, #44]	; (8007e74 <_Z23getFont_verdana_10_4bppv+0x68>)
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f7ff ff7b 	bl	8007d44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <_Z23getFont_verdana_10_4bppv+0x58>)
 8007e50:	601c      	str	r4, [r3, #0]
 8007e52:	4a09      	ldr	r2, [pc, #36]	; (8007e78 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8007e54:	4909      	ldr	r1, [pc, #36]	; (8007e7c <_Z23getFont_verdana_10_4bppv+0x70>)
 8007e56:	4628      	mov	r0, r5
 8007e58:	f00e fb53 	bl	8016502 <__aeabi_atexit>
}
 8007e5c:	4802      	ldr	r0, [pc, #8]	; (8007e68 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8007e5e:	b00d      	add	sp, #52	; 0x34
 8007e60:	bd30      	pop	{r4, r5, pc}
 8007e62:	bf00      	nop
 8007e64:	2400aee0 	.word	0x2400aee0
 8007e68:	2400aee4 	.word	0x2400aee4
 8007e6c:	9000ab44 	.word	0x9000ab44
 8007e70:	9000ab54 	.word	0x9000ab54
 8007e74:	9000aae4 	.word	0x9000aae4
 8007e78:	24000000 	.word	0x24000000
 8007e7c:	08007cd5 	.word	0x08007cd5

08007e80 <_Z23getFont_verdana_20_4bppv>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007e80:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <_Z23getFont_verdana_20_4bppv+0x58>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f013 0f01 	tst.w	r3, #1
 8007e88:	d001      	beq.n	8007e8e <_Z23getFont_verdana_20_4bppv+0xe>
    return verdana_20_4bpp;
}
 8007e8a:	4814      	ldr	r0, [pc, #80]	; (8007edc <_Z23getFont_verdana_20_4bppv+0x5c>)
 8007e8c:	4770      	bx	lr
{
 8007e8e:	b530      	push	{r4, r5, lr}
 8007e90:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007e92:	4d12      	ldr	r5, [pc, #72]	; (8007edc <_Z23getFont_verdana_20_4bppv+0x5c>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	930a      	str	r3, [sp, #40]	; 0x28
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	9308      	str	r3, [sp, #32]
 8007e9c:	223f      	movs	r2, #63	; 0x3f
 8007e9e:	9207      	str	r2, [sp, #28]
 8007ea0:	4a0f      	ldr	r2, [pc, #60]	; (8007ee0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8007ea2:	9206      	str	r2, [sp, #24]
 8007ea4:	4a0f      	ldr	r2, [pc, #60]	; (8007ee4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8007ea6:	9205      	str	r2, [sp, #20]
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	2401      	movs	r4, #1
 8007eae:	9402      	str	r4, [sp, #8]
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	9201      	str	r2, [sp, #4]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	2314      	movs	r3, #20
 8007eb8:	4622      	mov	r2, r4
 8007eba:	490b      	ldr	r1, [pc, #44]	; (8007ee8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f7ff ff41 	bl	8007d44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007ec2:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <_Z23getFont_verdana_20_4bppv+0x58>)
 8007ec4:	601c      	str	r4, [r3, #0]
 8007ec6:	4a09      	ldr	r2, [pc, #36]	; (8007eec <_Z23getFont_verdana_20_4bppv+0x6c>)
 8007ec8:	4909      	ldr	r1, [pc, #36]	; (8007ef0 <_Z23getFont_verdana_20_4bppv+0x70>)
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f00e fb19 	bl	8016502 <__aeabi_atexit>
}
 8007ed0:	4802      	ldr	r0, [pc, #8]	; (8007edc <_Z23getFont_verdana_20_4bppv+0x5c>)
 8007ed2:	b00d      	add	sp, #52	; 0x34
 8007ed4:	bd30      	pop	{r4, r5, pc}
 8007ed6:	bf00      	nop
 8007ed8:	2400af0c 	.word	0x2400af0c
 8007edc:	2400af10 	.word	0x2400af10
 8007ee0:	9000ab48 	.word	0x9000ab48
 8007ee4:	9000ab58 	.word	0x9000ab58
 8007ee8:	9000aaf4 	.word	0x9000aaf4
 8007eec:	24000000 	.word	0x24000000
 8007ef0:	08007cd5 	.word	0x08007cd5

08007ef4 <_Z24getFont_verdanab_40_4bppv>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_40_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_40_4bpp()
{
    static touchgfx::GeneratedFont verdanab_40_4bpp(glyphs_verdanab_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdanab_40_4bpp, kerning_verdanab_40_4bpp, 63, 0, 0, 0);
 8007ef4:	4b15      	ldr	r3, [pc, #84]	; (8007f4c <_Z24getFont_verdanab_40_4bppv+0x58>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f013 0f01 	tst.w	r3, #1
 8007efc:	d001      	beq.n	8007f02 <_Z24getFont_verdanab_40_4bppv+0xe>
    return verdanab_40_4bpp;
}
 8007efe:	4814      	ldr	r0, [pc, #80]	; (8007f50 <_Z24getFont_verdanab_40_4bppv+0x5c>)
 8007f00:	4770      	bx	lr
{
 8007f02:	b530      	push	{r4, r5, lr}
 8007f04:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdanab_40_4bpp(glyphs_verdanab_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdanab_40_4bpp, kerning_verdanab_40_4bpp, 63, 0, 0, 0);
 8007f06:	4d12      	ldr	r5, [pc, #72]	; (8007f50 <_Z24getFont_verdanab_40_4bppv+0x5c>)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0e:	9308      	str	r3, [sp, #32]
 8007f10:	223f      	movs	r2, #63	; 0x3f
 8007f12:	9207      	str	r2, [sp, #28]
 8007f14:	4a0f      	ldr	r2, [pc, #60]	; (8007f54 <_Z24getFont_verdanab_40_4bppv+0x60>)
 8007f16:	9206      	str	r2, [sp, #24]
 8007f18:	4a0f      	ldr	r2, [pc, #60]	; (8007f58 <_Z24getFont_verdanab_40_4bppv+0x64>)
 8007f1a:	9205      	str	r2, [sp, #20]
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	2401      	movs	r4, #1
 8007f22:	9402      	str	r4, [sp, #8]
 8007f24:	2204      	movs	r2, #4
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	2328      	movs	r3, #40	; 0x28
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	490b      	ldr	r1, [pc, #44]	; (8007f5c <_Z24getFont_verdanab_40_4bppv+0x68>)
 8007f30:	4628      	mov	r0, r5
 8007f32:	f7ff ff07 	bl	8007d44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <_Z24getFont_verdanab_40_4bppv+0x58>)
 8007f38:	601c      	str	r4, [r3, #0]
 8007f3a:	4a09      	ldr	r2, [pc, #36]	; (8007f60 <_Z24getFont_verdanab_40_4bppv+0x6c>)
 8007f3c:	4909      	ldr	r1, [pc, #36]	; (8007f64 <_Z24getFont_verdanab_40_4bppv+0x70>)
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f00e fadf 	bl	8016502 <__aeabi_atexit>
}
 8007f44:	4802      	ldr	r0, [pc, #8]	; (8007f50 <_Z24getFont_verdanab_40_4bppv+0x5c>)
 8007f46:	b00d      	add	sp, #52	; 0x34
 8007f48:	bd30      	pop	{r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	2400af38 	.word	0x2400af38
 8007f50:	2400af3c 	.word	0x2400af3c
 8007f54:	9000ab4c 	.word	0x9000ab4c
 8007f58:	9000ab5c 	.word	0x9000ab5c
 8007f5c:	9000ab04 	.word	0x9000ab04
 8007f60:	24000000 	.word	0x24000000
 8007f64:	08007cd5 	.word	0x08007cd5

08007f68 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8007f68:	4770      	bx	lr

08007f6a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8007f6a:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8007f6e:	6808      	ldr	r0, [r1, #0]
 8007f70:	6849      	ldr	r1, [r1, #4]
 8007f72:	c303      	stmia	r3!, {r0, r1}
    }
 8007f74:	4770      	bx	lr

08007f76 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8007f76:	4770      	bx	lr

08007f78 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8007f78:	4770      	bx	lr

08007f7a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8007f7a:	6041      	str	r1, [r0, #4]
    }
 8007f7c:	4770      	bx	lr

08007f7e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8007f82:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8007f86:	b158      	cbz	r0, 8007fa0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8007f88:	6803      	ldr	r3, [r0, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4798      	blx	r3
 8007f8e:	b138      	cbz	r0, 8007fa0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8007f90:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8007f94:	6803      	ldr	r3, [r0, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8007fa0:	bd10      	pop	{r4, pc}

08007fa2 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8007fa2:	4770      	bx	lr

08007fa4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	7203      	strb	r3, [r0, #8]
    }
 8007fa8:	4770      	bx	lr

08007faa <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8007faa:	4770      	bx	lr

08007fac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007fac:	4770      	bx	lr

08007fae <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8007fae:	b510      	push	{r4, lr}
 8007fb0:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun_0)();
 8007fb2:	68c2      	ldr	r2, [r0, #12]
 8007fb4:	6841      	ldr	r1, [r0, #4]
 8007fb6:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8007fba:	f012 0f01 	tst.w	r2, #1
 8007fbe:	d102      	bne.n	8007fc6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	4798      	blx	r3
    }
 8007fc4:	bd10      	pop	{r4, pc}
 8007fc6:	1054      	asrs	r4, r2, #1
        (pobject->*pmemfun_0)();
 8007fc8:	590a      	ldr	r2, [r1, r4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	58d3      	ldr	r3, [r2, r3]
 8007fce:	e7f8      	b.n	8007fc2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08007fd0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8007fd0:	6843      	ldr	r3, [r0, #4]
 8007fd2:	b13b      	cbz	r3, 8007fe4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8007fd4:	6883      	ldr	r3, [r0, #8]
 8007fd6:	b10b      	cbz	r3, 8007fdc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8007fd8:	2001      	movs	r0, #1
    }
 8007fda:	4770      	bx	lr
        return (pobject != 0) && (pmemfun_0 != 0);
 8007fdc:	68c0      	ldr	r0, [r0, #12]
 8007fde:	f000 0001 	and.w	r0, r0, #1
 8007fe2:	4770      	bx	lr
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	4770      	bx	lr

08007fe8 <_ZN8touchgfx12NoTransitionD0Ev>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	4604      	mov	r4, r0
 8007fec:	210c      	movs	r1, #12
 8007fee:	f00e fa8d 	bl	801650c <_ZdlPvj>
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	2110      	movs	r1, #16
 8007ffc:	f00e fa86 	bl	801650c <_ZdlPvj>
 8008000:	4620      	mov	r0, r4
 8008002:	bd10      	pop	{r4, pc}

08008004 <_ZN23FrontendApplicationBaseD0Ev>:
 8008004:	b510      	push	{r4, lr}
 8008006:	4604      	mov	r4, r0
 8008008:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800800c:	f00e fa7e 	bl	801650c <_ZdlPvj>
 8008010:	4620      	mov	r0, r4
 8008012:	bd10      	pop	{r4, pc}

08008014 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8008014:	b508      	push	{r3, lr}
        Application::getInstance()->draw();
 8008016:	f005 fee1 	bl	800dddc <_ZN8touchgfx11Application11getInstanceEv>
 800801a:	6803      	ldr	r3, [r0, #0]
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	4798      	blx	r3
    }
 8008020:	bd08      	pop	{r3, pc}
	...

08008024 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	4604      	mov	r4, r0
 8008028:	460e      	mov	r6, r1
 800802a:	4617      	mov	r7, r2
          pendingScreenTransitionCallback(0)
 800802c:	f005 fef8 	bl	800de20 <_ZN8touchgfx11ApplicationC1Ev>
 8008030:	2500      	movs	r5, #0
 8008032:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8008036:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        instance = this;
 800803a:	4b1c      	ldr	r3, [pc, #112]	; (80080ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x88>)
 800803c:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800803e:	4b1c      	ldr	r3, [pc, #112]	; (80080b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x8c>)
 8008040:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun_0(0)
 8008042:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x90>)
 8008044:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8008048:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 800804c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8008050:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8008054:	f8c4 7150 	str.w	r7, [r4, #336]	; 0x150
 8008058:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
    {
        return instance;
 800805c:	4e16      	ldr	r6, [pc, #88]	; (80080b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x94>)
 800805e:	6830      	ldr	r0, [r6, #0]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8008060:	6803      	ldr	r3, [r0, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	4629      	mov	r1, r5
 8008066:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8008068:	4628      	mov	r0, r5
 800806a:	f000 fbb9 	bl	80087e0 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800806e:	6833      	ldr	r3, [r6, #0]
 8008070:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8008074:	b10a      	cbz	r2, 800807a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x56>
 8008076:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008078:	b900      	cbnz	r0, 800807c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
        {
            return *instance->auxiliaryLCD;
        }
        return instance->lcdRef;
 800807a:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperRGB888();
 800807c:	f00b fd10 	bl	8013aa0 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8008080:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x94>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8008088:	b10a      	cbz	r2, 800808e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
 800808a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800808c:	b900      	cbnz	r0, 8008090 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>
        return instance->lcdRef;
 800808e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperARGB8888();
 8008090:	f00b fd50 	bl	8013b34 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8008094:	4b08      	ldr	r3, [pc, #32]	; (80080b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x94>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800809c:	b10a      	cbz	r2, 80080a2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7e>
 800809e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80080a0:	b900      	cbnz	r0, 80080a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>
        return instance->lcdRef;
 80080a2:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperA4();
 80080a4:	f00b fdc4 	bl	8013c30 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
}
 80080a8:	4620      	mov	r0, r4
 80080aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ac:	2400fa70 	.word	0x2400fa70
 80080b0:	080186ac 	.word	0x080186ac
 80080b4:	08018694 	.word	0x08018694
 80080b8:	2400fa1c 	.word	0x2400fa1c

080080bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80080bc:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80080c0:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80080c2:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80080cc:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80080d0:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	0800823d 	.word	0x0800823d

080080dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80080dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	4607      	mov	r7, r0
 80080e2:	4688      	mov	r8, r1
 80080e4:	4615      	mov	r5, r2
 80080e6:	4699      	mov	r9, r3
 80080e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80080ec:	6890      	ldr	r0, [r2, #8]
 80080ee:	6803      	ldr	r3, [r0, #0]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	4798      	blx	r3
 80080f4:	f643 336f 	movw	r3, #15215	; 0x3b6f
 80080f8:	4298      	cmp	r0, r3
 80080fa:	d976      	bls.n	80081ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80080fc:	6868      	ldr	r0, [r5, #4]
 80080fe:	6803      	ldr	r3, [r0, #0]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	4798      	blx	r3
 8008104:	280f      	cmp	r0, #15
 8008106:	d976      	bls.n	80081f6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008108:	68e8      	ldr	r0, [r5, #12]
 800810a:	6803      	ldr	r3, [r0, #0]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	4798      	blx	r3
 8008110:	280b      	cmp	r0, #11
 8008112:	d976      	bls.n	8008202 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 8008114:	f005 fe62 	bl	800dddc <_ZN8touchgfx11Application11getInstanceEv>
 8008118:	f005 fe66 	bl	800dde8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800811c:	f8d9 0000 	ldr.w	r0, [r9]
 8008120:	b140      	cbz	r0, 8008134 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->tearDown();
 8008122:	6803      	ldr	r3, [r0, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	4798      	blx	r3
    if (*currentTrans)
 8008128:	f8d9 0000 	ldr.w	r0, [r9]
 800812c:	b110      	cbz	r0, 8008134 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 800812e:	6803      	ldr	r3, [r0, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4798      	blx	r3
    if (*currentScreen)
 8008134:	6838      	ldr	r0, [r7, #0]
 8008136:	2800      	cmp	r0, #0
 8008138:	d06f      	beq.n	800821a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13e>
        (*currentScreen)->tearDownScreen();
 800813a:	6803      	ldr	r3, [r0, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	4798      	blx	r3
    if (*currentPresenter)
 8008140:	f8d8 0000 	ldr.w	r0, [r8]
 8008144:	2800      	cmp	r0, #0
 8008146:	d064      	beq.n	8008212 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x136>
        (*currentPresenter)->deactivate();
 8008148:	6803      	ldr	r3, [r0, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4798      	blx	r3
    if (*currentScreen)
 800814e:	6838      	ldr	r0, [r7, #0]
 8008150:	b110      	cbz	r0, 8008158 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->~Screen();
 8008152:	6803      	ldr	r3, [r0, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4798      	blx	r3
    if (*currentPresenter)
 8008158:	f8d8 0000 	ldr.w	r0, [r8]
 800815c:	b110      	cbz	r0, 8008164 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->~Presenter();
 800815e:	6803      	ldr	r3, [r0, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008164:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8008166:	6803      	ldr	r3, [r0, #0]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2100      	movs	r1, #0
 800816c:	4798      	blx	r3
 800816e:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8008170:	f04f 0b00 	mov.w	fp, #0
 8008174:	f8c0 b004 	str.w	fp, [r0, #4]
 8008178:	f880 b008 	strb.w	fp, [r0, #8]
 800817c:	4b29      	ldr	r3, [pc, #164]	; (8008224 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 800817e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008180:	68a8      	ldr	r0, [r5, #8]
 8008182:	6803      	ldr	r3, [r0, #0]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	4659      	mov	r1, fp
 8008188:	4798      	blx	r3
 800818a:	4606      	mov	r6, r0
 800818c:	f000 fcc6 	bl	8008b1c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008190:	6868      	ldr	r0, [r5, #4]
 8008192:	6803      	ldr	r3, [r0, #0]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	4659      	mov	r1, fp
 8008198:	4798      	blx	r3
 800819a:	4605      	mov	r5, r0
 800819c:	4631      	mov	r1, r6
 800819e:	f000 fbbb 	bl	8008918 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80081a2:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80081a6:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 80081aa:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	d02e      	beq.n	800820e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 80081b0:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80081b2:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80081b6:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 80081ba:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 80081bc:	6833      	ldr	r3, [r6, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	4630      	mov	r0, r6
 80081c2:	4798      	blx	r3
    newPresenter->activate();
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4628      	mov	r0, r5
 80081ca:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80081cc:	4621      	mov	r1, r4
 80081ce:	4630      	mov	r0, r6
 80081d0:	f007 fa7a 	bl	800f6c8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	4620      	mov	r0, r4
 80081da:	4798      	blx	r3
    newTransition->invalidate();
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	4620      	mov	r0, r4
 80081e2:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80081e4:	4628      	mov	r0, r5
 80081e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80081ec:	4a0f      	ldr	r2, [pc, #60]	; (800822c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80081ee:	21a3      	movs	r1, #163	; 0xa3
 80081f0:	480f      	ldr	r0, [pc, #60]	; (8008230 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80081f2:	f00e ff9b 	bl	801712c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 80081f8:	4a0c      	ldr	r2, [pc, #48]	; (800822c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80081fa:	21a4      	movs	r1, #164	; 0xa4
 80081fc:	480c      	ldr	r0, [pc, #48]	; (8008230 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80081fe:	f00e ff95 	bl	801712c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008202:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 8008204:	4a09      	ldr	r2, [pc, #36]	; (800822c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8008206:	21a5      	movs	r1, #165	; 0xa5
 8008208:	4809      	ldr	r0, [pc, #36]	; (8008230 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 800820a:	f00e ff8f 	bl	801712c <__assert_func>
    model->bind(newPresenter);
 800820e:	462b      	mov	r3, r5
 8008210:	e7cf      	b.n	80081b2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
    if (*currentScreen)
 8008212:	6838      	ldr	r0, [r7, #0]
 8008214:	2800      	cmp	r0, #0
 8008216:	d19c      	bne.n	8008152 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
 8008218:	e7a4      	b.n	8008164 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
    if (*currentPresenter)
 800821a:	f8d8 0000 	ldr.w	r0, [r8]
 800821e:	2800      	cmp	r0, #0
 8008220:	d192      	bne.n	8008148 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
 8008222:	e79f      	b.n	8008164 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
 8008224:	080186f0 	.word	0x080186f0
 8008228:	0801836c 	.word	0x0801836c
 800822c:	080183fc 	.word	0x080183fc
 8008230:	08018500 	.word	0x08018500
 8008234:	08018544 	.word	0x08018544
 8008238:	080185e8 	.word	0x080185e8

0800823c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800823c:	b500      	push	{lr}
 800823e:	b083      	sub	sp, #12
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008240:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>)
 8008248:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800824c:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8008250:	4803      	ldr	r0, [pc, #12]	; (8008260 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>)
 8008252:	f7ff ff43 	bl	80080dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8008256:	b003      	add	sp, #12
 8008258:	f85d fb04 	ldr.w	pc, [sp], #4
 800825c:	2400fa64 	.word	0x2400fa64
 8008260:	2400fa60 	.word	0x2400fa60

08008264 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8008264:	8081      	strh	r1, [r0, #4]
    }
 8008266:	4770      	bx	lr

08008268 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8008268:	80c1      	strh	r1, [r0, #6]
    }
 800826a:	4770      	bx	lr

0800826c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800826c:	4770      	bx	lr

0800826e <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 800826e:	4770      	bx	lr

08008270 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8008270:	4770      	bx	lr

08008272 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8008272:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8008274:	88c4      	ldrh	r4, [r0, #6]
 8008276:	1b12      	subs	r2, r2, r4
 8008278:	8884      	ldrh	r4, [r0, #4]
 800827a:	1b09      	subs	r1, r1, r4
 800827c:	6803      	ldr	r3, [r0, #0]
 800827e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008280:	b212      	sxth	r2, r2
 8008282:	b209      	sxth	r1, r1
 8008284:	4798      	blx	r3
    }
 8008286:	bd10      	pop	{r4, pc}

08008288 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8008288:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800828a:	4770      	bx	lr

0800828c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800828c:	4770      	bx	lr

0800828e <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800828e:	4770      	bx	lr

08008290 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8008290:	4770      	bx	lr

08008292 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 8008292:	4770      	bx	lr

08008294 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8008294:	4770      	bx	lr

08008296 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8008296:	4770      	bx	lr

08008298 <_ZN8touchgfx17GraphWrapAndClearILs200EED1Ev>:
 * The GraphWrapAndClear will show new points progressing across the graph. Once the graph is filled,
 * the next point added will cause the graph to be cleared and a new graph will slowly be
 * created as new values are added.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public DataGraphWrapAndClear
 8008298:	4770      	bx	lr

0800829a <_ZN8touchgfx17GraphWrapAndClearILs200EED0Ev>:
 800829a:	b510      	push	{r4, lr}
 800829c:	4604      	mov	r4, r0
 800829e:	f44f 618d 	mov.w	r1, #1128	; 0x468
 80082a2:	f00e f933 	bl	801650c <_ZdlPvj>
 80082a6:	4620      	mov	r0, r4
 80082a8:	bd10      	pop	{r4, pc}

080082aa <_ZN15Screen1ViewBaseD0Ev>:
 80082aa:	b510      	push	{r4, lr}
 80082ac:	4604      	mov	r4, r0
 80082ae:	f243 5124 	movw	r1, #13604	; 0x3524
 80082b2:	f00e f92b 	bl	801650c <_ZdlPvj>
 80082b6:	4620      	mov	r0, r4
 80082b8:	bd10      	pop	{r4, pc}
	...

080082bc <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 80082bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c0:	b08b      	sub	sp, #44	; 0x2c
 80082c2:	4604      	mov	r4, r0
        : presenter(0)
 80082c4:	f007 f854 	bl	800f370 <_ZN8touchgfx6ScreenC1Ev>
 80082c8:	2500      	movs	r5, #0
 80082ca:	63e5      	str	r5, [r4, #60]	; 0x3c
 80082cc:	4be0      	ldr	r3, [pc, #896]	; (8008650 <_ZN15Screen1ViewBaseC1Ev+0x394>)
 80082ce:	6023      	str	r3, [r4, #0]
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80082d0:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 80082d4:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
 80082d8:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
 80082dc:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
 80082e0:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 80082e4:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
 80082e8:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 80082ec:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
          visible(true)
 80082f0:	6565      	str	r5, [r4, #84]	; 0x54
 80082f2:	65a5      	str	r5, [r4, #88]	; 0x58
 80082f4:	65e5      	str	r5, [r4, #92]	; 0x5c
 80082f6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 80082fa:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
 80082fe:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8008302:	2701      	movs	r7, #1
 8008304:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8008308:	4bd2      	ldr	r3, [pc, #840]	; (8008654 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 800830a:	6423      	str	r3, [r4, #64]	; 0x40
 800830c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8008310:	f884 9066 	strb.w	r9, [r4, #102]	; 0x66
        : color(col)
 8008314:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
 8008316:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
 800831a:	f8a4 5072 	strh.w	r5, [r4, #114]	; 0x72
 800831e:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
 8008322:	f8a4 5076 	strh.w	r5, [r4, #118]	; 0x76
 8008326:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
 800832a:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
 800832e:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
 8008332:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
 8008336:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800833a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800833e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8008342:	f8a4 508c 	strh.w	r5, [r4, #140]	; 0x8c
 8008346:	f8a4 508e 	strh.w	r5, [r4, #142]	; 0x8e
 800834a:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
 800834e:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
 8008352:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008354:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
        : color(col)
 8008358:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
{
public:
    GraphWrapAndClear()
        : DataGraphWrapAndClear(CAPACITY, yValues)
 800835c:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8008360:	f504 72f0 	add.w	r2, r4, #480	; 0x1e0
 8008364:	21c8      	movs	r1, #200	; 0xc8
 8008366:	4630      	mov	r0, r6
 8008368:	f003 fd9c 	bl	800bea4 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi>
 800836c:	4bba      	ldr	r3, [pc, #744]	; (8008658 <_ZN15Screen1ViewBaseC1Ev+0x39c>)
 800836e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8008372:	f504 68a0 	add.w	r8, r4, #1280	; 0x500
 8008376:	4640      	mov	r0, r8
 8008378:	f003 fd46 	bl	800be08 <_ZN8touchgfx17GraphElementBoxesC1Ev>
        : x(0), y(0), width(0), height(0)
 800837c:	f8a4 5540 	strh.w	r5, [r4, #1344]	; 0x540
 8008380:	f8a4 5542 	strh.w	r5, [r4, #1346]	; 0x542
 8008384:	f8a4 5544 	strh.w	r5, [r4, #1348]	; 0x544
 8008388:	f8a4 5546 	strh.w	r5, [r4, #1350]	; 0x546
 800838c:	f8a4 5548 	strh.w	r5, [r4, #1352]	; 0x548
 8008390:	f8a4 554a 	strh.w	r5, [r4, #1354]	; 0x54a
 8008394:	f8a4 554c 	strh.w	r5, [r4, #1356]	; 0x54c
 8008398:	f8a4 554e 	strh.w	r5, [r4, #1358]	; 0x54e
 800839c:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
 80083a0:	f8c4 5554 	str.w	r5, [r4, #1364]	; 0x554
 80083a4:	f8c4 5558 	str.w	r5, [r4, #1368]	; 0x558
 80083a8:	f8a4 555c 	strh.w	r5, [r4, #1372]	; 0x55c
 80083ac:	f8a4 555e 	strh.w	r5, [r4, #1374]	; 0x55e
 80083b0:	f884 5560 	strb.w	r5, [r4, #1376]	; 0x560
 80083b4:	f884 7561 	strb.w	r7, [r4, #1377]	; 0x561
        : typedTextId(id)
 80083b8:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008668 <_ZN15Screen1ViewBaseC1Ev+0x3ac>
 80083bc:	f8c4 b564 	str.w	fp, [r4, #1380]	; 0x564
 80083c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083c4:	f8a4 3568 	strh.w	r3, [r4, #1384]	; 0x568
        : color(col)
 80083c8:	f8c4 556c 	str.w	r5, [r4, #1388]	; 0x56c
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80083cc:	f8a4 5570 	strh.w	r5, [r4, #1392]	; 0x570
 80083d0:	f884 9572 	strb.w	r9, [r4, #1394]	; 0x572
 80083d4:	f884 5573 	strb.w	r5, [r4, #1395]	; 0x573
 80083d8:	f884 5574 	strb.w	r5, [r4, #1396]	; 0x574
 80083dc:	f884 5575 	strb.w	r5, [r4, #1397]	; 0x575
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
        : TextArea(), wildcard(0)
 80083e0:	4a9e      	ldr	r2, [pc, #632]	; (800865c <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 80083e2:	f8c4 253c 	str.w	r2, [r4, #1340]	; 0x53c
 80083e6:	f8c4 5578 	str.w	r5, [r4, #1400]	; 0x578
        : x(0), y(0), width(0), height(0)
 80083ea:	f8a4 5580 	strh.w	r5, [r4, #1408]	; 0x580
 80083ee:	f8a4 5582 	strh.w	r5, [r4, #1410]	; 0x582
 80083f2:	f8a4 5584 	strh.w	r5, [r4, #1412]	; 0x584
 80083f6:	f8a4 5586 	strh.w	r5, [r4, #1414]	; 0x586
 80083fa:	f8a4 5588 	strh.w	r5, [r4, #1416]	; 0x588
 80083fe:	f8a4 558a 	strh.w	r5, [r4, #1418]	; 0x58a
 8008402:	f8a4 558c 	strh.w	r5, [r4, #1420]	; 0x58c
 8008406:	f8a4 558e 	strh.w	r5, [r4, #1422]	; 0x58e
 800840a:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
 800840e:	f8c4 5594 	str.w	r5, [r4, #1428]	; 0x594
 8008412:	f8c4 5598 	str.w	r5, [r4, #1432]	; 0x598
 8008416:	f8a4 559c 	strh.w	r5, [r4, #1436]	; 0x59c
 800841a:	f8a4 559e 	strh.w	r5, [r4, #1438]	; 0x59e
 800841e:	f884 55a0 	strb.w	r5, [r4, #1440]	; 0x5a0
 8008422:	f884 75a1 	strb.w	r7, [r4, #1441]	; 0x5a1
 8008426:	f8c4 b5a4 	str.w	fp, [r4, #1444]	; 0x5a4
 800842a:	f8a4 35a8 	strh.w	r3, [r4, #1448]	; 0x5a8
        : color(col)
 800842e:	f8c4 55ac 	str.w	r5, [r4, #1452]	; 0x5ac
 8008432:	f8a4 55b0 	strh.w	r5, [r4, #1456]	; 0x5b0
 8008436:	f884 35b2 	strb.w	r3, [r4, #1458]	; 0x5b2
 800843a:	f884 55b3 	strb.w	r5, [r4, #1459]	; 0x5b3
 800843e:	f884 55b4 	strb.w	r5, [r4, #1460]	; 0x5b4
 8008442:	f884 55b5 	strb.w	r5, [r4, #1461]	; 0x5b5
 8008446:	f8c4 257c 	str.w	r2, [r4, #1404]	; 0x57c
 800844a:	f8c4 55b8 	str.w	r5, [r4, #1464]	; 0x5b8
        : x(0), y(0), width(0), height(0)
 800844e:	f8a4 55c0 	strh.w	r5, [r4, #1472]	; 0x5c0
 8008452:	f8a4 55c2 	strh.w	r5, [r4, #1474]	; 0x5c2
 8008456:	f8a4 55c4 	strh.w	r5, [r4, #1476]	; 0x5c4
 800845a:	f8a4 55c6 	strh.w	r5, [r4, #1478]	; 0x5c6
 800845e:	f8a4 55c8 	strh.w	r5, [r4, #1480]	; 0x5c8
 8008462:	f8a4 55ca 	strh.w	r5, [r4, #1482]	; 0x5ca
 8008466:	f8a4 55cc 	strh.w	r5, [r4, #1484]	; 0x5cc
 800846a:	f8a4 55ce 	strh.w	r5, [r4, #1486]	; 0x5ce
 800846e:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
 8008472:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 8008476:	f8c4 55d8 	str.w	r5, [r4, #1496]	; 0x5d8
 800847a:	f8a4 55dc 	strh.w	r5, [r4, #1500]	; 0x5dc
 800847e:	f8a4 55de 	strh.w	r5, [r4, #1502]	; 0x5de
 8008482:	f884 75e1 	strb.w	r7, [r4, #1505]	; 0x5e1
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8008486:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 800848a:	f884 55e8 	strb.w	r5, [r4, #1512]	; 0x5e8
        touchable = touch;
 800848e:	f884 75e0 	strb.w	r7, [r4, #1504]	; 0x5e0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8008492:	f8a4 35ea 	strh.w	r3, [r4, #1514]	; 0x5ea
 8008496:	f8a4 35ec 	strh.w	r3, [r4, #1516]	; 0x5ec
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800849a:	f884 35ee 	strb.w	r3, [r4, #1518]	; 0x5ee
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 800849e:	4a70      	ldr	r2, [pc, #448]	; (8008660 <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
 80084a0:	f8c4 25bc 	str.w	r2, [r4, #1468]	; 0x5bc
 80084a4:	f8a4 35f0 	strh.w	r3, [r4, #1520]	; 0x5f0
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80084a8:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80084ac:	f204 6044 	addw	r0, r4, #1604	; 0x644
 80084b0:	f004 f826 	bl	800c500 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 80084b4:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        setX(x);
 80084b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	4629      	mov	r1, r5
 80084be:	4650      	mov	r0, sl
 80084c0:	4798      	blx	r3
        setY(y);
 80084c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c6:	4629      	mov	r1, r5
 80084c8:	4650      	mov	r0, sl
 80084ca:	4798      	blx	r3
        setWidth(width);
 80084cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80084d4:	4650      	mov	r0, sl
 80084d6:	4798      	blx	r3
        setHeight(height);
 80084d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80084e0:	4650      	mov	r0, sl
 80084e2:	4798      	blx	r3
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 80084e4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80084e8:	66a3      	str	r3, [r4, #104]	; 0x68
    box1.setPosition(0, 0, 800, 480);
 80084ea:	f104 026c 	add.w	r2, r4, #108	; 0x6c
        setX(x);
 80084ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	4629      	mov	r1, r5
 80084f4:	4691      	mov	r9, r2
 80084f6:	4610      	mov	r0, r2
 80084f8:	4798      	blx	r3
        setY(y);
 80084fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	4629      	mov	r1, r5
 8008500:	4648      	mov	r0, r9
 8008502:	4798      	blx	r3
        setWidth(width);
 8008504:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	f44f 7148 	mov.w	r1, #800	; 0x320
 800850c:	4648      	mov	r0, r9
 800850e:	4798      	blx	r3
        setHeight(height);
 8008510:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008518:	f8cd 900c 	str.w	r9, [sp, #12]
 800851c:	4648      	mov	r0, r9
 800851e:	4798      	blx	r3
 8008520:	f04f 33ff 	mov.w	r3, #4294967295
 8008524:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    dynamicGraph1.setScale(1);
 8008528:	4639      	mov	r1, r7
 800852a:	4630      	mov	r0, r6
 800852c:	f003 fa64 	bl	800b9f8 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>
        setX(x);
 8008530:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	4629      	mov	r1, r5
 8008538:	4630      	mov	r0, r6
 800853a:	4798      	blx	r3
        setY(y);
 800853c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	4629      	mov	r1, r5
 8008544:	4630      	mov	r0, r6
 8008546:	4798      	blx	r3
        setWidth(width);
 8008548:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008552:	4630      	mov	r0, r6
 8008554:	4798      	blx	r3
        setHeight(height);
 8008556:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008560:	4630      	mov	r0, r6
 8008562:	4798      	blx	r3
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8008564:	9500      	str	r5, [sp, #0]
 8008566:	462b      	mov	r3, r5
 8008568:	462a      	mov	r2, r5
 800856a:	4629      	mov	r1, r5
 800856c:	4630      	mov	r0, r6
 800856e:	f003 f97b 	bl	800b868 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8008572:	9500      	str	r5, [sp, #0]
 8008574:	462b      	mov	r3, r5
 8008576:	462a      	mov	r2, r5
 8008578:	4629      	mov	r1, r5
 800857a:	4630      	mov	r0, r6
 800857c:	f002 ff68 	bl	800b450 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 120);
 8008580:	2278      	movs	r2, #120	; 0x78
 8008582:	4629      	mov	r1, r5
 8008584:	4630      	mov	r0, r6
 8008586:	f002 fd4f 	bl	800b028 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>
    dynamicGraph1Boxes1.setScale(1);
 800858a:	4639      	mov	r1, r7
 800858c:	4640      	mov	r0, r8
 800858e:	f003 fb1d 	bl	800bbcc <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    dynamicGraph1Boxes1.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 8008592:	4934      	ldr	r1, [pc, #208]	; (8008664 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
 8008594:	4640      	mov	r0, r8
 8008596:	f003 faa8 	bl	800baea <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1Boxes1.setBoxWidth(4);
 800859a:	2104      	movs	r1, #4
 800859c:	4640      	mov	r0, r8
 800859e:	f003 fc3f 	bl	800be20 <_ZN8touchgfx17GraphElementBoxes11setBoxWidthEt>
    dynamicGraph1.addGraphElement(dynamicGraph1Boxes1);
 80085a2:	4641      	mov	r1, r8
 80085a4:	4630      	mov	r0, r6
 80085a6:	f003 f807 	bl	800b5b8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
    textArea1.setXY(0, 0);
 80085aa:	f204 593c 	addw	r9, r4, #1340	; 0x53c
        setX(x);
 80085ae:	f8d4 353c 	ldr.w	r3, [r4, #1340]	; 0x53c
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	4629      	mov	r1, r5
 80085b6:	4648      	mov	r0, r9
 80085b8:	4798      	blx	r3
        setY(y);
 80085ba:	f8d4 353c 	ldr.w	r3, [r4, #1340]	; 0x53c
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	4629      	mov	r1, r5
 80085c2:	4648      	mov	r0, r9
 80085c4:	4798      	blx	r3
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80085c6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80085ca:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80085ce:	f8a4 5570 	strh.w	r5, [r4, #1392]	; 0x570
    textArea1Buffer[0] = 0;
 80085d2:	f8a4 55f4 	strh.w	r5, [r4, #1524]	; 0x5f4
    textArea1.setWildcard(textArea1Buffer);
 80085d6:	f204 53f4 	addw	r3, r4, #1524	; 0x5f4
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
    {
        wildcard = value;
 80085da:	f8c4 3578 	str.w	r3, [r4, #1400]	; 0x578
    textArea1.resizeToCurrentText();
 80085de:	4648      	mov	r0, r9
 80085e0:	f003 fd71 	bl	800c0c6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80085e4:	f8cd b010 	str.w	fp, [sp, #16]
 80085e8:	f8ad 5014 	strh.w	r5, [sp, #20]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TQ92));
 80085ec:	a904      	add	r1, sp, #16
 80085ee:	4648      	mov	r0, r9
 80085f0:	f003 fd86 	bl	800c100 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2.setXY(0, 47);
 80085f4:	f204 587c 	addw	r8, r4, #1404	; 0x57c
        setX(x);
 80085f8:	f8d4 357c 	ldr.w	r3, [r4, #1404]	; 0x57c
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	4629      	mov	r1, r5
 8008600:	4640      	mov	r0, r8
 8008602:	4798      	blx	r3
        setY(y);
 8008604:	f8d4 357c 	ldr.w	r3, [r4, #1404]	; 0x57c
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	212f      	movs	r1, #47	; 0x2f
 800860c:	4640      	mov	r0, r8
 800860e:	4798      	blx	r3
        this->color = color;
 8008610:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8008614:	f8c4 35ac 	str.w	r3, [r4, #1452]	; 0x5ac
        linespace = space;
 8008618:	f8a4 55b0 	strh.w	r5, [r4, #1456]	; 0x5b0
    textArea2Buffer[0] = 0;
 800861c:	f8a4 561c 	strh.w	r5, [r4, #1564]	; 0x61c
    textArea2.setWildcard(textArea2Buffer);
 8008620:	f204 631c 	addw	r3, r4, #1564	; 0x61c
 8008624:	f8c4 35b8 	str.w	r3, [r4, #1464]	; 0x5b8
    textArea2.resizeToCurrentText();
 8008628:	4640      	mov	r0, r8
 800862a:	f003 fd4c 	bl	800c0c6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800862e:	f8cd b018 	str.w	fp, [sp, #24]
 8008632:	f8ad 701c 	strh.w	r7, [sp, #28]
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_17AY));
 8008636:	a906      	add	r1, sp, #24
 8008638:	4640      	mov	r0, r8
 800863a:	f003 fd61 	bl	800c100 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    toggleButton1.setXY(336, 221);
 800863e:	f204 5bbc 	addw	fp, r4, #1468	; 0x5bc
        setX(x);
 8008642:	f8d4 35bc 	ldr.w	r3, [r4, #1468]	; 0x5bc
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800864c:	4658      	mov	r0, fp
 800864e:	e00d      	b.n	800866c <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 8008650:	0801883c 	.word	0x0801883c
 8008654:	0801a344 	.word	0x0801a344
 8008658:	08018714 	.word	0x08018714
 800865c:	0801a440 	.word	0x0801a440
 8008660:	0801a1e8 	.word	0x0801a1e8
 8008664:	ff1497c5 	.word	0xff1497c5
 8008668:	0801830c 	.word	0x0801830c
 800866c:	4798      	blx	r3
        setY(y);
 800866e:	f8d4 35bc 	ldr.w	r3, [r4, #1468]	; 0x5bc
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	21dd      	movs	r1, #221	; 0xdd
 8008676:	4658      	mov	r0, fp
 8008678:	4798      	blx	r3
 800867a:	f8ad 5020 	strh.w	r5, [sp, #32]
 800867e:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
 8008682:	f8a4 75f0 	strh.w	r7, [r4, #1520]	; 0x5f0
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8008686:	aa09      	add	r2, sp, #36	; 0x24
 8008688:	a908      	add	r1, sp, #32
 800868a:	4658      	mov	r0, fp
 800868c:	f003 fd78 	bl	800c180 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8008690:	1d25      	adds	r5, r4, #4
 8008692:	4651      	mov	r1, sl
 8008694:	4628      	mov	r0, r5
 8008696:	f001 fa65 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800869a:	9903      	ldr	r1, [sp, #12]
 800869c:	4628      	mov	r0, r5
 800869e:	f001 fa61 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	f001 fa5d 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80086aa:	4649      	mov	r1, r9
 80086ac:	4628      	mov	r0, r5
 80086ae:	f001 fa59 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80086b2:	4641      	mov	r1, r8
 80086b4:	4628      	mov	r0, r5
 80086b6:	f001 fa55 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80086ba:	4659      	mov	r1, fp
 80086bc:	4628      	mov	r0, r5
 80086be:	f001 fa51 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80086c2:	4620      	mov	r0, r4
 80086c4:	b00b      	add	sp, #44	; 0x2c
 80086c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ca:	bf00      	nop

080086cc <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80086cc:	4800      	ldr	r0, [pc, #0]	; (80086d0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80086ce:	4770      	bx	lr
 80086d0:	08018868 	.word	0x08018868

080086d4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80086d4:	2002      	movs	r0, #2
 80086d6:	4770      	bx	lr

080086d8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80086d8:	2000      	movs	r0, #0
 80086da:	4770      	bx	lr

080086dc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80086dc:	2000      	movs	r0, #0
 80086de:	4770      	bx	lr

080086e0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80086e0:	b40e      	push	{r1, r2, r3}
 80086e2:	b500      	push	{lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	ab03      	add	r3, sp, #12
 80086e8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80086ec:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80086ee:	2100      	movs	r1, #0
 80086f0:	f006 f9d4 	bl	800ea9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80086f4:	b002      	add	sp, #8
 80086f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80086fa:	b003      	add	sp, #12
 80086fc:	4770      	bx	lr

080086fe <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80086fe:	b40c      	push	{r2, r3}
 8008700:	b500      	push	{lr}
 8008702:	b083      	sub	sp, #12
 8008704:	ab04      	add	r3, sp, #16
 8008706:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800870a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800870c:	f006 f9c6 	bl	800ea9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8008710:	b003      	add	sp, #12
 8008712:	f85d eb04 	ldr.w	lr, [sp], #4
 8008716:	b002      	add	sp, #8
 8008718:	4770      	bx	lr
	...

0800871c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800871c:	b510      	push	{r4, lr}
 800871e:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8008720:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008722:	b133      	cbz	r3, 8008732 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008724:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8008726:	b143      	cbz	r3, 800873a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8008728:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800872a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800872e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008730:	b94b      	cbnz	r3, 8008746 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8008732:	4620      	mov	r0, r4
 8008734:	f007 fc1c 	bl	800ff70 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8008738:	bd10      	pop	{r4, pc}
            assert(used > 0);
 800873a:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x84>)
 800873c:	4a19      	ldr	r2, [pc, #100]	; (80087a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 800873e:	21c0      	movs	r1, #192	; 0xc0
 8008740:	4819      	ldr	r0, [pc, #100]	; (80087a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 8008742:	f00e fcf3 	bl	801712c <__assert_func>
        substituteGlyphs();
 8008746:	f007 fd2f 	bl	80101a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800874a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800874c:	2b01      	cmp	r3, #1
 800874e:	d90f      	bls.n	8008770 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x54>
            const uint16_t index = pos + offset;
 8008750:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008752:	1c53      	adds	r3, r2, #1
 8008754:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8008756:	2b09      	cmp	r3, #9
 8008758:	d810      	bhi.n	800877c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x60>
 800875a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800875e:	8c48      	ldrh	r0, [r1, #34]	; 0x22
 8008760:	f640 113f 	movw	r1, #2367	; 0x93f
 8008764:	4288      	cmp	r0, r1
 8008766:	d1e4      	bne.n	8008732 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8008768:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 800876c:	8c51      	ldrh	r1, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt0(Unicode::UnicodeChar newChar)
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
 800876e:	e010      	b.n	8008792 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x76>
            assert(offset < used);
 8008770:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8008772:	4a0f      	ldr	r2, [pc, #60]	; (80087b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8008774:	21c5      	movs	r1, #197	; 0xc5
 8008776:	480c      	ldr	r0, [pc, #48]	; (80087a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 8008778:	f00e fcd8 	bl	801712c <__assert_func>
            return buffer[index < size ? index : index - size];
 800877c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008780:	89d9      	ldrh	r1, [r3, #14]
 8008782:	f640 133f 	movw	r3, #2367	; 0x93f
 8008786:	4299      	cmp	r1, r3
 8008788:	d1d3      	bne.n	8008732 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800878a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 800878e:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8008790:	2300      	movs	r3, #0
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8008792:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008796:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8008798:	f640 133f 	movw	r3, #2367	; 0x93f
 800879c:	8453      	strh	r3, [r2, #34]	; 0x22
        }
 800879e:	e7c8      	b.n	8008732 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
 80087a0:	08018890 	.word	0x08018890
 80087a4:	0801889c 	.word	0x0801889c
 80087a8:	08018948 	.word	0x08018948
 80087ac:	08018990 	.word	0x08018990
 80087b0:	080189a0 	.word	0x080189a0

080087b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80087b4:	b508      	push	{r3, lr}
    fillInputBuffer();
 80087b6:	f007 fb93 	bl	800fee0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80087ba:	bd08      	pop	{r3, pc}

080087bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80087bc:	b510      	push	{r4, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	ac02      	add	r4, sp, #8
 80087c2:	e884 0006 	stmia.w	r4, {r1, r2}
 80087c6:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80087c8:	ab0a      	add	r3, sp, #40	; 0x28
 80087ca:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	4621      	mov	r1, r4
 80087d6:	f004 febd 	bl	800d554 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80087da:	b006      	add	sp, #24
 80087dc:	bd10      	pop	{r4, pc}
	...

080087e0 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d127      	bne.n	8008834 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 80087e4:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
 80087e6:	4b14      	ldr	r3, [pc, #80]	; (8008838 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	b1c3      	cbz	r3, 800881e <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	441a      	add	r2, r3
 80087f0:	4912      	ldr	r1, [pc, #72]	; (800883c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80087f2:	600a      	str	r2, [r1, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	441a      	add	r2, r3
 80087f8:	4911      	ldr	r1, [pc, #68]	; (8008840 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80087fa:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80087fc:	689c      	ldr	r4, [r3, #8]
 80087fe:	441c      	add	r4, r3
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8008800:	4b10      	ldr	r3, [pc, #64]	; (8008844 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8008802:	2200      	movs	r2, #0
 8008804:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008806:	f000 f83b 	bl	8008880 <_ZN17TypedTextDatabase8getFontsEv>
 800880a:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800880c:	f000 f836 	bl	800887c <_ZN17TypedTextDatabase15getInstanceSizeEv>
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
    {
        typedTexts = data;
 8008810:	4b0d      	ldr	r3, [pc, #52]	; (8008848 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8008812:	601c      	str	r4, [r3, #0]
        fonts = f;
 8008814:	4b0d      	ldr	r3, [pc, #52]	; (800884c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8008816:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800881a:	8018      	strh	r0, [r3, #0]
    }
}
 800881c:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 800881e:	4b07      	ldr	r3, [pc, #28]	; (800883c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8008820:	4a0c      	ldr	r2, [pc, #48]	; (8008854 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8008822:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008824:	4b06      	ldr	r3, [pc, #24]	; (8008840 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8008826:	4a0c      	ldr	r2, [pc, #48]	; (8008858 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8008828:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800882a:	4b0c      	ldr	r3, [pc, #48]	; (800885c <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 800882c:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800882e:	2c00      	cmp	r4, #0
 8008830:	d0f4      	beq.n	800881c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
 8008832:	e7e5      	b.n	8008800 <_ZN8touchgfx5Texts11setLanguageEt+0x20>
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	2400af64 	.word	0x2400af64
 800883c:	2400af68 	.word	0x2400af68
 8008840:	2400af6c 	.word	0x2400af6c
 8008844:	2400af70 	.word	0x2400af70
 8008848:	2400fa74 	.word	0x2400fa74
 800884c:	2400fa7c 	.word	0x2400fa7c
 8008850:	2400fa78 	.word	0x2400fa78
 8008854:	9000ab1c 	.word	0x9000ab1c
 8008858:	9000ab14 	.word	0x9000ab14
 800885c:	9000ab3c 	.word	0x9000ab3c

08008860 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008860:	4b04      	ldr	r3, [pc, #16]	; (8008874 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8008868:	4b03      	ldr	r3, [pc, #12]	; (8008878 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800886a:	681b      	ldr	r3, [r3, #0]
}
 800886c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	2400af6c 	.word	0x2400af6c
 8008878:	2400af68 	.word	0x2400af68

0800887c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800887c:	2002      	movs	r0, #2
 800887e:	4770      	bx	lr

08008880 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8008880:	4800      	ldr	r0, [pc, #0]	; (8008884 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8008882:	4770      	bx	lr
 8008884:	2400af74 	.word	0x2400af74

08008888 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_consolab_40_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008888:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800888a:	f7ff faf9 	bl	8007e80 <_Z23getFont_verdana_20_4bppv>
};
 800888e:	4c06      	ldr	r4, [pc, #24]	; (80088a8 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
 8008890:	6020      	str	r0, [r4, #0]
    &(getFont_verdanab_40_4bpp()),
 8008892:	f7ff fb2f 	bl	8007ef4 <_Z24getFont_verdanab_40_4bppv>
};
 8008896:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8008898:	f7ff fab8 	bl	8007e0c <_Z23getFont_verdana_10_4bppv>
};
 800889c:	60a0      	str	r0, [r4, #8]
    &(getFont_consolab_40_4bpp())
 800889e:	f7ff fa7b 	bl	8007d98 <_Z24getFont_consolab_40_4bppv>
};
 80088a2:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 80088a4:	bd10      	pop	{r4, pc}
 80088a6:	bf00      	nop
 80088a8:	2400af74 	.word	0x2400af74

080088ac <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80088ac:	4770      	bx	lr

080088ae <_ZN19FrontendApplicationD0Ev>:
 80088ae:	b510      	push	{r4, lr}
 80088b0:	4604      	mov	r4, r0
 80088b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80088b6:	f00d fe29 	bl	801650c <_ZdlPvj>
 80088ba:	4620      	mov	r0, r4
 80088bc:	bd10      	pop	{r4, pc}

080088be <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80088be:	b510      	push	{r4, lr}
 80088c0:	4604      	mov	r4, r0
    {
        model.tick();
 80088c2:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 80088c6:	f000 f812 	bl	80088ee <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80088ca:	4620      	mov	r0, r4
 80088cc:	f005 f9a0 	bl	800dc10 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80088d0:	bd10      	pop	{r4, pc}
	...

080088d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80088d8:	f7ff fba4 	bl	8008024 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80088dc:	4b01      	ldr	r3, [pc, #4]	; (80088e4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 80088de:	6023      	str	r3, [r4, #0]
{

}
 80088e0:	4620      	mov	r0, r4
 80088e2:	bd10      	pop	{r4, pc}
 80088e4:	08018a7c 	.word	0x08018a7c

080088e8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80088e8:	2200      	movs	r2, #0
 80088ea:	6002      	str	r2, [r0, #0]
{

}
 80088ec:	4770      	bx	lr

080088ee <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80088ee:	4770      	bx	lr

080088f0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80088f0:	4770      	bx	lr

080088f2 <_ZThn4_N16Screen1PresenterD1Ev>:
 80088f2:	3804      	subs	r0, #4
 80088f4:	4770      	bx	lr

080088f6 <_ZN16Screen1Presenter8activateEv>:
}

void Screen1Presenter::activate()
{

}
 80088f6:	4770      	bx	lr

080088f8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{

}
 80088f8:	4770      	bx	lr

080088fa <_ZN16Screen1PresenterD0Ev>:
 80088fa:	b510      	push	{r4, lr}
 80088fc:	4604      	mov	r4, r0
 80088fe:	2110      	movs	r1, #16
 8008900:	f00d fe04 	bl	801650c <_ZdlPvj>
 8008904:	4620      	mov	r0, r4
 8008906:	bd10      	pop	{r4, pc}

08008908 <_ZThn4_N16Screen1PresenterD0Ev>:
 8008908:	b510      	push	{r4, lr}
 800890a:	1f04      	subs	r4, r0, #4
 800890c:	2110      	movs	r1, #16
 800890e:	4620      	mov	r0, r4
 8008910:	f00d fdfc 	bl	801650c <_ZdlPvj>
 8008914:	4620      	mov	r0, r4
 8008916:	bd10      	pop	{r4, pc}

08008918 <_ZN16Screen1PresenterC1ER11Screen1View>:
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8008918:	b410      	push	{r4}
    ModelListener() : model(0) {}
 800891a:	2200      	movs	r2, #0
 800891c:	6082      	str	r2, [r0, #8]
    : view(v)
 800891e:	4a05      	ldr	r2, [pc, #20]	; (8008934 <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
 8008920:	f102 0408 	add.w	r4, r2, #8
 8008924:	6004      	str	r4, [r0, #0]
 8008926:	3220      	adds	r2, #32
 8008928:	6042      	str	r2, [r0, #4]
 800892a:	60c1      	str	r1, [r0, #12]
}
 800892c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	08018ab8 	.word	0x08018ab8

08008938 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008938:	4770      	bx	lr

0800893a <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800893a:	4770      	bx	lr

0800893c <_ZN11Screen1View11setupScreenEv>:
{
 800893c:	b508      	push	{r3, lr}
    Screen1ViewBase::setupScreen();
 800893e:	f7ff fcaa 	bl	8008296 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8008942:	bd08      	pop	{r3, pc}
 8008944:	0000      	movs	r0, r0
	...

08008948 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 8008948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800894a:	ed2d 8b0c 	vpush	{d8-d13}
 800894e:	b083      	sub	sp, #12
 8008950:	4604      	mov	r4, r0
     *
     * @return mcuLoadPct the MCU Load in %.
     */
    uint8_t getMCULoadPct() const
    {
        return mcuLoadPct;
 8008952:	4b6b      	ldr	r3, [pc, #428]	; (8008b00 <_ZN11Screen1View15handleTickEventEv+0x1b8>)
 8008954:	681b      	ldr	r3, [r3, #0]
    // -- MCU LOAD -- //
    // This section uses the HAL layer to detect the MCU load and if it is changed the topBar is updated
	volatile uint16_t mcuLoadPct = touchgfx::HAL::getInstance()->getMCULoadPct();
 8008956:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800895a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (mcuLoadPct != previousMcuLoadPct)
 800895e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f643 326e 	movw	r2, #15214	; 0x3b6e
 8008968:	5a82      	ldrh	r2, [r0, r2]
 800896a:	429a      	cmp	r2, r3
 800896c:	f040 808b 	bne.w	8008a86 <_ZN11Screen1View15handleTickEventEv+0x13e>
        return vSyncForFrame;
 8008970:	4b63      	ldr	r3, [pc, #396]	; (8008b00 <_ZN11Screen1View15handleTickEventEv+0x1b8>)
 8008972:	681b      	ldr	r3, [r3, #0]
    }
    // -- MCU LOAD -- //

    // -- FPS -- //
    // This section uses the HAL layer to detect the LCD Refresh count and calculates the FPS if it is changed the topBar is updated
    if (HAL::getInstance()->getLCDRefreshCount() > 1)
 8008974:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8008978:	2b01      	cmp	r3, #1
    {
        frameSkippedCounter++;
 800897a:	bf8c      	ite	hi
 800897c:	f243 5224 	movwhi	r2, #13604	; 0x3524
    }
    else
    {
        frames++;
 8008980:	f243 5226 	movwls	r2, #13606	; 0x3526
 8008984:	5aa3      	ldrh	r3, [r4, r2]
 8008986:	3301      	adds	r3, #1
 8008988:	52a3      	strh	r3, [r4, r2]
    }

    if (frames + frameSkippedCounter >= 60)
 800898a:	f243 5326 	movw	r3, #13606	; 0x3526
 800898e:	5ee3      	ldrsh	r3, [r4, r3]
 8008990:	f243 5224 	movw	r2, #13604	; 0x3524
 8008994:	5ea2      	ldrsh	r2, [r4, r2]
 8008996:	441a      	add	r2, r3
 8008998:	2a3b      	cmp	r2, #59	; 0x3b
 800899a:	dd0c      	ble.n	80089b6 <_ZN11Screen1View15handleTickEventEv+0x6e>
    {
        if (fps != frames)
 800899c:	f243 5228 	movw	r2, #13608	; 0x3528
 80089a0:	5ea2      	ldrsh	r2, [r4, r2]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	f040 8086 	bne.w	8008ab4 <_ZN11Screen1View15handleTickEventEv+0x16c>
            Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", fps);
            textArea1.resizeToCurrentText();
            textArea1.invalidate();

        }
        frameSkippedCounter = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	f243 5224 	movw	r2, #13604	; 0x3524
 80089ae:	52a3      	strh	r3, [r4, r2]
        frames = 0;
 80089b0:	f243 5226 	movw	r2, #13606	; 0x3526
 80089b4:	52a3      	strh	r3, [r4, r2]
    }
    // -- FPS -- //

	if(n>200)
 80089b6:	f243 532c 	movw	r3, #13612	; 0x352c
 80089ba:	5ee3      	ldrsh	r3, [r4, r3]
 80089bc:	2bc8      	cmp	r3, #200	; 0xc8
 80089be:	dd03      	ble.n	80089c8 <_ZN11Screen1View15handleTickEventEv+0x80>
	{
		n=0;
 80089c0:	f243 532c 	movw	r3, #13612	; 0x352c
 80089c4:	2200      	movs	r2, #0
 80089c6:	52e2      	strh	r2, [r4, r3]
	}
	for (count = 0; count < 200; count++)
	{
		data[count]=120*(sin(20*3.14*count*0.00125+0.01*n*3.14)+1)/2;
 80089c8:	f243 562c 	movw	r6, #13612	; 0x352c
 80089cc:	5fa3      	ldrsh	r3, [r4, r6]
 80089ce:	ee08 3a10 	vmov	s16, r3
 80089d2:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 80089d6:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8008ad8 <_ZN11Screen1View15handleTickEventEv+0x190>
 80089da:	ee28 8b07 	vmul.f64	d8, d8, d7
 80089de:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8008ae0 <_ZN11Screen1View15handleTickEventEv+0x198>
 80089e2:	ee28 8b07 	vmul.f64	d8, d8, d7
 80089e6:	4426      	add	r6, r4
 80089e8:	2500      	movs	r5, #0
 80089ea:	ed9f cb3f 	vldr	d12, [pc, #252]	; 8008ae8 <_ZN11Screen1View15handleTickEventEv+0x1a0>
 80089ee:	ed9f bb40 	vldr	d11, [pc, #256]	; 8008af0 <_ZN11Screen1View15handleTickEventEv+0x1a8>
 80089f2:	eeb7 ab00 	vmov.f64	d10, #112	; 0x3f800000  1.0
 80089f6:	ed9f 9b40 	vldr	d9, [pc, #256]	; 8008af8 <_ZN11Screen1View15handleTickEventEv+0x1b0>
 80089fa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80089fe:	b22b      	sxth	r3, r5
 8008a00:	ee07 3a10 	vmov	s14, r3
 8008a04:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008a08:	ee27 7b0c 	vmul.f64	d7, d7, d12
 8008a0c:	eeb0 0b48 	vmov.f64	d0, d8
 8008a10:	ee07 0b0b 	vmla.f64	d0, d7, d11
 8008a14:	f00d fda4 	bl	8016560 <sin>
 8008a18:	ee30 0b0a 	vadd.f64	d0, d0, d10
 8008a1c:	ee20 0b09 	vmul.f64	d0, d0, d9
 8008a20:	ee20 0b0d 	vmul.f64	d0, d0, d13
 8008a24:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008a28:	ee10 3a10 	vmov	r3, s0
 8008a2c:	f826 3f02 	strh.w	r3, [r6, #2]!
	for (count = 0; count < 200; count++)
 8008a30:	3501      	adds	r5, #1
 8008a32:	2dc8      	cmp	r5, #200	; 0xc8
 8008a34:	d1e3      	bne.n	80089fe <_ZN11Screen1View15handleTickEventEv+0xb6>
 8008a36:	f243 552a 	movw	r5, #13610	; 0x352a
 8008a3a:	23c8      	movs	r3, #200	; 0xc8
 8008a3c:	5363      	strh	r3, [r4, r5]
	}

	dynamicGraph1.clear();
 8008a3e:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8008a42:	4630      	mov	r0, r6
 8008a44:	f002 fac2 	bl	800afcc <_ZN8touchgfx17AbstractDataGraph5clearEv>
	dynamicGraph1.invalidate();
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f006 f949 	bl	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>

	for (count = 0; count < 200; count++)
 8008a4e:	2300      	movs	r3, #0
 8008a50:	5363      	strh	r3, [r4, r5]
	{
		dynamicGraph1.addDataPoint(data[count]);
 8008a52:	f641 2794 	movw	r7, #6804	; 0x1a94
	for (count = 0; count < 200; count++)
 8008a56:	4425      	add	r5, r4
		dynamicGraph1.addDataPoint(data[count]);
 8008a58:	443b      	add	r3, r7
 8008a5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008a5e:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8008a62:	4630      	mov	r0, r6
 8008a64:	f003 f822 	bl	800baac <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEi>
	for (count = 0; count < 200; count++)
 8008a68:	882b      	ldrh	r3, [r5, #0]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	b21b      	sxth	r3, r3
 8008a6e:	802b      	strh	r3, [r5, #0]
 8008a70:	2bc7      	cmp	r3, #199	; 0xc7
 8008a72:	ddf1      	ble.n	8008a58 <_ZN11Screen1View15handleTickEventEv+0x110>
	}

	n++;
 8008a74:	f243 522c 	movw	r2, #13612	; 0x352c
 8008a78:	5aa3      	ldrh	r3, [r4, r2]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	52a3      	strh	r3, [r4, r2]

}
 8008a7e:	b003      	add	sp, #12
 8008a80:	ecbd 8b0c 	vpop	{d8-d13}
 8008a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousMcuLoadPct = mcuLoadPct;
 8008a86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008a8a:	f643 336e 	movw	r3, #15214	; 0x3b6e
 8008a8e:	52c2      	strh	r2, [r0, r3]
        Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%u", mcuLoadPct);
 8008a90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 8008a98:	2114      	movs	r1, #20
 8008a9a:	f200 601c 	addw	r0, r0, #1564	; 0x61c
 8008a9e:	f008 f93b 	bl	8010d18 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        textArea2.resizeToCurrentText();
 8008aa2:	f204 557c 	addw	r5, r4, #1404	; 0x57c
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f003 fb0d 	bl	800c0c6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        textArea2.invalidate();
 8008aac:	4628      	mov	r0, r5
 8008aae:	f006 f917 	bl	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8008ab2:	e75d      	b.n	8008970 <_ZN11Screen1View15handleTickEventEv+0x28>
            fps = frames;
 8008ab4:	f243 5228 	movw	r2, #13608	; 0x3528
 8008ab8:	52a3      	strh	r3, [r4, r2]
            Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", fps);
 8008aba:	4a13      	ldr	r2, [pc, #76]	; (8008b08 <_ZN11Screen1View15handleTickEventEv+0x1c0>)
 8008abc:	2114      	movs	r1, #20
 8008abe:	f204 50f4 	addw	r0, r4, #1524	; 0x5f4
 8008ac2:	f008 f929 	bl	8010d18 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
            textArea1.resizeToCurrentText();
 8008ac6:	f204 553c 	addw	r5, r4, #1340	; 0x53c
 8008aca:	4628      	mov	r0, r5
 8008acc:	f003 fafb 	bl	800c0c6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
            textArea1.invalidate();
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f006 f905 	bl	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8008ad6:	e767      	b.n	80089a8 <_ZN11Screen1View15handleTickEventEv+0x60>
 8008ad8:	47ae147b 	.word	0x47ae147b
 8008adc:	3f847ae1 	.word	0x3f847ae1
 8008ae0:	51eb851f 	.word	0x51eb851f
 8008ae4:	40091eb8 	.word	0x40091eb8
 8008ae8:	66666667 	.word	0x66666667
 8008aec:	404f6666 	.word	0x404f6666
 8008af0:	47ae147b 	.word	0x47ae147b
 8008af4:	3f547ae1 	.word	0x3f547ae1
 8008af8:	00000000 	.word	0x00000000
 8008afc:	405e0000 	.word	0x405e0000
 8008b00:	2400fa1c 	.word	0x2400fa1c
 8008b04:	08018ae0 	.word	0x08018ae0
 8008b08:	08018ae4 	.word	0x08018ae4

08008b0c <_ZN11Screen1ViewD0Ev>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	4604      	mov	r4, r0
 8008b10:	f643 3170 	movw	r1, #15216	; 0x3b70
 8008b14:	f00d fcfa 	bl	801650c <_ZdlPvj>
 8008b18:	4620      	mov	r0, r4
 8008b1a:	bd10      	pop	{r4, pc}

08008b1c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	4604      	mov	r4, r0
 8008b20:	f7ff fbcc 	bl	80082bc <_ZN15Screen1ViewBaseC1Ev>
 8008b24:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <_ZN11Screen1ViewC1Ev+0x24>)
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f243 522a 	movw	r2, #13610	; 0x352a
 8008b2e:	52a3      	strh	r3, [r4, r2]
 8008b30:	f243 522c 	movw	r2, #13612	; 0x352c
 8008b34:	52a3      	strh	r3, [r4, r2]
 8008b36:	f643 326e 	movw	r2, #15214	; 0x3b6e
 8008b3a:	52a3      	strh	r3, [r4, r2]
}
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	bd10      	pop	{r4, pc}
 8008b40:	08018af0 	.word	0x08018af0

08008b44 <_ZN20STM32TouchController4initEv>:
{
    /**
     * Initialize touch controller and driver
     *
     */
}
 8008b44:	4770      	bx	lr

08008b46 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8008b46:	4770      	bx	lr

08008b48 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8008b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	460e      	mov	r6, r1
 8008b50:	4615      	mov	r5, r2
     *
     */
	static uint8_t buf[6]={0x81,0x4E,0,0,0,0};   //寄存器地
	static uint8_t bufs[6]={0x81,0x50,0,0,0,0};   //数据

	  HAL_I2C_Master_Transmit(&hi2c1,GTP_ADDRESS_WRITE,&buf[0],2,100);
 8008b52:	4c22      	ldr	r4, [pc, #136]	; (8008bdc <_ZN20STM32TouchController11sampleTouchERlS0_+0x94>)
 8008b54:	4f22      	ldr	r7, [pc, #136]	; (8008be0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x98>)
 8008b56:	f04f 0864 	mov.w	r8, #100	; 0x64
 8008b5a:	f8cd 8000 	str.w	r8, [sp]
 8008b5e:	2302      	movs	r3, #2
 8008b60:	4622      	mov	r2, r4
 8008b62:	2128      	movs	r1, #40	; 0x28
 8008b64:	4638      	mov	r0, r7
 8008b66:	f7f9 fa79 	bl	800205c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, GTP_ADDRESS_READ, &buf[2],1,100);
 8008b6a:	f8cd 8000 	str.w	r8, [sp]
 8008b6e:	2301      	movs	r3, #1
 8008b70:	1ca2      	adds	r2, r4, #2
 8008b72:	2129      	movs	r1, #41	; 0x29
 8008b74:	4638      	mov	r0, r7
 8008b76:	f7f9 fb35 	bl	80021e4 <HAL_I2C_Master_Receive>
	  if(buf[2]>>7==1)
 8008b7a:	78a3      	ldrb	r3, [r4, #2]
 8008b7c:	09db      	lsrs	r3, r3, #7
 8008b7e:	d02a      	beq.n	8008bd6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x8e>
	  {
		  if(buf[2]<<5!=0)
		  {
			  HAL_I2C_Master_Transmit(&hi2c1,GTP_ADDRESS_WRITE,&bufs[0],2,50);
 8008b80:	4c18      	ldr	r4, [pc, #96]	; (8008be4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x9c>)
 8008b82:	f04f 0832 	mov.w	r8, #50	; 0x32
 8008b86:	f8cd 8000 	str.w	r8, [sp]
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	2128      	movs	r1, #40	; 0x28
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7f9 fa63 	bl	800205c <HAL_I2C_Master_Transmit>
			  HAL_I2C_Master_Receive(&hi2c1, GTP_ADDRESS_READ, &bufs[2],4,50);
 8008b96:	f8cd 8000 	str.w	r8, [sp]
 8008b9a:	2304      	movs	r3, #4
 8008b9c:	1ca2      	adds	r2, r4, #2
 8008b9e:	2129      	movs	r1, #41	; 0x29
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f7f9 fb1f 	bl	80021e4 <HAL_I2C_Master_Receive>
			  x=bufs[2]|bufs[3]<<8;
 8008ba6:	78e2      	ldrb	r2, [r4, #3]
 8008ba8:	78a3      	ldrb	r3, [r4, #2]
 8008baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bae:	6033      	str	r3, [r6, #0]
			  y=bufs[4]|bufs[5]<<8;
 8008bb0:	7962      	ldrb	r2, [r4, #5]
 8008bb2:	7923      	ldrb	r3, [r4, #4]
 8008bb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bb8:	602b      	str	r3, [r5, #0]
			  buf[2]=0;
 8008bba:	4a08      	ldr	r2, [pc, #32]	; (8008bdc <_ZN20STM32TouchController11sampleTouchERlS0_+0x94>)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	7093      	strb	r3, [r2, #2]
			  HAL_I2C_Master_Transmit(&hi2c1,GTP_ADDRESS_WRITE,&buf[0],3,50);
 8008bc0:	f8cd 8000 	str.w	r8, [sp]
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	2128      	movs	r1, #40	; 0x28
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f7f9 fa47 	bl	800205c <HAL_I2C_Master_Transmit>
			  return true;
 8008bce:	2001      	movs	r0, #1
	  else
	  {
		  return false;
	  }

}
 8008bd0:	b002      	add	sp, #8
 8008bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  return false;
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	e7fa      	b.n	8008bd0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x88>
 8008bda:	bf00      	nop
 8008bdc:	24000018 	.word	0x24000018
 8008be0:	2400af84 	.word	0x2400af84
 8008be4:	24000020 	.word	0x24000020

08008be8 <_ZN20STM32TouchControllerD0Ev>:
 8008be8:	b510      	push	{r4, lr}
 8008bea:	4604      	mov	r4, r0
 8008bec:	2104      	movs	r1, #4
 8008bee:	f00d fc8d 	bl	801650c <_ZdlPvj>
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	bd10      	pop	{r4, pc}

08008bf6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 8008bf6:	4770      	bx	lr

08008bf8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{

}
 8008bf8:	4770      	bx	lr

08008bfa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{

}
 8008bfa:	4770      	bx	lr

08008bfc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
        requestedOrientation = orientation;
 8008bfc:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8008c00:	2301      	movs	r3, #1
 8008c02:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8008c06:	4770      	bx	lr

08008c08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8008c08:	b508      	push	{r3, lr}
        if (useDMAAcceleration)
 8008c0a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8008c0e:	b123      	cbz	r3, 8008c1a <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
            return dma.getBlitCaps();
 8008c10:	6840      	ldr	r0, [r0, #4]
 8008c12:	6803      	ldr	r3, [r0, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4798      	blx	r3
    }
 8008c18:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	e7fc      	b.n	8008c18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

08008c1e <_ZN8touchgfx3HAL9sampleKeyERh>:
    }
 8008c1e:	2000      	movs	r0, #0
 8008c20:	4770      	bx	lr

08008c22 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8008c22:	2000      	movs	r0, #0
 8008c24:	4770      	bx	lr

08008c26 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8008c26:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 8008c28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008c2a:	b10b      	cbz	r3, 8008c30 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4798      	blx	r3
        }
    }
 8008c30:	bd08      	pop	{r3, pc}

08008c32 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8008c32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008c36:	4770      	bx	lr

08008c38 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8008c38:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 8008c3a:	6840      	ldr	r0, [r0, #4]
 8008c3c:	6803      	ldr	r3, [r0, #0]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	4798      	blx	r3
    }
 8008c42:	bd08      	pop	{r3, pc}

08008c44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8008c44:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 8008c48:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d00c      	beq.n	8008c6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8008c50:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	b9ab      	cbnz	r3, 8008c82 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8008c56:	4a0c      	ldr	r2, [pc, #48]	; (8008c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8008c58:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8008c5a:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8008c5c:	8818      	ldrh	r0, [r3, #0]
 8008c5e:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8008c60:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8008c62:	4b08      	ldr	r3, [pc, #32]	; (8008c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	b143      	cbz	r3, 8008c82 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8008c70:	4a05      	ldr	r2, [pc, #20]	; (8008c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8008c72:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8008c76:	8818      	ldrh	r0, [r3, #0]
 8008c78:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 8008c7a:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8008c7c:	4b01      	ldr	r3, [pc, #4]	; (8008c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	701a      	strb	r2, [r3, #0]
        }
    }
 8008c82:	4770      	bx	lr
 8008c84:	2400fa14 	.word	0x2400fa14
 8008c88:	2400fa12 	.word	0x2400fa12
 8008c8c:	2400fa10 	.word	0x2400fa10

08008c90 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8008c90:	4770      	bx	lr

08008c92 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8008c92:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8008c94:	f000 fde4 	bl	8009860 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8008c98:	bd08      	pop	{r3, pc}

08008c9a <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8008c9a:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8008c9c:	f000 fd76 	bl	800978c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 8008ca0:	bd08      	pop	{r3, pc}

08008ca2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8008ca2:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8008ca4:	f000 fd78 	bl	8009798 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8008ca8:	bd08      	pop	{r3, pc}

08008caa <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8008caa:	b508      	push	{r3, lr}
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8008cac:	f000 fdf6 	bl	800989c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8008cb0:	bd08      	pop	{r3, pc}

08008cb2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8008cb2:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8008cb4:	f000 fe20 	bl	80098f8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
}
 8008cb8:	bd08      	pop	{r3, pc}

08008cba <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8008cba:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8008cbc:	f000 fd24 	bl	8009708 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8008cc0:	bd08      	pop	{r3, pc}

08008cc2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8008cc2:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8008cc4:	f000 fd2a 	bl	800971c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8008cc8:	bd08      	pop	{r3, pc}

08008cca <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8008cca:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8008ccc:	f000 fd30 	bl	8009730 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8008cd0:	bd08      	pop	{r3, pc}

08008cd2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8008cd2:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8008cd4:	f000 fd40 	bl	8009758 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8008cd8:	bd08      	pop	{r3, pc}
	...

08008cdc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8008cdc:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8008cde:	b169      	cbz	r1, 8008cfc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x20>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8008ce0:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8008ce2:	6402      	str	r2, [r0, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8008ce4:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8008ce6:	3a00      	subs	r2, #0
 8008ce8:	bf18      	it	ne
 8008cea:	2201      	movne	r2, #1
 8008cec:	4907      	ldr	r1, [pc, #28]	; (8008d0c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8008cee:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8008cf0:	3b00      	subs	r3, #0
 8008cf2:	bf18      	it	ne
 8008cf4:	2301      	movne	r3, #1
 8008cf6:	4a06      	ldr	r2, [pc, #24]	; (8008d10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8008cf8:	7013      	strb	r3, [r2, #0]
    }
 8008cfa:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8008cfe:	4a06      	ldr	r2, [pc, #24]	; (8008d18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8008d00:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8008d04:	4805      	ldr	r0, [pc, #20]	; (8008d1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8008d06:	f00e fa11 	bl	801712c <__assert_func>
 8008d0a:	bf00      	nop
 8008d0c:	2400fa1a 	.word	0x2400fa1a
 8008d10:	2400fa1b 	.word	0x2400fa1b
 8008d14:	08018b34 	.word	0x08018b34
 8008d18:	08018b6c 	.word	0x08018b6c
 8008d1c:	08018bbc 	.word	0x08018bbc

08008d20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8008d20:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8008d22:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	428b      	cmp	r3, r1
 8008d28:	d808      	bhi.n	8008d3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 8008d2a:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d804      	bhi.n	8008d3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8008d34:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8008d36:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8008d38:	801a      	strh	r2, [r3, #0]
    }
 8008d3a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8008d3e:	4a07      	ldr	r2, [pc, #28]	; (8008d5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8008d40:	219e      	movs	r1, #158	; 0x9e
 8008d42:	4807      	ldr	r0, [pc, #28]	; (8008d60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8008d44:	f00e f9f2 	bl	801712c <__assert_func>
 8008d48:	2400fa10 	.word	0x2400fa10
 8008d4c:	2400fa12 	.word	0x2400fa12
 8008d50:	2400fa16 	.word	0x2400fa16
 8008d54:	2400fa18 	.word	0x2400fa18
 8008d58:	08018c00 	.word	0x08018c00
 8008d5c:	08018c64 	.word	0x08018c64
 8008d60:	08018bbc 	.word	0x08018bbc

08008d64 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8008d64:	b510      	push	{r4, lr}
 8008d66:	4604      	mov	r4, r0
        swapFrameBuffers();
 8008d68:	f001 ffb2 	bl	800acd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d72:	4620      	mov	r0, r4
 8008d74:	4798      	blx	r3
    }
 8008d76:	bd10      	pop	{r4, pc}

08008d78 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8008d78:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8008d7a:	f001 f945 	bl	800a008 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 8008d7e:	bd08      	pop	{r3, pc}

08008d80 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8008d80:	b510      	push	{r4, lr}
 8008d82:	4604      	mov	r4, r0
 8008d84:	217c      	movs	r1, #124	; 0x7c
 8008d86:	f00d fbc1 	bl	801650c <_ZdlPvj>
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	bd10      	pop	{r4, pc}
	...

08008d90 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8008d90:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8008d92:	2200      	movs	r2, #0
 8008d94:	2101      	movs	r1, #1
 8008d96:	4608      	mov	r0, r1
 8008d98:	f7fc fd77 	bl	800588a <osSemaphoreNew>
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8008d9e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8008da0:	b140      	cbz	r0, 8008db4 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8008da2:	2200      	movs	r2, #0
 8008da4:	2104      	movs	r1, #4
 8008da6:	2001      	movs	r0, #1
 8008da8:	f7fc fe24 	bl	80059f4 <osMessageQueueNew>
 8008dac:	4b08      	ldr	r3, [pc, #32]	; (8008dd0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8008dae:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8008db0:	b130      	cbz	r0, 8008dc0 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 8008db2:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8008db4:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8008db6:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8008db8:	2128      	movs	r1, #40	; 0x28
 8008dba:	4808      	ldr	r0, [pc, #32]	; (8008ddc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8008dbc:	f00e f9b6 	bl	801712c <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8008dc0:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8008dc2:	4a05      	ldr	r2, [pc, #20]	; (8008dd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8008dc4:	212c      	movs	r1, #44	; 0x2c
 8008dc6:	4805      	ldr	r0, [pc, #20]	; (8008ddc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8008dc8:	f00e f9b0 	bl	801712c <__assert_func>
 8008dcc:	2400afd4 	.word	0x2400afd4
 8008dd0:	2400afd0 	.word	0x2400afd0
 8008dd4:	08018d78 	.word	0x08018d78
 8008dd8:	08018dc4 	.word	0x08018dc4
 8008ddc:	08018df4 	.word	0x08018df4
 8008de0:	08018e20 	.word	0x08018e20

08008de4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8008de4:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8008de6:	f04f 31ff 	mov.w	r1, #4294967295
 8008dea:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8008dec:	6818      	ldr	r0, [r3, #0]
 8008dee:	f7fc fd9f 	bl	8005930 <osSemaphoreAcquire>
}
 8008df2:	bd08      	pop	{r3, pc}
 8008df4:	2400afd4 	.word	0x2400afd4

08008df8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8008df8:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8008dfa:	4b02      	ldr	r3, [pc, #8]	; (8008e04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f7fc fdcb 	bl	8005998 <osSemaphoreRelease>
}
 8008e02:	bd08      	pop	{r3, pc}
 8008e04:	2400afd4 	.word	0x2400afd4

08008e08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8008e08:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	4b02      	ldr	r3, [pc, #8]	; (8008e18 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	f7fc fd8e 	bl	8005930 <osSemaphoreAcquire>
}
 8008e14:	bd08      	pop	{r3, pc}
 8008e16:	bf00      	nop
 8008e18:	2400afd4 	.word	0x2400afd4

08008e1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8008e1c:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8008e1e:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f7fc fdb9 	bl	8005998 <osSemaphoreRelease>
}
 8008e26:	bd08      	pop	{r3, pc}
 8008e28:	2400afd4 	.word	0x2400afd4

08008e2c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8008e2c:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8008e2e:	2300      	movs	r3, #0
 8008e30:	461a      	mov	r2, r3
 8008e32:	4903      	ldr	r1, [pc, #12]	; (8008e40 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8008e34:	4803      	ldr	r0, [pc, #12]	; (8008e44 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8008e36:	6800      	ldr	r0, [r0, #0]
 8008e38:	f7fc fe20 	bl	8005a7c <osMessageQueuePut>
}
 8008e3c:	bd08      	pop	{r3, pc}
 8008e3e:	bf00      	nop
 8008e40:	24000028 	.word	0x24000028
 8008e44:	2400afd0 	.word	0x2400afd0

08008e48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8008e4c:	4c07      	ldr	r4, [pc, #28]	; (8008e6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8008e4e:	2300      	movs	r3, #0
 8008e50:	461a      	mov	r2, r3
 8008e52:	a901      	add	r1, sp, #4
 8008e54:	6820      	ldr	r0, [r4, #0]
 8008e56:	f7fc fe4f 	bl	8005af8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8008e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e5e:	2200      	movs	r2, #0
 8008e60:	a901      	add	r1, sp, #4
 8008e62:	6820      	ldr	r0, [r4, #0]
 8008e64:	f7fc fe48 	bl	8005af8 <osMessageQueueGet>
}
 8008e68:	b002      	add	sp, #8
 8008e6a:	bd10      	pop	{r4, pc}
 8008e6c:	2400afd0 	.word	0x2400afd0

08008e70 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8008e70:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 8008e72:	6803      	ldr	r3, [r0, #0]
 8008e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e76:	4798      	blx	r3
    }
 8008e78:	bd08      	pop	{r3, pc}

08008e7a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	4770      	bx	lr

08008e7e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8008e7e:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8008e80:	6803      	ldr	r3, [r0, #0]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e84:	4798      	blx	r3
    }
 8008e86:	bd08      	pop	{r3, pc}

08008e88 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8008e88:	b508      	push	{r3, lr}
        dma.signalDMAInterrupt();
 8008e8a:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <DMA2D_XferCpltCallback+0x10>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6858      	ldr	r0, [r3, #4]
 8008e90:	6803      	ldr	r3, [r0, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 8008e96:	bd08      	pop	{r3, pc}
 8008e98:	2400fa1c 	.word	0x2400fa1c

08008e9c <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8008e9c:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <_ZN8STM32DMAD1Ev+0x18>)
 8008e9e:	6003      	str	r3, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <_ZN8STM32DMAD1Ev+0x1c>)
 8008ea2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8008eaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008eae:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8008eb2:	4770      	bx	lr
 8008eb4:	08018fa8 	.word	0x08018fa8
 8008eb8:	e000e100 	.word	0xe000e100

08008ebc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8008ebc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008ebe:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <_ZN8STM32DMA10initializeEv+0x40>)
 8008ec0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008ec4:	f042 0210 	orr.w	r2, r2, #16
 8008ec8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8008ecc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008ed0:	f002 0210 	and.w	r2, r2, #16
 8008ed4:	9201      	str	r2, [sp, #4]
 8008ed6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8008ed8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008eda:	f042 0210 	orr.w	r2, r2, #16
 8008ede:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8008ee0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008ee2:	f022 0210 	bic.w	r2, r2, #16
 8008ee6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <_ZN8STM32DMA10initializeEv+0x44>)
 8008eea:	4a06      	ldr	r2, [pc, #24]	; (8008f04 <_ZN8STM32DMA10initializeEv+0x48>)
 8008eec:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008eee:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <_ZN8STM32DMA10initializeEv+0x4c>)
 8008ef0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008ef4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8008ef6:	b002      	add	sp, #8
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	58024400 	.word	0x58024400
 8008f00:	2400fc40 	.word	0x2400fc40
 8008f04:	08008e89 	.word	0x08008e89
 8008f08:	e000e100 	.word	0xe000e100

08008f0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8008f0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8008f10:	4770      	bx	lr

08008f12 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8008f12:	b510      	push	{r4, lr}
 8008f14:	4604      	mov	r4, r0
}
 8008f16:	f7ff ffc1 	bl	8008e9c <_ZN8STM32DMAD1Ev>
 8008f1a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f00d faf4 	bl	801650c <_ZdlPvj>
 8008f24:	4620      	mov	r0, r4
 8008f26:	bd10      	pop	{r4, pc}

08008f28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8008f28:	b510      	push	{r4, lr}
    switch (format)
 8008f2a:	7f8b      	ldrb	r3, [r1, #30]
 8008f2c:	2b0a      	cmp	r3, #10
 8008f2e:	d821      	bhi.n	8008f74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x4c>
 8008f30:	e8df f003 	tbb	[pc, r3]
 8008f34:	20260628 	.word	0x20260628
 8008f38:	06202020 	.word	0x06202020
 8008f3c:	0606      	.short	0x0606
 8008f3e:	06          	.byte	0x06
 8008f3f:	00          	.byte	0x00
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8008f40:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8008f42:	4b21      	ldr	r3, [pc, #132]	; (8008fc8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8008f44:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8008f46:	8a8c      	ldrh	r4, [r1, #20]
 8008f48:	8aca      	ldrh	r2, [r1, #22]
 8008f4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8008f50:	690a      	ldr	r2, [r1, #16]
 8008f52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8008f54:	8b4a      	ldrh	r2, [r1, #26]
 8008f56:	8a8c      	ldrh	r4, [r1, #20]
 8008f58:	1b12      	subs	r2, r2, r4
 8008f5a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8008f5c:	680b      	ldr	r3, [r1, #0]
 8008f5e:	2b08      	cmp	r3, #8
 8008f60:	d012      	beq.n	8008f88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8008f62:	4b19      	ldr	r3, [pc, #100]	; (8008fc8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8008f64:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, 0);
 8008f66:	2200      	movs	r2, #0
 8008f68:	611a      	str	r2, [r3, #16]
        return color;
 8008f6a:	68ca      	ldr	r2, [r1, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color.getColor32());
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8008f6e:	4a17      	ldr	r2, [pc, #92]	; (8008fcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8008f70:	601a      	str	r2, [r3, #0]
    }
}
 8008f72:	bd10      	pop	{r4, pc}
        assert(0 && "Unsupported Format!");
 8008f74:	4b16      	ldr	r3, [pc, #88]	; (8008fd0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8008f76:	4a17      	ldr	r2, [pc, #92]	; (8008fd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8008f78:	2187      	movs	r1, #135	; 0x87
 8008f7a:	4817      	ldr	r0, [pc, #92]	; (8008fd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8008f7c:	f00e f8d6 	bl	801712c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8008f80:	2000      	movs	r0, #0
 8008f82:	e7de      	b.n	8008f42 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8008f84:	2002      	movs	r0, #2
 8008f86:	e7dc      	b.n	8008f42 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8008f88:	8b4b      	ldrh	r3, [r1, #26]
 8008f8a:	8a8a      	ldrh	r2, [r1, #20]
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	4a0e      	ldr	r2, [pc, #56]	; (8008fc8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8008f90:	6193      	str	r3, [r2, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8008f92:	8b4b      	ldrh	r3, [r1, #26]
 8008f94:	8a8c      	ldrh	r4, [r1, #20]
 8008f96:	1b1b      	subs	r3, r3, r4
 8008f98:	6113      	str	r3, [r2, #16]
        if (blitOp.replaceBgAlpha)
 8008f9a:	7fcb      	ldrb	r3, [r1, #31]
 8008f9c:	b18b      	cbz	r3, 8008fc2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8008f9e:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8008fa0:	4303      	orrs	r3, r0
 8008fa2:	6253      	str	r3, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8008fa4:	7f0b      	ldrb	r3, [r1, #28]
 8008fa6:	4a0e      	ldr	r2, [pc, #56]	; (8008fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb8>)
 8008fa8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8008fac:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8008fae:	61da      	str	r2, [r3, #28]
 8008fb0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color.getColor32());
 8008fb2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8008fb4:	690a      	ldr	r2, [r1, #16]
 8008fb6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8008fb8:	690a      	ldr	r2, [r1, #16]
 8008fba:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8008fbc:	4a09      	ldr	r2, [pc, #36]	; (8008fe4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xbc>)
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	e7d7      	b.n	8008f72 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x4a>
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8008fc2:	4b01      	ldr	r3, [pc, #4]	; (8008fc8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8008fc4:	6258      	str	r0, [r3, #36]	; 0x24
 8008fc6:	e7ed      	b.n	8008fa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x7c>
 8008fc8:	52001000 	.word	0x52001000
 8008fcc:	00030201 	.word	0x00030201
 8008fd0:	08018e64 	.word	0x08018e64
 8008fd4:	08018e80 	.word	0x08018e80
 8008fd8:	08018ecc 	.word	0x08018ecc
 8008fdc:	ff010000 	.word	0xff010000
 8008fe0:	00010009 	.word	0x00010009
 8008fe4:	00020201 	.word	0x00020201

08008fe8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8008fe8:	b570      	push	{r4, r5, r6, lr}
    switch (format)
 8008fea:	7f4b      	ldrb	r3, [r1, #29]
 8008fec:	2b0b      	cmp	r3, #11
 8008fee:	d80f      	bhi.n	8009010 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28>
 8008ff0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008ff4:	0159000c 	.word	0x0159000c
 8008ff8:	000e0014 	.word	0x000e0014
 8008ffc:	000e000e 	.word	0x000e000e
 8009000:	015b000e 	.word	0x015b000e
 8009004:	015b015b 	.word	0x015b015b
 8009008:	015b015b 	.word	0x015b015b
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800900c:	2402      	movs	r4, #2
 800900e:	e14d      	b.n	80092ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>
        assert(0 && "Unsupported Format!");
 8009010:	4b8f      	ldr	r3, [pc, #572]	; (8009250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>)
 8009012:	4a90      	ldr	r2, [pc, #576]	; (8009254 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 8009014:	2166      	movs	r1, #102	; 0x66
 8009016:	4890      	ldr	r0, [pc, #576]	; (8009258 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 8009018:	f00e f888 	bl	801712c <__assert_func>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800901c:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 800901e:	2b0b      	cmp	r3, #11
 8009020:	d866      	bhi.n	80090f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
 8009022:	e8df f003 	tbb	[pc, r3]
 8009026:	0643      	.short	0x0643
 8009028:	6565656b 	.word	0x6565656b
 800902c:	47474765 	.word	0x47474765
 8009030:	4747      	.short	0x4747
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8009032:	2400      	movs	r4, #0
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8009034:	2001      	movs	r0, #1
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8009036:	2601      	movs	r6, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8009038:	8b4a      	ldrh	r2, [r1, #26]
 800903a:	8a8b      	ldrh	r3, [r1, #20]
 800903c:	1ad2      	subs	r2, r2, r3
 800903e:	4b87      	ldr	r3, [pc, #540]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8009040:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8009042:	8b4a      	ldrh	r2, [r1, #26]
 8009044:	8a8d      	ldrh	r5, [r1, #20]
 8009046:	1b52      	subs	r2, r2, r5
 8009048:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800904a:	8b0a      	ldrh	r2, [r1, #24]
 800904c:	8a8d      	ldrh	r5, [r1, #20]
 800904e:	1b52      	subs	r2, r2, r5
 8009050:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8009052:	635e      	str	r6, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8009054:	8a8d      	ldrh	r5, [r1, #20]
 8009056:	8aca      	ldrh	r2, [r1, #22]
 8009058:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800905c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800905e:	690a      	ldr	r2, [r1, #16]
 8009060:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8009062:	684a      	ldr	r2, [r1, #4]
 8009064:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8009066:	680b      	ldr	r3, [r1, #0]
 8009068:	2b80      	cmp	r3, #128	; 0x80
 800906a:	f000 8088 	beq.w	800917e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x196>
 800906e:	d853      	bhi.n	8009118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
 8009070:	2b20      	cmp	r3, #32
 8009072:	f000 80d6 	beq.w	8009222 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8009076:	2b40      	cmp	r3, #64	; 0x40
 8009078:	f000 80d3 	beq.w	8009222 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800907c:	2b04      	cmp	r3, #4
 800907e:	f040 8101 	bne.w	8009284 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8009082:	7f0b      	ldrb	r3, [r1, #28]
 8009084:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8009088:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800908c:	4b73      	ldr	r3, [pc, #460]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800908e:	61dc      	str	r4, [r3, #28]
        if (blitOp.replaceBgAlpha)
 8009090:	7fcb      	ldrb	r3, [r1, #31]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80c2 	beq.w	800921c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8009098:	4b71      	ldr	r3, [pc, #452]	; (8009260 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800909a:	4303      	orrs	r3, r0
 800909c:	4a6f      	ldr	r2, [pc, #444]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800909e:	6253      	str	r3, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80090a0:	690a      	ldr	r2, [r1, #16]
 80090a2:	4b6e      	ldr	r3, [pc, #440]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80090a4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80090a6:	4a6f      	ldr	r2, [pc, #444]	; (8009264 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80090a8:	601a      	str	r2, [r3, #0]
        break;
 80090aa:	e061      	b.n	8009170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80090ac:	2400      	movs	r4, #0
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80090ae:	2002      	movs	r0, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80090b0:	2602      	movs	r6, #2
        break;
 80090b2:	e7c1      	b.n	8009038 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x50>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80090b4:	2400      	movs	r4, #0
        dma2dColorMode = DMA2D_INPUT_L8;
 80090b6:	2005      	movs	r0, #5
    switch (format)
 80090b8:	2b0a      	cmp	r3, #10
 80090ba:	d822      	bhi.n	8009102 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11a>
 80090bc:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xdc>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090b1 	.word	0x080090b1
 80090c8:	08009037 	.word	0x08009037
 80090cc:	0800910f 	.word	0x0800910f
 80090d0:	08009103 	.word	0x08009103
 80090d4:	08009103 	.word	0x08009103
 80090d8:	08009103 	.word	0x08009103
 80090dc:	08009103 	.word	0x08009103
 80090e0:	08009037 	.word	0x08009037
 80090e4:	08009037 	.word	0x08009037
 80090e8:	08009037 	.word	0x08009037
 80090ec:	08009037 	.word	0x08009037
        assert(0 && "Unsupported Format!");
 80090f0:	4b57      	ldr	r3, [pc, #348]	; (8009250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>)
 80090f2:	4a58      	ldr	r2, [pc, #352]	; (8009254 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 80090f4:	2166      	movs	r1, #102	; 0x66
 80090f6:	4858      	ldr	r0, [pc, #352]	; (8009258 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 80090f8:	f00e f818 	bl	801712c <__assert_func>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80090fc:	2400      	movs	r4, #0
 80090fe:	4620      	mov	r0, r4
 8009100:	e7da      	b.n	80090b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
        assert(0 && "Unsupported Format!");
 8009102:	4b53      	ldr	r3, [pc, #332]	; (8009250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>)
 8009104:	4a58      	ldr	r2, [pc, #352]	; (8009268 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8009106:	2187      	movs	r1, #135	; 0x87
 8009108:	4853      	ldr	r0, [pc, #332]	; (8009258 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800910a:	f00e f80f 	bl	801712c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800910e:	2600      	movs	r6, #0
 8009110:	e792      	b.n	8009038 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x50>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8009112:	2000      	movs	r0, #0
 8009114:	4606      	mov	r6, r0
 8009116:	e78f      	b.n	8009038 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x50>
    switch (blitOp.operation)
 8009118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800911c:	d016      	beq.n	800914c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 800911e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009122:	f040 80af 	bne.w	8009284 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8009126:	7f0a      	ldrb	r2, [r1, #28]
 8009128:	4b50      	ldr	r3, [pc, #320]	; (800926c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 800912a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800912e:	4a4b      	ldr	r2, [pc, #300]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8009130:	61d3      	str	r3, [r2, #28]
        return color;
 8009132:	68cb      	ldr	r3, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8009134:	6213      	str	r3, [r2, #32]
        if (blitOp.replaceBgAlpha)
 8009136:	7fcb      	ldrb	r3, [r1, #31]
 8009138:	b1f3      	cbz	r3, 8009178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 800913a:	4b49      	ldr	r3, [pc, #292]	; (8009260 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800913c:	4303      	orrs	r3, r0
 800913e:	6253      	str	r3, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8009140:	690a      	ldr	r2, [r1, #16]
 8009142:	4b46      	ldr	r3, [pc, #280]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8009144:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8009146:	4a47      	ldr	r2, [pc, #284]	; (8009264 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8009148:	601a      	str	r2, [r3, #0]
        break;
 800914a:	e011      	b.n	8009170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800914c:	7f0a      	ldrb	r2, [r1, #28]
 800914e:	4b48      	ldr	r3, [pc, #288]	; (8009270 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8009150:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009154:	4a41      	ldr	r2, [pc, #260]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8009156:	61d3      	str	r3, [r2, #28]
 8009158:	68cb      	ldr	r3, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800915a:	6213      	str	r3, [r2, #32]
        if (blitOp.replaceBgAlpha)
 800915c:	7fcb      	ldrb	r3, [r1, #31]
 800915e:	b143      	cbz	r3, 8009172 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8009160:	4b3f      	ldr	r3, [pc, #252]	; (8009260 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 8009162:	4303      	orrs	r3, r0
 8009164:	6253      	str	r3, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8009166:	690a      	ldr	r2, [r1, #16]
 8009168:	4b3c      	ldr	r3, [pc, #240]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800916a:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800916c:	4a3d      	ldr	r2, [pc, #244]	; (8009264 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800916e:	601a      	str	r2, [r3, #0]
}
 8009170:	bd70      	pop	{r4, r5, r6, pc}
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8009172:	4b3a      	ldr	r3, [pc, #232]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8009174:	6258      	str	r0, [r3, #36]	; 0x24
 8009176:	e7f6      	b.n	8009166 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17e>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8009178:	4b38      	ldr	r3, [pc, #224]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800917a:	6258      	str	r0, [r3, #36]	; 0x24
 800917c:	e7e0      	b.n	8009140 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>
          const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800917e:	688a      	ldr	r2, [r1, #8]
          WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8009180:	7f0b      	ldrb	r3, [r1, #28]
 8009182:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8009186:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800918a:	4b34      	ldr	r3, [pc, #208]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800918c:	61dc      	str	r4, [r3, #28]
          if (blitOp.replaceBgAlpha)
 800918e:	7fcb      	ldrb	r3, [r1, #31]
 8009190:	b1e3      	cbz	r3, 80091cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
              WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8009192:	4b33      	ldr	r3, [pc, #204]	; (8009260 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 8009194:	4303      	orrs	r3, r0
 8009196:	4831      	ldr	r0, [pc, #196]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8009198:	6243      	str	r3, [r0, #36]	; 0x24
          WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800919a:	6908      	ldr	r0, [r1, #16]
 800919c:	4b2f      	ldr	r3, [pc, #188]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800919e:	6158      	str	r0, [r3, #20]
           WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80091a0:	1d10      	adds	r0, r2, #4
 80091a2:	62d8      	str	r0, [r3, #44]	; 0x2c
           switch ((Bitmap::ClutFormat)palette->format)
 80091a4:	7813      	ldrb	r3, [r2, #0]
 80091a6:	b1a3      	cbz	r3, 80091d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d12c      	bne.n	8009206 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>
                  if(blitOp.alpha == 255)
 80091ac:	7f09      	ldrb	r1, [r1, #28]
 80091ae:	39ff      	subs	r1, #255	; 0xff
 80091b0:	bf18      	it	ne
 80091b2:	2101      	movne	r1, #1
                  MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80091b4:	4829      	ldr	r0, [pc, #164]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80091b6:	69c4      	ldr	r4, [r0, #28]
 80091b8:	8853      	ldrh	r3, [r2, #2]
 80091ba:	1e5a      	subs	r2, r3, #1
 80091bc:	4b2d      	ldr	r3, [pc, #180]	; (8009274 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80091be:	4023      	ands	r3, r4
 80091c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091c4:	f043 0310 	orr.w	r3, r3, #16
 80091c8:	61c3      	str	r3, [r0, #28]
                  break;
 80091ca:	e00c      	b.n	80091e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
              WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80091cc:	4b23      	ldr	r3, [pc, #140]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80091ce:	6258      	str	r0, [r3, #36]	; 0x24
 80091d0:	e7e3      	b.n	800919a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b2>
                  MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80091d2:	4922      	ldr	r1, [pc, #136]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80091d4:	69c8      	ldr	r0, [r1, #28]
 80091d6:	8853      	ldrh	r3, [r2, #2]
 80091d8:	1e5a      	subs	r2, r3, #1
 80091da:	4b26      	ldr	r3, [pc, #152]	; (8009274 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80091dc:	4003      	ands	r3, r0
 80091de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091e2:	61cb      	str	r3, [r1, #28]
          bool blend = true;
 80091e4:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80091e6:	4a1d      	ldr	r2, [pc, #116]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80091e8:	69d3      	ldr	r3, [r2, #28]
 80091ea:	f043 0320 	orr.w	r3, r3, #32
 80091ee:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80091f0:	69d3      	ldr	r3, [r2, #28]
 80091f2:	f013 0f20 	tst.w	r3, #32
 80091f6:	d1fb      	bne.n	80091f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80091f8:	4b18      	ldr	r3, [pc, #96]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80091fa:	2210      	movs	r2, #16
 80091fc:	609a      	str	r2, [r3, #8]
            if(blend)
 80091fe:	b149      	cbz	r1, 8009214 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8009200:	4a18      	ldr	r2, [pc, #96]	; (8009264 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	e7b4      	b.n	8009170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
                  assert(0 && "Unsupported format");
 8009206:	4b1c      	ldr	r3, [pc, #112]	; (8009278 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8009208:	4a1c      	ldr	r2, [pc, #112]	; (800927c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800920a:	f240 1117 	movw	r1, #279	; 0x117
 800920e:	4812      	ldr	r0, [pc, #72]	; (8009258 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 8009210:	f00d ff8c 	bl	801712c <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8009214:	4b11      	ldr	r3, [pc, #68]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8009216:	4a1a      	ldr	r2, [pc, #104]	; (8009280 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e7a9      	b.n	8009170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800921c:	4b0f      	ldr	r3, [pc, #60]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800921e:	6258      	str	r0, [r3, #36]	; 0x24
 8009220:	e73e      	b.n	80090a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8009222:	7f0b      	ldrb	r3, [r1, #28]
 8009224:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8009228:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800922c:	4b0b      	ldr	r3, [pc, #44]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800922e:	61dc      	str	r4, [r3, #28]
        if (blitOp.replaceBgAlpha)
 8009230:	7fcb      	ldrb	r3, [r1, #31]
 8009232:	b14b      	cbz	r3, 8009248 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 8009236:	4303      	orrs	r3, r0
 8009238:	4a08      	ldr	r2, [pc, #32]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800923a:	6253      	str	r3, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800923c:	690a      	ldr	r2, [r1, #16]
 800923e:	4b07      	ldr	r3, [pc, #28]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8009240:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8009242:	4a08      	ldr	r2, [pc, #32]	; (8009264 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8009244:	601a      	str	r2, [r3, #0]
        break;
 8009246:	e793      	b.n	8009170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8009248:	4b04      	ldr	r3, [pc, #16]	; (800925c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800924a:	6258      	str	r0, [r3, #36]	; 0x24
 800924c:	e7f6      	b.n	800923c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>
 800924e:	bf00      	nop
 8009250:	08018e64 	.word	0x08018e64
 8009254:	08018ef8 	.word	0x08018ef8
 8009258:	08018ecc 	.word	0x08018ecc
 800925c:	52001000 	.word	0x52001000
 8009260:	ff010000 	.word	0xff010000
 8009264:	00020201 	.word	0x00020201
 8009268:	08018e80 	.word	0x08018e80
 800926c:	00020009 	.word	0x00020009
 8009270:	0002000a 	.word	0x0002000a
 8009274:	ffff00ef 	.word	0xffff00ef
 8009278:	08018f44 	.word	0x08018f44
 800927c:	08018f60 	.word	0x08018f60
 8009280:	00010201 	.word	0x00010201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8009284:	7f0b      	ldrb	r3, [r1, #28]
 8009286:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 800928a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800928e:	4b17      	ldr	r3, [pc, #92]	; (80092ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x304>)
 8009290:	61dc      	str	r4, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8009292:	7f4a      	ldrb	r2, [r1, #29]
 8009294:	7f8b      	ldrb	r3, [r1, #30]
 8009296:	429a      	cmp	r2, r3
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8009298:	4b14      	ldr	r3, [pc, #80]	; (80092ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x304>)
 800929a:	bf14      	ite	ne
 800929c:	4a14      	ldrne	r2, [pc, #80]	; (80092f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x308>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800929e:	f240 2201 	movweq	r2, #513	; 0x201
 80092a2:	601a      	str	r2, [r3, #0]
}
 80092a4:	e764      	b.n	8009170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80092a6:	2401      	movs	r4, #1
 80092a8:	e000      	b.n	80092ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>
        dma2dColorMode = DMA2D_INPUT_L8;
 80092aa:	2405      	movs	r4, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80092ac:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 80092ae:	2b0b      	cmp	r3, #11
 80092b0:	f63f af1e 	bhi.w	80090f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
 80092b4:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 80092b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ba:	bf00      	nop
 80092bc:	080090af 	.word	0x080090af
 80092c0:	08009035 	.word	0x08009035
 80092c4:	08009113 	.word	0x08009113
 80092c8:	080090f1 	.word	0x080090f1
 80092cc:	080090f1 	.word	0x080090f1
 80092d0:	080090f1 	.word	0x080090f1
 80092d4:	080090f1 	.word	0x080090f1
 80092d8:	080090b7 	.word	0x080090b7
 80092dc:	080090b7 	.word	0x080090b7
 80092e0:	080090b7 	.word	0x080090b7
 80092e4:	080090b7 	.word	0x080090b7
 80092e8:	080090b7 	.word	0x080090b7
 80092ec:	52001000 	.word	0x52001000
 80092f0:	00010201 	.word	0x00010201

080092f4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4605      	mov	r5, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80092f8:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80092fa:	6068      	str	r0, [r5, #4]
 80092fc:	2300      	movs	r3, #0
 80092fe:	722b      	strb	r3, [r5, #8]
 8009300:	726b      	strb	r3, [r5, #9]
 8009302:	462c      	mov	r4, r5
 8009304:	4b08      	ldr	r3, [pc, #32]	; (8009328 <_ZN8STM32DMAC1Ev+0x34>)
 8009306:	f844 3b20 	str.w	r3, [r4], #32
 800930a:	2260      	movs	r2, #96	; 0x60
 800930c:	4621      	mov	r1, r4
 800930e:	f001 fe49 	bl	800afa4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8009312:	4621      	mov	r1, r4
 8009314:	f505 6242 	add.w	r2, r5, #3104	; 0xc20
        : color(0)
 8009318:	2300      	movs	r3, #0
 800931a:	60cb      	str	r3, [r1, #12]
 800931c:	3120      	adds	r1, #32
 800931e:	4291      	cmp	r1, r2
 8009320:	d1fb      	bne.n	800931a <_ZN8STM32DMAC1Ev+0x26>
}
 8009322:	4628      	mov	r0, r5
 8009324:	bd38      	pop	{r3, r4, r5, pc}
 8009326:	bf00      	nop
 8009328:	08018fa8 	.word	0x08018fa8

0800932c <_ZN8touchgfx8LCD32bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD32bpp : public LCD
 800932c:	4770      	bx	lr

0800932e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800932e:	2001      	movs	r0, #1
 8009330:	4770      	bx	lr

08009332 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8009332:	200c      	movs	r0, #12
 8009334:	4770      	bx	lr

08009336 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8009336:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800933a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
 800933e:	3008      	adds	r0, #8
 8009340:	4770      	bx	lr

08009342 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8009342:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009346:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
 800934a:	3008      	adds	r0, #8
 800934c:	4770      	bx	lr

0800934e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800934e:	2001      	movs	r0, #1
 8009350:	4770      	bx	lr

08009352 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8009352:	f643 3070 	movw	r0, #15216	; 0x3b70
 8009356:	4770      	bx	lr

08009358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8009358:	f643 3370 	movw	r3, #15216	; 0x3b70
 800935c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8009360:	3008      	adds	r0, #8
 8009362:	4770      	bx	lr

08009364 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8009364:	f643 3370 	movw	r3, #15216	; 0x3b70
 8009368:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800936c:	3008      	adds	r0, #8
 800936e:	4770      	bx	lr

08009370 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8009370:	2001      	movs	r0, #1
 8009372:	4770      	bx	lr

08009374 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8009374:	2010      	movs	r0, #16
 8009376:	4770      	bx	lr

08009378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8009378:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800937c:	3008      	adds	r0, #8
 800937e:	4770      	bx	lr

08009380 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8009380:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8009384:	3008      	adds	r0, #8
 8009386:	4770      	bx	lr

08009388 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8009388:	b508      	push	{r3, lr}
    {
        app.gotoScreen1ScreenNoTransition();
 800938a:	4608      	mov	r0, r1
 800938c:	f7fe fe96 	bl	80080bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8009390:	bd08      	pop	{r3, pc}
	...

08009394 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8009394:	b510      	push	{r4, lr}
 8009396:	4604      	mov	r4, r0
 8009398:	4b02      	ldr	r3, [pc, #8]	; (80093a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800939a:	6003      	str	r3, [r0, #0]
 800939c:	f000 fb62 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80093a0:	4620      	mov	r0, r4
 80093a2:	bd10      	pop	{r4, pc}
 80093a4:	08019060 	.word	0x08019060

080093a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80093ae:	6003      	str	r3, [r0, #0]
 80093b0:	f000 fb58 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80093b4:	2114      	movs	r1, #20
 80093b6:	4620      	mov	r0, r4
 80093b8:	f00d f8a8 	bl	801650c <_ZdlPvj>
 80093bc:	4620      	mov	r0, r4
 80093be:	bd10      	pop	{r4, pc}
 80093c0:	08019060 	.word	0x08019060

080093c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80093c4:	b510      	push	{r4, lr}
 80093c6:	4604      	mov	r4, r0
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80093ca:	6003      	str	r3, [r0, #0]
 80093cc:	f000 fb4a 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80093d0:	4620      	mov	r0, r4
 80093d2:	bd10      	pop	{r4, pc}
 80093d4:	0801902c 	.word	0x0801902c

080093d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80093d8:	b510      	push	{r4, lr}
 80093da:	4604      	mov	r4, r0
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 80093de:	6003      	str	r3, [r0, #0]
 80093e0:	f000 fb40 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80093e4:	f643 3178 	movw	r1, #15224	; 0x3b78
 80093e8:	4620      	mov	r0, r4
 80093ea:	f00d f88f 	bl	801650c <_ZdlPvj>
 80093ee:	4620      	mov	r0, r4
 80093f0:	bd10      	pop	{r4, pc}
 80093f2:	bf00      	nop
 80093f4:	0801902c 	.word	0x0801902c

080093f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80093f8:	b510      	push	{r4, lr}
 80093fa:	4604      	mov	r4, r0
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80093fe:	6003      	str	r3, [r0, #0]
 8009400:	f000 fb30 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8009404:	4620      	mov	r0, r4
 8009406:	bd10      	pop	{r4, pc}
 8009408:	08018ff8 	.word	0x08018ff8

0800940c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800940c:	b510      	push	{r4, lr}
 800940e:	4604      	mov	r4, r0
 8009410:	4b04      	ldr	r3, [pc, #16]	; (8009424 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8009412:	6003      	str	r3, [r0, #0]
 8009414:	f000 fb26 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8009418:	2118      	movs	r1, #24
 800941a:	4620      	mov	r0, r4
 800941c:	f00d f876 	bl	801650c <_ZdlPvj>
 8009420:	4620      	mov	r0, r4
 8009422:	bd10      	pop	{r4, pc}
 8009424:	08018ff8 	.word	0x08018ff8

08009428 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8009428:	b510      	push	{r4, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	4b0b      	ldr	r3, [pc, #44]	; (800945c <_ZN12FrontendHeapD1Ev+0x34>)
 800942e:	6003      	str	r3, [r0, #0]
 8009430:	f643 30a4 	movw	r0, #15268	; 0x3ba4
 8009434:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <_ZN12FrontendHeapD1Ev+0x38>)
 8009436:	5023      	str	r3, [r4, r0]
 8009438:	4420      	add	r0, r4
 800943a:	f000 fb13 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800943e:	4620      	mov	r0, r4
 8009440:	4b08      	ldr	r3, [pc, #32]	; (8009464 <_ZN12FrontendHeapD1Ev+0x3c>)
 8009442:	f840 3f2c 	str.w	r3, [r0, #44]!
 8009446:	f000 fb0d 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800944a:	4620      	mov	r0, r4
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <_ZN12FrontendHeapD1Ev+0x40>)
 800944e:	f840 3f14 	str.w	r3, [r0, #20]!
 8009452:	f000 fb07 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8009456:	4620      	mov	r0, r4
 8009458:	bd10      	pop	{r4, pc}
 800945a:	bf00      	nop
 800945c:	08019094 	.word	0x08019094
 8009460:	08019060 	.word	0x08019060
 8009464:	0801902c 	.word	0x0801902c
 8009468:	08018ff8 	.word	0x08018ff8

0800946c <_ZN12FrontendHeapD0Ev>:
 800946c:	b510      	push	{r4, lr}
 800946e:	4604      	mov	r4, r0
 8009470:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <_ZN12FrontendHeapD0Ev+0x3c>)
 8009472:	6003      	str	r3, [r0, #0]
 8009474:	f643 30a4 	movw	r0, #15268	; 0x3ba4
 8009478:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <_ZN12FrontendHeapD0Ev+0x40>)
 800947a:	5023      	str	r3, [r4, r0]
 800947c:	4420      	add	r0, r4
 800947e:	f000 faf1 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8009482:	4620      	mov	r0, r4
 8009484:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <_ZN12FrontendHeapD0Ev+0x44>)
 8009486:	f840 3f2c 	str.w	r3, [r0, #44]!
 800948a:	f000 faeb 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800948e:	4620      	mov	r0, r4
 8009490:	4b08      	ldr	r3, [pc, #32]	; (80094b4 <_ZN12FrontendHeapD0Ev+0x48>)
 8009492:	f840 3f14 	str.w	r3, [r0, #20]!
 8009496:	f000 fae5 	bl	8009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800949a:	f643 5114 	movw	r1, #15636	; 0x3d14
 800949e:	4620      	mov	r0, r4
 80094a0:	f00d f834 	bl	801650c <_ZdlPvj>
 80094a4:	4620      	mov	r0, r4
 80094a6:	bd10      	pop	{r4, pc}
 80094a8:	08019094 	.word	0x08019094
 80094ac:	08019060 	.word	0x08019060
 80094b0:	0801902c 	.word	0x0801902c
 80094b4:	08018ff8 	.word	0x08018ff8

080094b8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80094b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ba:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80094bc:	f7ff f906 	bl	80086cc <_ZN14BitmapDatabase11getInstanceEv>
 80094c0:	4605      	mov	r5, r0
 80094c2:	f7ff f907 	bl	80086d4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80094c6:	4601      	mov	r1, r0
 80094c8:	2400      	movs	r4, #0
 80094ca:	9400      	str	r4, [sp, #0]
 80094cc:	4623      	mov	r3, r4
 80094ce:	4622      	mov	r2, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	f007 fd8b 	bl	8010fec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80094d6:	4b22      	ldr	r3, [pc, #136]	; (8009560 <touchgfx_init+0xa8>)
 80094d8:	4a22      	ldr	r2, [pc, #136]	; (8009564 <touchgfx_init+0xac>)
 80094da:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80094dc:	4620      	mov	r0, r4
 80094de:	f7ff f97f 	bl	80087e0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80094e2:	4821      	ldr	r0, [pc, #132]	; (8009568 <touchgfx_init+0xb0>)
 80094e4:	f007 fc26 	bl	8010d34 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80094e8:	4b20      	ldr	r3, [pc, #128]	; (800956c <touchgfx_init+0xb4>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f013 0f01 	tst.w	r3, #1
 80094f0:	d004      	beq.n	80094fc <touchgfx_init+0x44>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80094f2:	481f      	ldr	r0, [pc, #124]	; (8009570 <touchgfx_init+0xb8>)
 80094f4:	f7ff fbcd 	bl	8008c92 <_ZN11TouchGFXHAL10initializeEv>
}
 80094f8:	b003      	add	sp, #12
 80094fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80094fc:	4c1d      	ldr	r4, [pc, #116]	; (8009574 <touchgfx_init+0xbc>)
 80094fe:	f104 0014 	add.w	r0, r4, #20
 8009502:	6060      	str	r0, [r4, #4]
 8009504:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8009508:	60a7      	str	r7, [r4, #8]
 800950a:	4e1b      	ldr	r6, [pc, #108]	; (8009578 <touchgfx_init+0xc0>)
 800950c:	60e6      	str	r6, [r4, #12]
 800950e:	f106 0518 	add.w	r5, r6, #24
 8009512:	6125      	str	r5, [r4, #16]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8009514:	4b19      	ldr	r3, [pc, #100]	; (800957c <touchgfx_init+0xc4>)
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	f000 faa6 	bl	8009a68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800951c:	4b18      	ldr	r3, [pc, #96]	; (8009580 <touchgfx_init+0xc8>)
 800951e:	6163      	str	r3, [r4, #20]
 8009520:	4638      	mov	r0, r7
 8009522:	f000 faa1 	bl	8009a68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8009526:	4b17      	ldr	r3, [pc, #92]	; (8009584 <touchgfx_init+0xcc>)
 8009528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800952a:	4630      	mov	r0, r6
 800952c:	f000 fa9c 	bl	8009a68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8009530:	4b15      	ldr	r3, [pc, #84]	; (8009588 <touchgfx_init+0xd0>)
 8009532:	6033      	str	r3, [r6, #0]
 8009534:	3614      	adds	r6, #20
 8009536:	4630      	mov	r0, r6
 8009538:	f7ff f9d6 	bl	80088e8 <_ZN5ModelC1Ev>
 800953c:	4622      	mov	r2, r4
 800953e:	4631      	mov	r1, r6
 8009540:	4628      	mov	r0, r5
 8009542:	f7ff f9c7 	bl	80088d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotoScreen1ScreenNoTransition();
 8009546:	4628      	mov	r0, r5
 8009548:	f7fe fdb8 	bl	80080bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <touchgfx_init+0xb4>)
 800954e:	2201      	movs	r2, #1
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	4a0e      	ldr	r2, [pc, #56]	; (800958c <touchgfx_init+0xd4>)
 8009554:	490e      	ldr	r1, [pc, #56]	; (8009590 <touchgfx_init+0xd8>)
 8009556:	4620      	mov	r0, r4
 8009558:	f00c ffd3 	bl	8016502 <__aeabi_atexit>
 800955c:	e7c9      	b.n	80094f2 <touchgfx_init+0x3a>
 800955e:	bf00      	nop
 8009560:	2400fa80 	.word	0x2400fa80
 8009564:	2400f990 	.word	0x2400f990
 8009568:	2400002c 	.word	0x2400002c
 800956c:	2400afd8 	.word	0x2400afd8
 8009570:	2400f914 	.word	0x2400f914
 8009574:	2400afdc 	.word	0x2400afdc
 8009578:	2400eb80 	.word	0x2400eb80
 800957c:	08019094 	.word	0x08019094
 8009580:	08018ff8 	.word	0x08018ff8
 8009584:	0801902c 	.word	0x0801902c
 8009588:	08019060 	.word	0x08019060
 800958c:	24000000 	.word	0x24000000
 8009590:	08009429 	.word	0x08009429

08009594 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8009594:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8009596:	4802      	ldr	r0, [pc, #8]	; (80095a0 <touchgfx_taskEntry+0xc>)
 8009598:	f000 fd9d 	bl	800a0d6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800959c:	bd08      	pop	{r3, pc}
 800959e:	bf00      	nop
 80095a0:	2400f914 	.word	0x2400f914

080095a4 <_ZN8touchgfx8LCD32bppD0Ev>:
 80095a4:	b510      	push	{r4, lr}
 80095a6:	4604      	mov	r4, r0
 80095a8:	2178      	movs	r1, #120	; 0x78
 80095aa:	f00c ffaf 	bl	801650c <_ZdlPvj>
 80095ae:	4620      	mov	r0, r4
 80095b0:	bd10      	pop	{r4, pc}
	...

080095b4 <_GLOBAL__sub_I_touchgfx_init>:
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
public:

    STM32TouchController() {}
 80095b6:	4d41      	ldr	r5, [pc, #260]	; (80096bc <_GLOBAL__sub_I_touchgfx_init+0x108>)
 80095b8:	4b41      	ldr	r3, [pc, #260]	; (80096c0 <_GLOBAL__sub_I_touchgfx_init+0x10c>)
 80095ba:	602b      	str	r3, [r5, #0]
static STM32TouchController tc;
 80095bc:	4c41      	ldr	r4, [pc, #260]	; (80096c4 <_GLOBAL__sub_I_touchgfx_init+0x110>)
 80095be:	4622      	mov	r2, r4
 80095c0:	4941      	ldr	r1, [pc, #260]	; (80096c8 <_GLOBAL__sub_I_touchgfx_init+0x114>)
 80095c2:	4628      	mov	r0, r5
 80095c4:	f00c ff9d 	bl	8016502 <__aeabi_atexit>
static STM32DMA dma;
 80095c8:	4f40      	ldr	r7, [pc, #256]	; (80096cc <_GLOBAL__sub_I_touchgfx_init+0x118>)
 80095ca:	4638      	mov	r0, r7
 80095cc:	f7ff fe92 	bl	80092f4 <_ZN8STM32DMAC1Ev>
 80095d0:	4622      	mov	r2, r4
 80095d2:	493f      	ldr	r1, [pc, #252]	; (80096d0 <_GLOBAL__sub_I_touchgfx_init+0x11c>)
 80095d4:	4638      	mov	r0, r7
 80095d6:	f00c ff94 	bl	8016502 <__aeabi_atexit>
static LCD32bpp display;
 80095da:	4e3e      	ldr	r6, [pc, #248]	; (80096d4 <_GLOBAL__sub_I_touchgfx_init+0x120>)
 80095dc:	4630      	mov	r0, r6
 80095de:	f009 fa07 	bl	80129f0 <_ZN8touchgfx8LCD32bppC1Ev>
 80095e2:	4622      	mov	r2, r4
 80095e4:	493c      	ldr	r1, [pc, #240]	; (80096d8 <_GLOBAL__sub_I_touchgfx_init+0x124>)
 80095e6:	4630      	mov	r0, r6
 80095e8:	f00c ff8b 	bl	8016502 <__aeabi_atexit>
static ApplicationFontProvider fontProvider;
 80095ec:	4622      	mov	r2, r4
 80095ee:	493b      	ldr	r1, [pc, #236]	; (80096dc <_GLOBAL__sub_I_touchgfx_init+0x128>)
 80095f0:	483b      	ldr	r0, [pc, #236]	; (80096e0 <_GLOBAL__sub_I_touchgfx_init+0x12c>)
 80095f2:	f00c ff86 	bl	8016502 <__aeabi_atexit>
          lastRenderMethod(HARDWARE)
 80095f6:	483b      	ldr	r0, [pc, #236]	; (80096e4 <_GLOBAL__sub_I_touchgfx_init+0x130>)
 80095f8:	6047      	str	r7, [r0, #4]
 80095fa:	6086      	str	r6, [r0, #8]
 80095fc:	60c5      	str	r5, [r0, #12]
 80095fe:	2300      	movs	r3, #0
 8009600:	6103      	str	r3, [r0, #16]
 8009602:	6143      	str	r3, [r0, #20]
 8009604:	6183      	str	r3, [r0, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8009606:	8383      	strh	r3, [r0, #28]
 8009608:	83c3      	strh	r3, [r0, #30]
 800960a:	8403      	strh	r3, [r0, #32]
 800960c:	8443      	strh	r3, [r0, #34]	; 0x22
 800960e:	8483      	strh	r3, [r0, #36]	; 0x24
 8009610:	84c3      	strh	r3, [r0, #38]	; 0x26
 8009612:	8503      	strh	r3, [r0, #40]	; 0x28
 8009614:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8009618:	62c3      	str	r3, [r0, #44]	; 0x2c
 800961a:	8603      	strh	r3, [r0, #48]	; 0x30
 800961c:	6383      	str	r3, [r0, #56]	; 0x38
 800961e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8009620:	6403      	str	r3, [r0, #64]	; 0x40
 8009622:	6443      	str	r3, [r0, #68]	; 0x44
 8009624:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 8009628:	2201      	movs	r2, #1
 800962a:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 800962e:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
 8009632:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8009636:	64c3      	str	r3, [r0, #76]	; 0x4c
        : x(0), y(0), width(0), height(0)
 8009638:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 800963c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8009640:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8009644:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
 8009648:	6583      	str	r3, [r0, #88]	; 0x58
 800964a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800964c:	6603      	str	r3, [r0, #96]	; 0x60
 800964e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8009652:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
 8009656:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
 800965a:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
 800965e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
 8009662:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8009666:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800966a:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
 800966e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8009672:	6703      	str	r3, [r0, #112]	; 0x70
 8009674:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8009678:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
 800967c:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
 8009680:	f880 2077 	strb.w	r2, [r0, #119]	; 0x77
 8009684:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        instance = this;
 8009688:	4a17      	ldr	r2, [pc, #92]	; (80096e8 <_GLOBAL__sub_I_touchgfx_init+0x134>)
 800968a:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800968c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009690:	4916      	ldr	r1, [pc, #88]	; (80096ec <_GLOBAL__sub_I_touchgfx_init+0x138>)
 8009692:	800a      	strh	r2, [r1, #0]
 8009694:	4916      	ldr	r1, [pc, #88]	; (80096f0 <_GLOBAL__sub_I_touchgfx_init+0x13c>)
 8009696:	800a      	strh	r2, [r1, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8009698:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800969c:	4915      	ldr	r1, [pc, #84]	; (80096f4 <_GLOBAL__sub_I_touchgfx_init+0x140>)
 800969e:	800a      	strh	r2, [r1, #0]
 80096a0:	4915      	ldr	r1, [pc, #84]	; (80096f8 <_GLOBAL__sub_I_touchgfx_init+0x144>)
 80096a2:	800a      	strh	r2, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 80096a4:	4a15      	ldr	r2, [pc, #84]	; (80096fc <_GLOBAL__sub_I_touchgfx_init+0x148>)
 80096a6:	7013      	strb	r3, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80096a8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80096ac:	4b14      	ldr	r3, [pc, #80]	; (8009700 <_GLOBAL__sub_I_touchgfx_init+0x14c>)
 80096ae:	6003      	str	r3, [r0, #0]
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80096b0:	4622      	mov	r2, r4
 80096b2:	4914      	ldr	r1, [pc, #80]	; (8009704 <_GLOBAL__sub_I_touchgfx_init+0x150>)
 80096b4:	f00c ff25 	bl	8016502 <__aeabi_atexit>
}
 80096b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ba:	bf00      	nop
 80096bc:	2400ecf0 	.word	0x2400ecf0
 80096c0:	08018b24 	.word	0x08018b24
 80096c4:	24000000 	.word	0x24000000
 80096c8:	08008b47 	.word	0x08008b47
 80096cc:	2400ecf4 	.word	0x2400ecf4
 80096d0:	08008e9d 	.word	0x08008e9d
 80096d4:	2400f994 	.word	0x2400f994
 80096d8:	0800932d 	.word	0x0800932d
 80096dc:	08007c35 	.word	0x08007c35
 80096e0:	2400002c 	.word	0x2400002c
 80096e4:	2400f914 	.word	0x2400f914
 80096e8:	2400fa1c 	.word	0x2400fa1c
 80096ec:	2400fa10 	.word	0x2400fa10
 80096f0:	2400fa16 	.word	0x2400fa16
 80096f4:	2400fa12 	.word	0x2400fa12
 80096f8:	2400fa18 	.word	0x2400fa18
 80096fc:	2400fa14 	.word	0x2400fa14
 8009700:	08018cb0 	.word	0x08018cb0
 8009704:	08008c91 	.word	0x08008c91

08009708 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009708:	4b03      	ldr	r3, [pc, #12]	; (8009718 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 800970a:	2290      	movs	r2, #144	; 0x90
 800970c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8009710:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	e000e100 	.word	0xe000e100

0800971c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800971c:	4b03      	ldr	r3, [pc, #12]	; (800972c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800971e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009722:	609a      	str	r2, [r3, #8]
 8009724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009728:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 800972a:	4770      	bx	lr
 800972c:	e000e100 	.word	0xe000e100

08009730 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009730:	4b08      	ldr	r3, [pc, #32]	; (8009754 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8009732:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800973a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800974a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800974e:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 8009752:	4770      	bx	lr
 8009754:	e000e100 	.word	0xe000e100

08009758 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8009758:	4a09      	ldr	r2, [pc, #36]	; (8009780 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800975a:	68d3      	ldr	r3, [r2, #12]
 800975c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009760:	3b01      	subs	r3, #1
 8009762:	b29b      	uxth	r3, r3
 8009764:	4907      	ldr	r1, [pc, #28]	; (8009784 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8009766:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8009768:	6911      	ldr	r1, [r2, #16]
 800976a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800976e:	3901      	subs	r1, #1
 8009770:	4805      	ldr	r0, [pc, #20]	; (8009788 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 8009772:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8009774:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8009776:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009778:	f043 0301 	orr.w	r3, r3, #1
 800977c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800977e:	4770      	bx	lr
 8009780:	50001000 	.word	0x50001000
 8009784:	2400fa0e 	.word	0x2400fa0e
 8009788:	2400fa0c 	.word	0x2400fa0c

0800978c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800978c:	4b01      	ldr	r3, [pc, #4]	; (8009794 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800978e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	50001084 	.word	0x50001084

08009798 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8009798:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 800979a:	6299      	str	r1, [r3, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800979c:	3b84      	subs	r3, #132	; 0x84
 800979e:	2201      	movs	r2, #1
 80097a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80097a2:	4770      	bx	lr
 80097a4:	50001084 	.word	0x50001084

080097a8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80097a8:	4b15      	ldr	r3, [pc, #84]	; (8009800 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80097b0:	d025      	beq.n	80097fe <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 80097b2:	b470      	push	{r4, r5, r6}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80097b4:	4b12      	ldr	r3, [pc, #72]	; (8009800 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80097bc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80097c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80097c4:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80097c8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80097cc:	015c      	lsls	r4, r3, #5
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80097ce:	f643 75e0 	movw	r5, #16352	; 0x3fe0
 80097d2:	480b      	ldr	r0, [pc, #44]	; (8009800 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80097d4:	ea04 0105 	and.w	r1, r4, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80097d8:	4633      	mov	r3, r6
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80097da:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
 80097de:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80097e2:	3b01      	subs	r3, #1
 80097e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e8:	d1f7      	bne.n	80097da <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x32>
    } while(sets-- != 0U);
 80097ea:	3c20      	subs	r4, #32
 80097ec:	f114 0f20 	cmn.w	r4, #32
 80097f0:	d1f0      	bne.n	80097d4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>
 80097f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80097f6:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80097fa:	bc70      	pop	{r4, r5, r6}
 80097fc:	4770      	bx	lr
 80097fe:	4770      	bx	lr
 8009800:	e000ed00 	.word	0xe000ed00

08009804 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8009804:	4b15      	ldr	r3, [pc, #84]	; (800985c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800980c:	d025      	beq.n	800985a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 800980e:	b470      	push	{r4, r5, r6}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8009810:	4b12      	ldr	r3, [pc, #72]	; (800985c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8009812:	2200      	movs	r2, #0
 8009814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009818:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009820:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009824:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8009828:	015c      	lsls	r4, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800982a:	f643 75e0 	movw	r5, #16352	; 0x3fe0
 800982e:	480b      	ldr	r0, [pc, #44]	; (800985c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8009830:	ea04 0105 	and.w	r1, r4, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009834:	4633      	mov	r3, r6
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8009836:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
 800983a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
 800983e:	3b01      	subs	r3, #1
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009844:	d1f7      	bne.n	8009836 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x32>
    } while(sets-- != 0U);
 8009846:	3c20      	subs	r4, #32
 8009848:	f114 0f20 	cmn.w	r4, #32
 800984c:	d1f0      	bne.n	8009830 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
 800984e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009852:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8009856:	bc70      	pop	{r4, r5, r6}
 8009858:	4770      	bx	lr
 800985a:	4770      	bx	lr
 800985c:	e000ed00 	.word	0xe000ed00

08009860 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4604      	mov	r4, r0
    HAL::initialize();
 8009864:	f000 fc25 	bl	800a0b2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8009868:	6823      	ldr	r3, [r4, #0]
 800986a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800986c:	f004 fab6 	bl	800dddc <_ZN8touchgfx11Application11getInstanceEv>
 8009870:	4601      	mov	r1, r0
 8009872:	4620      	mov	r0, r4
 8009874:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC1000000, (void*)0);
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800987c:	2300      	movs	r3, #0
 800987e:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8009882:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8009886:	4620      	mov	r0, r4
 8009888:	47a8      	blx	r5
}
 800988a:	bd38      	pop	{r3, r4, r5, pc}

0800988c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 800988c:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 800988e:	f000 fbf7 	bl	800a080 <_ZN8touchgfx3HAL10beginFrameEv>
}
 8009892:	bd08      	pop	{r3, pc}

08009894 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8009894:	b508      	push	{r3, lr}
    HAL::endFrame();
 8009896:	f000 fbff 	bl	800a098 <_ZN8touchgfx3HAL8endFrameEv>
}
 800989a:	bd08      	pop	{r3, pc}

0800989c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 800989c:	b570      	push	{r4, r5, r6, lr}
    HAL::flushFrameBuffer(rect);
 800989e:	f000 fbb9 	bl	800a014 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80098a2:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80098aa:	d022      	beq.n	80098f2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x56>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80098ac:	4b11      	ldr	r3, [pc, #68]	; (80098f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80098b4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80098b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80098bc:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80098c0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80098c4:	015c      	lsls	r4, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80098c6:	f643 75e0 	movw	r5, #16352	; 0x3fe0
 80098ca:	480a      	ldr	r0, [pc, #40]	; (80098f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 80098cc:	ea04 0105 	and.w	r1, r4, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80098d0:	4633      	mov	r3, r6
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80098d2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
 80098d6:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
 80098da:	3b01      	subs	r3, #1
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d1f7      	bne.n	80098d2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x36>
    } while(sets-- != 0U);
 80098e2:	3c20      	subs	r4, #32
 80098e4:	f114 0f20 	cmn.w	r4, #32
 80098e8:	d1f0      	bne.n	80098cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x30>
 80098ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80098ee:	f3bf 8f6f 	isb	sy
}
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	e000ed00 	.word	0xe000ed00

080098f8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 80098f8:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 80098fa:	f000 fcf6 	bl	800a2ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 80098fe:	bd08      	pop	{r3, pc}

08009900 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8009900:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 8009902:	4b12      	ldr	r3, [pc, #72]	; (800994c <HAL_LTDC_LineEventCallback+0x4c>)
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	4a12      	ldr	r2, [pc, #72]	; (8009950 <HAL_LTDC_LineEventCallback+0x50>)
 8009908:	8811      	ldrh	r1, [r2, #0]
 800990a:	428b      	cmp	r3, r1
 800990c:	d00a      	beq.n	8009924 <HAL_LTDC_LineEventCallback+0x24>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800990e:	f7f8 ff45 	bl	800279c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8009912:	2000      	movs	r0, #0
 8009914:	f7ff f970 	bl	8008bf8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8009918:	4b0e      	ldr	r3, [pc, #56]	; (8009954 <HAL_LTDC_LineEventCallback+0x54>)
 800991a:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 800991c:	6803      	ldr	r3, [r0, #0]
 800991e:	6a1b      	ldr	r3, [r3, #32]
 8009920:	4798      	blx	r3
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8009922:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8009924:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <HAL_LTDC_LineEventCallback+0x58>)
 8009926:	8819      	ldrh	r1, [r3, #0]
 8009928:	f7f8 ff38 	bl	800279c <HAL_LTDC_ProgramLineEvent>
        return instance;
 800992c:	4c09      	ldr	r4, [pc, #36]	; (8009954 <HAL_LTDC_LineEventCallback+0x54>)
 800992e:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8009930:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8009934:	3301      	adds	r3, #1
 8009936:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 800993a:	f7ff fa77 	bl	8008e2c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 800993e:	6820      	ldr	r0, [r4, #0]
 8009940:	f001 f9c6 	bl	800acd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8009944:	2000      	movs	r0, #0
 8009946:	f7ff f956 	bl	8008bf6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800994a:	e7ea      	b.n	8009922 <HAL_LTDC_LineEventCallback+0x22>
 800994c:	50001000 	.word	0x50001000
 8009950:	2400fa0e 	.word	0x2400fa0e
 8009954:	2400fa1c 	.word	0x2400fa1c
 8009958:	2400fa0c 	.word	0x2400fa0c

0800995c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800995c:	8880      	ldrh	r0, [r0, #4]
 800995e:	4770      	bx	lr

08009960 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8009960:	2300      	movs	r3, #0
 8009962:	8083      	strh	r3, [r0, #4]
 8009964:	4770      	bx	lr
	...

08009968 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	6803      	ldr	r3, [r0, #0]
 800996c:	460e      	mov	r6, r1
 800996e:	2100      	movs	r1, #0
 8009970:	4605      	mov	r5, r0
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	4798      	blx	r3
 8009976:	4604      	mov	r4, r0
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	4628      	mov	r0, r5
 800997c:	1b34      	subs	r4, r6, r4
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	b2a4      	uxth	r4, r4
 8009982:	4798      	blx	r3
 8009984:	88ab      	ldrh	r3, [r5, #4]
 8009986:	fbb4 f4f0 	udiv	r4, r4, r0
 800998a:	42a3      	cmp	r3, r4
 800998c:	d805      	bhi.n	800999a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800998e:	4b0e      	ldr	r3, [pc, #56]	; (80099c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8009990:	211e      	movs	r1, #30
 8009992:	4a0e      	ldr	r2, [pc, #56]	; (80099cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8009994:	480e      	ldr	r0, [pc, #56]	; (80099d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8009996:	f00d fbc9 	bl	801712c <__assert_func>
 800999a:	682b      	ldr	r3, [r5, #0]
 800999c:	2100      	movs	r1, #0
 800999e:	4628      	mov	r0, r5
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	4798      	blx	r3
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	4607      	mov	r7, r0
 80099a8:	4628      	mov	r0, r5
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	4798      	blx	r3
 80099ae:	1bf3      	subs	r3, r6, r7
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	fbb3 f2f0 	udiv	r2, r3, r0
 80099b6:	fb02 3010 	mls	r0, r2, r0, r3
 80099ba:	b118      	cbz	r0, 80099c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80099bc:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80099be:	211f      	movs	r1, #31
 80099c0:	4a02      	ldr	r2, [pc, #8]	; (80099cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80099c2:	e7e7      	b.n	8009994 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80099c4:	4620      	mov	r0, r4
 80099c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c8:	080190a0 	.word	0x080190a0
 80099cc:	0801920e 	.word	0x0801920e
 80099d0:	080190b5 	.word	0x080190b5
 80099d4:	080190e3 	.word	0x080190e3

080099d8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	6803      	ldr	r3, [r0, #0]
 80099dc:	460d      	mov	r5, r1
 80099de:	4604      	mov	r4, r0
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	4798      	blx	r3
 80099e4:	4285      	cmp	r5, r0
 80099e6:	d905      	bls.n	80099f4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80099e8:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80099ea:	2130      	movs	r1, #48	; 0x30
 80099ec:	4a0c      	ldr	r2, [pc, #48]	; (8009a20 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80099ee:	480d      	ldr	r0, [pc, #52]	; (8009a24 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80099f0:	f00d fb9c 	bl	801712c <__assert_func>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	4620      	mov	r0, r4
 80099f8:	88a5      	ldrh	r5, [r4, #4]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	4798      	blx	r3
 80099fe:	4285      	cmp	r5, r0
 8009a00:	d303      	bcc.n	8009a0a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8009a04:	2131      	movs	r1, #49	; 0x31
 8009a06:	4a06      	ldr	r2, [pc, #24]	; (8009a20 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8009a08:	e7f1      	b.n	80099ee <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	88a1      	ldrh	r1, [r4, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	4798      	blx	r3
 8009a14:	88a3      	ldrh	r3, [r4, #4]
 8009a16:	3301      	adds	r3, #1
 8009a18:	80a3      	strh	r3, [r4, #4]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	0801915d 	.word	0x0801915d
 8009a20:	08019251 	.word	0x08019251
 8009a24:	080190b5 	.word	0x080190b5
 8009a28:	08019174 	.word	0x08019174

08009a2c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	6803      	ldr	r3, [r0, #0]
 8009a30:	4616      	mov	r6, r2
 8009a32:	4604      	mov	r4, r0
 8009a34:	460d      	mov	r5, r1
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	4798      	blx	r3
 8009a3a:	4286      	cmp	r6, r0
 8009a3c:	d905      	bls.n	8009a4a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8009a3e:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8009a40:	213a      	movs	r1, #58	; 0x3a
 8009a42:	4a06      	ldr	r2, [pc, #24]	; (8009a5c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8009a44:	4806      	ldr	r0, [pc, #24]	; (8009a60 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8009a46:	f00d fb71 	bl	801712c <__assert_func>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4620      	mov	r0, r4
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a56:	4718      	bx	r3
 8009a58:	0801915d 	.word	0x0801915d
 8009a5c:	080191c4 	.word	0x080191c4
 8009a60:	080190b5 	.word	0x080190b5

08009a64 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8009a64:	4770      	bx	lr
	...

08009a68 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8009a68:	4a02      	ldr	r2, [pc, #8]	; (8009a74 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8009a6a:	6002      	str	r2, [r0, #0]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	8082      	strh	r2, [r0, #4]
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	08019198 	.word	0x08019198

08009a78 <_ZN8touchgfx8Drawable8setWidthEs>:
 8009a78:	8101      	strh	r1, [r0, #8]
 8009a7a:	4770      	bx	lr

08009a7c <_ZN8touchgfx8Drawable9setHeightEs>:
 8009a7c:	8141      	strh	r1, [r0, #10]
 8009a7e:	4770      	bx	lr

08009a80 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
 8009a80:	4770      	bx	lr

08009a82 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
 8009a82:	4770      	bx	lr

08009a84 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8009a84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009a86:	2000      	movs	r0, #0
 8009a88:	b12b      	cbz	r3, 8009a96 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009a8a:	b920      	cbnz	r0, 8009a96 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009a8c:	1a5a      	subs	r2, r3, r1
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	4250      	negs	r0, r2
 8009a92:	4150      	adcs	r0, r2
 8009a94:	e7f8      	b.n	8009a88 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8009a96:	4770      	bx	lr

08009a98 <_ZN8touchgfx9Container9removeAllEv>:
 8009a98:	2200      	movs	r2, #0
 8009a9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009a9c:	b123      	cbz	r3, 8009aa8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8009a9e:	6999      	ldr	r1, [r3, #24]
 8009aa0:	6281      	str	r1, [r0, #40]	; 0x28
 8009aa2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8009aa6:	e7f8      	b.n	8009a9a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8009aa8:	4770      	bx	lr

08009aaa <_ZN8touchgfx9Container6unlinkEv>:
 8009aaa:	2300      	movs	r3, #0
 8009aac:	6283      	str	r3, [r0, #40]	; 0x28
 8009aae:	4770      	bx	lr

08009ab0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	8002      	strh	r2, [r0, #0]
 8009ab4:	8042      	strh	r2, [r0, #2]
 8009ab6:	8082      	strh	r2, [r0, #4]
 8009ab8:	80c2      	strh	r2, [r0, #6]
 8009aba:	4770      	bx	lr

08009abc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	460d      	mov	r5, r1
 8009ac0:	4616      	mov	r6, r2
 8009ac2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009ac4:	b13c      	cbz	r4, 8009ad6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	4632      	mov	r2, r6
 8009acc:	4629      	mov	r1, r5
 8009ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad0:	4798      	blx	r3
 8009ad2:	69a4      	ldr	r4, [r4, #24]
 8009ad4:	e7f6      	b.n	8009ac4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}

08009ad8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	460d      	mov	r5, r1
 8009adc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009ade:	b134      	cbz	r4, 8009aee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	4798      	blx	r3
 8009aea:	69a4      	ldr	r4, [r4, #24]
 8009aec:	e7f7      	b.n	8009ade <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8009aee:	bd38      	pop	{r3, r4, r5, pc}

08009af0 <_ZN8touchgfx9ContainerD1Ev>:
 8009af0:	4770      	bx	lr

08009af2 <_ZN8touchgfx9ContainerD0Ev>:
 8009af2:	b510      	push	{r4, lr}
 8009af4:	4604      	mov	r4, r0
 8009af6:	212c      	movs	r1, #44	; 0x2c
 8009af8:	f00c fd08 	bl	801650c <_ZdlPvj>
 8009afc:	4620      	mov	r0, r4
 8009afe:	bd10      	pop	{r4, pc}

08009b00 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8009b00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009b02:	b19b      	cbz	r3, 8009b2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8009b04:	428b      	cmp	r3, r1
 8009b06:	d109      	bne.n	8009b1c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	6159      	str	r1, [r3, #20]
 8009b0e:	6282      	str	r2, [r0, #40]	; 0x28
 8009b10:	b902      	cbnz	r2, 8009b14 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8009b12:	4770      	bx	lr
 8009b14:	6199      	str	r1, [r3, #24]
 8009b16:	4770      	bx	lr
 8009b18:	4613      	mov	r3, r2
 8009b1a:	b13a      	cbz	r2, 8009b2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8009b1c:	699a      	ldr	r2, [r3, #24]
 8009b1e:	428a      	cmp	r2, r1
 8009b20:	d1fa      	bne.n	8009b18 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8009b22:	698a      	ldr	r2, [r1, #24]
 8009b24:	619a      	str	r2, [r3, #24]
 8009b26:	2300      	movs	r3, #0
 8009b28:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8009b2c:	4770      	bx	lr

08009b2e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8009b2e:	b410      	push	{r4}
 8009b30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009b32:	4604      	mov	r4, r0
 8009b34:	b92b      	cbnz	r3, 8009b42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b40:	4718      	bx	r3
 8009b42:	b941      	cbnz	r1, 8009b56 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8009b44:	6193      	str	r3, [r2, #24]
 8009b46:	6282      	str	r2, [r0, #40]	; 0x28
 8009b48:	6154      	str	r4, [r2, #20]
 8009b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	4603      	mov	r3, r0
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d0f9      	beq.n	8009b4a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8009b56:	4299      	cmp	r1, r3
 8009b58:	6998      	ldr	r0, [r3, #24]
 8009b5a:	d1f9      	bne.n	8009b50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8009b5c:	6190      	str	r0, [r2, #24]
 8009b5e:	618a      	str	r2, [r1, #24]
 8009b60:	e7f2      	b.n	8009b48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8009b64:	4288      	cmp	r0, r1
 8009b66:	b508      	push	{r3, lr}
 8009b68:	d105      	bne.n	8009b76 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8009b6a:	4b11      	ldr	r3, [pc, #68]	; (8009bb0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8009b6c:	2123      	movs	r1, #35	; 0x23
 8009b6e:	4a11      	ldr	r2, [pc, #68]	; (8009bb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8009b70:	4811      	ldr	r0, [pc, #68]	; (8009bb8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8009b72:	f00d fadb 	bl	801712c <__assert_func>
 8009b76:	694b      	ldr	r3, [r1, #20]
 8009b78:	b11b      	cbz	r3, 8009b82 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8009b7a:	4b10      	ldr	r3, [pc, #64]	; (8009bbc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8009b7c:	2124      	movs	r1, #36	; 0x24
 8009b7e:	4a0d      	ldr	r2, [pc, #52]	; (8009bb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8009b80:	e7f6      	b.n	8009b70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8009b82:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8009b86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009b88:	b913      	cbnz	r3, 8009b90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8009b8a:	6281      	str	r1, [r0, #40]	; 0x28
 8009b8c:	bd08      	pop	{r3, pc}
 8009b8e:	4613      	mov	r3, r2
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	b12a      	cbz	r2, 8009ba0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8009b94:	428b      	cmp	r3, r1
 8009b96:	d1fa      	bne.n	8009b8e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8009b98:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8009b9a:	2135      	movs	r1, #53	; 0x35
 8009b9c:	4a05      	ldr	r2, [pc, #20]	; (8009bb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8009b9e:	e7e7      	b.n	8009b70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8009ba0:	428b      	cmp	r3, r1
 8009ba2:	d103      	bne.n	8009bac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8009ba6:	2138      	movs	r1, #56	; 0x38
 8009ba8:	4a02      	ldr	r2, [pc, #8]	; (8009bb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8009baa:	e7e1      	b.n	8009b70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8009bac:	6199      	str	r1, [r3, #24]
 8009bae:	e7ed      	b.n	8009b8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8009bb0:	0801928f 	.word	0x0801928f
 8009bb4:	080193e4 	.word	0x080193e4
 8009bb8:	080192bb 	.word	0x080192bb
 8009bbc:	080192ee 	.word	0x080192ee
 8009bc0:	08019324 	.word	0x08019324

08009bc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8009bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc8:	461f      	mov	r7, r3
 8009bca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009bce:	460d      	mov	r5, r1
 8009bd0:	4616      	mov	r6, r2
 8009bd2:	b103      	cbz	r3, 8009bd6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8009bd4:	6038      	str	r0, [r7, #0]
 8009bd6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009bd8:	b314      	cbz	r4, 8009c20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8009bda:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8009bde:	b1eb      	cbz	r3, 8009c1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009be0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8009be4:	428d      	cmp	r5, r1
 8009be6:	db19      	blt.n	8009c1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009be8:	b289      	uxth	r1, r1
 8009bea:	8923      	ldrh	r3, [r4, #8]
 8009bec:	440b      	add	r3, r1
 8009bee:	b21b      	sxth	r3, r3
 8009bf0:	429d      	cmp	r5, r3
 8009bf2:	da13      	bge.n	8009c1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009bf4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009bf8:	4296      	cmp	r6, r2
 8009bfa:	db0f      	blt.n	8009c1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009bfc:	b292      	uxth	r2, r2
 8009bfe:	8963      	ldrh	r3, [r4, #10]
 8009c00:	4413      	add	r3, r2
 8009c02:	b21b      	sxth	r3, r3
 8009c04:	429e      	cmp	r6, r3
 8009c06:	da09      	bge.n	8009c1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	1ab2      	subs	r2, r6, r2
 8009c0c:	1a69      	subs	r1, r5, r1
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8009c14:	b212      	sxth	r2, r2
 8009c16:	463b      	mov	r3, r7
 8009c18:	b209      	sxth	r1, r1
 8009c1a:	47c0      	blx	r8
 8009c1c:	69a4      	ldr	r4, [r4, #24]
 8009c1e:	e7db      	b.n	8009bd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8009c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	4c6d      	ldr	r4, [pc, #436]	; (8009de0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8009c2a:	b0a1      	sub	sp, #132	; 0x84
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	6824      	ldr	r4, [r4, #0]
 8009c30:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8009c32:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8009c36:	2400      	movs	r4, #0
 8009c38:	9303      	str	r3, [sp, #12]
 8009c3a:	802c      	strh	r4, [r5, #0]
 8009c3c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8009c3e:	802c      	strh	r4, [r5, #0]
 8009c40:	601c      	str	r4, [r3, #0]
 8009c42:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009c46:	f7ff ffbd 	bl	8009bc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009c4a:	f1b9 0f03 	cmp.w	r9, #3
 8009c4e:	f340 80c1 	ble.w	8009dd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8009c52:	4631      	mov	r1, r6
 8009c54:	a80c      	add	r0, sp, #48	; 0x30
 8009c56:	f005 f8db 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009c5a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8009c5e:	9306      	str	r3, [sp, #24]
 8009c60:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8009c64:	9307      	str	r3, [sp, #28]
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	f8d3 a000 	ldr.w	sl, [r3]
 8009c6c:	f1ba 0f00 	cmp.w	sl, #0
 8009c70:	f000 80b3 	beq.w	8009dda <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8009c74:	4651      	mov	r1, sl
 8009c76:	a810      	add	r0, sp, #64	; 0x40
 8009c78:	f005 f8ca 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009c7c:	2002      	movs	r0, #2
 8009c7e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	9a06      	ldr	r2, [sp, #24]
 8009c86:	fb91 f1f0 	sdiv	r1, r1, r0
 8009c8a:	189d      	adds	r5, r3, r2
 8009c8c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8009c90:	9a07      	ldr	r2, [sp, #28]
 8009c92:	4419      	add	r1, r3
 8009c94:	9b02      	ldr	r3, [sp, #8]
 8009c96:	4413      	add	r3, r2
 8009c98:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8009c9c:	1a6d      	subs	r5, r5, r1
 8009c9e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8009ca2:	fb92 f2f0 	sdiv	r2, r2, r0
 8009ca6:	440a      	add	r2, r1
 8009ca8:	1a9b      	subs	r3, r3, r2
 8009caa:	435b      	muls	r3, r3
 8009cac:	fb05 3505 	mla	r5, r5, r5, r3
 8009cb0:	4f4c      	ldr	r7, [pc, #304]	; (8009de4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8009cb2:	ac10      	add	r4, sp, #64	; 0x40
 8009cb4:	f1b9 0f0c 	cmp.w	r9, #12
 8009cb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cc4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8009cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009ccc:	f04f 0303 	mov.w	r3, #3
 8009cd0:	bfd8      	it	le
 8009cd2:	f109 32ff 	addle.w	r2, r9, #4294967295
 8009cd6:	f04f 0400 	mov.w	r4, #0
 8009cda:	f8cd 9000 	str.w	r9, [sp]
 8009cde:	bfcc      	ite	gt
 8009ce0:	4698      	movgt	r8, r3
 8009ce2:	fb92 f8f3 	sdivle	r8, r2, r3
 8009ce6:	1c63      	adds	r3, r4, #1
 8009ce8:	aa10      	add	r2, sp, #64	; 0x40
 8009cea:	f004 0401 	and.w	r4, r4, #1
 8009cee:	f04f 0b00 	mov.w	fp, #0
 8009cf2:	9308      	str	r3, [sp, #32]
 8009cf4:	9b00      	ldr	r3, [sp, #0]
 8009cf6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8009cfa:	fb93 f3f8 	sdiv	r3, r3, r8
 8009cfe:	3404      	adds	r4, #4
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	9a04      	ldr	r2, [sp, #16]
 8009d06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009d0a:	fb13 f302 	smulbb	r3, r3, r2
 8009d0e:	9a01      	ldr	r2, [sp, #4]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	1899      	adds	r1, r3, r2
 8009d14:	9305      	str	r3, [sp, #20]
 8009d16:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009d1a:	b209      	sxth	r1, r1
 8009d1c:	4299      	cmp	r1, r3
 8009d1e:	db4d      	blt.n	8009dbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009d20:	8932      	ldrh	r2, [r6, #8]
 8009d22:	4413      	add	r3, r2
 8009d24:	b21b      	sxth	r3, r3
 8009d26:	4299      	cmp	r1, r3
 8009d28:	da48      	bge.n	8009dbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009d2a:	9b04      	ldr	r3, [sp, #16]
 8009d2c:	6827      	ldr	r7, [r4, #0]
 8009d2e:	fb17 f703 	smulbb	r7, r7, r3
 8009d32:	9b02      	ldr	r3, [sp, #8]
 8009d34:	b2bf      	uxth	r7, r7
 8009d36:	18fa      	adds	r2, r7, r3
 8009d38:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009d3c:	b212      	sxth	r2, r2
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	db3c      	blt.n	8009dbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009d42:	8970      	ldrh	r0, [r6, #10]
 8009d44:	4403      	add	r3, r0
 8009d46:	b21b      	sxth	r3, r3
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	da37      	bge.n	8009dbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4630      	mov	r0, r6
 8009d50:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d52:	ab0b      	add	r3, sp, #44	; 0x2c
 8009d54:	f7ff ff36 	bl	8009bc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d5a:	b37a      	cbz	r2, 8009dbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009d5c:	4552      	cmp	r2, sl
 8009d5e:	d02d      	beq.n	8009dbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009d60:	4611      	mov	r1, r2
 8009d62:	a80e      	add	r0, sp, #56	; 0x38
 8009d64:	9209      	str	r2, [sp, #36]	; 0x24
 8009d66:	f005 f853 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009d6a:	f04f 0e02 	mov.w	lr, #2
 8009d6e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8009d72:	9a06      	ldr	r2, [sp, #24]
 8009d74:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8009d78:	9b01      	ldr	r3, [sp, #4]
 8009d7a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8009d7e:	4413      	add	r3, r2
 8009d80:	9a07      	ldr	r2, [sp, #28]
 8009d82:	fb91 f1fe 	sdiv	r1, r1, lr
 8009d86:	fb9c fcfe 	sdiv	ip, ip, lr
 8009d8a:	4401      	add	r1, r0
 8009d8c:	1a58      	subs	r0, r3, r1
 8009d8e:	9b02      	ldr	r3, [sp, #8]
 8009d90:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8009d94:	4413      	add	r3, r2
 8009d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d98:	448c      	add	ip, r1
 8009d9a:	eba3 030c 	sub.w	r3, r3, ip
 8009d9e:	435b      	muls	r3, r3
 8009da0:	fb00 3300 	mla	r3, r0, r0, r3
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	d208      	bcs.n	8009dba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8009da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009daa:	461d      	mov	r5, r3
 8009dac:	9803      	ldr	r0, [sp, #12]
 8009dae:	6001      	str	r1, [r0, #0]
 8009db0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009db2:	9805      	ldr	r0, [sp, #20]
 8009db4:	8008      	strh	r0, [r1, #0]
 8009db6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009db8:	800f      	strh	r7, [r1, #0]
 8009dba:	4692      	mov	sl, r2
 8009dbc:	f10b 0b01 	add.w	fp, fp, #1
 8009dc0:	3408      	adds	r4, #8
 8009dc2:	f1bb 0f04 	cmp.w	fp, #4
 8009dc6:	d19d      	bne.n	8009d04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8009dc8:	9b00      	ldr	r3, [sp, #0]
 8009dca:	9c08      	ldr	r4, [sp, #32]
 8009dcc:	444b      	add	r3, r9
 8009dce:	4544      	cmp	r4, r8
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	d188      	bne.n	8009ce6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8009dd4:	b021      	add	sp, #132	; 0x84
 8009dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dda:	f04f 35ff 	mov.w	r5, #4294967295
 8009dde:	e767      	b.n	8009cb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8009de0:	2400fa1c 	.word	0x2400fa1c
 8009de4:	08018230 	.word	0x08018230

08009de8 <_ZN8touchgfx4RectaNERKS0_>:
 8009de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dec:	f9b1 7000 	ldrsh.w	r7, [r1]
 8009df0:	888c      	ldrh	r4, [r1, #4]
 8009df2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8009df6:	443c      	add	r4, r7
 8009df8:	b2a4      	uxth	r4, r4
 8009dfa:	fa0f f884 	sxth.w	r8, r4
 8009dfe:	45c1      	cmp	r9, r8
 8009e00:	da2f      	bge.n	8009e62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009e02:	8882      	ldrh	r2, [r0, #4]
 8009e04:	444a      	add	r2, r9
 8009e06:	b292      	uxth	r2, r2
 8009e08:	fa0f fe82 	sxth.w	lr, r2
 8009e0c:	4577      	cmp	r7, lr
 8009e0e:	da28      	bge.n	8009e62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009e10:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009e14:	88cb      	ldrh	r3, [r1, #6]
 8009e16:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8009e1a:	442b      	add	r3, r5
 8009e1c:	b21b      	sxth	r3, r3
 8009e1e:	429e      	cmp	r6, r3
 8009e20:	da1f      	bge.n	8009e62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009e22:	88c3      	ldrh	r3, [r0, #6]
 8009e24:	4433      	add	r3, r6
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	fa0f fc83 	sxth.w	ip, r3
 8009e2c:	4565      	cmp	r5, ip
 8009e2e:	da18      	bge.n	8009e62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009e30:	454f      	cmp	r7, r9
 8009e32:	bfb8      	it	lt
 8009e34:	464f      	movlt	r7, r9
 8009e36:	42b5      	cmp	r5, r6
 8009e38:	bfb8      	it	lt
 8009e3a:	4635      	movlt	r5, r6
 8009e3c:	45f0      	cmp	r8, lr
 8009e3e:	bfd8      	it	le
 8009e40:	4622      	movle	r2, r4
 8009e42:	1bd2      	subs	r2, r2, r7
 8009e44:	8082      	strh	r2, [r0, #4]
 8009e46:	884a      	ldrh	r2, [r1, #2]
 8009e48:	88c9      	ldrh	r1, [r1, #6]
 8009e4a:	8007      	strh	r7, [r0, #0]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	8045      	strh	r5, [r0, #2]
 8009e50:	b292      	uxth	r2, r2
 8009e52:	b211      	sxth	r1, r2
 8009e54:	458c      	cmp	ip, r1
 8009e56:	bfa8      	it	ge
 8009e58:	4613      	movge	r3, r2
 8009e5a:	1b5b      	subs	r3, r3, r5
 8009e5c:	80c3      	strh	r3, [r0, #6]
 8009e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e62:	2300      	movs	r3, #0
 8009e64:	8003      	strh	r3, [r0, #0]
 8009e66:	8043      	strh	r3, [r0, #2]
 8009e68:	8083      	strh	r3, [r0, #4]
 8009e6a:	80c3      	strh	r3, [r0, #6]
 8009e6c:	e7f7      	b.n	8009e5e <_ZN8touchgfx4RectaNERKS0_+0x76>

08009e6e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8009e6e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	dd06      	ble.n	8009e84 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8009e76:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	bfcc      	ite	gt
 8009e7e:	2000      	movgt	r0, #0
 8009e80:	2001      	movle	r0, #1
 8009e82:	4770      	bx	lr
 8009e84:	2001      	movs	r0, #1
 8009e86:	4770      	bx	lr

08009e88 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8009e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4604      	mov	r4, r0
 8009e90:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8009e92:	8003      	strh	r3, [r0, #0]
 8009e94:	8043      	strh	r3, [r0, #2]
 8009e96:	8083      	strh	r3, [r0, #4]
 8009e98:	80c3      	strh	r3, [r0, #6]
 8009e9a:	2d00      	cmp	r5, #0
 8009e9c:	d040      	beq.n	8009f20 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8009e9e:	1d28      	adds	r0, r5, #4
 8009ea0:	f7ff ffe5 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8009ea4:	b988      	cbnz	r0, 8009eca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f7ff ffe1 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8009eac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009eb0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009eb4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8009eb8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8009ebc:	b138      	cbz	r0, 8009ece <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8009ebe:	8022      	strh	r2, [r4, #0]
 8009ec0:	8063      	strh	r3, [r4, #2]
 8009ec2:	f8a4 e004 	strh.w	lr, [r4, #4]
 8009ec6:	f8a4 c006 	strh.w	ip, [r4, #6]
 8009eca:	69ad      	ldr	r5, [r5, #24]
 8009ecc:	e7e5      	b.n	8009e9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8009ece:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009ed2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009ed6:	4290      	cmp	r0, r2
 8009ed8:	4607      	mov	r7, r0
 8009eda:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8009ede:	460e      	mov	r6, r1
 8009ee0:	bfa8      	it	ge
 8009ee2:	4617      	movge	r7, r2
 8009ee4:	4299      	cmp	r1, r3
 8009ee6:	4472      	add	r2, lr
 8009ee8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8009eec:	bfa8      	it	ge
 8009eee:	461e      	movge	r6, r3
 8009ef0:	4440      	add	r0, r8
 8009ef2:	4471      	add	r1, lr
 8009ef4:	4463      	add	r3, ip
 8009ef6:	b200      	sxth	r0, r0
 8009ef8:	8027      	strh	r7, [r4, #0]
 8009efa:	b212      	sxth	r2, r2
 8009efc:	8066      	strh	r6, [r4, #2]
 8009efe:	b209      	sxth	r1, r1
 8009f00:	b21b      	sxth	r3, r3
 8009f02:	4290      	cmp	r0, r2
 8009f04:	bfac      	ite	ge
 8009f06:	ebc7 0200 	rsbge	r2, r7, r0
 8009f0a:	ebc7 0202 	rsblt	r2, r7, r2
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	bfac      	ite	ge
 8009f12:	ebc6 0301 	rsbge	r3, r6, r1
 8009f16:	ebc6 0303 	rsblt	r3, r6, r3
 8009f1a:	80a2      	strh	r2, [r4, #4]
 8009f1c:	80e3      	strh	r3, [r4, #6]
 8009f1e:	e7d4      	b.n	8009eca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009f20:	4620      	mov	r0, r4
 8009f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f26 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8009f26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f2a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8009f2e:	b383      	cbz	r3, 8009f92 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009f30:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009f32:	b374      	cbz	r4, 8009f92 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009f34:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009f38:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8009f3c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009f40:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8009f44:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8009f48:	b303      	cbz	r3, 8009f8c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009f4a:	4668      	mov	r0, sp
 8009f4c:	1d21      	adds	r1, r4, #4
 8009f4e:	f8ad 5000 	strh.w	r5, [sp]
 8009f52:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009f56:	f8ad 7004 	strh.w	r7, [sp, #4]
 8009f5a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8009f5e:	f7ff ff43 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 8009f62:	4668      	mov	r0, sp
 8009f64:	f7ff ff83 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8009f68:	b980      	cbnz	r0, 8009f8c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009f6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f6e:	4669      	mov	r1, sp
 8009f70:	88a2      	ldrh	r2, [r4, #4]
 8009f72:	4620      	mov	r0, r4
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	88e2      	ldrh	r2, [r4, #6]
 8009f78:	f8ad 3000 	strh.w	r3, [sp]
 8009f7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009f80:	1a9b      	subs	r3, r3, r2
 8009f82:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	4798      	blx	r3
 8009f8c:	69a4      	ldr	r4, [r4, #24]
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	d1d8      	bne.n	8009f44 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009f92:	b002      	add	sp, #8
 8009f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f98 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8009f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f9a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	b323      	cbz	r3, 8009fee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009fa4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009fa6:	b314      	cbz	r4, 8009fee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009fa8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8009fac:	b1eb      	cbz	r3, 8009fea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009fae:	6828      	ldr	r0, [r5, #0]
 8009fb0:	466b      	mov	r3, sp
 8009fb2:	6869      	ldr	r1, [r5, #4]
 8009fb4:	c303      	stmia	r3!, {r0, r1}
 8009fb6:	4668      	mov	r0, sp
 8009fb8:	1d21      	adds	r1, r4, #4
 8009fba:	f7ff ff15 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 8009fbe:	4668      	mov	r0, sp
 8009fc0:	f7ff ff55 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8009fc4:	b988      	cbnz	r0, 8009fea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009fc6:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fca:	4669      	mov	r1, sp
 8009fcc:	88a2      	ldrh	r2, [r4, #4]
 8009fce:	4620      	mov	r0, r4
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	88e2      	ldrh	r2, [r4, #6]
 8009fd4:	f8ad 3000 	strh.w	r3, [sp]
 8009fd8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009fdc:	1a9b      	subs	r3, r3, r2
 8009fde:	4632      	mov	r2, r6
 8009fe0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe8:	4798      	blx	r3
 8009fea:	69a4      	ldr	r4, [r4, #24]
 8009fec:	e7db      	b.n	8009fa6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8009fee:	b002      	add	sp, #8
 8009ff0:	bd70      	pop	{r4, r5, r6, pc}

08009ff2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8009ff2:	6803      	ldr	r3, [r0, #0]
 8009ff4:	b513      	push	{r0, r1, r4, lr}
 8009ff6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e9cd 3300 	strd	r3, r3, [sp]
 800a000:	466b      	mov	r3, sp
 800a002:	47a0      	blx	r4
 800a004:	b002      	add	sp, #8
 800a006:	bd10      	pop	{r4, pc}

0800a008 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800a008:	2301      	movs	r3, #1
 800a00a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800a00e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800a012:	4770      	bx	lr

0800a014 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800a014:	2301      	movs	r3, #1
 800a016:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800a01a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800a01e:	4770      	bx	lr

0800a020 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800a020:	6843      	ldr	r3, [r0, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	725a      	strb	r2, [r3, #9]
 800a026:	6840      	ldr	r0, [r0, #4]
 800a028:	6803      	ldr	r3, [r0, #0]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	4718      	bx	r3

0800a02e <_ZN8touchgfx3HAL8flushDMAEv>:
 800a02e:	6840      	ldr	r0, [r0, #4]
 800a030:	6803      	ldr	r3, [r0, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	4718      	bx	r3

0800a036 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800a036:	b530      	push	{r4, r5, lr}
 800a038:	b08b      	sub	sp, #44	; 0x2c
 800a03a:	6804      	ldr	r4, [r0, #0]
 800a03c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800a040:	9509      	str	r5, [sp, #36]	; 0x24
 800a042:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800a046:	9508      	str	r5, [sp, #32]
 800a048:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800a04c:	9507      	str	r5, [sp, #28]
 800a04e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800a052:	9506      	str	r5, [sp, #24]
 800a054:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800a058:	9505      	str	r5, [sp, #20]
 800a05a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800a05e:	9504      	str	r5, [sp, #16]
 800a060:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800a064:	9503      	str	r5, [sp, #12]
 800a066:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800a06a:	9502      	str	r5, [sp, #8]
 800a06c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800a070:	e9cd 3500 	strd	r3, r5, [sp]
 800a074:	4613      	mov	r3, r2
 800a076:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800a078:	2200      	movs	r2, #0
 800a07a:	47a0      	blx	r4
 800a07c:	b00b      	add	sp, #44	; 0x2c
 800a07e:	bd30      	pop	{r4, r5, pc}

0800a080 <_ZN8touchgfx3HAL10beginFrameEv>:
 800a080:	4b04      	ldr	r3, [pc, #16]	; (800a094 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	b123      	cbz	r3, 800a090 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800a086:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800a08a:	f080 0001 	eor.w	r0, r0, #1
 800a08e:	4770      	bx	lr
 800a090:	2001      	movs	r0, #1
 800a092:	4770      	bx	lr
 800a094:	2400fa1a 	.word	0x2400fa1a

0800a098 <_ZN8touchgfx3HAL8endFrameEv>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	4604      	mov	r4, r0
 800a09c:	6840      	ldr	r0, [r0, #4]
 800a09e:	6803      	ldr	r3, [r0, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	4798      	blx	r3
 800a0a4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800a0a8:	b113      	cbz	r3, 800a0b0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800a0b0:	bd10      	pop	{r4, pc}

0800a0b2 <_ZN8touchgfx3HAL10initializeEv>:
 800a0b2:	b510      	push	{r4, lr}
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	f7fe fe6b 	bl	8008d90 <_ZN8touchgfx10OSWrappers10initializeEv>
 800a0ba:	6860      	ldr	r0, [r4, #4]
 800a0bc:	6803      	ldr	r3, [r0, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	4798      	blx	r3
 800a0c2:	68e0      	ldr	r0, [r4, #12]
 800a0c4:	6803      	ldr	r3, [r0, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	4798      	blx	r3
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d4:	4718      	bx	r3

0800a0d6 <_ZN8touchgfx3HAL9taskEntryEv>:
 800a0d6:	b508      	push	{r3, lr}
 800a0d8:	6803      	ldr	r3, [r0, #0]
 800a0da:	4604      	mov	r4, r0
 800a0dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0de:	4798      	blx	r3
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4798      	blx	r3
 800a0e8:	f7fe feae 	bl	8008e48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f0:	e7f8      	b.n	800a0e4 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800a0f4 <_ZN8touchgfx3HAL4tickEv>:
 800a0f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a0f6:	6803      	ldr	r3, [r0, #0]
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4d5c      	ldr	r5, [pc, #368]	; (800a26c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800a0fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a100:	4798      	blx	r3
 800a102:	2800      	cmp	r0, #0
 800a104:	f000 8097 	beq.w	800a236 <_ZN8touchgfx3HAL4tickEv+0x142>
 800a108:	2001      	movs	r0, #1
 800a10a:	2600      	movs	r6, #0
 800a10c:	f7fe fd73 	bl	8008bf6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800a110:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800a114:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800a118:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800a11c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800a120:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800a124:	b133      	cbz	r3, 800a134 <_ZN8touchgfx3HAL4tickEv+0x40>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	4620      	mov	r0, r4
 800a12a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a12e:	4798      	blx	r3
 800a130:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800a134:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800a138:	2601      	movs	r6, #1
 800a13a:	6862      	ldr	r2, [r4, #4]
 800a13c:	f083 0301 	eor.w	r3, r3, #1
 800a140:	702e      	strb	r6, [r5, #0]
 800a142:	7253      	strb	r3, [r2, #9]
 800a144:	f003 fe4a 	bl	800dddc <_ZN8touchgfx11Application11getInstanceEv>
 800a148:	6803      	ldr	r3, [r0, #0]
 800a14a:	4631      	mov	r1, r6
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	4798      	blx	r3
 800a150:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800a154:	b90b      	cbnz	r3, 800a15a <_ZN8touchgfx3HAL4tickEv+0x66>
 800a156:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800a15a:	f003 fe3f 	bl	800dddc <_ZN8touchgfx11Application11getInstanceEv>
 800a15e:	6803      	ldr	r3, [r0, #0]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	4798      	blx	r3
 800a164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a166:	6803      	ldr	r3, [r0, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	4798      	blx	r3
 800a16c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800a170:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800a174:	3b01      	subs	r3, #1
 800a176:	b2db      	uxtb	r3, r3
 800a178:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800a17c:	b10a      	cbz	r2, 800a182 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1eb      	bne.n	800a15a <_ZN8touchgfx3HAL4tickEv+0x66>
 800a182:	4a3b      	ldr	r2, [pc, #236]	; (800a270 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800a184:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800a188:	7813      	ldrb	r3, [r2, #0]
 800a18a:	3301      	adds	r3, #1
 800a18c:	b25b      	sxtb	r3, r3
 800a18e:	4299      	cmp	r1, r3
 800a190:	7013      	strb	r3, [r2, #0]
 800a192:	dc10      	bgt.n	800a1b6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800a194:	2300      	movs	r3, #0
 800a196:	68e0      	ldr	r0, [r4, #12]
 800a198:	a902      	add	r1, sp, #8
 800a19a:	7013      	strb	r3, [r2, #0]
 800a19c:	aa03      	add	r2, sp, #12
 800a19e:	6803      	ldr	r3, [r0, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	4798      	blx	r3
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d051      	beq.n	800a24e <_ZN8touchgfx3HAL4tickEv+0x15a>
 800a1aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a1b4:	4798      	blx	r3
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	6960      	ldr	r0, [r4, #20]
 800a1ba:	f88d 3007 	strb.w	r3, [sp, #7]
 800a1be:	b158      	cbz	r0, 800a1d8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800a1c0:	6803      	ldr	r3, [r0, #0]
 800a1c2:	f10d 0107 	add.w	r1, sp, #7
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	4798      	blx	r3
 800a1ca:	b128      	cbz	r0, 800a1d8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800a1d2:	6803      	ldr	r3, [r0, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	4798      	blx	r3
 800a1d8:	f104 001c 	add.w	r0, r4, #28
 800a1dc:	f00b ffbc 	bl	8016158 <_ZN8touchgfx8Gestures4tickEv>
 800a1e0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800a1e4:	b30b      	cbz	r3, 800a22a <_ZN8touchgfx3HAL4tickEv+0x136>
 800a1e6:	6920      	ldr	r0, [r4, #16]
 800a1e8:	6803      	ldr	r3, [r0, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	4798      	blx	r3
 800a1ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	b903      	cbnz	r3, 800a1f6 <_ZN8touchgfx3HAL4tickEv+0x102>
 800a1f4:	6720      	str	r0, [r4, #112]	; 0x70
 800a1f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a1f8:	4a1e      	ldr	r2, [pc, #120]	; (800a274 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800a1fa:	1af3      	subs	r3, r6, r3
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d914      	bls.n	800a22a <_ZN8touchgfx3HAL4tickEv+0x136>
 800a200:	6920      	ldr	r0, [r4, #16]
 800a202:	6803      	ldr	r3, [r0, #0]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	4798      	blx	r3
 800a208:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a20a:	2264      	movs	r2, #100	; 0x64
 800a20c:	1af3      	subs	r3, r6, r3
 800a20e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a212:	fbb0 f0f3 	udiv	r0, r0, r3
 800a216:	2800      	cmp	r0, #0
 800a218:	dc1e      	bgt.n	800a258 <_ZN8touchgfx3HAL4tickEv+0x164>
 800a21a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800a21e:	6920      	ldr	r0, [r4, #16]
 800a220:	2100      	movs	r1, #0
 800a222:	6803      	ldr	r3, [r0, #0]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	4798      	blx	r3
 800a228:	6726      	str	r6, [r4, #112]	; 0x70
 800a22a:	f003 fdd7 	bl	800dddc <_ZN8touchgfx11Application11getInstanceEv>
 800a22e:	6803      	ldr	r3, [r0, #0]
 800a230:	2100      	movs	r1, #0
 800a232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a234:	4798      	blx	r3
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	4620      	mov	r0, r4
 800a23a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a23e:	4798      	blx	r3
 800a240:	2001      	movs	r0, #1
 800a242:	f7fe fcd9 	bl	8008bf8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800a246:	2300      	movs	r3, #0
 800a248:	702b      	strb	r3, [r5, #0]
 800a24a:	b004      	add	sp, #16
 800a24c:	bd70      	pop	{r4, r5, r6, pc}
 800a24e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a252:	4620      	mov	r0, r4
 800a254:	4798      	blx	r3
 800a256:	e7ae      	b.n	800a1b6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800a258:	2863      	cmp	r0, #99	; 0x63
 800a25a:	bfcb      	itete	gt
 800a25c:	2300      	movgt	r3, #0
 800a25e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800a262:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800a266:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800a26a:	e7d8      	b.n	800a21e <_ZN8touchgfx3HAL4tickEv+0x12a>
 800a26c:	2400fa20 	.word	0x2400fa20
 800a270:	2400fa21 	.word	0x2400fa21
 800a274:	05f5e100 	.word	0x05f5e100

0800a278 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800a278:	f7fe bdbe 	b.w	8008df8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800a27c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800a27c:	6581      	str	r1, [r0, #88]	; 0x58
 800a27e:	301c      	adds	r0, #28
 800a280:	f00b bf68 	b.w	8016154 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800a284 <_ZN8touchgfx3HAL5touchEll>:
 800a284:	b530      	push	{r4, r5, lr}
 800a286:	b087      	sub	sp, #28
 800a288:	4604      	mov	r4, r0
 800a28a:	a804      	add	r0, sp, #16
 800a28c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a290:	f003 fba0 	bl	800d9d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800a294:	9b04      	ldr	r3, [sp, #16]
 800a296:	a906      	add	r1, sp, #24
 800a298:	a803      	add	r0, sp, #12
 800a29a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a29e:	9b05      	ldr	r3, [sp, #20]
 800a2a0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800a2a4:	f003 fbe8 	bl	800da78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800a2a8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800a2ac:	f104 001c 	add.w	r0, r4, #28
 800a2b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800a2b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a2b8:	b189      	cbz	r1, 800a2de <_ZN8touchgfx3HAL5touchEll+0x5a>
 800a2ba:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	f00b ff54 	bl	8016174 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800a2cc:	b128      	cbz	r0, 800a2da <_ZN8touchgfx3HAL5touchEll+0x56>
 800a2ce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800a2d2:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a2d4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800a2d8:	6623      	str	r3, [r4, #96]	; 0x60
 800a2da:	b007      	add	sp, #28
 800a2dc:	bd30      	pop	{r4, r5, pc}
 800a2de:	f00b ff8d 	bl	80161fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a2e8:	e7f1      	b.n	800a2ce <_ZN8touchgfx3HAL5touchEll+0x4a>

0800a2ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800a2ea:	b510      	push	{r4, lr}
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d046      	beq.n	800a37e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a2f0:	ea81 0002 	eor.w	r0, r1, r2
 800a2f4:	07c4      	lsls	r4, r0, #31
 800a2f6:	d508      	bpl.n	800a30a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800a2f8:	440b      	add	r3, r1
 800a2fa:	3a01      	subs	r2, #1
 800a2fc:	428b      	cmp	r3, r1
 800a2fe:	d93e      	bls.n	800a37e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a300:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a304:	f801 0b01 	strb.w	r0, [r1], #1
 800a308:	e7f8      	b.n	800a2fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800a30a:	07d0      	lsls	r0, r2, #31
 800a30c:	bf42      	ittt	mi
 800a30e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800a312:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800a316:	f801 0b01 	strbmi.w	r0, [r1], #1
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d911      	bls.n	800a342 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a31e:	ea81 0402 	eor.w	r4, r1, r2
 800a322:	4610      	mov	r0, r2
 800a324:	07a4      	lsls	r4, r4, #30
 800a326:	d022      	beq.n	800a36e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800a328:	f023 0401 	bic.w	r4, r3, #1
 800a32c:	440c      	add	r4, r1
 800a32e:	428c      	cmp	r4, r1
 800a330:	4602      	mov	r2, r0
 800a332:	d904      	bls.n	800a33e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800a334:	8812      	ldrh	r2, [r2, #0]
 800a336:	3002      	adds	r0, #2
 800a338:	f821 2b02 	strh.w	r2, [r1], #2
 800a33c:	e7f7      	b.n	800a32e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	f023 0003 	bic.w	r0, r3, #3
 800a346:	4408      	add	r0, r1
 800a348:	4288      	cmp	r0, r1
 800a34a:	4614      	mov	r4, r2
 800a34c:	d904      	bls.n	800a358 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800a34e:	6824      	ldr	r4, [r4, #0]
 800a350:	3204      	adds	r2, #4
 800a352:	f841 4b04 	str.w	r4, [r1], #4
 800a356:	e7f7      	b.n	800a348 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	3a01      	subs	r2, #1
 800a35e:	440b      	add	r3, r1
 800a360:	428b      	cmp	r3, r1
 800a362:	d90c      	bls.n	800a37e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a364:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a368:	f801 0b01 	strb.w	r0, [r1], #1
 800a36c:	e7f8      	b.n	800a360 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800a36e:	0790      	lsls	r0, r2, #30
 800a370:	d0e7      	beq.n	800a342 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a372:	f832 0b02 	ldrh.w	r0, [r2], #2
 800a376:	3b02      	subs	r3, #2
 800a378:	f821 0b02 	strh.w	r0, [r1], #2
 800a37c:	e7e1      	b.n	800a342 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a37e:	2001      	movs	r0, #1
 800a380:	bd10      	pop	{r4, pc}

0800a382 <_ZN8touchgfx3HAL7noTouchEv>:
 800a382:	b510      	push	{r4, lr}
 800a384:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800a388:	4604      	mov	r4, r0
 800a38a:	b153      	cbz	r3, 800a3a2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800a38c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800a390:	2101      	movs	r1, #1
 800a392:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800a396:	301c      	adds	r0, #28
 800a398:	f00b ff30 	bl	80161fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800a39c:	2300      	movs	r3, #0
 800a39e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a3a2:	bd10      	pop	{r4, pc}

0800a3a4 <_ZN8touchgfx8Drawable5setXYEss>:
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	6803      	ldr	r3, [r0, #0]
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	4615      	mov	r5, r2
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ae:	4798      	blx	r3
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3bc:	4718      	bx	r3
	...

0800a3c0 <_ZN8touchgfx3HAL3lcdEv>:
 800a3c0:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800a3c8:	b10a      	cbz	r2, 800a3ce <_ZN8touchgfx3HAL3lcdEv+0xe>
 800a3ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a3cc:	b900      	cbnz	r0, 800a3d0 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800a3ce:	6898      	ldr	r0, [r3, #8]
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	2400fa1c 	.word	0x2400fa1c

0800a3d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800a3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	4604      	mov	r4, r0
 800a3de:	6980      	ldr	r0, [r0, #24]
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	4690      	mov	r8, r2
 800a3e6:	4699      	mov	r9, r3
 800a3e8:	b930      	cbnz	r0, 800a3f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800a3ea:	4b1c      	ldr	r3, [pc, #112]	; (800a45c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800a3ec:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800a3f0:	4a1b      	ldr	r2, [pc, #108]	; (800a460 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800a3f2:	481c      	ldr	r0, [pc, #112]	; (800a464 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800a3f4:	f00c fe9a 	bl	801712c <__assert_func>
 800a3f8:	ad04      	add	r5, sp, #16
 800a3fa:	2600      	movs	r6, #0
 800a3fc:	f845 6d04 	str.w	r6, [r5, #-4]!
 800a400:	6806      	ldr	r6, [r0, #0]
 800a402:	9501      	str	r5, [sp, #4]
 800a404:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800a408:	9500      	str	r5, [sp, #0]
 800a40a:	6835      	ldr	r5, [r6, #0]
 800a40c:	47a8      	blx	r5
 800a40e:	4d16      	ldr	r5, [pc, #88]	; (800a468 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800a410:	4606      	mov	r6, r0
 800a412:	f8a5 9000 	strh.w	r9, [r5]
 800a416:	f7ff ffd3 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800a41a:	6803      	ldr	r3, [r0, #0]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41e:	4798      	blx	r3
 800a420:	2801      	cmp	r0, #1
 800a422:	d012      	beq.n	800a44a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800a424:	d306      	bcc.n	800a434 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800a426:	280d      	cmp	r0, #13
 800a428:	d80b      	bhi.n	800a442 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800a42a:	4b10      	ldr	r3, [pc, #64]	; (800a46c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800a42c:	f240 1167 	movw	r1, #359	; 0x167
 800a430:	4a0b      	ldr	r2, [pc, #44]	; (800a460 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800a432:	e7de      	b.n	800a3f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800a434:	882b      	ldrh	r3, [r5, #0]
 800a436:	fb08 7203 	mla	r2, r8, r3, r7
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800a440:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a442:	4630      	mov	r0, r6
 800a444:	b005      	add	sp, #20
 800a446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a44a:	882a      	ldrh	r2, [r5, #0]
 800a44c:	9b03      	ldr	r3, [sp, #12]
 800a44e:	fb08 7202 	mla	r2, r8, r2, r7
 800a452:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a456:	1a9a      	subs	r2, r3, r2
 800a458:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a45a:	e7f2      	b.n	800a442 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800a45c:	0801958c 	.word	0x0801958c
 800a460:	0801984a 	.word	0x0801984a
 800a464:	080195d1 	.word	0x080195d1
 800a468:	2400fa16 	.word	0x2400fa16
 800a46c:	080195f7 	.word	0x080195f7

0800a470 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800a470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a472:	b08b      	sub	sp, #44	; 0x2c
 800a474:	4617      	mov	r7, r2
 800a476:	4604      	mov	r4, r0
 800a478:	460e      	mov	r6, r1
 800a47a:	461d      	mov	r5, r3
 800a47c:	f7ff ffa0 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800a480:	6803      	ldr	r3, [r0, #0]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	4798      	blx	r3
 800a486:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a48a:	9007      	str	r0, [sp, #28]
 800a48c:	4631      	mov	r1, r6
 800a48e:	6822      	ldr	r2, [r4, #0]
 800a490:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a494:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800a496:	4620      	mov	r0, r4
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	9306      	str	r3, [sp, #24]
 800a49c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a4a0:	9305      	str	r3, [sp, #20]
 800a4a2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800a4b2:	9302      	str	r3, [sp, #8]
 800a4b4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a4b8:	e9cd 5300 	strd	r5, r3, [sp]
 800a4bc:	463b      	mov	r3, r7
 800a4be:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	47a8      	blx	r5
 800a4c4:	b00b      	add	sp, #44	; 0x2c
 800a4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c8:	2400fa16 	.word	0x2400fa16

0800a4cc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800a4cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4d0:	4698      	mov	r8, r3
 800a4d2:	6803      	ldr	r3, [r0, #0]
 800a4d4:	b08b      	sub	sp, #44	; 0x2c
 800a4d6:	4617      	mov	r7, r2
 800a4d8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800a4da:	460e      	mov	r6, r1
 800a4dc:	4b13      	ldr	r3, [pc, #76]	; (800a52c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800a4de:	4604      	mov	r4, r0
 800a4e0:	f8b3 9000 	ldrh.w	r9, [r3]
 800a4e4:	f7ff ff6c 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800a4e8:	6803      	ldr	r3, [r0, #0]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ec:	4798      	blx	r3
 800a4ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800a502:	2301      	movs	r3, #1
 800a504:	9305      	str	r3, [sp, #20]
 800a506:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800a510:	9303      	str	r3, [sp, #12]
 800a512:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a516:	9302      	str	r3, [sp, #8]
 800a518:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a51c:	e9cd 8300 	strd	r8, r3, [sp]
 800a520:	463b      	mov	r3, r7
 800a522:	47a8      	blx	r5
 800a524:	b00b      	add	sp, #44	; 0x2c
 800a526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a52a:	bf00      	nop
 800a52c:	2400fa16 	.word	0x2400fa16

0800a530 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800a530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a534:	4698      	mov	r8, r3
 800a536:	6803      	ldr	r3, [r0, #0]
 800a538:	b087      	sub	sp, #28
 800a53a:	460e      	mov	r6, r1
 800a53c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800a53e:	4617      	mov	r7, r2
 800a540:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800a542:	4604      	mov	r4, r0
 800a544:	f8b3 9000 	ldrh.w	r9, [r3]
 800a548:	f7ff ff3a 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800a54c:	6803      	ldr	r3, [r0, #0]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a550:	4798      	blx	r3
 800a552:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800a556:	463a      	mov	r2, r7
 800a558:	4631      	mov	r1, r6
 800a55a:	f8cd 900c 	str.w	r9, [sp, #12]
 800a55e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800a562:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800a566:	4620      	mov	r0, r4
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	4643      	mov	r3, r8
 800a578:	47a8      	blx	r5
 800a57a:	b007      	add	sp, #28
 800a57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a580:	2400fa16 	.word	0x2400fa16

0800a584 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	b08f      	sub	sp, #60	; 0x3c
 800a58c:	4610      	mov	r0, r2
 800a58e:	460d      	mov	r5, r1
 800a590:	4691      	mov	r9, r2
 800a592:	461e      	mov	r6, r3
 800a594:	f006 fbe6 	bl	8010d64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a598:	2800      	cmp	r0, #0
 800a59a:	f000 809c 	beq.w	800a6d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f8df b194 	ldr.w	fp, [pc, #404]	; 800a738 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800a5a6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	4798      	blx	r3
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f8df a188 	ldr.w	sl, [pc, #392]	; 800a73c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	4798      	blx	r3
 800a5ba:	f8bb 3000 	ldrh.w	r3, [fp]
 800a5be:	4f5b      	ldr	r7, [pc, #364]	; (800a72c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	f8ba 3000 	ldrh.w	r3, [sl]
 800a5c6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	9302      	str	r3, [sp, #8]
 800a5ce:	883b      	ldrh	r3, [r7, #0]
 800a5d0:	9303      	str	r3, [sp, #12]
 800a5d2:	4b57      	ldr	r3, [pc, #348]	; (800a730 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a5d4:	881a      	ldrh	r2, [r3, #0]
 800a5d6:	9305      	str	r3, [sp, #20]
 800a5d8:	9204      	str	r2, [sp, #16]
 800a5da:	f006 fd1b 	bl	8011014 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a5de:	8038      	strh	r0, [r7, #0]
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	f006 fd51 	bl	8011088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a5e6:	9b05      	ldr	r3, [sp, #20]
 800a5e8:	8018      	strh	r0, [r3, #0]
 800a5ea:	4b52      	ldr	r3, [pc, #328]	; (800a734 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d174      	bne.n	800a6dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800a5f2:	883b      	ldrh	r3, [r7, #0]
 800a5f4:	f8aa 0000 	strh.w	r0, [sl]
 800a5f8:	f8ab 3000 	strh.w	r3, [fp]
 800a5fc:	4648      	mov	r0, r9
 800a5fe:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800a602:	f006 fbaf 	bl	8010d64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a606:	2200      	movs	r2, #0
 800a608:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800a60c:	4611      	mov	r1, r2
 800a60e:	4628      	mov	r0, r5
 800a610:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800a614:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800a618:	f7ff fec4 	bl	800a3a4 <_ZN8touchgfx8Drawable5setXYEss>
 800a61c:	2301      	movs	r3, #1
 800a61e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800a622:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a626:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	dd5c      	ble.n	800a6e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800a62e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800a632:	2b00      	cmp	r3, #0
 800a634:	dd58      	ble.n	800a6e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800a636:	462a      	mov	r2, r5
 800a638:	ab0a      	add	r3, sp, #40	; 0x28
 800a63a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a63e:	6851      	ldr	r1, [r2, #4]
 800a640:	c303      	stmia	r3!, {r0, r1}
 800a642:	4631      	mov	r1, r6
 800a644:	a80a      	add	r0, sp, #40	; 0x28
 800a646:	f7ff fbcf 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800a64a:	4b38      	ldr	r3, [pc, #224]	; (800a72c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800a64c:	2100      	movs	r1, #0
 800a64e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a652:	4b37      	ldr	r3, [pc, #220]	; (800a730 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a654:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800a658:	aa0a      	add	r2, sp, #40	; 0x28
 800a65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a65e:	910c      	str	r1, [sp, #48]	; 0x30
 800a660:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800a664:	ab08      	add	r3, sp, #32
 800a666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a66a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a66e:	4618      	mov	r0, r3
 800a670:	a90c      	add	r1, sp, #48	; 0x30
 800a672:	f7ff fbb9 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800a676:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d13c      	bne.n	800a6f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800a67c:	2000      	movs	r0, #0
 800a67e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800a682:	2600      	movs	r6, #0
 800a684:	696b      	ldr	r3, [r5, #20]
 800a686:	a908      	add	r1, sp, #32
 800a688:	682a      	ldr	r2, [r5, #0]
 800a68a:	4628      	mov	r0, r5
 800a68c:	9305      	str	r3, [sp, #20]
 800a68e:	616e      	str	r6, [r5, #20]
 800a690:	6892      	ldr	r2, [r2, #8]
 800a692:	4790      	blx	r2
 800a694:	9b05      	ldr	r3, [sp, #20]
 800a696:	4652      	mov	r2, sl
 800a698:	4649      	mov	r1, r9
 800a69a:	616b      	str	r3, [r5, #20]
 800a69c:	4628      	mov	r0, r5
 800a69e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800a6a2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800a6a6:	f7ff fe7d 	bl	800a3a4 <_ZN8touchgfx8Drawable5setXYEss>
 800a6aa:	9a01      	ldr	r2, [sp, #4]
 800a6ac:	4b22      	ldr	r3, [pc, #136]	; (800a738 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	801a      	strh	r2, [r3, #0]
 800a6b2:	9a02      	ldr	r2, [sp, #8]
 800a6b4:	4b21      	ldr	r3, [pc, #132]	; (800a73c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	9a03      	ldr	r2, [sp, #12]
 800a6ba:	4b1c      	ldr	r3, [pc, #112]	; (800a72c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800a6bc:	801a      	strh	r2, [r3, #0]
 800a6be:	4b1c      	ldr	r3, [pc, #112]	; (800a730 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a6c0:	9a04      	ldr	r2, [sp, #16]
 800a6c2:	801a      	strh	r2, [r3, #0]
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6cc:	4798      	blx	r3
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d4:	4798      	blx	r3
 800a6d6:	b00f      	add	sp, #60	; 0x3c
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	883b      	ldrh	r3, [r7, #0]
 800a6de:	f8ab 0000 	strh.w	r0, [fp]
 800a6e2:	f8aa 3000 	strh.w	r3, [sl]
 800a6e6:	e789      	b.n	800a5fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	ab0a      	add	r3, sp, #40	; 0x28
 800a6ec:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a6f0:	6851      	ldr	r1, [r2, #4]
 800a6f2:	c303      	stmia	r3!, {r0, r1}
 800a6f4:	e7a9      	b.n	800a64a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800a6f6:	a807      	add	r0, sp, #28
 800a6f8:	f006 fe1e 	bl	8011338 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a700:	6803      	ldr	r3, [r0, #0]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	4798      	blx	r3
 800a706:	4286      	cmp	r6, r0
 800a708:	d1b8      	bne.n	800a67c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800a70a:	f7ff fe59 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800a70e:	6803      	ldr	r3, [r0, #0]
 800a710:	4606      	mov	r6, r0
 800a712:	a807      	add	r0, sp, #28
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	9305      	str	r3, [sp, #20]
 800a718:	f006 fe0e 	bl	8011338 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a71c:	9b05      	ldr	r3, [sp, #20]
 800a71e:	4601      	mov	r1, r0
 800a720:	4630      	mov	r0, r6
 800a722:	4798      	blx	r3
 800a724:	f080 0001 	eor.w	r0, r0, #1
 800a728:	b2c0      	uxtb	r0, r0
 800a72a:	e7a8      	b.n	800a67e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800a72c:	2400fa10 	.word	0x2400fa10
 800a730:	2400fa12 	.word	0x2400fa12
 800a734:	2400fa14 	.word	0x2400fa14
 800a738:	2400fa16 	.word	0x2400fa16
 800a73c:	2400fa18 	.word	0x2400fa18

0800a740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800a742:	b510      	push	{r4, lr}
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	4604      	mov	r4, r0
 800a748:	b13b      	cbz	r3, 800a75a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a74a:	6803      	ldr	r3, [r0, #0]
 800a74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74e:	4798      	blx	r3
 800a750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a752:	4283      	cmp	r3, r0
 800a754:	d101      	bne.n	800a75a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a756:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a75c:	e7fc      	b.n	800a758 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800a75e:	bf00      	nop
 800a760:	2400fa1a 	.word	0x2400fa1a

0800a764 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800a764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	b088      	sub	sp, #32
 800a76a:	4692      	mov	sl, r2
 800a76c:	461d      	mov	r5, r3
 800a76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a772:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800a776:	2400      	movs	r4, #0
 800a778:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800a77c:	4606      	mov	r6, r0
 800a77e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800a782:	fb09 a505 	mla	r5, r9, r5, sl
 800a786:	9403      	str	r4, [sp, #12]
 800a788:	f8ad 8014 	strh.w	r8, [sp, #20]
 800a78c:	f8ad 7016 	strh.w	r7, [sp, #22]
 800a790:	f88d 401c 	strb.w	r4, [sp, #28]
 800a794:	e9cd 3100 	strd	r3, r1, [sp]
 800a798:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a79c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a7a0:	f7ff ffce 	bl	800a740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a7a4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a7a8:	f8ad 901a 	strh.w	r9, [sp, #26]
 800a7ac:	f88d 401e 	strb.w	r4, [sp, #30]
 800a7b0:	9504      	str	r5, [sp, #16]
 800a7b2:	f88d 401d 	strb.w	r4, [sp, #29]
 800a7b6:	f88d 401f 	strb.w	r4, [sp, #31]
 800a7ba:	f1b8 0f00 	cmp.w	r8, #0
 800a7be:	d000      	beq.n	800a7c2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800a7c0:	b937      	cbnz	r7, 800a7d0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800a7c2:	4b0d      	ldr	r3, [pc, #52]	; (800a7f8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800a7c4:	f240 210b 	movw	r1, #523	; 0x20b
 800a7c8:	4a0c      	ldr	r2, [pc, #48]	; (800a7fc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800a7ca:	480d      	ldr	r0, [pc, #52]	; (800a800 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800a7cc:	f00c fcae 	bl	801712c <__assert_func>
 800a7d0:	6833      	ldr	r3, [r6, #0]
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	9c00      	ldr	r4, [sp, #0]
 800a7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d8:	4798      	blx	r3
 800a7da:	4220      	tst	r0, r4
 800a7dc:	d104      	bne.n	800a7e8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800a7e0:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800a7e4:	4a05      	ldr	r2, [pc, #20]	; (800a7fc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800a7e6:	e7f0      	b.n	800a7ca <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800a7e8:	6870      	ldr	r0, [r6, #4]
 800a7ea:	4669      	mov	r1, sp
 800a7ec:	6803      	ldr	r3, [r0, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	4798      	blx	r3
 800a7f2:	b008      	add	sp, #32
 800a7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f8:	0801941f 	.word	0x0801941f
 800a7fc:	0801967f 	.word	0x0801967f
 800a800:	080195d1 	.word	0x080195d1
 800a804:	08019457 	.word	0x08019457

0800a808 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	b089      	sub	sp, #36	; 0x24
 800a80e:	4693      	mov	fp, r2
 800a810:	461d      	mov	r5, r3
 800a812:	2400      	movs	r4, #0
 800a814:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800a818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a81c:	468a      	mov	sl, r1
 800a81e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800a822:	fb09 b505 	mla	r5, r9, r5, fp
 800a826:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800a82a:	4606      	mov	r6, r0
 800a82c:	9403      	str	r4, [sp, #12]
 800a82e:	e9cd 3400 	strd	r3, r4, [sp]
 800a832:	f7ff ff85 	bl	800a740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a836:	f8ad 8014 	strh.w	r8, [sp, #20]
 800a83a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a83e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800a842:	f8ad 4018 	strh.w	r4, [sp, #24]
 800a846:	9504      	str	r5, [sp, #16]
 800a848:	f8ad 901a 	strh.w	r9, [sp, #26]
 800a84c:	f8cd a00c 	str.w	sl, [sp, #12]
 800a850:	f8ad 401c 	strh.w	r4, [sp, #28]
 800a854:	f88d 401e 	strb.w	r4, [sp, #30]
 800a858:	f88d 401f 	strb.w	r4, [sp, #31]
 800a85c:	f1b8 0f00 	cmp.w	r8, #0
 800a860:	d000      	beq.n	800a864 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800a862:	b937      	cbnz	r7, 800a872 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800a866:	f240 2121 	movw	r1, #545	; 0x221
 800a86a:	4a0d      	ldr	r2, [pc, #52]	; (800a8a0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800a86c:	480d      	ldr	r0, [pc, #52]	; (800a8a4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800a86e:	f00c fc5d 	bl	801712c <__assert_func>
 800a872:	6833      	ldr	r3, [r6, #0]
 800a874:	4630      	mov	r0, r6
 800a876:	9c00      	ldr	r4, [sp, #0]
 800a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87a:	4798      	blx	r3
 800a87c:	4220      	tst	r0, r4
 800a87e:	d104      	bne.n	800a88a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800a880:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800a882:	f240 2122 	movw	r1, #546	; 0x222
 800a886:	4a06      	ldr	r2, [pc, #24]	; (800a8a0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800a888:	e7f0      	b.n	800a86c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800a88a:	6870      	ldr	r0, [r6, #4]
 800a88c:	4669      	mov	r1, sp
 800a88e:	6803      	ldr	r3, [r0, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	4798      	blx	r3
 800a894:	b009      	add	sp, #36	; 0x24
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89a:	bf00      	nop
 800a89c:	0801949c 	.word	0x0801949c
 800a8a0:	080196f5 	.word	0x080196f5
 800a8a4:	080195d1 	.word	0x080195d1
 800a8a8:	080194d4 	.word	0x080194d4

0800a8ac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800a8ac:	b508      	push	{r3, lr}
 800a8ae:	290d      	cmp	r1, #13
 800a8b0:	d817      	bhi.n	800a8e2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800a8b2:	e8df f001 	tbb	[pc, r1]
 800a8b6:	090b      	.short	0x090b
 800a8b8:	0d0d0d07 	.word	0x0d0d0d07
 800a8bc:	1414140d 	.word	0x1414140d
 800a8c0:	0d0d1414 	.word	0x0d0d1414
 800a8c4:	2020      	movs	r0, #32
 800a8c6:	bd08      	pop	{r3, pc}
 800a8c8:	2018      	movs	r0, #24
 800a8ca:	e7fc      	b.n	800a8c6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800a8cc:	2010      	movs	r0, #16
 800a8ce:	e7fa      	b.n	800a8c6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800a8d2:	f240 2182 	movw	r1, #642	; 0x282
 800a8d6:	4a05      	ldr	r2, [pc, #20]	; (800a8ec <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800a8d8:	4805      	ldr	r0, [pc, #20]	; (800a8f0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800a8da:	f00c fc27 	bl	801712c <__assert_func>
 800a8de:	2008      	movs	r0, #8
 800a8e0:	e7f1      	b.n	800a8c6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e7ef      	b.n	800a8c6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800a8e6:	bf00      	nop
 800a8e8:	0801964d 	.word	0x0801964d
 800a8ec:	08019a20 	.word	0x08019a20
 800a8f0:	080195d1 	.word	0x080195d1

0800a8f4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	460d      	mov	r5, r1
 800a8f8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800a8fc:	4616      	mov	r6, r2
 800a8fe:	461c      	mov	r4, r3
 800a900:	f7ff ffd4 	bl	800a8ac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800a904:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a908:	10c0      	asrs	r0, r0, #3
 800a90a:	fb06 5101 	mla	r1, r6, r1, r5
 800a90e:	fb00 4001 	mla	r0, r0, r1, r4
 800a912:	bd70      	pop	{r4, r5, r6, pc}

0800a914 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	b08a      	sub	sp, #40	; 0x28
 800a91a:	f04f 0c00 	mov.w	ip, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	469a      	mov	sl, r3
 800a922:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800a926:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800a92a:	2d0b      	cmp	r5, #11
 800a92c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800a930:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a934:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800a938:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800a93c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800a940:	f8cd c014 	str.w	ip, [sp, #20]
 800a944:	d12d      	bne.n	800a9a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800a946:	2080      	movs	r0, #128	; 0x80
 800a948:	9204      	str	r2, [sp, #16]
 800a94a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800a94e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a952:	f8ad 2020 	strh.w	r2, [sp, #32]
 800a956:	f8ad 701c 	strh.w	r7, [sp, #28]
 800a95a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a95e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a962:	4620      	mov	r0, r4
 800a964:	f7ff feec 	bl	800a740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a968:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800a96c:	4603      	mov	r3, r0
 800a96e:	4651      	mov	r1, sl
 800a970:	4620      	mov	r0, r4
 800a972:	e9cd 9800 	strd	r9, r8, [sp]
 800a976:	f7ff ffbd 	bl	800a8f4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800a97a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800a97e:	9006      	str	r0, [sp, #24]
 800a980:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800a984:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800a988:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800a98c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800a990:	b107      	cbz	r7, 800a994 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800a992:	b9d6      	cbnz	r6, 800a9ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800a994:	4b17      	ldr	r3, [pc, #92]	; (800a9f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800a996:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a99a:	4a17      	ldr	r2, [pc, #92]	; (800a9f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800a99c:	4817      	ldr	r0, [pc, #92]	; (800a9fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800a99e:	f00c fbc5 	bl	801712c <__assert_func>
 800a9a2:	2d02      	cmp	r5, #2
 800a9a4:	d108      	bne.n	800a9b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800a9a6:	2bff      	cmp	r3, #255	; 0xff
 800a9a8:	d104      	bne.n	800a9b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	bf14      	ite	ne
 800a9ae:	2040      	movne	r0, #64	; 0x40
 800a9b0:	2020      	moveq	r0, #32
 800a9b2:	e7c9      	b.n	800a948 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800a9b4:	2040      	movs	r0, #64	; 0x40
 800a9b6:	e7c7      	b.n	800a948 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800a9b8:	2bff      	cmp	r3, #255	; 0xff
 800a9ba:	d104      	bne.n	800a9c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	bf14      	ite	ne
 800a9c0:	2004      	movne	r0, #4
 800a9c2:	2001      	moveq	r0, #1
 800a9c4:	e7c0      	b.n	800a948 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800a9c6:	2004      	movs	r0, #4
 800a9c8:	e7be      	b.n	800a948 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	9d02      	ldr	r5, [sp, #8]
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	4798      	blx	r3
 800a9d4:	4228      	tst	r0, r5
 800a9d6:	d104      	bne.n	800a9e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800a9d8:	4b09      	ldr	r3, [pc, #36]	; (800aa00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800a9da:	f240 11d5 	movw	r1, #469	; 0x1d5
 800a9de:	4a06      	ldr	r2, [pc, #24]	; (800a9f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800a9e0:	e7dc      	b.n	800a99c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800a9e2:	6860      	ldr	r0, [r4, #4]
 800a9e4:	a902      	add	r1, sp, #8
 800a9e6:	6803      	ldr	r3, [r0, #0]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	4798      	blx	r3
 800a9ec:	b00a      	add	sp, #40	; 0x28
 800a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f2:	bf00      	nop
 800a9f4:	0801941f 	.word	0x0801941f
 800a9f8:	080198ae 	.word	0x080198ae
 800a9fc:	080195d1 	.word	0x080195d1
 800aa00:	08019457 	.word	0x08019457

0800aa04 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	b08b      	sub	sp, #44	; 0x2c
 800aa0a:	469b      	mov	fp, r3
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	4692      	mov	sl, r2
 800aa10:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800aa14:	2600      	movs	r6, #0
 800aa16:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800aa1a:	4689      	mov	r9, r1
 800aa1c:	2fff      	cmp	r7, #255	; 0xff
 800aa1e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800aa22:	9605      	str	r6, [sp, #20]
 800aa24:	bf14      	ite	ne
 800aa26:	2308      	movne	r3, #8
 800aa28:	2302      	moveq	r3, #2
 800aa2a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800aa2e:	f7ff fe87 	bl	800a740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800aa32:	465a      	mov	r2, fp
 800aa34:	4603      	mov	r3, r0
 800aa36:	4651      	mov	r1, sl
 800aa38:	4620      	mov	r0, r4
 800aa3a:	e9cd 8500 	strd	r8, r5, [sp]
 800aa3e:	f7ff ff59 	bl	800a8f4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800aa42:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800aa46:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800aa4a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800aa4e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800aa52:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800aa56:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aa5a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800aa5e:	9d02      	ldr	r5, [sp, #8]
 800aa60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	9006      	str	r0, [sp, #24]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f8ad 6020 	strh.w	r6, [sp, #32]
 800aa6e:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800aa72:	f8cd 9014 	str.w	r9, [sp, #20]
 800aa76:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7c:	4798      	blx	r3
 800aa7e:	4228      	tst	r0, r5
 800aa80:	d106      	bne.n	800aa90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800aa82:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800aa84:	f240 2137 	movw	r1, #567	; 0x237
 800aa88:	4a06      	ldr	r2, [pc, #24]	; (800aaa4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800aa8a:	4807      	ldr	r0, [pc, #28]	; (800aaa8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800aa8c:	f00c fb4e 	bl	801712c <__assert_func>
 800aa90:	6860      	ldr	r0, [r4, #4]
 800aa92:	a902      	add	r1, sp, #8
 800aa94:	6803      	ldr	r3, [r0, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	4798      	blx	r3
 800aa9a:	b00b      	add	sp, #44	; 0x2c
 800aa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa0:	08019457 	.word	0x08019457
 800aaa4:	08019985 	.word	0x08019985
 800aaa8:	080195d1 	.word	0x080195d1

0800aaac <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800aaac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aab0:	461f      	mov	r7, r3
 800aab2:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800aab4:	460d      	mov	r5, r1
 800aab6:	4616      	mov	r6, r2
 800aab8:	f8b3 8000 	ldrh.w	r8, [r3]
 800aabc:	4604      	mov	r4, r0
 800aabe:	f7ff fc7f 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800aac2:	6803      	ldr	r3, [r0, #0]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	4798      	blx	r3
 800aac8:	463b      	mov	r3, r7
 800aaca:	4632      	mov	r2, r6
 800aacc:	4629      	mov	r1, r5
 800aace:	e9cd 8000 	strd	r8, r0, [sp]
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7ff ff0e 	bl	800a8f4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800aad8:	b002      	add	sp, #8
 800aada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aade:	bf00      	nop
 800aae0:	2400fa16 	.word	0x2400fa16

0800aae4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800aae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae8:	4698      	mov	r8, r3
 800aaea:	b088      	sub	sp, #32
 800aaec:	2300      	movs	r3, #0
 800aaee:	4617      	mov	r7, r2
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800aaf6:	9303      	str	r3, [sp, #12]
 800aaf8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800aafc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ab00:	f8ad 6014 	strh.w	r6, [sp, #20]
 800ab04:	f8ad 5016 	strh.w	r5, [sp, #22]
 800ab08:	e9cd 3100 	strd	r3, r1, [sp]
 800ab0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ab10:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ab14:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800ab18:	f88d 301c 	strb.w	r3, [sp, #28]
 800ab1c:	f7ff fe10 	bl	800a740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ab20:	4642      	mov	r2, r8
 800ab22:	4603      	mov	r3, r0
 800ab24:	4639      	mov	r1, r7
 800ab26:	4620      	mov	r0, r4
 800ab28:	f7ff ffc0 	bl	800aaac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ab2c:	4b18      	ldr	r3, [pc, #96]	; (800ab90 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800ab2e:	9004      	str	r0, [sp, #16]
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ab36:	f7ff fc43 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800ab3a:	6803      	ldr	r3, [r0, #0]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3e:	4798      	blx	r3
 800ab40:	f88d 001e 	strb.w	r0, [sp, #30]
 800ab44:	f88d 001d 	strb.w	r0, [sp, #29]
 800ab48:	b106      	cbz	r6, 800ab4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800ab4a:	b935      	cbnz	r5, 800ab5a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800ab4c:	4b11      	ldr	r3, [pc, #68]	; (800ab94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800ab4e:	f240 11f1 	movw	r1, #497	; 0x1f1
 800ab52:	4a11      	ldr	r2, [pc, #68]	; (800ab98 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800ab54:	4811      	ldr	r0, [pc, #68]	; (800ab9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800ab56:	f00c fae9 	bl	801712c <__assert_func>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	9d00      	ldr	r5, [sp, #0]
 800ab60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab62:	4798      	blx	r3
 800ab64:	4228      	tst	r0, r5
 800ab66:	d104      	bne.n	800ab72 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800ab68:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800ab6a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800ab6e:	4a0a      	ldr	r2, [pc, #40]	; (800ab98 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800ab70:	e7f0      	b.n	800ab54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800ab72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab74:	4669      	mov	r1, sp
 800ab76:	6860      	ldr	r0, [r4, #4]
 800ab78:	9303      	str	r3, [sp, #12]
 800ab7a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ab7e:	f88d 301f 	strb.w	r3, [sp, #31]
 800ab82:	6803      	ldr	r3, [r0, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	4798      	blx	r3
 800ab88:	b008      	add	sp, #32
 800ab8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab8e:	bf00      	nop
 800ab90:	2400fa16 	.word	0x2400fa16
 800ab94:	0801941f 	.word	0x0801941f
 800ab98:	0801975a 	.word	0x0801975a
 800ab9c:	080195d1 	.word	0x080195d1
 800aba0:	08019457 	.word	0x08019457

0800aba4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800aba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aba6:	b08b      	sub	sp, #44	; 0x2c
 800aba8:	4604      	mov	r4, r0
 800abaa:	466b      	mov	r3, sp
 800abac:	e883 0006 	stmia.w	r3, {r1, r2}
 800abb0:	4b20      	ldr	r3, [pc, #128]	; (800ac34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	b933      	cbnz	r3, 800abc4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800abb6:	4b20      	ldr	r3, [pc, #128]	; (800ac38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800abb8:	f44f 7112 	mov.w	r1, #584	; 0x248
 800abbc:	4a1f      	ldr	r2, [pc, #124]	; (800ac3c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800abbe:	4820      	ldr	r0, [pc, #128]	; (800ac40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800abc0:	f00c fab4 	bl	801712c <__assert_func>
 800abc4:	2301      	movs	r3, #1
 800abc6:	2500      	movs	r5, #0
 800abc8:	f8bd 6000 	ldrh.w	r6, [sp]
 800abcc:	9302      	str	r3, [sp, #8]
 800abce:	6803      	ldr	r3, [r0, #0]
 800abd0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800abd4:	9505      	str	r5, [sp, #20]
 800abd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd8:	4798      	blx	r3
 800abda:	463a      	mov	r2, r7
 800abdc:	4631      	mov	r1, r6
 800abde:	4603      	mov	r3, r0
 800abe0:	4620      	mov	r0, r4
 800abe2:	f7ff ff63 	bl	800aaac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800abe6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800abe8:	9003      	str	r0, [sp, #12]
 800abea:	9306      	str	r3, [sp, #24]
 800abec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800abf0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800abf4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800abf8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800abfc:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ac04:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ac08:	f7ff fbda 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800ac0c:	6803      	ldr	r3, [r0, #0]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	4798      	blx	r3
 800ac12:	23ff      	movs	r3, #255	; 0xff
 800ac14:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800ac18:	a902      	add	r1, sp, #8
 800ac1a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800ac1e:	6860      	ldr	r0, [r4, #4]
 800ac20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ac24:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800ac28:	6803      	ldr	r3, [r0, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	4798      	blx	r3
 800ac2e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ac30:	b00b      	add	sp, #44	; 0x2c
 800ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac34:	2400fa1b 	.word	0x2400fa1b
 800ac38:	0801951e 	.word	0x0801951e
 800ac3c:	08019804 	.word	0x08019804
 800ac40:	080195d1 	.word	0x080195d1
 800ac44:	2400fa16 	.word	0x2400fa16

0800ac48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800ac48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4c:	b08a      	sub	sp, #40	; 0x28
 800ac4e:	2600      	movs	r6, #0
 800ac50:	4604      	mov	r4, r0
 800ac52:	466d      	mov	r5, sp
 800ac54:	9605      	str	r6, [sp, #20]
 800ac56:	e885 0006 	stmia.w	r5, {r1, r2}
 800ac5a:	461d      	mov	r5, r3
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f8bd 7000 	ldrh.w	r7, [sp]
 800ac62:	9302      	str	r3, [sp, #8]
 800ac64:	6803      	ldr	r3, [r0, #0]
 800ac66:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800ac6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6c:	4798      	blx	r3
 800ac6e:	4642      	mov	r2, r8
 800ac70:	4639      	mov	r1, r7
 800ac72:	4603      	mov	r3, r0
 800ac74:	4620      	mov	r0, r4
 800ac76:	f7ff ff19 	bl	800aaac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ac7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ac7e:	9003      	str	r0, [sp, #12]
 800ac80:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ac84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ac88:	9506      	str	r5, [sp, #24]
 800ac8a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ac8e:	4b0f      	ldr	r3, [pc, #60]	; (800accc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ac96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac98:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ac9c:	f7ff fb90 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800aca0:	6803      	ldr	r3, [r0, #0]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca4:	4798      	blx	r3
 800aca6:	23ff      	movs	r3, #255	; 0xff
 800aca8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800acac:	a902      	add	r1, sp, #8
 800acae:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800acb2:	6860      	ldr	r0, [r4, #4]
 800acb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800acb8:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800acbc:	6803      	ldr	r3, [r0, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	4798      	blx	r3
 800acc2:	4628      	mov	r0, r5
 800acc4:	b00a      	add	sp, #40	; 0x28
 800acc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acca:	bf00      	nop
 800accc:	2400fa16 	.word	0x2400fa16

0800acd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800acd6:	4604      	mov	r4, r0
 800acd8:	b19b      	cbz	r3, 800ad02 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800acda:	2002      	movs	r0, #2
 800acdc:	f7fd ff8d 	bl	8008bfa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800ace0:	2300      	movs	r3, #0
 800ace2:	4620      	mov	r0, r4
 800ace4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ace8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800acf2:	f7ff fd25 	bl	800a740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800acf6:	4601      	mov	r1, r0
 800acf8:	4620      	mov	r0, r4
 800acfa:	462b      	mov	r3, r5
 800acfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad00:	4718      	bx	r3
 800ad02:	bd70      	pop	{r4, r5, r6, pc}

0800ad04 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	428a      	cmp	r2, r1
 800ad10:	d008      	beq.n	800ad24 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800ad12:	2a01      	cmp	r2, #1
 800ad14:	6803      	ldr	r3, [r0, #0]
 800ad16:	d106      	bne.n	800ad26 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800ad18:	b929      	cbnz	r1, 800ad26 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800ad1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ad1e:	4798      	blx	r3
 800ad20:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800ad24:	bd38      	pop	{r3, r4, r5, pc}
 800ad26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	e7f7      	b.n	800ad1e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800ad30 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ad30:	4b0d      	ldr	r3, [pc, #52]	; (800ad68 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800ad32:	b510      	push	{r4, lr}
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	4604      	mov	r4, r0
 800ad38:	b95b      	cbnz	r3, 800ad52 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ad3a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d007      	beq.n	800ad52 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ad42:	6840      	ldr	r0, [r0, #4]
 800ad44:	f000 f93a 	bl	800afbc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ad48:	b118      	cbz	r0, 800ad52 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ad4a:	6862      	ldr	r2, [r4, #4]
 800ad4c:	7a53      	ldrb	r3, [r2, #9]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0fc      	beq.n	800ad4c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ad52:	f7fe f847 	bl	8008de4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ad56:	4620      	mov	r0, r4
 800ad58:	2100      	movs	r1, #0
 800ad5a:	f7ff ffd3 	bl	800ad04 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f7ff fcee 	bl	800a740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	bf00      	nop
 800ad68:	2400fa1a 	.word	0x2400fa1a

0800ad6c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800ad6c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800ad70:	1a13      	subs	r3, r2, r0
 800ad72:	4258      	negs	r0, r3
 800ad74:	4158      	adcs	r0, r3
 800ad76:	4770      	bx	lr

0800ad78 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ad78:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	bfdc      	itt	le
 800ad82:	6882      	ldrle	r2, [r0, #8]
 800ad84:	189b      	addle	r3, r3, r2
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	bfcc      	ite	gt
 800ad8a:	2000      	movgt	r0, #0
 800ad8c:	2001      	movle	r0, #1
 800ad8e:	4770      	bx	lr

0800ad90 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800ad90:	6902      	ldr	r2, [r0, #16]
 800ad92:	6840      	ldr	r0, [r0, #4]
 800ad94:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800ad98:	4770      	bx	lr

0800ad9a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800ad9a:	6803      	ldr	r3, [r0, #0]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	4718      	bx	r3

0800ada0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800ada0:	4770      	bx	lr

0800ada2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800ada2:	4770      	bx	lr

0800ada4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800ada4:	4770      	bx	lr
	...

0800ada8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800ada8:	2301      	movs	r3, #1
 800adaa:	b570      	push	{r4, r5, r6, lr}
 800adac:	7203      	strb	r3, [r0, #8]
 800adae:	4604      	mov	r4, r0
 800adb0:	6840      	ldr	r0, [r0, #4]
 800adb2:	6803      	ldr	r3, [r0, #0]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	4798      	blx	r3
 800adb8:	6803      	ldr	r3, [r0, #0]
 800adba:	4605      	mov	r5, r0
 800adbc:	2b40      	cmp	r3, #64	; 0x40
 800adbe:	d039      	beq.n	800ae34 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800adc0:	d815      	bhi.n	800adee <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800adc2:	2b04      	cmp	r3, #4
 800adc4:	d022      	beq.n	800ae0c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800adc6:	d808      	bhi.n	800adda <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d033      	beq.n	800ae34 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d108      	bne.n	800ade2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	4620      	mov	r0, r4
 800add4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add6:	4798      	blx	r3
 800add8:	e025      	b.n	800ae26 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800adda:	2b08      	cmp	r3, #8
 800addc:	d01e      	beq.n	800ae1c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d028      	beq.n	800ae34 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ade2:	4b17      	ldr	r3, [pc, #92]	; (800ae40 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800ade4:	218b      	movs	r1, #139	; 0x8b
 800ade6:	4a17      	ldr	r2, [pc, #92]	; (800ae44 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800ade8:	4817      	ldr	r0, [pc, #92]	; (800ae48 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800adea:	f00c f99f 	bl	801712c <__assert_func>
 800adee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adf2:	d01f      	beq.n	800ae34 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800adf4:	d804      	bhi.n	800ae00 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800adf6:	2b80      	cmp	r3, #128	; 0x80
 800adf8:	d01c      	beq.n	800ae34 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800adfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adfe:	e7ef      	b.n	800ade0 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800ae00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae04:	d016      	beq.n	800ae34 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ae06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae0a:	e7e0      	b.n	800adce <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	7f01      	ldrb	r1, [r0, #28]
 800ae10:	4620      	mov	r0, r4
 800ae12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae14:	4798      	blx	r3
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1a:	e006      	b.n	800ae2a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	7f01      	ldrb	r1, [r0, #28]
 800ae20:	4620      	mov	r0, r4
 800ae22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae24:	4798      	blx	r3
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae32:	4718      	bx	r3
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	4620      	mov	r0, r4
 800ae38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3a:	4798      	blx	r3
 800ae3c:	e7eb      	b.n	800ae16 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800ae3e:	bf00      	nop
 800ae40:	08019a69 	.word	0x08019a69
 800ae44:	08019b28 	.word	0x08019b28
 800ae48:	08019a8e 	.word	0x08019a8e

0800ae4c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ae4c:	b570      	push	{r4, r5, r6, lr}
 800ae4e:	4604      	mov	r4, r0
 800ae50:	460e      	mov	r6, r1
 800ae52:	6860      	ldr	r0, [r4, #4]
 800ae54:	6803      	ldr	r3, [r0, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4798      	blx	r3
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d1f9      	bne.n	800ae52 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ae5e:	4d0d      	ldr	r5, [pc, #52]	; (800ae94 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800ae60:	6828      	ldr	r0, [r5, #0]
 800ae62:	6803      	ldr	r3, [r0, #0]
 800ae64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae66:	4798      	blx	r3
 800ae68:	f7fd ffce 	bl	8008e08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ae6c:	6828      	ldr	r0, [r5, #0]
 800ae6e:	2101      	movs	r1, #1
 800ae70:	f7ff ff48 	bl	800ad04 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ae74:	6860      	ldr	r0, [r4, #4]
 800ae76:	4631      	mov	r1, r6
 800ae78:	6803      	ldr	r3, [r0, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	4798      	blx	r3
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	4620      	mov	r0, r4
 800ae82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae84:	4798      	blx	r3
 800ae86:	6828      	ldr	r0, [r5, #0]
 800ae88:	6803      	ldr	r3, [r0, #0]
 800ae8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae90:	4718      	bx	r3
 800ae92:	bf00      	nop
 800ae94:	2400fa1c 	.word	0x2400fa1c

0800ae98 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ae98:	b508      	push	{r3, lr}
 800ae9a:	f7fd ffa3 	bl	8008de4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ae9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aea2:	f7fd bfa9 	b.w	8008df8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800aea6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800aea6:	b510      	push	{r4, lr}
 800aea8:	4604      	mov	r4, r0
 800aeaa:	2114      	movs	r1, #20
 800aeac:	f00b fb2e 	bl	801650c <_ZdlPvj>
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	bd10      	pop	{r4, pc}

0800aeb4 <_ZN8touchgfx13DMA_Interface5startEv>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	6840      	ldr	r0, [r0, #4]
 800aeba:	6803      	ldr	r3, [r0, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4798      	blx	r3
 800aec0:	b948      	cbnz	r0, 800aed6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800aec2:	7a63      	ldrb	r3, [r4, #9]
 800aec4:	b13b      	cbz	r3, 800aed6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800aec6:	7a23      	ldrb	r3, [r4, #8]
 800aec8:	b92b      	cbnz	r3, 800aed6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	4620      	mov	r0, r4
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed4:	4718      	bx	r3
 800aed6:	bd10      	pop	{r4, pc}

0800aed8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800aede:	4606      	mov	r6, r0
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	bfdc      	itt	le
 800aee6:	6880      	ldrle	r0, [r0, #8]
 800aee8:	181b      	addle	r3, r3, r0
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	dd13      	ble.n	800af16 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800aeee:	6874      	ldr	r4, [r6, #4]
 800aef0:	460d      	mov	r5, r1
 800aef2:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800aef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aefa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800aefe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af02:	68f3      	ldr	r3, [r6, #12]
 800af04:	68b2      	ldr	r2, [r6, #8]
 800af06:	f3bf 8f5b 	dmb	ish
 800af0a:	3301      	adds	r3, #1
 800af0c:	429a      	cmp	r2, r3
 800af0e:	bfd8      	it	le
 800af10:	1a9b      	suble	r3, r3, r2
 800af12:	60f3      	str	r3, [r6, #12]
 800af14:	bd70      	pop	{r4, r5, r6, pc}
 800af16:	4b03      	ldr	r3, [pc, #12]	; (800af24 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800af18:	2139      	movs	r1, #57	; 0x39
 800af1a:	4a03      	ldr	r2, [pc, #12]	; (800af28 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800af1c:	4803      	ldr	r0, [pc, #12]	; (800af2c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800af1e:	f00c f905 	bl	801712c <__assert_func>
 800af22:	bf00      	nop
 800af24:	08019ab4 	.word	0x08019ab4
 800af28:	08019b58 	.word	0x08019b58
 800af2c:	08019a8e 	.word	0x08019a8e

0800af30 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800af30:	b510      	push	{r4, lr}
 800af32:	6803      	ldr	r3, [r0, #0]
 800af34:	4604      	mov	r4, r0
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4798      	blx	r3
 800af3a:	b128      	cbz	r0, 800af48 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800af3c:	4b07      	ldr	r3, [pc, #28]	; (800af5c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800af3e:	213f      	movs	r1, #63	; 0x3f
 800af40:	4a07      	ldr	r2, [pc, #28]	; (800af60 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800af42:	4808      	ldr	r0, [pc, #32]	; (800af64 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800af44:	f00c f8f2 	bl	801712c <__assert_func>
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	68a2      	ldr	r2, [r4, #8]
 800af4c:	f3bf 8f5b 	dmb	ish
 800af50:	3301      	adds	r3, #1
 800af52:	429a      	cmp	r2, r3
 800af54:	bfd8      	it	le
 800af56:	1a9b      	suble	r3, r3, r2
 800af58:	6123      	str	r3, [r4, #16]
 800af5a:	bd10      	pop	{r4, pc}
 800af5c:	08019ad7 	.word	0x08019ad7
 800af60:	08019ba6 	.word	0x08019ba6
 800af64:	08019a8e 	.word	0x08019a8e

0800af68 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	4604      	mov	r4, r0
 800af6c:	6840      	ldr	r0, [r0, #4]
 800af6e:	6803      	ldr	r3, [r0, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4798      	blx	r3
 800af74:	4605      	mov	r5, r0
 800af76:	b930      	cbnz	r0, 800af86 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800af78:	7a23      	ldrb	r3, [r4, #8]
 800af7a:	b123      	cbz	r3, 800af86 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800af7c:	6860      	ldr	r0, [r4, #4]
 800af7e:	6803      	ldr	r3, [r0, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	4798      	blx	r3
 800af84:	7225      	strb	r5, [r4, #8]
 800af86:	6860      	ldr	r0, [r4, #4]
 800af88:	6803      	ldr	r3, [r0, #0]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4798      	blx	r3
 800af8e:	b928      	cbnz	r0, 800af9c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	4620      	mov	r0, r4
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af9a:	4718      	bx	r3
 800af9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afa0:	f7fd bf3c 	b.w	8008e1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800afa4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800afa4:	b510      	push	{r4, lr}
 800afa6:	6082      	str	r2, [r0, #8]
 800afa8:	2200      	movs	r2, #0
 800afaa:	4c03      	ldr	r4, [pc, #12]	; (800afb8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800afac:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800afb0:	e9c0 4100 	strd	r4, r1, [r0]
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	bf00      	nop
 800afb8:	08019b0c 	.word	0x08019b0c

0800afbc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800afbc:	6840      	ldr	r0, [r0, #4]
 800afbe:	6803      	ldr	r3, [r0, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4718      	bx	r3

0800afc4 <_ZN8touchgfx17AbstractDataGraph8setScaleEi>:
 800afc4:	62c1      	str	r1, [r0, #44]	; 0x2c
 800afc6:	4770      	bx	lr

0800afc8 <_ZNK8touchgfx17AbstractDataGraph19getXAxisScaleScaledEv>:
 800afc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800afca:	4770      	bx	lr

0800afcc <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 800afcc:	2300      	movs	r3, #0
 800afce:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 800afd2:	4770      	bx	lr

0800afd4 <_ZNK8touchgfx17AbstractDataGraph18indexToGlobalIndexEs>:
 800afd4:	4608      	mov	r0, r1
 800afd6:	4770      	bx	lr

0800afd8 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 800afd8:	b530      	push	{r4, r5, lr}
 800afda:	460d      	mov	r5, r1
 800afdc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800afde:	8949      	ldrh	r1, [r1, #10]
 800afe0:	b085      	sub	sp, #20
 800afe2:	4604      	mov	r4, r0
 800afe4:	1ac9      	subs	r1, r1, r3
 800afe6:	6803      	ldr	r3, [r0, #0]
 800afe8:	f10d 0206 	add.w	r2, sp, #6
 800afec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aff0:	b209      	sxth	r1, r1
 800aff2:	4798      	blx	r3
 800aff4:	b1a0      	cbz	r0, 800b020 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800aff6:	792b      	ldrb	r3, [r5, #4]
 800aff8:	b993      	cbnz	r3, 800b020 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800affa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800affe:	b178      	cbz	r0, 800b020 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800b000:	6803      	ldr	r3, [r0, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	4798      	blx	r3
 800b006:	b158      	cbz	r0, 800b020 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800b008:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800b00c:	aa02      	add	r2, sp, #8
 800b00e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800b012:	4621      	mov	r1, r4
 800b014:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b018:	9503      	str	r5, [sp, #12]
 800b01a:	6803      	ldr	r3, [r0, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	4798      	blx	r3
 800b020:	b005      	add	sp, #20
 800b022:	bd30      	pop	{r4, r5, pc}

0800b024 <_ZNK8touchgfx17AbstractDataGraph20getXAxisOffsetScaledEv>:
 800b024:	2000      	movs	r0, #0
 800b026:	4770      	bx	lr

0800b028 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>:
 800b028:	b410      	push	{r4}
 800b02a:	6804      	ldr	r4, [r0, #0]
 800b02c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b02e:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
 800b032:	435a      	muls	r2, r3
 800b034:	4359      	muls	r1, r3
 800b036:	4623      	mov	r3, r4
 800b038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b03c:	4718      	bx	r3

0800b03e <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMinEv>:
 800b03e:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 800b042:	4770      	bx	lr

0800b044 <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMaxEv>:
 800b044:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800b048:	4770      	bx	lr

0800b04a <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMinAsFloatEv>:
 800b04a:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
 800b04e:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 800b052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b056:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b05a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b05e:	4770      	bx	lr

0800b060 <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMaxAsFloatEv>:
 800b060:	edd0 7a51 	vldr	s15, [r0, #324]	; 0x144
 800b064:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 800b068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b06c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b070:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b074:	4770      	bx	lr

0800b076 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEi>:
 800b076:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b078:	6803      	ldr	r3, [r0, #0]
 800b07a:	4351      	muls	r1, r2
 800b07c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b080:	4718      	bx	r3

0800b082 <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisScaleAsFloatEv>:
 800b082:	b510      	push	{r4, lr}
 800b084:	6803      	ldr	r3, [r0, #0]
 800b086:	4604      	mov	r4, r0
 800b088:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b08c:	4798      	blx	r3
 800b08e:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800b092:	ee07 0a90 	vmov	s15, r0
 800b096:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b09a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b09e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b0a2:	bd10      	pop	{r4, pc}

0800b0a4 <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEi>:
 800b0a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b0a6:	6803      	ldr	r3, [r0, #0]
 800b0a8:	4351      	muls	r1, r2
 800b0aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b0ae:	4718      	bx	r3

0800b0b0 <_ZNK8touchgfx22AbstractDataGraphWithY21getXAxisOffsetAsFloatEv>:
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	6803      	ldr	r3, [r0, #0]
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b0ba:	4798      	blx	r3
 800b0bc:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800b0c0:	ee07 0a90 	vmov	s15, r0
 800b0c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b0c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b0d0:	bd10      	pop	{r4, pc}

0800b0d2 <_ZN8touchgfx22AbstractDataGraphWithY14beforeAddValueEv>:
 800b0d2:	4770      	bx	lr

0800b0d4 <_ZNK8touchgfx22AbstractDataGraphWithY9realIndexEs>:
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	4770      	bx	lr

0800b0d8 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointXScaledEs>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	6803      	ldr	r3, [r0, #0]
 800b0dc:	4604      	mov	r4, r0
 800b0de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b0e2:	4798      	blx	r3
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b0ee:	4798      	blx	r3
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	4345      	muls	r5, r0
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b0fa:	4798      	blx	r3
 800b0fc:	4428      	add	r0, r5
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}

0800b100 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointYScaledEs>:
 800b100:	b510      	push	{r4, lr}
 800b102:	6803      	ldr	r3, [r0, #0]
 800b104:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
 800b108:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b10c:	4798      	blx	r3
 800b10e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b112:	bd10      	pop	{r4, pc}

0800b114 <_ZN8touchgfx22AbstractDataGraphWithY19setXAxisScaleScaledEi>:
 800b114:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
 800b118:	4770      	bx	lr

0800b11a <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisScaleScaledEv>:
 800b11a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 800b11e:	4770      	bx	lr

0800b120 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMinScaledEv>:
 800b120:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800b124:	4770      	bx	lr

0800b126 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMaxScaledEv>:
 800b126:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 800b12a:	4770      	bx	lr

0800b12c <_ZN8touchgfx22AbstractDataGraphWithY20setXAxisOffsetScaledEi>:
 800b12c:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 800b130:	4770      	bx	lr

0800b132 <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisOffsetScaledEv>:
 800b132:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 800b136:	4770      	bx	lr

0800b138 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenXQ5Es>:
 800b138:	6803      	ldr	r3, [r0, #0]
 800b13a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b13e:	4718      	bx	r3

0800b140 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenYQ5Es>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	6803      	ldr	r3, [r0, #0]
 800b144:	4604      	mov	r4, r0
 800b146:	f8d0 6128 	ldr.w	r6, [r0, #296]	; 0x128
 800b14a:	f8d3 50d4 	ldr.w	r5, [r3, #212]	; 0xd4
 800b14e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b152:	4798      	blx	r3
 800b154:	462b      	mov	r3, r5
 800b156:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 800b15a:	4620      	mov	r0, r4
 800b15c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b160:	4718      	bx	r3
	...

0800b164 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>:
 800b164:	4291      	cmp	r1, r2
 800b166:	b510      	push	{r4, lr}
 800b168:	4604      	mov	r4, r0
 800b16a:	d106      	bne.n	800b17a <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x16>
 800b16c:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x54>)
 800b16e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800b172:	4a12      	ldr	r2, [pc, #72]	; (800b1bc <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x58>)
 800b174:	4812      	ldr	r0, [pc, #72]	; (800b1c0 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x5c>)
 800b176:	f00b ffd9 	bl	801712c <__assert_func>
 800b17a:	bfc2      	ittt	gt
 800b17c:	460b      	movgt	r3, r1
 800b17e:	4611      	movgt	r1, r2
 800b180:	461a      	movgt	r2, r3
 800b182:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800b186:	428b      	cmp	r3, r1
 800b188:	d103      	bne.n	800b192 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x2e>
 800b18a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 800b18e:	4293      	cmp	r3, r2
 800b190:	d011      	beq.n	800b1b6 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x52>
 800b192:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 800b196:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800b19a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
 800b19e:	f003 fd9f 	bl	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>
 800b1a2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800b1a6:	f003 fd9b 	bl	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>
 800b1aa:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 800b1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b2:	f003 bd95 	b.w	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>
 800b1b6:	bd10      	pop	{r4, pc}
 800b1b8:	08019bd6 	.word	0x08019bd6
 800b1bc:	08019e48 	.word	0x08019e48
 800b1c0:	08019be1 	.word	0x08019be1

0800b1c4 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii>:
 800b1c4:	4291      	cmp	r1, r2
 800b1c6:	b510      	push	{r4, lr}
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	d106      	bne.n	800b1da <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x16>
 800b1cc:	4b12      	ldr	r3, [pc, #72]	; (800b218 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x54>)
 800b1ce:	f240 21c1 	movw	r1, #705	; 0x2c1
 800b1d2:	4a12      	ldr	r2, [pc, #72]	; (800b21c <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x58>)
 800b1d4:	4812      	ldr	r0, [pc, #72]	; (800b220 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x5c>)
 800b1d6:	f00b ffa9 	bl	801712c <__assert_func>
 800b1da:	bfc2      	ittt	gt
 800b1dc:	460b      	movgt	r3, r1
 800b1de:	4611      	movgt	r1, r2
 800b1e0:	461a      	movgt	r2, r3
 800b1e2:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 800b1e6:	428b      	cmp	r3, r1
 800b1e8:	d103      	bne.n	800b1f2 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x2e>
 800b1ea:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d011      	beq.n	800b216 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x52>
 800b1f2:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 800b1f6:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800b1fa:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
 800b1fe:	f003 fd6f 	bl	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>
 800b202:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800b206:	f003 fd6b 	bl	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>
 800b20a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800b20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b212:	f003 bd65 	b.w	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>
 800b216:	bd10      	pop	{r4, pc}
 800b218:	08019bd6 	.word	0x08019bd6
 800b21c:	08019e90 	.word	0x08019e90
 800b220:	08019be1 	.word	0x08019be1

0800b224 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 800b224:	b530      	push	{r4, r5, lr}
 800b226:	790b      	ldrb	r3, [r1, #4]
 800b228:	b085      	sub	sp, #20
 800b22a:	4604      	mov	r4, r0
 800b22c:	460d      	mov	r5, r1
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d020      	beq.n	800b274 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800b232:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800b234:	f10d 0206 	add.w	r2, sp, #6
 800b238:	88c9      	ldrh	r1, [r1, #6]
 800b23a:	1ac9      	subs	r1, r1, r3
 800b23c:	6803      	ldr	r3, [r0, #0]
 800b23e:	b209      	sxth	r1, r1
 800b240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b244:	4798      	blx	r3
 800b246:	b1a8      	cbz	r0, 800b274 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800b248:	792b      	ldrb	r3, [r5, #4]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d812      	bhi.n	800b274 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800b24e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 800b252:	b178      	cbz	r0, 800b274 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800b254:	6803      	ldr	r3, [r0, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	4798      	blx	r3
 800b25a:	b158      	cbz	r0, 800b274 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800b25c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800b260:	aa02      	add	r2, sp, #8
 800b262:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 800b266:	4621      	mov	r1, r4
 800b268:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b26c:	9503      	str	r5, [sp, #12]
 800b26e:	6803      	ldr	r3, [r0, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	4798      	blx	r3
 800b274:	b005      	add	sp, #20
 800b276:	bd30      	pop	{r4, r5, pc}

0800b278 <_ZN8touchgfx8DrawableC1Ev>:
 800b278:	4a0a      	ldr	r2, [pc, #40]	; (800b2a4 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800b27a:	6002      	str	r2, [r0, #0]
 800b27c:	2200      	movs	r2, #0
 800b27e:	8082      	strh	r2, [r0, #4]
 800b280:	80c2      	strh	r2, [r0, #6]
 800b282:	8102      	strh	r2, [r0, #8]
 800b284:	8142      	strh	r2, [r0, #10]
 800b286:	8182      	strh	r2, [r0, #12]
 800b288:	81c2      	strh	r2, [r0, #14]
 800b28a:	8202      	strh	r2, [r0, #16]
 800b28c:	8242      	strh	r2, [r0, #18]
 800b28e:	61c2      	str	r2, [r0, #28]
 800b290:	8402      	strh	r2, [r0, #32]
 800b292:	8442      	strh	r2, [r0, #34]	; 0x22
 800b294:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800b298:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800b2a2:	4770      	bx	lr
 800b2a4:	0801a798 	.word	0x0801a798

0800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>:
 800b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ac:	461e      	mov	r6, r3
 800b2ae:	6803      	ldr	r3, [r0, #0]
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	4617      	mov	r7, r2
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 800b2ba:	4798      	blx	r3
 800b2bc:	6823      	ldr	r3, [r4, #0]
 800b2be:	4639      	mov	r1, r7
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c4:	4798      	blx	r3
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ce:	4790      	blx	r2
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	4718      	bx	r3

0800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 800b2de:	6800      	ldr	r0, [r0, #0]
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	bfbd      	ittte	lt
 800b2e4:	380f      	sublt	r0, #15
 800b2e6:	2320      	movlt	r3, #32
 800b2e8:	fb90 f0f3 	sdivlt	r0, r0, r3
 800b2ec:	3010      	addge	r0, #16
 800b2ee:	bfa8      	it	ge
 800b2f0:	1140      	asrge	r0, r0, #5
 800b2f2:	4770      	bx	lr

0800b2f4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
 800b2f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2f6:	ab01      	add	r3, sp, #4
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	f003 fe90 	bl	800f01e <_ZN8touchgfx6muldivElllRl>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	462a      	mov	r2, r5
 800b302:	9901      	ldr	r1, [sp, #4]
 800b304:	ea4f 1440 	mov.w	r4, r0, lsl #5
 800b308:	f04f 0020 	mov.w	r0, #32
 800b30c:	db04      	blt.n	800b318 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
 800b30e:	f003 fea5 	bl	800f05c <_ZN8touchgfx6muldivElll>
 800b312:	4420      	add	r0, r4
 800b314:	b003      	add	sp, #12
 800b316:	bd30      	pop	{r4, r5, pc}
 800b318:	f003 fea0 	bl	800f05c <_ZN8touchgfx6muldivElll>
 800b31c:	1a20      	subs	r0, r4, r0
 800b31e:	e7f9      	b.n	800b314 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

0800b320 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>:
 800b320:	ee07 0a90 	vmov	s15, r0
 800b324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b328:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b32c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b334:	db08      	blt.n	800b348 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi+0x28>
 800b336:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b33a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b33e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b342:	ee17 0a90 	vmov	r0, s15
 800b346:	4770      	bx	lr
 800b348:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b34c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b350:	ee17 3a90 	vmov	r3, s15
 800b354:	1e58      	subs	r0, r3, #1
 800b356:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b35a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b35e:	ee30 0a07 	vadd.f32	s0, s0, s14
 800b362:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b366:	ee10 3a10 	vmov	r3, s0
 800b36a:	4403      	add	r3, r0
 800b36c:	4618      	mov	r0, r3
 800b36e:	4770      	bx	lr

0800b370 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEff>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	ed2d 8b02 	vpush	{d8}
 800b376:	eeb0 8a60 	vmov.f32	s16, s1
 800b37a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800b37c:	4604      	mov	r4, r0
 800b37e:	4628      	mov	r0, r5
 800b380:	f7ff ffce 	bl	800b320 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 800b384:	eeb0 0a48 	vmov.f32	s0, s16
 800b388:	4606      	mov	r6, r0
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7ff ffc8 	bl	800b320 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	4602      	mov	r2, r0
 800b394:	4631      	mov	r1, r6
 800b396:	4620      	mov	r0, r4
 800b398:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b39c:	ecbd 8b02 	vpop	{d8}
 800b3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3a4:	4718      	bx	r3

0800b3a6 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEf>:
 800b3a6:	b510      	push	{r4, lr}
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800b3ac:	f7ff ffb8 	bl	800b320 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3be:	4718      	bx	r3

0800b3c0 <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEf>:
 800b3c0:	b510      	push	{r4, lr}
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800b3c6:	f7ff ffab 	bl	800b320 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d8:	4718      	bx	r3

0800b3da <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>:
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	db07      	blt.n	800b3ee <_ZN8touchgfx17AbstractDataGraph10scaled2intEii+0x14>
 800b3de:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800b3e2:	fb90 f0f1 	sdiv	r0, r0, r1
 800b3e6:	2102      	movs	r1, #2
 800b3e8:	fb90 f0f1 	sdiv	r0, r0, r1
 800b3ec:	4770      	bx	lr
 800b3ee:	f06f 0301 	mvn.w	r3, #1
 800b3f2:	fb03 1000 	mla	r0, r3, r0, r1
 800b3f6:	3801      	subs	r0, #1
 800b3f8:	fb90 f0f1 	sdiv	r0, r0, r1
 800b3fc:	2102      	movs	r1, #2
 800b3fe:	fb90 f0f1 	sdiv	r0, r0, r1
 800b402:	4240      	negs	r0, r0
 800b404:	4770      	bx	lr

0800b406 <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMinAsIntEv>:
 800b406:	b508      	push	{r3, lr}
 800b408:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b40a:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800b40e:	f7ff ffe4 	bl	800b3da <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 800b412:	bd08      	pop	{r3, pc}

0800b414 <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMaxAsIntEv>:
 800b414:	b508      	push	{r3, lr}
 800b416:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b418:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 800b41c:	f7ff ffdd 	bl	800b3da <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 800b420:	bd08      	pop	{r3, pc}

0800b422 <_ZNK8touchgfx22AbstractDataGraphWithY18getXAxisScaleAsIntEv>:
 800b422:	b510      	push	{r4, lr}
 800b424:	6803      	ldr	r3, [r0, #0]
 800b426:	4604      	mov	r4, r0
 800b428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b42c:	4798      	blx	r3
 800b42e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b430:	f7ff ffd3 	bl	800b3da <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 800b434:	bd10      	pop	{r4, pc}

0800b436 <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisOffsetAsIntEv>:
 800b436:	b510      	push	{r4, lr}
 800b438:	6803      	ldr	r3, [r0, #0]
 800b43a:	4604      	mov	r4, r0
 800b43c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b440:	4798      	blx	r3
 800b442:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b444:	f7ff ffc9 	bl	800b3da <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 800b448:	bd10      	pop	{r4, pc}

0800b44a <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>:
 800b44a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 800b44e:	4770      	bx	lr

0800b450 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 800b450:	f8a0 3114 	strh.w	r3, [r0, #276]	; 0x114
 800b454:	f9bd 3000 	ldrsh.w	r3, [sp]
 800b458:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
 800b45c:	f8a0 2112 	strh.w	r2, [r0, #274]	; 0x112
 800b460:	f8a0 3116 	strh.w	r3, [r0, #278]	; 0x116
 800b464:	4770      	bx	lr

0800b466 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>:
 800b466:	f9b0 0110 	ldrsh.w	r0, [r0, #272]	; 0x110
 800b46a:	4770      	bx	lr

0800b46c <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>:
 800b46c:	f9b0 0112 	ldrsh.w	r0, [r0, #274]	; 0x112
 800b470:	4770      	bx	lr

0800b472 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>:
 800b472:	f8b0 3112 	ldrh.w	r3, [r0, #274]	; 0x112
 800b476:	f8b0 2114 	ldrh.w	r2, [r0, #276]	; 0x114
 800b47a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 800b47c:	4413      	add	r3, r2
 800b47e:	1ac0      	subs	r0, r0, r3
 800b480:	b200      	sxth	r0, r0
 800b482:	4770      	bx	lr

0800b484 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_>:
 800b484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	4690      	mov	r8, r2
 800b48a:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 800b48e:	4604      	mov	r4, r0
 800b490:	461e      	mov	r6, r3
 800b492:	9d06      	ldr	r5, [sp, #24]
 800b494:	b92a      	cbnz	r2, 800b4a2 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 800b496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b49a:	802b      	strh	r3, [r5, #0]
 800b49c:	8033      	strh	r3, [r6, #0]
 800b49e:	2000      	movs	r0, #0
 800b4a0:	e009      	b.n	800b4b6 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 800b4a2:	f7ff ffe6 	bl	800b472 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 800b4a6:	2801      	cmp	r0, #1
 800b4a8:	d107      	bne.n	800b4ba <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x36>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	8033      	strh	r3, [r6, #0]
 800b4ae:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	802b      	strh	r3, [r5, #0]
 800b4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ba:	f9b4 c112 	ldrsh.w	ip, [r4, #274]	; 0x112
 800b4be:	1e42      	subs	r2, r0, #1
 800b4c0:	f8d4 713c 	ldr.w	r7, [r4, #316]	; 0x13c
 800b4c4:	eba1 0c0c 	sub.w	ip, r1, ip
 800b4c8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800b4cc:	ea4f 104c 	mov.w	r0, ip, lsl #5
 800b4d0:	1af9      	subs	r1, r7, r3
 800b4d2:	f003 fdc3 	bl	800f05c <_ZN8touchgfx6muldivElll>
 800b4d6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800b4da:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800b4de:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	1ac9      	subs	r1, r1, r3
 800b4e6:	f7ff ffc4 	bl	800b472 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 800b4ea:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 800b4ee:	1e42      	subs	r2, r0, #1
 800b4f0:	eba8 0803 	sub.w	r8, r8, r3
 800b4f4:	ea4f 1048 	mov.w	r0, r8, lsl #5
 800b4f8:	f003 fdb0 	bl	800f05c <_ZN8touchgfx6muldivElll>
 800b4fc:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800b500:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800b504:	4287      	cmp	r7, r0
 800b506:	bfc2      	ittt	gt
 800b508:	463b      	movgt	r3, r7
 800b50a:	4607      	movgt	r7, r0
 800b50c:	4618      	movgt	r0, r3
 800b50e:	2800      	cmp	r0, #0
 800b510:	bfb5      	itete	lt
 800b512:	2320      	movlt	r3, #32
 800b514:	301f      	addge	r0, #31
 800b516:	fb90 f0f3 	sdivlt	r0, r0, r3
 800b51a:	1140      	asrge	r0, r0, #5
 800b51c:	2800      	cmp	r0, #0
 800b51e:	da03      	bge.n	800b528 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xa4>
 800b520:	2000      	movs	r0, #0
 800b522:	8028      	strh	r0, [r5, #0]
 800b524:	8030      	strh	r0, [r6, #0]
 800b526:	e7c6      	b.n	800b4b6 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 800b528:	2320      	movs	r3, #32
 800b52a:	fb97 f7f3 	sdiv	r7, r7, r3
 800b52e:	f9b4 311a 	ldrsh.w	r3, [r4, #282]	; 0x11a
 800b532:	3b01      	subs	r3, #1
 800b534:	429f      	cmp	r7, r3
 800b536:	dd03      	ble.n	800b540 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xbc>
 800b538:	b218      	sxth	r0, r3
 800b53a:	8028      	strh	r0, [r5, #0]
 800b53c:	8030      	strh	r0, [r6, #0]
 800b53e:	e7ae      	b.n	800b49e <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800b540:	4283      	cmp	r3, r0
 800b542:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800b546:	bfb8      	it	lt
 800b548:	b218      	sxthlt	r0, r3
 800b54a:	8037      	strh	r7, [r6, #0]
 800b54c:	bfa8      	it	ge
 800b54e:	b200      	sxthge	r0, r0
 800b550:	8028      	strh	r0, [r5, #0]
 800b552:	2001      	movs	r0, #1
 800b554:	e7af      	b.n	800b4b6 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>

0800b556 <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenXQ5Ei>:
 800b556:	b570      	push	{r4, r5, r6, lr}
 800b558:	4604      	mov	r4, r0
 800b55a:	f8d0 5138 	ldr.w	r5, [r0, #312]	; 0x138
 800b55e:	1b4e      	subs	r6, r1, r5
 800b560:	f7ff ff87 	bl	800b472 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 800b564:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800b568:	1e41      	subs	r1, r0, #1
 800b56a:	4630      	mov	r0, r6
 800b56c:	1b52      	subs	r2, r2, r5
 800b56e:	f7ff fec1 	bl	800b2f4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800b572:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 800b576:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800b57a:	bd70      	pop	{r4, r5, r6, pc}

0800b57c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>:
 800b57c:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
 800b580:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
 800b584:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 800b586:	4413      	add	r3, r2
 800b588:	1ac0      	subs	r0, r0, r3
 800b58a:	b200      	sxth	r0, r0
 800b58c:	4770      	bx	lr

0800b58e <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenYQ5Ei>:
 800b58e:	b570      	push	{r4, r5, r6, lr}
 800b590:	4605      	mov	r5, r0
 800b592:	460e      	mov	r6, r1
 800b594:	f7ff fff2 	bl	800b57c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 800b598:	1e41      	subs	r1, r0, #1
 800b59a:	f9b5 4110 	ldrsh.w	r4, [r5, #272]	; 0x110
 800b59e:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800b5a2:	4404      	add	r4, r0
 800b5a4:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 800b5a8:	1af0      	subs	r0, r6, r3
 800b5aa:	3c01      	subs	r4, #1
 800b5ac:	1ad2      	subs	r2, r2, r3
 800b5ae:	f7ff fea1 	bl	800b2f4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800b5b2:	0164      	lsls	r4, r4, #5
 800b5b4:	1a20      	subs	r0, r4, r0
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}

0800b5b8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 800b5b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	3034      	adds	r0, #52	; 0x34
 800b5be:	460d      	mov	r5, r1
 800b5c0:	f7fe fad0 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800b5c4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 800b5c8:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	9200      	str	r2, [sp, #0]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	f7ff fe68 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b5d8:	b003      	add	sp, #12
 800b5da:	bd30      	pop	{r4, r5, pc}

0800b5dc <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>:
 800b5dc:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 800b5e0:	4770      	bx	lr

0800b5e2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>:
 800b5e2:	b507      	push	{r0, r1, r2, lr}
 800b5e4:	6803      	ldr	r3, [r0, #0]
 800b5e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5ea:	4798      	blx	r3
 800b5ec:	ab02      	add	r3, sp, #8
 800b5ee:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff fe73 	bl	800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800b5f8:	b200      	sxth	r0, r0
 800b5fa:	b003      	add	sp, #12
 800b5fc:	f85d fb04 	ldr.w	pc, [sp], #4

0800b600 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 800b600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b602:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 800b606:	b085      	sub	sp, #20
 800b608:	4605      	mov	r5, r0
 800b60a:	460f      	mov	r7, r1
 800b60c:	4616      	mov	r6, r2
 800b60e:	b333      	cbz	r3, 800b65e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5e>
 800b610:	6803      	ldr	r3, [r0, #0]
 800b612:	f10d 020e 	add.w	r2, sp, #14
 800b616:	9200      	str	r2, [sp, #0]
 800b618:	460a      	mov	r2, r1
 800b61a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 800b61e:	ab03      	add	r3, sp, #12
 800b620:	47a0      	blx	r4
 800b622:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800b626:	4628      	mov	r0, r5
 800b628:	f7ff ffdb 	bl	800b5e2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 800b62c:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 800b630:	4604      	mov	r4, r0
 800b632:	4628      	mov	r0, r5
 800b634:	f7ff ffd5 	bl	800b5e2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 800b638:	1bc0      	subs	r0, r0, r7
 800b63a:	1be4      	subs	r4, r4, r7
 800b63c:	2800      	cmp	r0, #0
 800b63e:	bfb8      	it	lt
 800b640:	4240      	neglt	r0, r0
 800b642:	2c00      	cmp	r4, #0
 800b644:	bfb8      	it	lt
 800b646:	4264      	neglt	r4, r4
 800b648:	42a0      	cmp	r0, r4
 800b64a:	f04f 0001 	mov.w	r0, #1
 800b64e:	bfac      	ite	ge
 800b650:	f9bd 300c 	ldrshge.w	r3, [sp, #12]
 800b654:	f9bd 300e 	ldrshlt.w	r3, [sp, #14]
 800b658:	8033      	strh	r3, [r6, #0]
 800b65a:	b005      	add	sp, #20
 800b65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b65e:	4618      	mov	r0, r3
 800b660:	e7fb      	b.n	800b65a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5a>

0800b662 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>:
 800b662:	b507      	push	{r0, r1, r2, lr}
 800b664:	6803      	ldr	r3, [r0, #0]
 800b666:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b66a:	4798      	blx	r3
 800b66c:	ab02      	add	r3, sp, #8
 800b66e:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff fe33 	bl	800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800b678:	b200      	sxth	r0, r0
 800b67a:	b003      	add	sp, #12
 800b67c:	f85d fb04 	ldr.w	pc, [sp], #4

0800b680 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 800b680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	4605      	mov	r5, r0
 800b686:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 800b68a:	4689      	mov	r9, r1
 800b68c:	4692      	mov	sl, r2
 800b68e:	469b      	mov	fp, r3
 800b690:	b338      	cbz	r0, 800b6e2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x62>
 800b692:	2700      	movs	r7, #0
 800b694:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800b698:	b23e      	sxth	r6, r7
 800b69a:	f9b5 311a 	ldrsh.w	r3, [r5, #282]	; 0x11a
 800b69e:	42b3      	cmp	r3, r6
 800b6a0:	dd1e      	ble.n	800b6e0 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x60>
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	f7ff ff9c 	bl	800b5e2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 800b6aa:	eba0 0409 	sub.w	r4, r0, r9
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	2c00      	cmp	r4, #0
 800b6b4:	f107 0701 	add.w	r7, r7, #1
 800b6b8:	bfb8      	it	lt
 800b6ba:	4264      	neglt	r4, r4
 800b6bc:	f7ff ffd1 	bl	800b662 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>
 800b6c0:	eba0 000a 	sub.w	r0, r0, sl
 800b6c4:	b224      	sxth	r4, r4
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	bfb8      	it	lt
 800b6ca:	4240      	neglt	r0, r0
 800b6cc:	fb10 f000 	smulbb	r0, r0, r0
 800b6d0:	fb04 0004 	mla	r0, r4, r4, r0
 800b6d4:	4540      	cmp	r0, r8
 800b6d6:	bfbc      	itt	lt
 800b6d8:	f8ab 6000 	strhlt.w	r6, [fp]
 800b6dc:	4680      	movlt	r8, r0
 800b6de:	e7db      	b.n	800b698 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6e6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 800b6e6:	b538      	push	{r3, r4, r5, lr}
 800b6e8:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	428b      	cmp	r3, r1
 800b6f0:	dd08      	ble.n	800b704 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800b6f2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800b6f4:	b134      	cbz	r4, 800b704 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6fe:	4798      	blx	r3
 800b700:	69a4      	ldr	r4, [r4, #24]
 800b702:	e7f7      	b.n	800b6f4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 800b704:	bd38      	pop	{r3, r4, r5, pc}

0800b706 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>:
 800b706:	3034      	adds	r0, #52	; 0x34
 800b708:	f003 baea 	b.w	800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>

0800b70c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	4606      	mov	r6, r0
 800b710:	460d      	mov	r5, r1
 800b712:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
 800b716:	b134      	cbz	r4, 800b726 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	4620      	mov	r0, r4
 800b71c:	4629      	mov	r1, r5
 800b71e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b720:	4798      	blx	r3
 800b722:	69a4      	ldr	r4, [r4, #24]
 800b724:	e7f7      	b.n	800b716 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 800b726:	f8d6 410c 	ldr.w	r4, [r6, #268]	; 0x10c
 800b72a:	b134      	cbz	r4, 800b73a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	4620      	mov	r0, r4
 800b730:	4629      	mov	r1, r5
 800b732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b734:	4798      	blx	r3
 800b736:	69a4      	ldr	r4, [r4, #24]
 800b738:	e7f7      	b.n	800b72a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 800b73a:	bd70      	pop	{r4, r5, r6, pc}

0800b73c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 800b73c:	b570      	push	{r4, r5, r6, lr}
 800b73e:	6803      	ldr	r3, [r0, #0]
 800b740:	4605      	mov	r5, r0
 800b742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b746:	4798      	blx	r3
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	4604      	mov	r4, r0
 800b74c:	4628      	mov	r0, r5
 800b74e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b752:	4798      	blx	r3
 800b754:	4284      	cmp	r4, r0
 800b756:	4606      	mov	r6, r0
 800b758:	bfc2      	ittt	gt
 800b75a:	b223      	sxthgt	r3, r4
 800b75c:	4604      	movgt	r4, r0
 800b75e:	461e      	movgt	r6, r3
 800b760:	42a6      	cmp	r6, r4
 800b762:	db05      	blt.n	800b770 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x34>
 800b764:	b221      	sxth	r1, r4
 800b766:	4628      	mov	r0, r5
 800b768:	f7ff ffd0 	bl	800b70c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 800b76c:	3401      	adds	r4, #1
 800b76e:	e7f7      	b.n	800b760 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x24>
 800b770:	bd70      	pop	{r4, r5, r6, pc}

0800b772 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 800b772:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b774:	4604      	mov	r4, r0
 800b776:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800b778:	b15d      	cbz	r5, 800b792 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 800b77a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 800b77e:	4628      	mov	r0, r5
 800b780:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 800b784:	9200      	str	r2, [sp, #0]
 800b786:	2200      	movs	r2, #0
 800b788:	4611      	mov	r1, r2
 800b78a:	f7ff fd8d 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b78e:	69ad      	ldr	r5, [r5, #24]
 800b790:	e7f2      	b.n	800b778 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 800b792:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 800b796:	b15d      	cbz	r5, 800b7b0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 800b798:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	; 0xc2
 800b79c:	4628      	mov	r0, r5
 800b79e:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	; 0xc0
 800b7a2:	9200      	str	r2, [sp, #0]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	f7ff fd7e 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b7ac:	69ad      	ldr	r5, [r5, #24]
 800b7ae:	e7f2      	b.n	800b796 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 800b7b0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800b7b4:	b15d      	cbz	r5, 800b7ce <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 800b7b6:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 800b7c0:	9200      	str	r2, [sp, #0]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	f7ff fd6f 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b7ca:	69ad      	ldr	r5, [r5, #24]
 800b7cc:	e7f2      	b.n	800b7b4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 800b7ce:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800b7d2:	b15d      	cbz	r5, 800b7ec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 800b7d4:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f9b4 3094 	ldrsh.w	r3, [r4, #148]	; 0x94
 800b7de:	9200      	str	r2, [sp, #0]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	f7ff fd60 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b7e8:	69ad      	ldr	r5, [r5, #24]
 800b7ea:	e7f2      	b.n	800b7d2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 800b7ec:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800b7f0:	b15d      	cbz	r5, 800b80a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 800b7f2:	f9b4 20ee 	ldrsh.w	r2, [r4, #238]	; 0xee
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f9b4 30ec 	ldrsh.w	r3, [r4, #236]	; 0xec
 800b7fc:	9200      	str	r2, [sp, #0]
 800b7fe:	2200      	movs	r2, #0
 800b800:	4611      	mov	r1, r2
 800b802:	f7ff fd51 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b806:	69ad      	ldr	r5, [r5, #24]
 800b808:	e7f2      	b.n	800b7f0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	4620      	mov	r0, r4
 800b80e:	695b      	ldr	r3, [r3, #20]
 800b810:	b003      	add	sp, #12
 800b812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b816:	4718      	bx	r3

0800b818 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 800b818:	b430      	push	{r4, r5}
 800b81a:	b28a      	uxth	r2, r1
 800b81c:	f8b0 4094 	ldrh.w	r4, [r0, #148]	; 0x94
 800b820:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
 800b824:	1b15      	subs	r5, r2, r4
 800b826:	f8a0 10ec 	strh.w	r1, [r0, #236]	; 0xec
 800b82a:	8101      	strh	r1, [r0, #8]
 800b82c:	f8a0 5090 	strh.w	r5, [r0, #144]	; 0x90
 800b830:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 800b834:	442c      	add	r4, r5
 800b836:	1b12      	subs	r2, r2, r4
 800b838:	bc30      	pop	{r4, r5}
 800b83a:	8782      	strh	r2, [r0, #60]	; 0x3c
 800b83c:	f7ff bf99 	b.w	800b772 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800b840 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 800b840:	b430      	push	{r4, r5}
 800b842:	b28a      	uxth	r2, r1
 800b844:	f8b0 40ee 	ldrh.w	r4, [r0, #238]	; 0xee
 800b848:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 800b84c:	1b15      	subs	r5, r2, r4
 800b84e:	f8a0 1096 	strh.w	r1, [r0, #150]	; 0x96
 800b852:	8141      	strh	r1, [r0, #10]
 800b854:	f8a0 50ea 	strh.w	r5, [r0, #234]	; 0xea
 800b858:	f8b0 50c2 	ldrh.w	r5, [r0, #194]	; 0xc2
 800b85c:	442c      	add	r4, r5
 800b85e:	1b12      	subs	r2, r2, r4
 800b860:	bc30      	pop	{r4, r5}
 800b862:	87c2      	strh	r2, [r0, #62]	; 0x3e
 800b864:	f7ff bf85 	b.w	800b772 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800b868 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 800b868:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b86c:	fa1f fa83 	uxth.w	sl, r3
 800b870:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800b874:	4615      	mov	r5, r2
 800b876:	4699      	mov	r9, r3
 800b878:	fa1f f887 	uxth.w	r8, r7
 800b87c:	8903      	ldrh	r3, [r0, #8]
 800b87e:	4452      	add	r2, sl
 800b880:	4604      	mov	r4, r0
 800b882:	8940      	ldrh	r0, [r0, #10]
 800b884:	460e      	mov	r6, r1
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	eb08 0201 	add.w	r2, r8, r1
 800b88c:	1a80      	subs	r0, r0, r2
 800b88e:	b21b      	sxth	r3, r3
 800b890:	460a      	mov	r2, r1
 800b892:	4629      	mov	r1, r5
 800b894:	b200      	sxth	r0, r0
 800b896:	9000      	str	r0, [sp, #0]
 800b898:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800b89c:	f7ff fd04 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800b8a6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	9600      	str	r6, [sp, #0]
 800b8ae:	f7ff fcfb 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b8b2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	462b      	mov	r3, r5
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	f7ff fcf1 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b8c6:	8921      	ldrh	r1, [r4, #8]
 800b8c8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800b8cc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800b8d0:	eba1 010a 	sub.w	r1, r1, sl
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	464b      	mov	r3, r9
 800b8da:	b209      	sxth	r1, r1
 800b8dc:	f7ff fce4 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b8e0:	8962      	ldrh	r2, [r4, #10]
 800b8e2:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 800b8e6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800b8ea:	eba2 0208 	sub.w	r2, r2, r8
 800b8ee:	9700      	str	r7, [sp, #0]
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	b212      	sxth	r2, r2
 800b8f4:	f7ff fcd8 	bl	800b2a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	b002      	add	sp, #8
 800b8fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b900:	f7ff bf37 	b.w	800b772 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800b904 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 800b904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b908:	b085      	sub	sp, #20
 800b90a:	4604      	mov	r4, r0
 800b90c:	2500      	movs	r5, #0
 800b90e:	2701      	movs	r7, #1
 800b910:	9103      	str	r1, [sp, #12]
 800b912:	f7ff fcb1 	bl	800b278 <_ZN8touchgfx8DrawableC1Ev>
 800b916:	4b32      	ldr	r3, [pc, #200]	; (800b9e0 <_ZN8touchgfx17AbstractDataGraphC1Es+0xdc>)
 800b918:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 800b91c:	4e31      	ldr	r6, [pc, #196]	; (800b9e4 <_ZN8touchgfx17AbstractDataGraphC1Es+0xe0>)
 800b91e:	f104 098c 	add.w	r9, r4, #140	; 0x8c
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	23ff      	movs	r3, #255	; 0xff
 800b926:	62a5      	str	r5, [r4, #40]	; 0x28
 800b928:	f104 0bb8 	add.w	fp, r4, #184	; 0xb8
 800b92c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800b930:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800b934:	62e7      	str	r7, [r4, #44]	; 0x2c
 800b936:	f104 08e4 	add.w	r8, r4, #228	; 0xe4
 800b93a:	4618      	mov	r0, r3
 800b93c:	9302      	str	r3, [sp, #8]
 800b93e:	f7ff fc9b 	bl	800b278 <_ZN8touchgfx8DrawableC1Ev>
 800b942:	6366      	str	r6, [r4, #52]	; 0x34
 800b944:	65e5      	str	r5, [r4, #92]	; 0x5c
 800b946:	4650      	mov	r0, sl
 800b948:	f7ff fc96 	bl	800b278 <_ZN8touchgfx8DrawableC1Ev>
 800b94c:	6626      	str	r6, [r4, #96]	; 0x60
 800b94e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800b952:	4648      	mov	r0, r9
 800b954:	f7ff fc90 	bl	800b278 <_ZN8touchgfx8DrawableC1Ev>
 800b958:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800b95c:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 800b960:	4658      	mov	r0, fp
 800b962:	f7ff fc89 	bl	800b278 <_ZN8touchgfx8DrawableC1Ev>
 800b966:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 800b96a:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 800b96e:	4640      	mov	r0, r8
 800b970:	f7ff fc82 	bl	800b278 <_ZN8touchgfx8DrawableC1Ev>
 800b974:	9b02      	ldr	r3, [sp, #8]
 800b976:	9903      	ldr	r1, [sp, #12]
 800b978:	4620      	mov	r0, r4
 800b97a:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
 800b97e:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
 800b982:	4619      	mov	r1, r3
 800b984:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 800b988:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800b98c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800b990:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
 800b994:	f8a4 511c 	strh.w	r5, [r4, #284]	; 0x11c
 800b998:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 800b99c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800b9a0:	f7fe f8e0 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800b9a4:	4659      	mov	r1, fp
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f7fe f8dc 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800b9ac:	4651      	mov	r1, sl
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f7fe f8d8 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f7fe f8d4 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800b9bc:	4641      	mov	r1, r8
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f7fe f8d0 	bl	8009b64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	9500      	str	r5, [sp, #0]
 800b9c8:	462b      	mov	r3, r5
 800b9ca:	462a      	mov	r2, r5
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	f7ff ff4b 	bl	800b868 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800b9d8:	b005      	add	sp, #20
 800b9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9de:	bf00      	nop
 800b9e0:	08019c34 	.word	0x08019c34
 800b9e4:	08019360 	.word	0x08019360

0800b9e8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>:
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b9ec:	4291      	cmp	r1, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	d001      	beq.n	800b9f6 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii+0xe>
 800b9f2:	f003 bb33 	b.w	800f05c <_ZN8touchgfx6muldivElll>
 800b9f6:	4770      	bx	lr

0800b9f8 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	62c1      	str	r1, [r0, #44]	; 0x2c
 800ba00:	462a      	mov	r2, r5
 800ba02:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
 800ba06:	f7ff ffef 	bl	800b9e8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 800ba0a:	462a      	mov	r2, r5
 800ba0c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 800ba10:	4620      	mov	r0, r4
 800ba12:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 800ba16:	f7ff ffe7 	bl	800b9e8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 800ba1a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}

0800ba20 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>:
 800ba20:	b570      	push	{r4, r5, r6, lr}
 800ba22:	4604      	mov	r4, r0
 800ba24:	460d      	mov	r5, r1
 800ba26:	4616      	mov	r6, r2
 800ba28:	f7ff ff6c 	bl	800b904 <_ZN8touchgfx17AbstractDataGraphC1Es>
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	4b11      	ldr	r3, [pc, #68]	; (800ba74 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x54>)
 800ba30:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	428d      	cmp	r5, r1
 800ba38:	f04f 0301 	mov.w	r3, #1
 800ba3c:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 800ba40:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 800ba44:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 800ba48:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 800ba4c:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 800ba50:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 800ba54:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 800ba58:	dc06      	bgt.n	800ba68 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x48>
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x58>)
 800ba5c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800ba60:	4a06      	ldr	r2, [pc, #24]	; (800ba7c <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x5c>)
 800ba62:	4807      	ldr	r0, [pc, #28]	; (800ba80 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x60>)
 800ba64:	f00b fb62 	bl	801712c <__assert_func>
 800ba68:	4620      	mov	r0, r4
 800ba6a:	1e6a      	subs	r2, r5, #1
 800ba6c:	f7ff fb7a 	bl	800b164 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>
 800ba70:	4620      	mov	r0, r4
 800ba72:	bd70      	pop	{r4, r5, r6, pc}
 800ba74:	08019d28 	.word	0x08019d28
 800ba78:	08019c1f 	.word	0x08019c1f
 800ba7c:	08019ede 	.word	0x08019ede
 800ba80:	08019be1 	.word	0x08019be1

0800ba84 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	6803      	ldr	r3, [r0, #0]
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ba90:	4798      	blx	r3
 800ba92:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800ba96:	4629      	mov	r1, r5
 800ba98:	4620      	mov	r0, r4
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800baa6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800baaa:	4718      	bx	r3

0800baac <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEi>:
 800baac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800baae:	4359      	muls	r1, r3
 800bab0:	f7ff bfe8 	b.w	800ba84 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>

0800bab4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
 800bab4:	2000      	movs	r0, #0
 800bab6:	4770      	bx	lr

0800bab8 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
 800bab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800babc:	8183      	strh	r3, [r0, #12]
 800babe:	f04f 33ff 	mov.w	r3, #4294967295
 800bac2:	6203      	str	r3, [r0, #32]
 800bac4:	6813      	ldr	r3, [r2, #0]
 800bac6:	61c3      	str	r3, [r0, #28]
 800bac8:	6010      	str	r0, [r2, #0]
 800baca:	4770      	bx	lr

0800bacc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
 800bacc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800bad0:	b11a      	cbz	r2, 800bada <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800bad2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800bad6:	b102      	cbz	r2, 800bada <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800bad8:	6018      	str	r0, [r3, #0]
 800bada:	4770      	bx	lr

0800badc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 800badc:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 800bae0:	4770      	bx	lr

0800bae2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 800bae2:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 800bae6:	4770      	bx	lr

0800bae8 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
 800bae8:	4770      	bx	lr

0800baea <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
 800baea:	6341      	str	r1, [r0, #52]	; 0x34
 800baec:	4770      	bx	lr

0800baee <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
 800baee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800baf0:	4770      	bx	lr

0800baf2 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:
 800baf2:	2001      	movs	r0, #1
 800baf4:	4770      	bx	lr

0800baf6 <_ZN8touchgfx17GraphElementBoxesD1Ev>:
 800baf6:	4770      	bx	lr

0800baf8 <_ZN8touchgfx17GraphElementBoxesD0Ev>:
 800baf8:	b510      	push	{r4, lr}
 800bafa:	4604      	mov	r4, r0
 800bafc:	213c      	movs	r1, #60	; 0x3c
 800bafe:	f00a fd05 	bl	801650c <_ZdlPvj>
 800bb02:	4620      	mov	r0, r4
 800bb04:	bd10      	pop	{r4, pc}

0800bb06 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>:
 800bb06:	6803      	ldr	r3, [r0, #0]
 800bb08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bb0c:	4718      	bx	r3

0800bb0e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>:
 800bb0e:	6803      	ldr	r3, [r0, #0]
 800bb10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bb14:	4718      	bx	r3

0800bb16 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800bb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb18:	4604      	mov	r4, r0
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	460d      	mov	r5, r1
 800bb1e:	f7fe f9a6 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800bb22:	b978      	cbnz	r0, 800bb44 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800bb24:	4620      	mov	r0, r4
 800bb26:	f7fe f9a2 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800bb2a:	f9b5 6000 	ldrsh.w	r6, [r5]
 800bb2e:	b150      	cbz	r0, 800bb46 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800bb30:	8026      	strh	r6, [r4, #0]
 800bb32:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800bb36:	8063      	strh	r3, [r4, #2]
 800bb38:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800bb3c:	80a3      	strh	r3, [r4, #4]
 800bb3e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800bb42:	80e3      	strh	r3, [r4, #6]
 800bb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb46:	f9b4 1000 	ldrsh.w	r1, [r4]
 800bb4a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800bb4e:	42b1      	cmp	r1, r6
 800bb50:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800bb54:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800bb58:	460f      	mov	r7, r1
 800bb5a:	88ed      	ldrh	r5, [r5, #6]
 800bb5c:	bfa8      	it	ge
 800bb5e:	4637      	movge	r7, r6
 800bb60:	4293      	cmp	r3, r2
 800bb62:	4618      	mov	r0, r3
 800bb64:	4466      	add	r6, ip
 800bb66:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800bb6a:	bfa8      	it	ge
 800bb6c:	4610      	movge	r0, r2
 800bb6e:	442a      	add	r2, r5
 800bb70:	88e5      	ldrh	r5, [r4, #6]
 800bb72:	4461      	add	r1, ip
 800bb74:	b236      	sxth	r6, r6
 800bb76:	8027      	strh	r7, [r4, #0]
 800bb78:	442b      	add	r3, r5
 800bb7a:	b209      	sxth	r1, r1
 800bb7c:	b212      	sxth	r2, r2
 800bb7e:	8060      	strh	r0, [r4, #2]
 800bb80:	b21b      	sxth	r3, r3
 800bb82:	428e      	cmp	r6, r1
 800bb84:	bfac      	ite	ge
 800bb86:	ebc7 0106 	rsbge	r1, r7, r6
 800bb8a:	ebc7 0101 	rsblt	r1, r7, r1
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	bfac      	ite	ge
 800bb92:	ebc0 0202 	rsbge	r2, r0, r2
 800bb96:	ebc0 0203 	rsblt	r2, r0, r3
 800bb9a:	80a1      	strh	r1, [r4, #4]
 800bb9c:	80e2      	strh	r2, [r4, #6]
 800bb9e:	e7d1      	b.n	800bb44 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0800bba0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 800bba0:	6800      	ldr	r0, [r0, #0]
 800bba2:	2800      	cmp	r0, #0
 800bba4:	bfb9      	ittee	lt
 800bba6:	2320      	movlt	r3, #32
 800bba8:	fb90 f0f3 	sdivlt	r0, r0, r3
 800bbac:	301f      	addge	r0, #31
 800bbae:	1140      	asrge	r0, r0, #5
 800bbb0:	4770      	bx	lr
	...

0800bbb4 <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	f00a fc64 	bl	8016484 <_ZN8touchgfx12CanvasWidgetC1Ev>
 800bbbc:	4b02      	ldr	r3, [pc, #8]	; (800bbc8 <_ZN8touchgfx20AbstractGraphElementC1Ev+0x14>)
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	6323      	str	r3, [r4, #48]	; 0x30
 800bbc6:	bd10      	pop	{r4, pc}
 800bbc8:	08019f30 	.word	0x08019f30

0800bbcc <_ZN8touchgfx20AbstractGraphElement8setScaleEi>:
 800bbcc:	6301      	str	r1, [r0, #48]	; 0x30
 800bbce:	4770      	bx	lr

0800bbd0 <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>:
 800bbd0:	b410      	push	{r4}
 800bbd2:	6940      	ldr	r0, [r0, #20]
 800bbd4:	6940      	ldr	r0, [r0, #20]
 800bbd6:	6804      	ldr	r4, [r0, #0]
 800bbd8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800bbdc:	46a4      	mov	ip, r4
 800bbde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbe2:	4760      	bx	ip

0800bbe4 <_ZNK8touchgfx20AbstractGraphElement17isCenterInvisibleEPKNS_17AbstractDataGraphEs>:
 800bbe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	ad02      	add	r5, sp, #8
 800bbea:	4616      	mov	r6, r2
 800bbec:	4611      	mov	r1, r2
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f7ff ff8d 	bl	800bb0e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 800bbf4:	f845 0d04 	str.w	r0, [r5, #-4]!
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f7ff fb70 	bl	800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800bbfe:	4631      	mov	r1, r6
 800bc00:	b207      	sxth	r7, r0
 800bc02:	4620      	mov	r0, r4
 800bc04:	f7ff ff7f 	bl	800bb06 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 800bc08:	9001      	str	r0, [sp, #4]
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f7ff fb67 	bl	800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800bc10:	4605      	mov	r5, r0
 800bc12:	4620      	mov	r0, r4
 800bc14:	f7ff fc2a 	bl	800b46c <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>
 800bc18:	42b8      	cmp	r0, r7
 800bc1a:	dd02      	ble.n	800bc22 <_ZNK8touchgfx20AbstractGraphElement17isCenterInvisibleEPKNS_17AbstractDataGraphEs+0x3e>
 800bc1c:	2001      	movs	r0, #1
 800bc1e:	b003      	add	sp, #12
 800bc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc22:	4620      	mov	r0, r4
 800bc24:	f7ff fc22 	bl	800b46c <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>
 800bc28:	4606      	mov	r6, r0
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7ff fc21 	bl	800b472 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 800bc30:	4430      	add	r0, r6
 800bc32:	4287      	cmp	r7, r0
 800bc34:	daf2      	bge.n	800bc1c <_ZNK8touchgfx20AbstractGraphElement17isCenterInvisibleEPKNS_17AbstractDataGraphEs+0x38>
 800bc36:	b22d      	sxth	r5, r5
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f7ff fc14 	bl	800b466 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 800bc3e:	42a8      	cmp	r0, r5
 800bc40:	dcec      	bgt.n	800bc1c <_ZNK8touchgfx20AbstractGraphElement17isCenterInvisibleEPKNS_17AbstractDataGraphEs+0x38>
 800bc42:	4620      	mov	r0, r4
 800bc44:	f7ff fc0f 	bl	800b466 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 800bc48:	4606      	mov	r6, r0
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7ff fc96 	bl	800b57c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 800bc50:	4430      	add	r0, r6
 800bc52:	4285      	cmp	r5, r0
 800bc54:	bfb4      	ite	lt
 800bc56:	2000      	movlt	r0, #0
 800bc58:	2001      	movge	r0, #1
 800bc5a:	e7e0      	b.n	800bc1e <_ZNK8touchgfx20AbstractGraphElement17isCenterInvisibleEPKNS_17AbstractDataGraphEs+0x3a>

0800bc5c <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE>:
 800bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc60:	6943      	ldr	r3, [r0, #20]
 800bc62:	b08d      	sub	sp, #52	; 0x34
 800bc64:	468a      	mov	sl, r1
 800bc66:	4604      	mov	r4, r0
 800bc68:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800bc6c:	6803      	ldr	r3, [r0, #0]
 800bc6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc70:	4798      	blx	r3
 800bc72:	4605      	mov	r5, r0
 800bc74:	4648      	mov	r0, r9
 800bc76:	f7ff fbe8 	bl	800b44a <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>
 800bc7a:	4607      	mov	r7, r0
 800bc7c:	4648      	mov	r0, r9
 800bc7e:	f7ff fcad 	bl	800b5dc <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d07b      	beq.n	800bd7e <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x122>
 800bc86:	8f26      	ldrh	r6, [r4, #56]	; 0x38
 800bc88:	2e00      	cmp	r6, #0
 800bc8a:	d078      	beq.n	800bd7e <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x122>
 800bc8c:	fb15 f007 	smulbb	r0, r5, r7
 800bc90:	b280      	uxth	r0, r0
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800bc98:	1203      	asrs	r3, r0, #8
 800bc9a:	9302      	str	r3, [sp, #8]
 800bc9c:	d06f      	beq.n	800bd7e <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x122>
 800bc9e:	0176      	lsls	r6, r6, #5
 800bca0:	af0c      	add	r7, sp, #48	; 0x30
 800bca2:	0873      	lsrs	r3, r6, #1
 800bca4:	f847 3d08 	str.w	r3, [r7, #-8]!
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f7ff ff79 	bl	800bba0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800bcae:	f8ba 1000 	ldrh.w	r1, [sl]
 800bcb2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800bcb6:	b280      	uxth	r0, r0
 800bcb8:	f10d 0316 	add.w	r3, sp, #22
 800bcbc:	440a      	add	r2, r1
 800bcbe:	1a09      	subs	r1, r1, r0
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	ab05      	add	r3, sp, #20
 800bcc4:	4402      	add	r2, r0
 800bcc6:	b209      	sxth	r1, r1
 800bcc8:	4620      	mov	r0, r4
 800bcca:	b212      	sxth	r2, r2
 800bccc:	f7ff ff80 	bl	800bbd0 <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d054      	beq.n	800bd7e <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x122>
 800bcd4:	1076      	asrs	r6, r6, #1
 800bcd6:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800bcda:	f10d 0820 	add.w	r8, sp, #32
 800bcde:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	db4b      	blt.n	800bd7e <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x122>
 800bce6:	462a      	mov	r2, r5
 800bce8:	4649      	mov	r1, r9
 800bcea:	4620      	mov	r0, r4
 800bcec:	f7ff ff7a 	bl	800bbe4 <_ZNK8touchgfx20AbstractGraphElement17isCenterInvisibleEPKNS_17AbstractDataGraphEs>
 800bcf0:	b110      	cbz	r0, 800bcf8 <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x9c>
 800bcf2:	3501      	adds	r5, #1
 800bcf4:	b22d      	sxth	r5, r5
 800bcf6:	e7f2      	b.n	800bcde <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x82>
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4648      	mov	r0, r9
 800bcfc:	f7ff ff07 	bl	800bb0e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 800bd00:	4629      	mov	r1, r5
 800bd02:	9003      	str	r0, [sp, #12]
 800bd04:	4648      	mov	r0, r9
 800bd06:	f7ff fefe 	bl	800bb06 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 800bd0a:	9b03      	ldr	r3, [sp, #12]
 800bd0c:	4683      	mov	fp, r0
 800bd0e:	a806      	add	r0, sp, #24
 800bd10:	1b9b      	subs	r3, r3, r6
 800bd12:	9306      	str	r3, [sp, #24]
 800bd14:	f7ff fae3 	bl	800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800bd18:	ebab 0306 	sub.w	r3, fp, r6
 800bd1c:	9003      	str	r0, [sp, #12]
 800bd1e:	a807      	add	r0, sp, #28
 800bd20:	9307      	str	r3, [sp, #28]
 800bd22:	f7ff fadc 	bl	800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800bd26:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 800bd2a:	9a03      	ldr	r2, [sp, #12]
 800bd2c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800bd30:	f8ad 2020 	strh.w	r2, [sp, #32]
 800bd34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800bd38:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800bd3c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800bd40:	e887 0003 	stmia.w	r7, {r0, r1}
 800bd44:	4651      	mov	r1, sl
 800bd46:	4638      	mov	r0, r7
 800bd48:	f7fe f84e 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800bd4c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800bd50:	e888 0003 	stmia.w	r8, {r0, r1}
 800bd54:	4640      	mov	r0, r8
 800bd56:	f7fe f88a 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d1c9      	bne.n	800bcf2 <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x96>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	4641      	mov	r1, r8
 800bd62:	4620      	mov	r0, r4
 800bd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd66:	4798      	blx	r3
 800bd68:	f7fe fb2a 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800bd6c:	6803      	ldr	r3, [r0, #0]
 800bd6e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bd70:	4641      	mov	r1, r8
 800bd72:	f8d3 b018 	ldr.w	fp, [r3, #24]
 800bd76:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bd7a:	47d8      	blx	fp
 800bd7c:	e7b9      	b.n	800bcf2 <_ZNK8touchgfx17GraphElementBoxes4drawERKNS_4RectE+0x96>
 800bd7e:	b00d      	add	sp, #52	; 0x34
 800bd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd84 <_ZN8touchgfx17GraphElementBoxes22invalidateGraphPointAtEs>:
 800bd84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bd88:	6943      	ldr	r3, [r0, #20]
 800bd8a:	4688      	mov	r8, r1
 800bd8c:	460a      	mov	r2, r1
 800bd8e:	4604      	mov	r4, r0
 800bd90:	695e      	ldr	r6, [r3, #20]
 800bd92:	4631      	mov	r1, r6
 800bd94:	f7ff ff26 	bl	800bbe4 <_ZNK8touchgfx20AbstractGraphElement17isCenterInvisibleEPKNS_17AbstractDataGraphEs>
 800bd98:	bb38      	cbnz	r0, 800bdea <_ZN8touchgfx17GraphElementBoxes22invalidateGraphPointAtEs+0x66>
 800bd9a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
 800bd9c:	4641      	mov	r1, r8
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7ff feb5 	bl	800bb0e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 800bda4:	4607      	mov	r7, r0
 800bda6:	012d      	lsls	r5, r5, #4
 800bda8:	4641      	mov	r1, r8
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff feab 	bl	800bb06 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 800bdb0:	1b7f      	subs	r7, r7, r5
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	a804      	add	r0, sp, #16
 800bdb6:	f840 7d10 	str.w	r7, [r0, #-16]!
 800bdba:	1b75      	subs	r5, r6, r5
 800bdbc:	f7ff fa8f 	bl	800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	a804      	add	r0, sp, #16
 800bdc4:	f840 5d0c 	str.w	r5, [r0, #-12]!
 800bdc8:	f7ff fa89 	bl	800b2de <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800bdcc:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 800bdd0:	f8ad 000a 	strh.w	r0, [sp, #10]
 800bdd4:	a902      	add	r1, sp, #8
 800bdd6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bdda:	4620      	mov	r0, r4
 800bddc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bde0:	6823      	ldr	r3, [r4, #0]
 800bde2:	f8ad 7008 	strh.w	r7, [sp, #8]
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	4798      	blx	r3
 800bdea:	b004      	add	sp, #16
 800bdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bdf0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>:
 800bdf0:	b510      	push	{r4, lr}
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	f7ff fede 	bl	800bbb4 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800bdf8:	4b02      	ldr	r3, [pc, #8]	; (800be04 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev+0x14>)
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	2300      	movs	r3, #0
 800be00:	6363      	str	r3, [r4, #52]	; 0x34
 800be02:	bd10      	pop	{r4, pc}
 800be04:	0801a038 	.word	0x0801a038

0800be08 <_ZN8touchgfx17GraphElementBoxesC1Ev>:
 800be08:	b510      	push	{r4, lr}
 800be0a:	4604      	mov	r4, r0
 800be0c:	f7ff fff0 	bl	800bdf0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800be10:	4b02      	ldr	r3, [pc, #8]	; (800be1c <_ZN8touchgfx17GraphElementBoxesC1Ev+0x14>)
 800be12:	4620      	mov	r0, r4
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	2302      	movs	r3, #2
 800be18:	8723      	strh	r3, [r4, #56]	; 0x38
 800be1a:	bd10      	pop	{r4, pc}
 800be1c:	08019fb0 	.word	0x08019fb0

0800be20 <_ZN8touchgfx17GraphElementBoxes11setBoxWidthEt>:
 800be20:	8701      	strh	r1, [r0, #56]	; 0x38
 800be22:	4770      	bx	lr

0800be24 <_ZNK8touchgfx21DataGraphWrapAndClear18indexToGlobalIndexEs>:
 800be24:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800be28:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 800be2c:	4419      	add	r1, r3
 800be2e:	1a08      	subs	r0, r1, r0
 800be30:	4770      	bx	lr

0800be32 <_ZN8touchgfx21DataGraphWrapAndClearD1Ev>:
 800be32:	4770      	bx	lr

0800be34 <_ZN8touchgfx21DataGraphWrapAndClear8addValueEi>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	f9b0 511a 	ldrsh.w	r5, [r0, #282]	; 0x11a
 800be3a:	460f      	mov	r7, r1
 800be3c:	f8d0 6128 	ldr.w	r6, [r0, #296]	; 0x128
 800be40:	4604      	mov	r4, r0
 800be42:	1c6b      	adds	r3, r5, #1
 800be44:	4629      	mov	r1, r5
 800be46:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 800be4a:	6803      	ldr	r3, [r0, #0]
 800be4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800be50:	4798      	blx	r3
 800be52:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 800be56:	b915      	cbnz	r5, 800be5e <_ZN8touchgfx21DataGraphWrapAndClear8addValueEi+0x2a>
 800be58:	4620      	mov	r0, r4
 800be5a:	f7ff fc6f 	bl	800b73c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 800be5e:	4620      	mov	r0, r4
 800be60:	4629      	mov	r1, r5
 800be62:	f7ff fc40 	bl	800b6e6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800be66:	4628      	mov	r0, r5
 800be68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be6a <_ZN8touchgfx21DataGraphWrapAndClearD0Ev>:
 800be6a:	b510      	push	{r4, lr}
 800be6c:	4604      	mov	r4, r0
 800be6e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800be72:	f00a fb4b 	bl	801650c <_ZdlPvj>
 800be76:	4620      	mov	r0, r4
 800be78:	bd10      	pop	{r4, pc}

0800be7a <_ZN8touchgfx21DataGraphWrapAndClear14beforeAddValueEv>:
 800be7a:	b510      	push	{r4, lr}
 800be7c:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 800be80:	4604      	mov	r4, r0
 800be82:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 800be86:	429a      	cmp	r2, r3
 800be88:	db0b      	blt.n	800bea2 <_ZN8touchgfx21DataGraphWrapAndClear14beforeAddValueEv+0x28>
 800be8a:	f7ff fc57 	bl	800b73c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	4620      	mov	r0, r4
 800be92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be96:	4798      	blx	r3
 800be98:	4620      	mov	r0, r4
 800be9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be9e:	f7ff bc32 	b.w	800b706 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>
 800bea2:	bd10      	pop	{r4, pc}

0800bea4 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi>:
 800bea4:	b510      	push	{r4, lr}
 800bea6:	4604      	mov	r4, r0
 800bea8:	f7ff fdba 	bl	800ba20 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>
 800beac:	4b01      	ldr	r3, [pc, #4]	; (800beb4 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi+0x10>)
 800beae:	4620      	mov	r0, r4
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	bd10      	pop	{r4, pc}
 800beb4:	0801a0c0 	.word	0x0801a0c0

0800beb8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800beb8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800bebc:	4770      	bx	lr

0800bebe <_ZN8touchgfx12ToggleButtonD1Ev>:
 800bebe:	4770      	bx	lr

0800bec0 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800bec0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800bec4:	b133      	cbz	r3, 800bed4 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800bec6:	790b      	ldrb	r3, [r1, #4]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	bf01      	itttt	eq
 800becc:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800bece:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800bed0:	8603      	strheq	r3, [r0, #48]	; 0x30
 800bed2:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800bed4:	f00a baf6 	b.w	80164c4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0800bed8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 800bed8:	8813      	ldrh	r3, [r2, #0]
 800beda:	8683      	strh	r3, [r0, #52]	; 0x34
 800bedc:	f000 b950 	b.w	800c180 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

0800bee0 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	4604      	mov	r4, r0
 800bee4:	2138      	movs	r1, #56	; 0x38
 800bee6:	f00a fb11 	bl	801650c <_ZdlPvj>
 800beea:	4620      	mov	r0, r4
 800beec:	bd10      	pop	{r4, pc}

0800beee <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800beee:	b510      	push	{r4, lr}
 800bef0:	4604      	mov	r4, r0
 800bef2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bef4:	b150      	cbz	r0, 800bf0c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800bef6:	6803      	ldr	r3, [r0, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	4798      	blx	r3
 800befc:	b130      	cbz	r0, 800bf0c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800befe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800bf00:	4621      	mov	r1, r4
 800bf02:	6803      	ldr	r3, [r0, #0]
 800bf04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	4718      	bx	r3
 800bf0c:	bd10      	pop	{r4, pc}

0800bf0e <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800bf0e:	2200      	movs	r2, #0
 800bf10:	8002      	strh	r2, [r0, #0]
 800bf12:	8042      	strh	r2, [r0, #2]
 800bf14:	8082      	strh	r2, [r0, #4]
 800bf16:	80c2      	strh	r2, [r0, #6]
 800bf18:	4770      	bx	lr

0800bf1a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800bf1a:	b570      	push	{r4, r5, r6, lr}
 800bf1c:	6803      	ldr	r3, [r0, #0]
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4615      	mov	r5, r2
 800bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf24:	4798      	blx	r3
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf32:	4718      	bx	r3

0800bf34 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	6803      	ldr	r3, [r0, #0]
 800bf38:	4604      	mov	r4, r0
 800bf3a:	b28d      	uxth	r5, r1
 800bf3c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800bf3e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800bf40:	4b10      	ldr	r3, [pc, #64]	; (800bf84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	b92b      	cbnz	r3, 800bf52 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800bf46:	4b10      	ldr	r3, [pc, #64]	; (800bf88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800bf48:	21ae      	movs	r1, #174	; 0xae
 800bf4a:	4a10      	ldr	r2, [pc, #64]	; (800bf8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800bf4c:	4810      	ldr	r0, [pc, #64]	; (800bf90 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800bf4e:	f00b f8ed 	bl	801712c <__assert_func>
 800bf52:	4910      	ldr	r1, [pc, #64]	; (800bf94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800bf54:	8809      	ldrh	r1, [r1, #0]
 800bf56:	4291      	cmp	r1, r2
 800bf58:	d803      	bhi.n	800bf62 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	; (800bf98 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800bf5c:	21af      	movs	r1, #175	; 0xaf
 800bf5e:	4a0b      	ldr	r2, [pc, #44]	; (800bf8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800bf60:	e7f4      	b.n	800bf4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800bf62:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800bf66:	4b0d      	ldr	r3, [pc, #52]	; (800bf9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bf6e:	6803      	ldr	r3, [r0, #0]
 800bf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf72:	4798      	blx	r3
 800bf74:	1a29      	subs	r1, r5, r0
 800bf76:	4633      	mov	r3, r6
 800bf78:	4620      	mov	r0, r4
 800bf7a:	b209      	sxth	r1, r1
 800bf7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf80:	4718      	bx	r3
 800bf82:	bf00      	nop
 800bf84:	2400fa74 	.word	0x2400fa74
 800bf88:	0801a250 	.word	0x0801a250
 800bf8c:	0801a30d 	.word	0x0801a30d
 800bf90:	0801a292 	.word	0x0801a292
 800bf94:	2400fa78 	.word	0x2400fa78
 800bf98:	0801a2bb 	.word	0x0801a2bb
 800bf9c:	2400fa7c 	.word	0x2400fa7c

0800bfa0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800bfa0:	b40e      	push	{r1, r2, r3}
 800bfa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfaa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800bfac:	b09c      	sub	sp, #112	; 0x70
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d06b      	beq.n	800c08c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800bfb4:	aa26      	add	r2, sp, #152	; 0x98
 800bfb6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800c0a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800bfba:	9202      	str	r2, [sp, #8]
 800bfbc:	f8da 2000 	ldr.w	r2, [sl]
 800bfc0:	b92a      	cbnz	r2, 800bfce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800bfc2:	4b33      	ldr	r3, [pc, #204]	; (800c090 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800bfc4:	21ae      	movs	r1, #174	; 0xae
 800bfc6:	4a33      	ldr	r2, [pc, #204]	; (800c094 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800bfc8:	4833      	ldr	r0, [pc, #204]	; (800c098 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 800bfca:	f00b f8af 	bl	801712c <__assert_func>
 800bfce:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800c0a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 800bfd2:	f8b8 1000 	ldrh.w	r1, [r8]
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	d803      	bhi.n	800bfe2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800bfda:	4b30      	ldr	r3, [pc, #192]	; (800c09c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 800bfdc:	21af      	movs	r1, #175	; 0xaf
 800bfde:	4a2d      	ldr	r2, [pc, #180]	; (800c094 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800bfe0:	e7f2      	b.n	800bfc8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800bfe2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800c0a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 800bfe6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800bfea:	f8d9 3000 	ldr.w	r3, [r9]
 800bfee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	4628      	mov	r0, r5
 800bff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff8:	4798      	blx	r3
 800bffa:	4606      	mov	r6, r0
 800bffc:	b207      	sxth	r7, r0
 800bffe:	a803      	add	r0, sp, #12
 800c000:	f003 fb68 	bl	800f6d4 <_ZN8touchgfx12TextProviderC1Ev>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	4628      	mov	r0, r5
 800c008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c00a:	4798      	blx	r3
 800c00c:	682b      	ldr	r3, [r5, #0]
 800c00e:	4683      	mov	fp, r0
 800c010:	4628      	mov	r0, r5
 800c012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c014:	4798      	blx	r3
 800c016:	465b      	mov	r3, fp
 800c018:	9000      	str	r0, [sp, #0]
 800c01a:	a803      	add	r0, sp, #12
 800c01c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c01e:	9a02      	ldr	r2, [sp, #8]
 800c020:	f003 fbab 	bl	800f77a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c024:	f8da 3000 	ldr.w	r3, [sl]
 800c028:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d0c8      	beq.n	800bfc2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800c030:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c032:	f8b8 0000 	ldrh.w	r0, [r8]
 800c036:	4290      	cmp	r0, r2
 800c038:	d9cf      	bls.n	800bfda <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800c03a:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800c03e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800c042:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800c046:	786a      	ldrb	r2, [r5, #1]
 800c048:	8925      	ldrh	r5, [r4, #8]
 800c04a:	f8d9 3000 	ldr.w	r3, [r9]
 800c04e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800c052:	eba5 050c 	sub.w	r5, r5, ip
 800c056:	b22d      	sxth	r5, r5
 800c058:	9500      	str	r5, [sp, #0]
 800c05a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c05e:	a803      	add	r0, sp, #12
 800c060:	f001 fa53 	bl	800d50a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800c064:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800c068:	b203      	sxth	r3, r0
 800c06a:	18b9      	adds	r1, r7, r2
 800c06c:	2900      	cmp	r1, #0
 800c06e:	dd0b      	ble.n	800c088 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 800c070:	3b01      	subs	r3, #1
 800c072:	fb13 f302 	smulbb	r3, r3, r2
 800c076:	fb16 3300 	smlabb	r3, r6, r0, r3
 800c07a:	b21f      	sxth	r7, r3
 800c07c:	4638      	mov	r0, r7
 800c07e:	b01c      	add	sp, #112	; 0x70
 800c080:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	b003      	add	sp, #12
 800c086:	4770      	bx	lr
 800c088:	2b00      	cmp	r3, #0
 800c08a:	dcf7      	bgt.n	800c07c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800c08c:	2700      	movs	r7, #0
 800c08e:	e7f5      	b.n	800c07c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800c090:	0801a250 	.word	0x0801a250
 800c094:	0801a30d 	.word	0x0801a30d
 800c098:	0801a292 	.word	0x0801a292
 800c09c:	0801a2bb 	.word	0x0801a2bb
 800c0a0:	2400fa74 	.word	0x2400fa74
 800c0a4:	2400fa78 	.word	0x2400fa78
 800c0a8:	2400fa7c 	.word	0x2400fa7c

0800c0ac <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	6803      	ldr	r3, [r0, #0]
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	4615      	mov	r5, r2
 800c0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b6:	4798      	blx	r3
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	4620      	mov	r0, r4
 800c0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0c4:	4718      	bx	r3

0800c0c6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800c0c6:	b538      	push	{r3, r4, r5, lr}
 800c0c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0cc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d014      	beq.n	800c0fe <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800c0d4:	6803      	ldr	r3, [r0, #0]
 800c0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0d8:	4798      	blx	r3
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	4605      	mov	r5, r0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0e2:	4798      	blx	r3
 800c0e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c0e8:	b22d      	sxth	r5, r5
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800c0f0:	bf06      	itte	eq
 800c0f2:	4602      	moveq	r2, r0
 800c0f4:	4629      	moveq	r1, r5
 800c0f6:	462a      	movne	r2, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f7ff ffd7 	bl	800c0ac <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}

0800c100 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800c100:	888a      	ldrh	r2, [r1, #4]
 800c102:	8582      	strh	r2, [r0, #44]	; 0x2c
 800c104:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800c108:	b922      	cbnz	r2, 800c114 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800c10a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800c10e:	b90b      	cbnz	r3, 800c114 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800c110:	f7ff bfd9 	b.w	800c0c6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800c114:	4770      	bx	lr

0800c116 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800c116:	2300      	movs	r3, #0
 800c118:	8083      	strh	r3, [r0, #4]
 800c11a:	80c3      	strh	r3, [r0, #6]
 800c11c:	8003      	strh	r3, [r0, #0]
 800c11e:	8043      	strh	r3, [r0, #2]
 800c120:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800c124:	2bff      	cmp	r3, #255	; 0xff
 800c126:	bf01      	itttt	eq
 800c128:	890b      	ldrheq	r3, [r1, #8]
 800c12a:	8083      	strheq	r3, [r0, #4]
 800c12c:	894b      	ldrheq	r3, [r1, #10]
 800c12e:	80c3      	strheq	r3, [r0, #6]
 800c130:	4770      	bx	lr
	...

0800c134 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800c134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c136:	4604      	mov	r4, r0
 800c138:	466b      	mov	r3, sp
 800c13a:	6808      	ldr	r0, [r1, #0]
 800c13c:	6849      	ldr	r1, [r1, #4]
 800c13e:	c303      	stmia	r3!, {r0, r1}
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	4669      	mov	r1, sp
 800c144:	4620      	mov	r0, r4
 800c146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c148:	4798      	blx	r3
 800c14a:	4b08      	ldr	r3, [pc, #32]	; (800c16c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800c152:	b10a      	cbz	r2, 800c158 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800c154:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c156:	b900      	cbnz	r0, 800c15a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800c158:	6898      	ldr	r0, [r3, #8]
 800c15a:	6803      	ldr	r3, [r0, #0]
 800c15c:	4669      	mov	r1, sp
 800c15e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c160:	699d      	ldr	r5, [r3, #24]
 800c162:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800c166:	47a8      	blx	r5
 800c168:	b003      	add	sp, #12
 800c16a:	bd30      	pop	{r4, r5, pc}
 800c16c:	2400fa1c 	.word	0x2400fa1c

0800c170 <_ZN8touchgfx3BoxD1Ev>:
 800c170:	4770      	bx	lr

0800c172 <_ZN8touchgfx3BoxD0Ev>:
 800c172:	b510      	push	{r4, lr}
 800c174:	4604      	mov	r4, r0
 800c176:	212c      	movs	r1, #44	; 0x2c
 800c178:	f00a f9c8 	bl	801650c <_ZdlPvj>
 800c17c:	4620      	mov	r0, r4
 800c17e:	bd10      	pop	{r4, pc}

0800c180 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	880b      	ldrh	r3, [r1, #0]
 800c184:	4605      	mov	r5, r0
 800c186:	4604      	mov	r4, r0
 800c188:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800c18a:	8813      	ldrh	r3, [r2, #0]
 800c18c:	f825 3f30 	strh.w	r3, [r5, #48]!
 800c190:	4628      	mov	r0, r5
 800c192:	f004 ff3f 	bl	8011014 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c196:	4606      	mov	r6, r0
 800c198:	4628      	mov	r0, r5
 800c19a:	f004 ff75 	bl	8011088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c19e:	6823      	ldr	r3, [r4, #0]
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	b231      	sxth	r1, r6
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a8:	4798      	blx	r3
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	b229      	sxth	r1, r5
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1b6:	4718      	bx	r3

0800c1b8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800c1b8:	b510      	push	{r4, lr}
 800c1ba:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800c1be:	4604      	mov	r4, r0
 800c1c0:	2bff      	cmp	r3, #255	; 0xff
 800c1c2:	d006      	beq.n	800c1d2 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	8003      	strh	r3, [r0, #0]
 800c1c8:	8043      	strh	r3, [r0, #2]
 800c1ca:	8083      	strh	r3, [r0, #4]
 800c1cc:	80c3      	strh	r3, [r0, #6]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	bd10      	pop	{r4, pc}
 800c1d2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800c1d6:	b11b      	cbz	r3, 800c1e0 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800c1d8:	3130      	adds	r1, #48	; 0x30
 800c1da:	f004 ff8f 	bl	80110fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800c1de:	e7f6      	b.n	800c1ce <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800c1e0:	312e      	adds	r1, #46	; 0x2e
 800c1e2:	e7fa      	b.n	800c1da <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800c1e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800c1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c1ec:	b08a      	sub	sp, #40	; 0x28
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4688      	mov	r8, r1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d044      	beq.n	800c280 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800c1f6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800c1f8:	a805      	add	r0, sp, #20
 800c1fa:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c1fe:	f004 ff09 	bl	8011014 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c202:	4605      	mov	r5, r0
 800c204:	b206      	sxth	r6, r0
 800c206:	a805      	add	r0, sp, #20
 800c208:	f004 ff3e 	bl	8011088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c20c:	f9b8 2000 	ldrsh.w	r2, [r8]
 800c210:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800c214:	2300      	movs	r3, #0
 800c216:	fa0f fc80 	sxth.w	ip, r0
 800c21a:	4417      	add	r7, r2
 800c21c:	9306      	str	r3, [sp, #24]
 800c21e:	b2bf      	uxth	r7, r7
 800c220:	fa0f fe87 	sxth.w	lr, r7
 800c224:	459e      	cmp	lr, r3
 800c226:	dd2d      	ble.n	800c284 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800c228:	4296      	cmp	r6, r2
 800c22a:	dd2b      	ble.n	800c284 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800c22c:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800c230:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800c234:	4419      	add	r1, r3
 800c236:	b289      	uxth	r1, r1
 800c238:	fa0f f881 	sxth.w	r8, r1
 800c23c:	f1b8 0f00 	cmp.w	r8, #0
 800c240:	dd20      	ble.n	800c284 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800c242:	459c      	cmp	ip, r3
 800c244:	dd1e      	ble.n	800c284 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800c246:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800c24a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c24e:	4576      	cmp	r6, lr
 800c250:	bfa8      	it	ge
 800c252:	463d      	movge	r5, r7
 800c254:	45c4      	cmp	ip, r8
 800c256:	bfa8      	it	ge
 800c258:	4608      	movge	r0, r1
 800c25a:	f8ad 2018 	strh.w	r2, [sp, #24]
 800c25e:	1aad      	subs	r5, r5, r2
 800c260:	1ac0      	subs	r0, r0, r3
 800c262:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c266:	f8ad 501c 	strh.w	r5, [sp, #28]
 800c26a:	f8ad 001e 	strh.w	r0, [sp, #30]
 800c26e:	4b1f      	ldr	r3, [pc, #124]	; (800c2ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	b953      	cbnz	r3, 800c28a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800c274:	4b1e      	ldr	r3, [pc, #120]	; (800c2f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800c276:	2187      	movs	r1, #135	; 0x87
 800c278:	4a1e      	ldr	r2, [pc, #120]	; (800c2f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800c27a:	481f      	ldr	r0, [pc, #124]	; (800c2f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800c27c:	f00a ff56 	bl	801712c <__assert_func>
 800c280:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800c282:	e7b9      	b.n	800c1f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800c284:	2300      	movs	r3, #0
 800c286:	9307      	str	r3, [sp, #28]
 800c288:	e7f1      	b.n	800c26e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800c28a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800c28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c292:	429a      	cmp	r2, r3
 800c294:	d026      	beq.n	800c2e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800c296:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	dd22      	ble.n	800c2e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800c29e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	dd1e      	ble.n	800c2e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	a908      	add	r1, sp, #32
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b4:	4798      	blx	r3
 800c2b6:	4b11      	ldr	r3, [pc, #68]	; (800c2fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800c2be:	b10a      	cbz	r2, 800c2c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800c2c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c2c2:	b900      	cbnz	r0, 800c2c6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800c2c4:	6898      	ldr	r0, [r3, #8]
 800c2c6:	2501      	movs	r5, #1
 800c2c8:	6801      	ldr	r1, [r0, #0]
 800c2ca:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800c2ce:	9502      	str	r5, [sp, #8]
 800c2d0:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800c2d4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800c2d8:	9401      	str	r4, [sp, #4]
 800c2da:	ac06      	add	r4, sp, #24
 800c2dc:	9400      	str	r4, [sp, #0]
 800c2de:	688c      	ldr	r4, [r1, #8]
 800c2e0:	a905      	add	r1, sp, #20
 800c2e2:	47a0      	blx	r4
 800c2e4:	b00a      	add	sp, #40	; 0x28
 800c2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ea:	bf00      	nop
 800c2ec:	2400faac 	.word	0x2400faac
 800c2f0:	0801a3a0 	.word	0x0801a3a0
 800c2f4:	0801a402 	.word	0x0801a402
 800c2f8:	0801a3dc 	.word	0x0801a3dc
 800c2fc:	2400fa1c 	.word	0x2400fa1c

0800c300 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 800c300:	4770      	bx	lr
	...

0800c304 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800c304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c30a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800c30c:	4606      	mov	r6, r0
 800c30e:	4299      	cmp	r1, r3
 800c310:	d02a      	beq.n	800c368 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 800c312:	4b16      	ldr	r3, [pc, #88]	; (800c36c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	b92b      	cbnz	r3, 800c324 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 800c318:	4b15      	ldr	r3, [pc, #84]	; (800c370 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 800c31a:	21ae      	movs	r1, #174	; 0xae
 800c31c:	4a15      	ldr	r2, [pc, #84]	; (800c374 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800c31e:	4816      	ldr	r0, [pc, #88]	; (800c378 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 800c320:	f00a ff04 	bl	801712c <__assert_func>
 800c324:	4a15      	ldr	r2, [pc, #84]	; (800c37c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 800c326:	8812      	ldrh	r2, [r2, #0]
 800c328:	428a      	cmp	r2, r1
 800c32a:	d803      	bhi.n	800c334 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 800c32c:	4b14      	ldr	r3, [pc, #80]	; (800c380 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 800c32e:	21af      	movs	r1, #175	; 0xaf
 800c330:	4a10      	ldr	r2, [pc, #64]	; (800c374 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800c332:	e7f4      	b.n	800c31e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 800c334:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800c338:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800c33c:	4b11      	ldr	r3, [pc, #68]	; (800c384 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 800c33e:	7854      	ldrb	r4, [r2, #1]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800c346:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800c34a:	682b      	ldr	r3, [r5, #0]
 800c34c:	69df      	ldr	r7, [r3, #28]
 800c34e:	4b0e      	ldr	r3, [pc, #56]	; (800c388 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	f7fc fa85 	bl	8008860 <_ZNK8touchgfx5Texts7getTextEt>
 800c356:	2300      	movs	r3, #0
 800c358:	4602      	mov	r2, r0
 800c35a:	4621      	mov	r1, r4
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	4628      	mov	r0, r5
 800c360:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800c362:	47b8      	blx	r7
 800c364:	b003      	add	sp, #12
 800c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c368:	2000      	movs	r0, #0
 800c36a:	e7fb      	b.n	800c364 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 800c36c:	2400fa74 	.word	0x2400fa74
 800c370:	0801a250 	.word	0x0801a250
 800c374:	0801a4b0 	.word	0x0801a4b0
 800c378:	0801a292 	.word	0x0801a292
 800c37c:	2400fa78 	.word	0x2400fa78
 800c380:	0801a2bb 	.word	0x0801a2bb
 800c384:	2400fa7c 	.word	0x2400fa7c
 800c388:	2400fa80 	.word	0x2400fa80

0800c38c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c392:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800c394:	4604      	mov	r4, r0
 800c396:	4299      	cmp	r1, r3
 800c398:	d01e      	beq.n	800c3d8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 800c39a:	6803      	ldr	r3, [r0, #0]
 800c39c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800c39e:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	b92b      	cbnz	r3, 800c3b0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 800c3a4:	4b0e      	ldr	r3, [pc, #56]	; (800c3e0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800c3a6:	21ae      	movs	r1, #174	; 0xae
 800c3a8:	4a0e      	ldr	r2, [pc, #56]	; (800c3e4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800c3aa:	480f      	ldr	r0, [pc, #60]	; (800c3e8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800c3ac:	f00a febe 	bl	801712c <__assert_func>
 800c3b0:	4b0e      	ldr	r3, [pc, #56]	; (800c3ec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	428b      	cmp	r3, r1
 800c3b6:	d803      	bhi.n	800c3c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 800c3b8:	4b0d      	ldr	r3, [pc, #52]	; (800c3f0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 800c3ba:	21af      	movs	r1, #175	; 0xaf
 800c3bc:	4a09      	ldr	r2, [pc, #36]	; (800c3e4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800c3be:	e7f4      	b.n	800c3aa <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 800c3c0:	4b0c      	ldr	r3, [pc, #48]	; (800c3f4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 800c3c2:	6818      	ldr	r0, [r3, #0]
 800c3c4:	f7fc fa4c 	bl	8008860 <_ZNK8touchgfx5Texts7getTextEt>
 800c3c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c3ca:	4601      	mov	r1, r0
 800c3cc:	46ac      	mov	ip, r5
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3d6:	4760      	bx	ip
 800c3d8:	2000      	movs	r0, #0
 800c3da:	bd70      	pop	{r4, r5, r6, pc}
 800c3dc:	2400fa74 	.word	0x2400fa74
 800c3e0:	0801a250 	.word	0x0801a250
 800c3e4:	0801a4b0 	.word	0x0801a4b0
 800c3e8:	0801a292 	.word	0x0801a292
 800c3ec:	2400fa78 	.word	0x2400fa78
 800c3f0:	0801a2bb 	.word	0x0801a2bb
 800c3f4:	2400fa80 	.word	0x2400fa80

0800c3f8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800c3f8:	b510      	push	{r4, lr}
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	2140      	movs	r1, #64	; 0x40
 800c3fe:	f00a f885 	bl	801650c <_ZdlPvj>
 800c402:	4620      	mov	r0, r4
 800c404:	bd10      	pop	{r4, pc}
	...

0800c408 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 800c408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c40c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c410:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800c412:	b08c      	sub	sp, #48	; 0x30
 800c414:	4604      	mov	r4, r0
 800c416:	4293      	cmp	r3, r2
 800c418:	460e      	mov	r6, r1
 800c41a:	d05d      	beq.n	800c4d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800c41c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800c4fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 800c420:	f8d8 2000 	ldr.w	r2, [r8]
 800c424:	b92a      	cbnz	r2, 800c432 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 800c426:	4b2e      	ldr	r3, [pc, #184]	; (800c4e0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 800c428:	21ae      	movs	r1, #174	; 0xae
 800c42a:	4a2e      	ldr	r2, [pc, #184]	; (800c4e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800c42c:	482e      	ldr	r0, [pc, #184]	; (800c4e8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 800c42e:	f00a fe7d 	bl	801712c <__assert_func>
 800c432:	4f2e      	ldr	r7, [pc, #184]	; (800c4ec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 800c434:	8839      	ldrh	r1, [r7, #0]
 800c436:	4299      	cmp	r1, r3
 800c438:	d803      	bhi.n	800c442 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 800c43a:	4b2d      	ldr	r3, [pc, #180]	; (800c4f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 800c43c:	21af      	movs	r1, #175	; 0xaf
 800c43e:	4a29      	ldr	r2, [pc, #164]	; (800c4e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800c440:	e7f4      	b.n	800c42c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 800c442:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800c446:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800c44a:	4b2a      	ldr	r3, [pc, #168]	; (800c4f4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c452:	2a00      	cmp	r2, #0
 800c454:	d040      	beq.n	800c4d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800c456:	784b      	ldrb	r3, [r1, #1]
 800c458:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 800c45c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800c460:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800c464:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800c468:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c46c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800c470:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800c474:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800c478:	ad05      	add	r5, sp, #20
 800c47a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c47c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800c480:	9207      	str	r2, [sp, #28]
 800c482:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800c486:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800c48a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800c48e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800c492:	f88d a020 	strb.w	sl, [sp, #32]
 800c496:	9009      	str	r0, [sp, #36]	; 0x24
 800c498:	f7fd ff92 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 800c49c:	4621      	mov	r1, r4
 800c49e:	4681      	mov	r9, r0
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	f002 fcb5 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0bb      	beq.n	800c426 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 800c4ae:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800c4b0:	883b      	ldrh	r3, [r7, #0]
 800c4b2:	428b      	cmp	r3, r1
 800c4b4:	d9c1      	bls.n	800c43a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 800c4b6:	4b10      	ldr	r3, [pc, #64]	; (800c4f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	f7fc f9d1 	bl	8008860 <_ZNK8touchgfx5Texts7getTextEt>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9303      	str	r3, [sp, #12]
 800c4c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c4c4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800c4c8:	ab07      	add	r3, sp, #28
 800c4ca:	4648      	mov	r0, r9
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	4633      	mov	r3, r6
 800c4d0:	e895 0006 	ldmia.w	r5, {r1, r2}
 800c4d4:	f7fc f972 	bl	80087bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800c4d8:	b00c      	add	sp, #48	; 0x30
 800c4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4de:	bf00      	nop
 800c4e0:	0801a250 	.word	0x0801a250
 800c4e4:	0801a4b0 	.word	0x0801a4b0
 800c4e8:	0801a292 	.word	0x0801a292
 800c4ec:	2400fa78 	.word	0x2400fa78
 800c4f0:	0801a2bb 	.word	0x0801a2bb
 800c4f4:	2400fa7c 	.word	0x2400fa7c
 800c4f8:	2400fa80 	.word	0x2400fa80
 800c4fc:	2400fa74 	.word	0x2400fa74

0800c500 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 800c500:	4b02      	ldr	r3, [pc, #8]	; (800c50c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 800c502:	6018      	str	r0, [r3, #0]
 800c504:	4b02      	ldr	r3, [pc, #8]	; (800c510 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 800c506:	6019      	str	r1, [r3, #0]
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	2400fa24 	.word	0x2400fa24
 800c510:	2400fa28 	.word	0x2400fa28

0800c514 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800c514:	b510      	push	{r4, lr}
 800c516:	6803      	ldr	r3, [r0, #0]
 800c518:	460c      	mov	r4, r1
 800c51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51c:	4798      	blx	r3
 800c51e:	1b03      	subs	r3, r0, r4
 800c520:	4258      	negs	r0, r3
 800c522:	4158      	adcs	r0, r3
 800c524:	bd10      	pop	{r4, pc}
	...

0800c528 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800c528:	4b01      	ldr	r3, [pc, #4]	; (800c530 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800c52a:	6019      	str	r1, [r3, #0]
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	2400fa2c 	.word	0x2400fa2c

0800c534 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c538:	4696      	mov	lr, r2
 800c53a:	b097      	sub	sp, #92	; 0x5c
 800c53c:	4605      	mov	r5, r0
 800c53e:	4614      	mov	r4, r2
 800c540:	460e      	mov	r6, r1
 800c542:	461f      	mov	r7, r3
 800c544:	f10d 0c1c 	add.w	ip, sp, #28
 800c548:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800c54c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800c550:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800c554:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c558:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c55c:	f8de 3000 	ldr.w	r3, [lr]
 800c560:	f104 0e14 	add.w	lr, r4, #20
 800c564:	f8cc 3000 	str.w	r3, [ip]
 800c568:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c56c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c570:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c574:	f8de 3000 	ldr.w	r3, [lr]
 800c578:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c57c:	f8cc 3000 	str.w	r3, [ip]
 800c580:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c584:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c588:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c58c:	f8de 3000 	ldr.w	r3, [lr]
 800c590:	4631      	mov	r1, r6
 800c592:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c594:	4628      	mov	r0, r5
 800c596:	f8cc 3000 	str.w	r3, [ip]
 800c59a:	682b      	ldr	r3, [r5, #0]
 800c59c:	9201      	str	r2, [sp, #4]
 800c59e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c5a0:	f8cd 8008 	str.w	r8, [sp, #8]
 800c5a4:	9200      	str	r2, [sp, #0]
 800c5a6:	aa07      	add	r2, sp, #28
 800c5a8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c5ac:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800c5b0:	463b      	mov	r3, r7
 800c5b2:	47d8      	blx	fp
 800c5b4:	46a6      	mov	lr, r4
 800c5b6:	f10d 0c1c 	add.w	ip, sp, #28
 800c5ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c5be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5c2:	f8de 3000 	ldr.w	r3, [lr]
 800c5c6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c5ca:	343c      	adds	r4, #60	; 0x3c
 800c5cc:	f8cc 3000 	str.w	r3, [ip]
 800c5d0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c5d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c5d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5dc:	f8de 3000 	ldr.w	r3, [lr]
 800c5e0:	f8cc 3000 	str.w	r3, [ip]
 800c5e4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c5e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	f8cc 3000 	str.w	r3, [ip]
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c5fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c600:	f8cd 8008 	str.w	r8, [sp, #8]
 800c604:	9201      	str	r2, [sp, #4]
 800c606:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c608:	9200      	str	r2, [sp, #0]
 800c60a:	aa07      	add	r2, sp, #28
 800c60c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c60e:	463b      	mov	r3, r7
 800c610:	47a0      	blx	r4
 800c612:	b017      	add	sp, #92	; 0x5c
 800c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c618 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	b08d      	sub	sp, #52	; 0x34
 800c61e:	4688      	mov	r8, r1
 800c620:	f8d3 c000 	ldr.w	ip, [r3]
 800c624:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c626:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800c62a:	680f      	ldr	r7, [r1, #0]
 800c62c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800c630:	eba7 070c 	sub.w	r7, r7, ip
 800c634:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800c638:	edd3 6a07 	vldr	s13, [r3, #28]
 800c63c:	42bc      	cmp	r4, r7
 800c63e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c640:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c644:	bfa8      	it	ge
 800c646:	463c      	movge	r4, r7
 800c648:	f9b1 9000 	ldrsh.w	r9, [r1]
 800c64c:	f9ba 1000 	ldrsh.w	r1, [sl]
 800c650:	ee07 4a90 	vmov	s15, r4
 800c654:	eb09 0e0c 	add.w	lr, r9, ip
 800c658:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800c65c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800c660:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800c664:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800c668:	4571      	cmp	r1, lr
 800c66a:	ee25 4a04 	vmul.f32	s8, s10, s8
 800c66e:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c672:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c676:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c67a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800c67e:	ee32 1a05 	vadd.f32	s2, s4, s10
 800c682:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c686:	ee36 0a84 	vadd.f32	s0, s13, s8
 800c68a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c68e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c692:	f340 808c 	ble.w	800c7ae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800c696:	eba1 060e 	sub.w	r6, r1, lr
 800c69a:	fb96 f5f4 	sdiv	r5, r6, r4
 800c69e:	ee07 5a10 	vmov	s14, r5
 800c6a2:	2d00      	cmp	r5, #0
 800c6a4:	fb04 6615 	mls	r6, r4, r5, r6
 800c6a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6ac:	eea7 0a04 	vfma.f32	s0, s14, s8
 800c6b0:	eee7 0a24 	vfma.f32	s1, s14, s9
 800c6b4:	eea7 1a05 	vfma.f32	s2, s14, s10
 800c6b8:	dd12      	ble.n	800c6e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800c6ba:	ee70 6a44 	vsub.f32	s13, s0, s8
 800c6be:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800c6c2:	ee31 2a45 	vsub.f32	s4, s2, s10
 800c6c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ce:	bf14      	ite	ne
 800c6d0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800c6d4:	eeb0 7a67 	vmoveq.f32	s14, s15
 800c6d8:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c6dc:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c6e0:	fb05 f204 	mul.w	r2, r5, r4
 800c6e4:	1abf      	subs	r7, r7, r2
 800c6e6:	4494      	add	ip, r2
 800c6e8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800c6ec:	4411      	add	r1, r2
 800c6ee:	eb09 020c 	add.w	r2, r9, ip
 800c6f2:	b209      	sxth	r1, r1
 800c6f4:	443a      	add	r2, r7
 800c6f6:	428a      	cmp	r2, r1
 800c6f8:	bfc4      	itt	gt
 800c6fa:	eba1 0209 	subgt.w	r2, r1, r9
 800c6fe:	eba2 070c 	subgt.w	r7, r2, ip
 800c702:	2f00      	cmp	r7, #0
 800c704:	dd50      	ble.n	800c7a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800c706:	fb97 f1f4 	sdiv	r1, r7, r4
 800c70a:	fb04 7211 	mls	r2, r4, r1, r7
 800c70e:	b90a      	cbnz	r2, 800c714 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800c710:	3901      	subs	r1, #1
 800c712:	4622      	mov	r2, r4
 800c714:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800c718:	6840      	ldr	r0, [r0, #4]
 800c71a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800c71e:	44b6      	add	lr, r6
 800c720:	f8d0 a000 	ldr.w	sl, [r0]
 800c724:	2900      	cmp	r1, #0
 800c726:	bfcc      	ite	gt
 800c728:	46a1      	movgt	r9, r4
 800c72a:	4691      	movle	r9, r2
 800c72c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c72e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c730:	fb04 e505 	mla	r5, r4, r5, lr
 800c734:	eef0 6a42 	vmov.f32	s13, s4
 800c738:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c73c:	9008      	str	r0, [sp, #32]
 800c73e:	eeb0 7a61 	vmov.f32	s14, s3
 800c742:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800c74a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800c74e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800c752:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c754:	445b      	add	r3, fp
 800c756:	9307      	str	r3, [sp, #28]
 800c758:	ee16 3a90 	vmov	r3, s13
 800c75c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800c760:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800c764:	ee21 3a23 	vmul.f32	s6, s2, s7
 800c768:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800c76c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c770:	ee17 7a90 	vmov	r7, s15
 800c774:	ee73 7a42 	vsub.f32	s15, s6, s4
 800c778:	fb97 f7f4 	sdiv	r7, r7, r4
 800c77c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c780:	ee17 ca90 	vmov	ip, s15
 800c784:	fb9c fcf4 	sdiv	ip, ip, r4
 800c788:	fb0c 3306 	mla	r3, ip, r6, r3
 800c78c:	9302      	str	r3, [sp, #8]
 800c78e:	ee17 3a10 	vmov	r3, s14
 800c792:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800c796:	fb07 3706 	mla	r7, r7, r6, r3
 800c79a:	eba9 0306 	sub.w	r3, r9, r6
 800c79e:	e9cd 4700 	strd	r4, r7, [sp]
 800c7a2:	f8da 4008 	ldr.w	r4, [sl, #8]
 800c7a6:	47a0      	blx	r4
 800c7a8:	b00d      	add	sp, #52	; 0x34
 800c7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ae:	2500      	movs	r5, #0
 800c7b0:	462e      	mov	r6, r5
 800c7b2:	e799      	b.n	800c6e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800c7b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	b0db      	sub	sp, #364	; 0x16c
 800c7ba:	461d      	mov	r5, r3
 800c7bc:	4614      	mov	r4, r2
 800c7be:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800c7c2:	910f      	str	r1, [sp, #60]	; 0x3c
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c7c8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800c7cc:	9009      	str	r0, [sp, #36]	; 0x24
 800c7ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7d0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800c7d4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800c7d8:	9310      	str	r3, [sp, #64]	; 0x40
 800c7da:	6803      	ldr	r3, [r0, #0]
 800c7dc:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800c7de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c7e2:	47b8      	blx	r7
 800c7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e6:	6058      	str	r0, [r3, #4]
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	f000 83a1 	beq.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c7ee:	682b      	ldr	r3, [r5, #0]
 800c7f0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800c7f4:	ed94 7a02 	vldr	s14, [r4, #8]
 800c7f8:	9314      	str	r3, [sp, #80]	; 0x50
 800c7fa:	686b      	ldr	r3, [r5, #4]
 800c7fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c800:	9315      	str	r3, [sp, #84]	; 0x54
 800c802:	4bc1      	ldr	r3, [pc, #772]	; (800cb08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800c804:	7819      	ldrb	r1, [r3, #0]
 800c806:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c80a:	2900      	cmp	r1, #0
 800c80c:	bf16      	itet	ne
 800c80e:	4619      	movne	r1, r3
 800c810:	4611      	moveq	r1, r2
 800c812:	4613      	movne	r3, r2
 800c814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c818:	9116      	str	r1, [sp, #88]	; 0x58
 800c81a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800c81e:	f240 8387 	bls.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c822:	ed94 7a07 	vldr	s14, [r4, #28]
 800c826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c82e:	f240 837f 	bls.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c832:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800c836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c83e:	f240 8377 	bls.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c842:	6822      	ldr	r2, [r4, #0]
 800c844:	4bb1      	ldr	r3, [pc, #708]	; (800cb0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800c846:	429a      	cmp	r2, r3
 800c848:	f2c0 8372 	blt.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c84c:	49b0      	ldr	r1, [pc, #704]	; (800cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800c84e:	6963      	ldr	r3, [r4, #20]
 800c850:	428a      	cmp	r2, r1
 800c852:	f300 836d 	bgt.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c856:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c85a:	48ae      	ldr	r0, [pc, #696]	; (800cb14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800c85c:	33ff      	adds	r3, #255	; 0xff
 800c85e:	4283      	cmp	r3, r0
 800c860:	f200 8366 	bhi.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c864:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c866:	4dac      	ldr	r5, [pc, #688]	; (800cb18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800c868:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c86c:	33ff      	adds	r3, #255	; 0xff
 800c86e:	42ab      	cmp	r3, r5
 800c870:	f200 835e 	bhi.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c874:	6862      	ldr	r2, [r4, #4]
 800c876:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800c87a:	33ff      	adds	r3, #255	; 0xff
 800c87c:	4283      	cmp	r3, r0
 800c87e:	f200 8357 	bhi.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c882:	69a1      	ldr	r1, [r4, #24]
 800c884:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800c888:	33ff      	adds	r3, #255	; 0xff
 800c88a:	4283      	cmp	r3, r0
 800c88c:	f200 8350 	bhi.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c892:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800c896:	30ff      	adds	r0, #255	; 0xff
 800c898:	42a8      	cmp	r0, r5
 800c89a:	f200 8349 	bhi.w	800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c89e:	428a      	cmp	r2, r1
 800c8a0:	f280 8110 	bge.w	800cac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	f300 8119 	bgt.w	800cadc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800c8aa:	4299      	cmp	r1, r3
 800c8ac:	f280 811d 	bge.w	800caea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800c8b0:	2502      	movs	r5, #2
 800c8b2:	2701      	movs	r7, #1
 800c8b4:	46a9      	mov	r9, r5
 800c8b6:	46b8      	mov	r8, r7
 800c8b8:	f04f 0a00 	mov.w	sl, #0
 800c8bc:	4621      	mov	r1, r4
 800c8be:	a849      	add	r0, sp, #292	; 0x124
 800c8c0:	f003 fcd8 	bl	8010274 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	4653      	mov	r3, sl
 800c8c8:	a949      	add	r1, sp, #292	; 0x124
 800c8ca:	f8cd 9000 	str.w	r9, [sp]
 800c8ce:	a819      	add	r0, sp, #100	; 0x64
 800c8d0:	f003 fe00 	bl	80104d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	4653      	mov	r3, sl
 800c8d8:	a949      	add	r1, sp, #292	; 0x124
 800c8da:	f8cd 8000 	str.w	r8, [sp]
 800c8de:	a829      	add	r0, sp, #164	; 0xa4
 800c8e0:	f003 fdf8 	bl	80104d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c8e4:	4643      	mov	r3, r8
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	a949      	add	r1, sp, #292	; 0x124
 800c8ea:	f8cd 9000 	str.w	r9, [sp]
 800c8ee:	a839      	add	r0, sp, #228	; 0xe4
 800c8f0:	f003 fdf0 	bl	80104d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c8f4:	42af      	cmp	r7, r5
 800c8f6:	af12      	add	r7, sp, #72	; 0x48
 800c8f8:	bfb7      	itett	lt
 800c8fa:	2300      	movlt	r3, #0
 800c8fc:	2301      	movge	r3, #1
 800c8fe:	ad29      	addlt	r5, sp, #164	; 0xa4
 800c900:	ac19      	addlt	r4, sp, #100	; 0x64
 800c902:	bfb1      	iteee	lt
 800c904:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c906:	ad19      	addge	r5, sp, #100	; 0x64
 800c908:	930e      	strge	r3, [sp, #56]	; 0x38
 800c90a:	ac29      	addge	r4, sp, #164	; 0xa4
 800c90c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c90e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c912:	e887 0003 	stmia.w	r7, {r0, r1}
 800c916:	b928      	cbnz	r0, 800c924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800c918:	4b80      	ldr	r3, [pc, #512]	; (800cb1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800c91a:	6818      	ldr	r0, [r3, #0]
 800c91c:	6803      	ldr	r3, [r0, #0]
 800c91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c920:	4798      	blx	r3
 800c922:	6038      	str	r0, [r7, #0]
 800c924:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c926:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c92a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c92e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c930:	930c      	str	r3, [sp, #48]	; 0x30
 800c932:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c934:	6963      	ldr	r3, [r4, #20]
 800c936:	440b      	add	r3, r1
 800c938:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800c93c:	4408      	add	r0, r1
 800c93e:	b200      	sxth	r0, r0
 800c940:	4283      	cmp	r3, r0
 800c942:	900d      	str	r0, [sp, #52]	; 0x34
 800c944:	f280 80dd 	bge.w	800cb02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800c948:	428b      	cmp	r3, r1
 800c94a:	da08      	bge.n	800c95e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c94c:	2a00      	cmp	r2, #0
 800c94e:	dd06      	ble.n	800c95e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c950:	1acb      	subs	r3, r1, r3
 800c952:	429a      	cmp	r2, r3
 800c954:	f2c0 80e4 	blt.w	800cb20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f300 80e2 	bgt.w	800cb22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800c95e:	6967      	ldr	r7, [r4, #20]
 800c960:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c966:	443b      	add	r3, r7
 800c968:	461f      	mov	r7, r3
 800c96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c96c:	1bdf      	subs	r7, r3, r7
 800c96e:	4297      	cmp	r7, r2
 800c970:	bfa8      	it	ge
 800c972:	4617      	movge	r7, r2
 800c974:	2f00      	cmp	r7, #0
 800c976:	f340 8166 	ble.w	800cc46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800c97a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c97c:	6829      	ldr	r1, [r5, #0]
 800c97e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c982:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c986:	4411      	add	r1, r2
 800c988:	6820      	ldr	r0, [r4, #0]
 800c98a:	4299      	cmp	r1, r3
 800c98c:	dd1a      	ble.n	800c9c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c98e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c992:	4402      	add	r2, r0
 800c994:	440b      	add	r3, r1
 800c996:	b21b      	sxth	r3, r3
 800c998:	429a      	cmp	r2, r3
 800c99a:	dc13      	bgt.n	800c9c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c99c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c99e:	a912      	add	r1, sp, #72	; 0x48
 800c9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	9206      	str	r2, [sp, #24]
 800c9a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9aa:	9500      	str	r5, [sp, #0]
 800c9ac:	9205      	str	r2, [sp, #20]
 800c9ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9b0:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c9b4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c9b6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c9ba:	aa49      	add	r2, sp, #292	; 0x124
 800c9bc:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800c9c0:	4623      	mov	r3, r4
 800c9c2:	47c8      	blx	r9
 800c9c4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c9c8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c9cc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c9d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9d4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c9d8:	68a1      	ldr	r1, [r4, #8]
 800c9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9de:	ed94 6a08 	vldr	s12, [r4, #32]
 800c9e2:	edd4 6a07 	vldr	s13, [r4, #28]
 800c9e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c9ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c9ee:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c9f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c9f6:	edc4 6a07 	vstr	s13, [r4, #28]
 800c9fa:	441a      	add	r2, r3
 800c9fc:	6963      	ldr	r3, [r4, #20]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	6022      	str	r2, [r4, #0]
 800ca02:	6163      	str	r3, [r4, #20]
 800ca04:	69a3      	ldr	r3, [r4, #24]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	61a3      	str	r3, [r4, #24]
 800ca0a:	6923      	ldr	r3, [r4, #16]
 800ca0c:	440b      	add	r3, r1
 800ca0e:	68e1      	ldr	r1, [r4, #12]
 800ca10:	428b      	cmp	r3, r1
 800ca12:	6123      	str	r3, [r4, #16]
 800ca14:	db15      	blt.n	800ca42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800ca16:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800ca1a:	3201      	adds	r2, #1
 800ca1c:	1a5b      	subs	r3, r3, r1
 800ca1e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ca22:	6022      	str	r2, [r4, #0]
 800ca24:	6123      	str	r3, [r4, #16]
 800ca26:	edc4 6a07 	vstr	s13, [r4, #28]
 800ca2a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800ca2e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ca32:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800ca36:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800ca3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca3e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800ca42:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800ca46:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800ca4a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800ca4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca52:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800ca56:	68a9      	ldr	r1, [r5, #8]
 800ca58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca5c:	ed95 6a08 	vldr	s12, [r5, #32]
 800ca60:	edd5 6a07 	vldr	s13, [r5, #28]
 800ca64:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800ca68:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ca6c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800ca70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca74:	edc5 6a07 	vstr	s13, [r5, #28]
 800ca78:	441a      	add	r2, r3
 800ca7a:	696b      	ldr	r3, [r5, #20]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	602a      	str	r2, [r5, #0]
 800ca80:	616b      	str	r3, [r5, #20]
 800ca82:	69ab      	ldr	r3, [r5, #24]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	61ab      	str	r3, [r5, #24]
 800ca88:	692b      	ldr	r3, [r5, #16]
 800ca8a:	440b      	add	r3, r1
 800ca8c:	68e9      	ldr	r1, [r5, #12]
 800ca8e:	428b      	cmp	r3, r1
 800ca90:	612b      	str	r3, [r5, #16]
 800ca92:	db15      	blt.n	800cac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800ca94:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800ca98:	3201      	adds	r2, #1
 800ca9a:	1a5b      	subs	r3, r3, r1
 800ca9c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800caa0:	602a      	str	r2, [r5, #0]
 800caa2:	612b      	str	r3, [r5, #16]
 800caa4:	edc5 6a07 	vstr	s13, [r5, #28]
 800caa8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800caac:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cab0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cab4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800cab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cabc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800cac0:	3f01      	subs	r7, #1
 800cac2:	e757      	b.n	800c974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800cac4:	4299      	cmp	r1, r3
 800cac6:	dc13      	bgt.n	800caf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800cac8:	429a      	cmp	r2, r3
 800caca:	da14      	bge.n	800caf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800cacc:	2502      	movs	r5, #2
 800cace:	2703      	movs	r7, #3
 800cad0:	f04f 0800 	mov.w	r8, #0
 800cad4:	46a9      	mov	r9, r5
 800cad6:	f04f 0a01 	mov.w	sl, #1
 800cada:	e6ef      	b.n	800c8bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800cadc:	2501      	movs	r5, #1
 800cade:	2700      	movs	r7, #0
 800cae0:	46a9      	mov	r9, r5
 800cae2:	46b8      	mov	r8, r7
 800cae4:	f04f 0a02 	mov.w	sl, #2
 800cae8:	e6e8      	b.n	800c8bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800caea:	2501      	movs	r5, #1
 800caec:	2702      	movs	r7, #2
 800caee:	e6e1      	b.n	800c8b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800caf0:	2500      	movs	r5, #0
 800caf2:	2701      	movs	r7, #1
 800caf4:	e7f4      	b.n	800cae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800caf6:	2702      	movs	r7, #2
 800caf8:	2503      	movs	r5, #3
 800cafa:	f04f 0900 	mov.w	r9, #0
 800cafe:	46b8      	mov	r8, r7
 800cb00:	e7e9      	b.n	800cad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800cb02:	4613      	mov	r3, r2
 800cb04:	e728      	b.n	800c958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800cb06:	bf00      	nop
 800cb08:	2400fa14 	.word	0x2400fa14
 800cb0c:	fffd8f01 	.word	0xfffd8f01
 800cb10:	00027100 	.word	0x00027100
 800cb14:	0004e1ff 	.word	0x0004e1ff
 800cb18:	0004e1fe 	.word	0x0004e1fe
 800cb1c:	2400fa1c 	.word	0x2400fa1c
 800cb20:	4613      	mov	r3, r2
 800cb22:	992b      	ldr	r1, [sp, #172]	; 0xac
 800cb24:	469e      	mov	lr, r3
 800cb26:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800cb28:	469c      	mov	ip, r3
 800cb2a:	9111      	str	r1, [sp, #68]	; 0x44
 800cb2c:	f04f 0900 	mov.w	r9, #0
 800cb30:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800cb34:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800cb38:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800cb3c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800cb40:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800cb44:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800cb48:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800cb4c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800cb50:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800cb54:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800cb58:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800cb5c:	f1bc 0f00 	cmp.w	ip, #0
 800cb60:	d147      	bne.n	800cbf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800cb62:	eb03 0c07 	add.w	ip, r3, r7
 800cb66:	1ad7      	subs	r7, r2, r3
 800cb68:	f1b9 0f00 	cmp.w	r9, #0
 800cb6c:	d009      	beq.n	800cb82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800cb6e:	9029      	str	r0, [sp, #164]	; 0xa4
 800cb70:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800cb74:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800cb78:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800cb7c:	912d      	str	r1, [sp, #180]	; 0xb4
 800cb7e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800cb82:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800cb84:	f04f 0800 	mov.w	r8, #0
 800cb88:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800cb8c:	9111      	str	r1, [sp, #68]	; 0x44
 800cb8e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800cb92:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800cb96:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800cb9a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800cb9e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800cba2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800cba6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800cbaa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800cbae:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800cbb2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800cbb6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800cbba:	f1be 0f00 	cmp.w	lr, #0
 800cbbe:	d031      	beq.n	800cc24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800cbc0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800cbc2:	4450      	add	r0, sl
 800cbc4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cbc8:	4431      	add	r1, r6
 800cbca:	ee37 7a04 	vadd.f32	s14, s14, s8
 800cbce:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800cbd2:	4549      	cmp	r1, r9
 800cbd4:	db08      	blt.n	800cbe8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800cbd6:	ee77 7a85 	vadd.f32	s15, s15, s10
 800cbda:	3001      	adds	r0, #1
 800cbdc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800cbe0:	eba1 0109 	sub.w	r1, r1, r9
 800cbe4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cbe8:	f10e 3eff 	add.w	lr, lr, #4294967295
 800cbec:	f04f 0801 	mov.w	r8, #1
 800cbf0:	e7e3      	b.n	800cbba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800cbf2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800cbf4:	4450      	add	r0, sl
 800cbf6:	ee37 7a24 	vadd.f32	s14, s14, s9
 800cbfa:	4431      	add	r1, r6
 800cbfc:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cc00:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800cc04:	4541      	cmp	r1, r8
 800cc06:	db08      	blt.n	800cc1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800cc08:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800cc12:	eba1 0108 	sub.w	r1, r1, r8
 800cc16:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cc1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cc1e:	f04f 0901 	mov.w	r9, #1
 800cc22:	e79b      	b.n	800cb5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800cc24:	449c      	add	ip, r3
 800cc26:	1aff      	subs	r7, r7, r3
 800cc28:	f1b8 0f00 	cmp.w	r8, #0
 800cc2c:	d009      	beq.n	800cc42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800cc2e:	9019      	str	r0, [sp, #100]	; 0x64
 800cc30:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800cc34:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800cc38:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800cc3c:	911d      	str	r1, [sp, #116]	; 0x74
 800cc3e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800cc42:	1ad2      	subs	r2, r2, r3
 800cc44:	e68b      	b.n	800c95e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800cc46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc48:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f000 80d1 	beq.w	800cdf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800cc50:	ad19      	add	r5, sp, #100	; 0x64
 800cc52:	ac39      	add	r4, sp, #228	; 0xe4
 800cc54:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cc56:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800cc5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc5e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc60:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc62:	6963      	ldr	r3, [r4, #20]
 800cc64:	440b      	add	r3, r1
 800cc66:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800cc6a:	4408      	add	r0, r1
 800cc6c:	b200      	sxth	r0, r0
 800cc6e:	4283      	cmp	r3, r0
 800cc70:	900d      	str	r0, [sp, #52]	; 0x34
 800cc72:	f280 80c1 	bge.w	800cdf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800cc76:	428b      	cmp	r3, r1
 800cc78:	da08      	bge.n	800cc8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800cc7a:	2a00      	cmp	r2, #0
 800cc7c:	dd06      	ble.n	800cc8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800cc7e:	1acb      	subs	r3, r1, r3
 800cc80:	429a      	cmp	r2, r3
 800cc82:	f2c0 80bb 	blt.w	800cdfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f300 80b9 	bgt.w	800cdfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800cc8c:	6967      	ldr	r7, [r4, #20]
 800cc8e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800cc92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc94:	443b      	add	r3, r7
 800cc96:	461f      	mov	r7, r3
 800cc98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc9a:	1bdf      	subs	r7, r3, r7
 800cc9c:	4297      	cmp	r7, r2
 800cc9e:	bfa8      	it	ge
 800cca0:	4617      	movge	r7, r2
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	f340 813c 	ble.w	800cf20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800cca8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ccaa:	6829      	ldr	r1, [r5, #0]
 800ccac:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ccb0:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ccb4:	4411      	add	r1, r2
 800ccb6:	6820      	ldr	r0, [r4, #0]
 800ccb8:	4299      	cmp	r1, r3
 800ccba:	dd1a      	ble.n	800ccf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ccbc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ccc0:	4402      	add	r2, r0
 800ccc2:	440b      	add	r3, r1
 800ccc4:	b21b      	sxth	r3, r3
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	dc13      	bgt.n	800ccf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ccca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cccc:	a912      	add	r1, sp, #72	; 0x48
 800ccce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	9206      	str	r2, [sp, #24]
 800ccd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccd8:	9500      	str	r5, [sp, #0]
 800ccda:	9205      	str	r2, [sp, #20]
 800ccdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccde:	e9cd b203 	strd	fp, r2, [sp, #12]
 800cce2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800cce4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800cce8:	aa49      	add	r2, sp, #292	; 0x124
 800ccea:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800ccee:	4623      	mov	r3, r4
 800ccf0:	47c8      	blx	r9
 800ccf2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800ccf6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800ccfa:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800ccfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd02:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800cd06:	68a1      	ldr	r1, [r4, #8]
 800cd08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd0c:	ed94 6a08 	vldr	s12, [r4, #32]
 800cd10:	edd4 6a07 	vldr	s13, [r4, #28]
 800cd14:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800cd18:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cd1c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800cd20:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd24:	edc4 6a07 	vstr	s13, [r4, #28]
 800cd28:	441a      	add	r2, r3
 800cd2a:	6963      	ldr	r3, [r4, #20]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	6022      	str	r2, [r4, #0]
 800cd30:	6163      	str	r3, [r4, #20]
 800cd32:	69a3      	ldr	r3, [r4, #24]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	61a3      	str	r3, [r4, #24]
 800cd38:	6923      	ldr	r3, [r4, #16]
 800cd3a:	440b      	add	r3, r1
 800cd3c:	68e1      	ldr	r1, [r4, #12]
 800cd3e:	428b      	cmp	r3, r1
 800cd40:	6123      	str	r3, [r4, #16]
 800cd42:	db15      	blt.n	800cd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800cd44:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800cd48:	3201      	adds	r2, #1
 800cd4a:	1a5b      	subs	r3, r3, r1
 800cd4c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cd50:	6022      	str	r2, [r4, #0]
 800cd52:	6123      	str	r3, [r4, #16]
 800cd54:	edc4 6a07 	vstr	s13, [r4, #28]
 800cd58:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800cd5c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cd60:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800cd64:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800cd68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd6c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800cd70:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800cd74:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800cd78:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800cd7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd80:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800cd84:	68a9      	ldr	r1, [r5, #8]
 800cd86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd8a:	ed95 6a08 	vldr	s12, [r5, #32]
 800cd8e:	edd5 6a07 	vldr	s13, [r5, #28]
 800cd92:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cd96:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cd9a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800cd9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cda2:	edc5 6a07 	vstr	s13, [r5, #28]
 800cda6:	441a      	add	r2, r3
 800cda8:	696b      	ldr	r3, [r5, #20]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	602a      	str	r2, [r5, #0]
 800cdae:	616b      	str	r3, [r5, #20]
 800cdb0:	69ab      	ldr	r3, [r5, #24]
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	61ab      	str	r3, [r5, #24]
 800cdb6:	692b      	ldr	r3, [r5, #16]
 800cdb8:	440b      	add	r3, r1
 800cdba:	68e9      	ldr	r1, [r5, #12]
 800cdbc:	428b      	cmp	r3, r1
 800cdbe:	612b      	str	r3, [r5, #16]
 800cdc0:	db15      	blt.n	800cdee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800cdc2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800cdc6:	3201      	adds	r2, #1
 800cdc8:	1a5b      	subs	r3, r3, r1
 800cdca:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cdce:	602a      	str	r2, [r5, #0]
 800cdd0:	612b      	str	r3, [r5, #16]
 800cdd2:	edc5 6a07 	vstr	s13, [r5, #28]
 800cdd6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800cdda:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cdde:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cde2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800cde6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdea:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800cdee:	3f01      	subs	r7, #1
 800cdf0:	e757      	b.n	800cca2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800cdf2:	ad39      	add	r5, sp, #228	; 0xe4
 800cdf4:	ac19      	add	r4, sp, #100	; 0x64
 800cdf6:	e72d      	b.n	800cc54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	e744      	b.n	800cc86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800ce00:	469e      	mov	lr, r3
 800ce02:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800ce06:	461f      	mov	r7, r3
 800ce08:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800ce0c:	f04f 0900 	mov.w	r9, #0
 800ce10:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800ce14:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800ce18:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800ce1c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800ce20:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800ce24:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800ce26:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800ce2a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800ce2e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800ce32:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800ce36:	960e      	str	r6, [sp, #56]	; 0x38
 800ce38:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800ce3c:	2f00      	cmp	r7, #0
 800ce3e:	d146      	bne.n	800cece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800ce40:	449c      	add	ip, r3
 800ce42:	1ad7      	subs	r7, r2, r3
 800ce44:	f1b9 0f00 	cmp.w	r9, #0
 800ce48:	d009      	beq.n	800ce5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800ce4a:	9039      	str	r0, [sp, #228]	; 0xe4
 800ce4c:	913d      	str	r1, [sp, #244]	; 0xf4
 800ce4e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800ce52:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800ce56:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800ce5a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800ce5e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ce60:	f04f 0800 	mov.w	r8, #0
 800ce64:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800ce68:	910e      	str	r1, [sp, #56]	; 0x38
 800ce6a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800ce6e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800ce72:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800ce76:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800ce7a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800ce7e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800ce82:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800ce86:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800ce8a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800ce8e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800ce92:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800ce96:	f1be 0f00 	cmp.w	lr, #0
 800ce9a:	d030      	beq.n	800cefe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800ce9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ce9e:	4450      	add	r0, sl
 800cea0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cea4:	4431      	add	r1, r6
 800cea6:	ee37 7a04 	vadd.f32	s14, s14, s8
 800ceaa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ceae:	4549      	cmp	r1, r9
 800ceb0:	db08      	blt.n	800cec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800ceb2:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800cebc:	eba1 0109 	sub.w	r1, r1, r9
 800cec0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cec4:	f10e 3eff 	add.w	lr, lr, #4294967295
 800cec8:	f04f 0801 	mov.w	r8, #1
 800cecc:	e7e3      	b.n	800ce96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800cece:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ced0:	4450      	add	r0, sl
 800ced2:	ee37 7a24 	vadd.f32	s14, s14, s9
 800ced6:	4431      	add	r1, r6
 800ced8:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cedc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800cee0:	4541      	cmp	r1, r8
 800cee2:	db08      	blt.n	800cef6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800cee4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cee8:	3001      	adds	r0, #1
 800ceea:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ceee:	eba1 0108 	sub.w	r1, r1, r8
 800cef2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cef6:	3f01      	subs	r7, #1
 800cef8:	f04f 0901 	mov.w	r9, #1
 800cefc:	e79e      	b.n	800ce3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800cefe:	449c      	add	ip, r3
 800cf00:	1aff      	subs	r7, r7, r3
 800cf02:	f1b8 0f00 	cmp.w	r8, #0
 800cf06:	d009      	beq.n	800cf1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800cf08:	9019      	str	r0, [sp, #100]	; 0x64
 800cf0a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800cf0e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800cf12:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800cf16:	911d      	str	r1, [sp, #116]	; 0x74
 800cf18:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800cf1c:	1ad2      	subs	r2, r2, r3
 800cf1e:	e6b5      	b.n	800cc8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800cf20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	b923      	cbnz	r3, 800cf30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800cf26:	4b04      	ldr	r3, [pc, #16]	; (800cf38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	6803      	ldr	r3, [r0, #0]
 800cf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2e:	4798      	blx	r3
 800cf30:	b05b      	add	sp, #364	; 0x16c
 800cf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf36:	bf00      	nop
 800cf38:	2400fa1c 	.word	0x2400fa1c

0800cf3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800cf3c:	b570      	push	{r4, r5, r6, lr}
 800cf3e:	4604      	mov	r4, r0
 800cf40:	2500      	movs	r5, #0
 800cf42:	9804      	ldr	r0, [sp, #16]
 800cf44:	7223      	strb	r3, [r4, #8]
 800cf46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cf4a:	8025      	strh	r5, [r4, #0]
 800cf4c:	6061      	str	r1, [r4, #4]
 800cf4e:	7263      	strb	r3, [r4, #9]
 800cf50:	60e0      	str	r0, [r4, #12]
 800cf52:	8222      	strh	r2, [r4, #16]
 800cf54:	8265      	strh	r5, [r4, #18]
 800cf56:	82a5      	strh	r5, [r4, #20]
 800cf58:	82e5      	strh	r5, [r4, #22]
 800cf5a:	8325      	strh	r5, [r4, #24]
 800cf5c:	8365      	strh	r5, [r4, #26]
 800cf5e:	83a5      	strh	r5, [r4, #28]
 800cf60:	77a5      	strb	r5, [r4, #30]
 800cf62:	6803      	ldr	r3, [r0, #0]
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	4798      	blx	r3
 800cf68:	4606      	mov	r6, r0
 800cf6a:	b1f8      	cbz	r0, 800cfac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800cf6c:	68e0      	ldr	r0, [r4, #12]
 800cf6e:	4631      	mov	r1, r6
 800cf70:	6803      	ldr	r3, [r0, #0]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	4798      	blx	r3
 800cf76:	7b43      	ldrb	r3, [r0, #13]
 800cf78:	7a82      	ldrb	r2, [r0, #10]
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf82:	4313      	orrs	r3, r2
 800cf84:	83a3      	strh	r3, [r4, #28]
 800cf86:	7a63      	ldrb	r3, [r4, #9]
 800cf88:	2b04      	cmp	r3, #4
 800cf8a:	d10f      	bne.n	800cfac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800cf8c:	68e0      	ldr	r0, [r4, #12]
 800cf8e:	462a      	mov	r2, r5
 800cf90:	4631      	mov	r1, r6
 800cf92:	6803      	ldr	r3, [r0, #0]
 800cf94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf96:	4798      	blx	r3
 800cf98:	7b6b      	ldrb	r3, [r5, #13]
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800cfa0:	7aab      	ldrb	r3, [r5, #10]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	4418      	add	r0, r3
 800cfa6:	8ba3      	ldrh	r3, [r4, #28]
 800cfa8:	4418      	add	r0, r3
 800cfaa:	83a0      	strh	r0, [r4, #28]
 800cfac:	4620      	mov	r0, r4
 800cfae:	bd70      	pop	{r4, r5, r6, pc}

0800cfb0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	2400      	movs	r4, #0
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	4681      	mov	r9, r0
 800cfba:	4688      	mov	r8, r1
 800cfbc:	4692      	mov	sl, r2
 800cfbe:	469b      	mov	fp, r3
 800cfc0:	4627      	mov	r7, r4
 800cfc2:	4625      	mov	r5, r4
 800cfc4:	4626      	mov	r6, r4
 800cfc6:	4554      	cmp	r4, sl
 800cfc8:	da2a      	bge.n	800d020 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	9303      	str	r3, [sp, #12]
 800cfce:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800cfd2:	429d      	cmp	r5, r3
 800cfd4:	d004      	beq.n	800cfe0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800cfd6:	f242 030b 	movw	r3, #8203	; 0x200b
 800cfda:	429d      	cmp	r5, r3
 800cfdc:	bf18      	it	ne
 800cfde:	462f      	movne	r7, r5
 800cfe0:	ab03      	add	r3, sp, #12
 800cfe2:	4642      	mov	r2, r8
 800cfe4:	4659      	mov	r1, fp
 800cfe6:	4648      	mov	r0, r9
 800cfe8:	f002 fec8 	bl	800fd7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800cfec:	4605      	mov	r5, r0
 800cfee:	b1b8      	cbz	r0, 800d020 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800cff0:	280a      	cmp	r0, #10
 800cff2:	d015      	beq.n	800d020 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800cff4:	9a03      	ldr	r2, [sp, #12]
 800cff6:	b18a      	cbz	r2, 800d01c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800cff8:	7b50      	ldrb	r0, [r2, #13]
 800cffa:	4639      	mov	r1, r7
 800cffc:	7a93      	ldrb	r3, [r2, #10]
 800cffe:	0040      	lsls	r0, r0, #1
 800d000:	8895      	ldrh	r5, [r2, #4]
 800d002:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800d006:	4303      	orrs	r3, r0
 800d008:	4640      	mov	r0, r8
 800d00a:	9301      	str	r3, [sp, #4]
 800d00c:	f8d8 3000 	ldr.w	r3, [r8]
 800d010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d012:	4798      	blx	r3
 800d014:	9b01      	ldr	r3, [sp, #4]
 800d016:	4418      	add	r0, r3
 800d018:	4406      	add	r6, r0
 800d01a:	b2b6      	uxth	r6, r6
 800d01c:	3401      	adds	r4, #1
 800d01e:	e7d2      	b.n	800cfc6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800d020:	4630      	mov	r0, r6
 800d022:	b005      	add	sp, #20
 800d024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d028 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800d028:	2a02      	cmp	r2, #2
 800d02a:	b530      	push	{r4, r5, lr}
 800d02c:	d011      	beq.n	800d052 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800d02e:	2a03      	cmp	r2, #3
 800d030:	d01c      	beq.n	800d06c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800d032:	2a01      	cmp	r2, #1
 800d034:	d10c      	bne.n	800d050 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800d036:	888b      	ldrh	r3, [r1, #4]
 800d038:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d03c:	8801      	ldrh	r1, [r0, #0]
 800d03e:	1a9b      	subs	r3, r3, r2
 800d040:	8844      	ldrh	r4, [r0, #2]
 800d042:	1a5b      	subs	r3, r3, r1
 800d044:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d048:	8004      	strh	r4, [r0, #0]
 800d04a:	8043      	strh	r3, [r0, #2]
 800d04c:	8081      	strh	r1, [r0, #4]
 800d04e:	80c2      	strh	r2, [r0, #6]
 800d050:	bd30      	pop	{r4, r5, pc}
 800d052:	88cb      	ldrh	r3, [r1, #6]
 800d054:	88c2      	ldrh	r2, [r0, #6]
 800d056:	1a9b      	subs	r3, r3, r2
 800d058:	8842      	ldrh	r2, [r0, #2]
 800d05a:	1a9b      	subs	r3, r3, r2
 800d05c:	888a      	ldrh	r2, [r1, #4]
 800d05e:	8881      	ldrh	r1, [r0, #4]
 800d060:	8043      	strh	r3, [r0, #2]
 800d062:	1a52      	subs	r2, r2, r1
 800d064:	8801      	ldrh	r1, [r0, #0]
 800d066:	1a52      	subs	r2, r2, r1
 800d068:	8002      	strh	r2, [r0, #0]
 800d06a:	e7f1      	b.n	800d050 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800d06c:	88cb      	ldrh	r3, [r1, #6]
 800d06e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800d072:	8841      	ldrh	r1, [r0, #2]
 800d074:	1a9b      	subs	r3, r3, r2
 800d076:	f9b0 5000 	ldrsh.w	r5, [r0]
 800d07a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800d07e:	1a5b      	subs	r3, r3, r1
 800d080:	8045      	strh	r5, [r0, #2]
 800d082:	8082      	strh	r2, [r0, #4]
 800d084:	8003      	strh	r3, [r0, #0]
 800d086:	80c4      	strh	r4, [r0, #6]
 800d088:	e7e2      	b.n	800d050 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800d08a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800d08a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08e:	b09f      	sub	sp, #124	; 0x7c
 800d090:	9116      	str	r1, [sp, #88]	; 0x58
 800d092:	9317      	str	r3, [sp, #92]	; 0x5c
 800d094:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d096:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d098:	8809      	ldrh	r1, [r1, #0]
 800d09a:	889b      	ldrh	r3, [r3, #4]
 800d09c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800d0a0:	440b      	add	r3, r1
 800d0a2:	9212      	str	r2, [sp, #72]	; 0x48
 800d0a4:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800d0a8:	b21b      	sxth	r3, r3
 800d0aa:	9011      	str	r0, [sp, #68]	; 0x44
 800d0ac:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800d0b0:	9310      	str	r3, [sp, #64]	; 0x40
 800d0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0b6:	7a59      	ldrb	r1, [r3, #9]
 800d0b8:	7a1b      	ldrb	r3, [r3, #8]
 800d0ba:	9114      	str	r1, [sp, #80]	; 0x50
 800d0bc:	9315      	str	r3, [sp, #84]	; 0x54
 800d0be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d0c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d0c4:	2a00      	cmp	r2, #0
 800d0c6:	d067      	beq.n	800d198 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800d0c8:	f898 3010 	ldrb.w	r3, [r8, #16]
 800d0cc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	bf14      	ite	ne
 800d0d2:	2301      	movne	r3, #1
 800d0d4:	2302      	moveq	r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	f04f 0900 	mov.w	r9, #0
 800d0dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0de:	464c      	mov	r4, r9
 800d0e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d0e4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800d0e8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	f280 808c 	bge.w	800d20a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	931c      	str	r3, [sp, #112]	; 0x70
 800d0f6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d0fa:	429c      	cmp	r4, r3
 800d0fc:	d006      	beq.n	800d10c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800d0fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d100:	f242 020b 	movw	r2, #8203	; 0x200b
 800d104:	4294      	cmp	r4, r2
 800d106:	bf18      	it	ne
 800d108:	4623      	movne	r3, r4
 800d10a:	930d      	str	r3, [sp, #52]	; 0x34
 800d10c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d10e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800d110:	f8d8 2000 	ldr.w	r2, [r8]
 800d114:	428b      	cmp	r3, r1
 800d116:	db41      	blt.n	800d19c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800d118:	6813      	ldr	r3, [r2, #0]
 800d11a:	4610      	mov	r0, r2
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	4798      	blx	r3
 800d120:	4604      	mov	r4, r0
 800d122:	f8d8 0000 	ldr.w	r0, [r8]
 800d126:	aa1d      	add	r2, sp, #116	; 0x74
 800d128:	4621      	mov	r1, r4
 800d12a:	6803      	ldr	r3, [r0, #0]
 800d12c:	689e      	ldr	r6, [r3, #8]
 800d12e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800d132:	47b0      	blx	r6
 800d134:	901c      	str	r0, [sp, #112]	; 0x70
 800d136:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d13a:	429c      	cmp	r4, r3
 800d13c:	f000 80ea 	beq.w	800d314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d140:	f242 030b 	movw	r3, #8203	; 0x200b
 800d144:	429c      	cmp	r4, r3
 800d146:	f000 80e5 	beq.w	800d314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d14a:	2c00      	cmp	r4, #0
 800d14c:	f000 80f7 	beq.w	800d33e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800d150:	2c0a      	cmp	r4, #10
 800d152:	d060      	beq.n	800d216 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800d154:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d156:	b36a      	cbz	r2, 800d1b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800d158:	8894      	ldrh	r4, [r2, #4]
 800d15a:	f1bb 0f00 	cmp.w	fp, #0
 800d15e:	d03b      	beq.n	800d1d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800d160:	f892 900d 	ldrb.w	r9, [r2, #13]
 800d164:	f1bb 0f01 	cmp.w	fp, #1
 800d168:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800d16c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800d170:	f892 900a 	ldrb.w	r9, [r2, #10]
 800d174:	ea49 0903 	orr.w	r9, r9, r3
 800d178:	d134      	bne.n	800d1e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800d17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d17c:	eba5 0509 	sub.w	r5, r5, r9
 800d180:	2b00      	cmp	r3, #0
 800d182:	d14f      	bne.n	800d224 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800d184:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d186:	eb09 0305 	add.w	r3, r9, r5
 800d18a:	4413      	add	r3, r2
 800d18c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d18e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d192:	4293      	cmp	r3, r2
 800d194:	da51      	bge.n	800d23a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800d196:	e038      	b.n	800d20a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800d198:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d19a:	e79d      	b.n	800d0d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800d19c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800d1a0:	4659      	mov	r1, fp
 800d1a2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d1a4:	9301      	str	r3, [sp, #4]
 800d1a6:	ab1d      	add	r3, sp, #116	; 0x74
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	ab1c      	add	r3, sp, #112	; 0x70
 800d1ac:	f002 fe3e 	bl	800fe2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	e7c0      	b.n	800d136 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800d1b4:	f8d8 0000 	ldr.w	r0, [r8]
 800d1b8:	6803      	ldr	r3, [r0, #0]
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	4798      	blx	r3
 800d1be:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d1c2:	4298      	cmp	r0, r3
 800d1c4:	f000 80a6 	beq.w	800d314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d1c8:	f242 030b 	movw	r3, #8203	; 0x200b
 800d1cc:	4298      	cmp	r0, r3
 800d1ce:	f000 80a1 	beq.w	800d314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d1d2:	f1bb 0f00 	cmp.w	fp, #0
 800d1d6:	d100      	bne.n	800d1da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800d1d8:	444d      	add	r5, r9
 800d1da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d1dc:	2a00      	cmp	r2, #0
 800d1de:	d1bf      	bne.n	800d160 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800d1e0:	4691      	mov	r9, r2
 800d1e2:	e097      	b.n	800d314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d1e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 80ab 	beq.w	800d342 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800d1ec:	f1bb 0f00 	cmp.w	fp, #0
 800d1f0:	d118      	bne.n	800d224 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800d1f2:	f8d8 0000 	ldr.w	r0, [r8]
 800d1f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d1f8:	6803      	ldr	r3, [r0, #0]
 800d1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fc:	4798      	blx	r3
 800d1fe:	4405      	add	r5, r0
 800d200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d202:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d204:	1aeb      	subs	r3, r5, r3
 800d206:	4293      	cmp	r3, r2
 800d208:	dd17      	ble.n	800d23a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800d20a:	2c00      	cmp	r4, #0
 800d20c:	f000 8097 	beq.w	800d33e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800d210:	2c0a      	cmp	r4, #10
 800d212:	f040 8085 	bne.w	800d320 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800d216:	240a      	movs	r4, #10
 800d218:	fab4 f084 	clz	r0, r4
 800d21c:	0940      	lsrs	r0, r0, #5
 800d21e:	b01f      	add	sp, #124	; 0x7c
 800d220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d224:	f8d8 0000 	ldr.w	r0, [r8]
 800d228:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d22a:	6803      	ldr	r3, [r0, #0]
 800d22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d22e:	4798      	blx	r3
 800d230:	f1bb 0f01 	cmp.w	fp, #1
 800d234:	eba5 0500 	sub.w	r5, r5, r0
 800d238:	d0a4      	beq.n	800d184 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800d23a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d23c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d23e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800d242:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d246:	7b43      	ldrb	r3, [r0, #13]
 800d248:	4429      	add	r1, r5
 800d24a:	015b      	lsls	r3, r3, #5
 800d24c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d250:	7983      	ldrb	r3, [r0, #6]
 800d252:	4313      	orrs	r3, r2
 800d254:	440b      	add	r3, r1
 800d256:	42b3      	cmp	r3, r6
 800d258:	db5c      	blt.n	800d314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d25a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d25c:	4299      	cmp	r1, r3
 800d25e:	da59      	bge.n	800d314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d260:	f8d8 0000 	ldr.w	r0, [r8]
 800d264:	42ae      	cmp	r6, r5
 800d266:	6803      	ldr	r3, [r0, #0]
 800d268:	bfcc      	ite	gt
 800d26a:	1b76      	subgt	r6, r6, r5
 800d26c:	2600      	movle	r6, #0
 800d26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d270:	bfc8      	it	gt
 800d272:	b2b6      	uxthgt	r6, r6
 800d274:	4798      	blx	r3
 800d276:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d278:	7b5a      	ldrb	r2, [r3, #13]
 800d27a:	00d1      	lsls	r1, r2, #3
 800d27c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800d280:	7a19      	ldrb	r1, [r3, #8]
 800d282:	4339      	orrs	r1, r7
 800d284:	0657      	lsls	r7, r2, #25
 800d286:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800d288:	bf48      	it	mi
 800d28a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800d28e:	4407      	add	r7, r0
 800d290:	bf48      	it	mi
 800d292:	b209      	sxthmi	r1, r1
 800d294:	1a7f      	subs	r7, r7, r1
 800d296:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d298:	b2bf      	uxth	r7, r7
 800d29a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800d29e:	fa0f fa87 	sxth.w	sl, r7
 800d2a2:	4551      	cmp	r1, sl
 800d2a4:	dd3a      	ble.n	800d31c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800d2a6:	0112      	lsls	r2, r2, #4
 800d2a8:	79d8      	ldrb	r0, [r3, #7]
 800d2aa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800d2ae:	4302      	orrs	r2, r0
 800d2b0:	4492      	add	sl, r2
 800d2b2:	4551      	cmp	r1, sl
 800d2b4:	dc2e      	bgt.n	800d314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d2b6:	1bcf      	subs	r7, r1, r7
 800d2b8:	468a      	mov	sl, r1
 800d2ba:	b2bf      	uxth	r7, r7
 800d2bc:	9319      	str	r3, [sp, #100]	; 0x64
 800d2be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2c0:	f8d8 0000 	ldr.w	r0, [r8]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	6801      	ldr	r1, [r0, #0]
 800d2c8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800d2ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d2cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d2ce:	9218      	str	r2, [sp, #96]	; 0x60
 800d2d0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800d2d2:	4788      	blx	r1
 800d2d4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d2d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2da:	910b      	str	r1, [sp, #44]	; 0x2c
 800d2dc:	f898 100e 	ldrb.w	r1, [r8, #14]
 800d2e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d2e2:	910a      	str	r1, [sp, #40]	; 0x28
 800d2e4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800d2e8:	9109      	str	r1, [sp, #36]	; 0x24
 800d2ea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d2ee:	9305      	str	r3, [sp, #20]
 800d2f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d2f2:	9206      	str	r2, [sp, #24]
 800d2f4:	e9cd a601 	strd	sl, r6, [sp, #4]
 800d2f8:	442e      	add	r6, r5
 800d2fa:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800d2fe:	b236      	sxth	r6, r6
 800d300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d302:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800d306:	9600      	str	r6, [sp, #0]
 800d308:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800d312:	47b0      	blx	r6
 800d314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d316:	3301      	adds	r3, #1
 800d318:	930e      	str	r3, [sp, #56]	; 0x38
 800d31a:	e6e5      	b.n	800d0e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800d31c:	2700      	movs	r7, #0
 800d31e:	e7cd      	b.n	800d2bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800d320:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d322:	3501      	adds	r5, #1
 800d324:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d326:	429d      	cmp	r5, r3
 800d328:	f6bf af76 	bge.w	800d218 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800d32c:	4659      	mov	r1, fp
 800d32e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d330:	f7fb f9f4 	bl	800871c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800d334:	4604      	mov	r4, r0
 800d336:	b110      	cbz	r0, 800d33e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800d338:	280a      	cmp	r0, #10
 800d33a:	d1f2      	bne.n	800d322 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800d33c:	e76b      	b.n	800d216 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800d33e:	2400      	movs	r4, #0
 800d340:	e76a      	b.n	800d218 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800d342:	f1bb 0f00 	cmp.w	fp, #0
 800d346:	f43f af5b 	beq.w	800d200 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800d34a:	e776      	b.n	800d23a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800d34c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800d34c:	b530      	push	{r4, r5, lr}
 800d34e:	8a44      	ldrh	r4, [r0, #18]
 800d350:	8ac5      	ldrh	r5, [r0, #22]
 800d352:	82c3      	strh	r3, [r0, #22]
 800d354:	442c      	add	r4, r5
 800d356:	1ae4      	subs	r4, r4, r3
 800d358:	8b03      	ldrh	r3, [r0, #24]
 800d35a:	8244      	strh	r4, [r0, #18]
 800d35c:	8a84      	ldrh	r4, [r0, #20]
 800d35e:	4422      	add	r2, r4
 800d360:	440c      	add	r4, r1
 800d362:	1a59      	subs	r1, r3, r1
 800d364:	8342      	strh	r2, [r0, #26]
 800d366:	8284      	strh	r4, [r0, #20]
 800d368:	8301      	strh	r1, [r0, #24]
 800d36a:	bd30      	pop	{r4, r5, pc}

0800d36c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d370:	7a43      	ldrb	r3, [r0, #9]
 800d372:	b087      	sub	sp, #28
 800d374:	4604      	mov	r4, r0
 800d376:	460f      	mov	r7, r1
 800d378:	1eda      	subs	r2, r3, #3
 800d37a:	b2d2      	uxtb	r2, r2
 800d37c:	2900      	cmp	r1, #0
 800d37e:	d036      	beq.n	800d3ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800d380:	2a01      	cmp	r2, #1
 800d382:	d932      	bls.n	800d3ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800d384:	1e58      	subs	r0, r3, #1
 800d386:	f1d0 0b00 	rsbs	fp, r0, #0
 800d38a:	eb4b 0b00 	adc.w	fp, fp, r0
 800d38e:	1e99      	subs	r1, r3, #2
 800d390:	424b      	negs	r3, r1
 800d392:	414b      	adcs	r3, r1
 800d394:	9303      	str	r3, [sp, #12]
 800d396:	2300      	movs	r3, #0
 800d398:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d39c:	2500      	movs	r5, #0
 800d39e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800d3a2:	46a9      	mov	r9, r5
 800d3a4:	8265      	strh	r5, [r4, #18]
 800d3a6:	82a5      	strh	r5, [r4, #20]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	9305      	str	r3, [sp, #20]
 800d3ac:	8823      	ldrh	r3, [r4, #0]
 800d3ae:	2b20      	cmp	r3, #32
 800d3b0:	d02b      	beq.n	800d40a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800d3b2:	eba3 020a 	sub.w	r2, r3, sl
 800d3b6:	4256      	negs	r6, r2
 800d3b8:	4156      	adcs	r6, r2
 800d3ba:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d004      	beq.n	800d3cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800d3c2:	4553      	cmp	r3, sl
 800d3c4:	bf16      	itet	ne
 800d3c6:	4699      	movne	r9, r3
 800d3c8:	2601      	moveq	r6, #1
 800d3ca:	2600      	movne	r6, #0
 800d3cc:	ab05      	add	r3, sp, #20
 800d3ce:	68e2      	ldr	r2, [r4, #12]
 800d3d0:	7a21      	ldrb	r1, [r4, #8]
 800d3d2:	6860      	ldr	r0, [r4, #4]
 800d3d4:	f002 fcd2 	bl	800fd7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d3d8:	8020      	strh	r0, [r4, #0]
 800d3da:	b9c8      	cbnz	r0, 800d410 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800d3dc:	8b22      	ldrh	r2, [r4, #24]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7ff ffb2 	bl	800d34c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800d3e8:	e066      	b.n	800d4b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800d3ea:	468b      	mov	fp, r1
 800d3ec:	e7cf      	b.n	800d38e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	2a01      	cmp	r2, #1
 800d3f2:	9103      	str	r1, [sp, #12]
 800d3f4:	468b      	mov	fp, r1
 800d3f6:	bf8c      	ite	hi
 800d3f8:	2200      	movhi	r2, #0
 800d3fa:	2201      	movls	r2, #1
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	9202      	str	r2, [sp, #8]
 800d400:	bf8c      	ite	hi
 800d402:	2300      	movhi	r3, #0
 800d404:	2301      	movls	r3, #1
 800d406:	9301      	str	r3, [sp, #4]
 800d408:	e7c8      	b.n	800d39c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800d40a:	4699      	mov	r9, r3
 800d40c:	2601      	movs	r6, #1
 800d40e:	e7dd      	b.n	800d3cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800d410:	8ae3      	ldrh	r3, [r4, #22]
 800d412:	280a      	cmp	r0, #10
 800d414:	f103 0301 	add.w	r3, r3, #1
 800d418:	82e3      	strh	r3, [r4, #22]
 800d41a:	d0df      	beq.n	800d3dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800d41c:	9a05      	ldr	r2, [sp, #20]
 800d41e:	bb42      	cbnz	r2, 800d472 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800d420:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d424:	4298      	cmp	r0, r3
 800d426:	d001      	beq.n	800d42c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800d428:	4550      	cmp	r0, sl
 800d42a:	d1bd      	bne.n	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d42c:	8823      	ldrh	r3, [r4, #0]
 800d42e:	8b21      	ldrh	r1, [r4, #24]
 800d430:	2b20      	cmp	r3, #32
 800d432:	d001      	beq.n	800d438 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800d434:	4553      	cmp	r3, sl
 800d436:	d131      	bne.n	800d49c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800d438:	2e00      	cmp	r6, #0
 800d43a:	bf0a      	itet	eq
 800d43c:	460d      	moveq	r5, r1
 800d43e:	4630      	movne	r0, r6
 800d440:	2001      	moveq	r0, #1
 800d442:	440a      	add	r2, r1
 800d444:	8aa3      	ldrh	r3, [r4, #20]
 800d446:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800d44a:	b292      	uxth	r2, r2
 800d44c:	8322      	strh	r2, [r4, #24]
 800d44e:	4413      	add	r3, r2
 800d450:	2f00      	cmp	r7, #0
 800d452:	d03a      	beq.n	800d4ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800d454:	f1bb 0f00 	cmp.w	fp, #0
 800d458:	d102      	bne.n	800d460 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800d45a:	9903      	ldr	r1, [sp, #12]
 800d45c:	b301      	cbz	r1, 800d4a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800d45e:	b1f8      	cbz	r0, 800d4a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800d460:	8ba1      	ldrh	r1, [r4, #28]
 800d462:	4419      	add	r1, r3
 800d464:	458c      	cmp	ip, r1
 800d466:	da2a      	bge.n	800d4be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800d468:	8a61      	ldrh	r1, [r4, #18]
 800d46a:	b341      	cbz	r1, 800d4be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800d46c:	4563      	cmp	r3, ip
 800d46e:	dd9b      	ble.n	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d470:	e01c      	b.n	800d4ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800d472:	8893      	ldrh	r3, [r2, #4]
 800d474:	4649      	mov	r1, r9
 800d476:	8023      	strh	r3, [r4, #0]
 800d478:	f892 800d 	ldrb.w	r8, [r2, #13]
 800d47c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d480:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800d484:	f892 800a 	ldrb.w	r8, [r2, #10]
 800d488:	ea48 0800 	orr.w	r8, r8, r0
 800d48c:	68e0      	ldr	r0, [r4, #12]
 800d48e:	6803      	ldr	r3, [r0, #0]
 800d490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d492:	4798      	blx	r3
 800d494:	eb08 0200 	add.w	r2, r8, r0
 800d498:	b292      	uxth	r2, r2
 800d49a:	e7c7      	b.n	800d42c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800d49c:	2000      	movs	r0, #0
 800d49e:	e7d0      	b.n	800d442 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800d4a0:	4563      	cmp	r3, ip
 800d4a2:	dd81      	ble.n	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d4a4:	8a63      	ldrh	r3, [r4, #18]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f43f af7e 	beq.w	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	8ba2      	ldrh	r2, [r4, #28]
 800d4b0:	77a3      	strb	r3, [r4, #30]
 800d4b2:	8b63      	ldrh	r3, [r4, #26]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	8363      	strh	r3, [r4, #26]
 800d4b8:	b007      	add	sp, #28
 800d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4be:	2300      	movs	r3, #0
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f7ff ff42 	bl	800d34c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800d4c8:	e76e      	b.n	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d4ca:	4563      	cmp	r3, ip
 800d4cc:	dd14      	ble.n	800d4f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800d4ce:	9b02      	ldr	r3, [sp, #8]
 800d4d0:	b113      	cbz	r3, 800d4d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	460a      	mov	r2, r1
 800d4d6:	e783      	b.n	800d3e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800d4d8:	9b01      	ldr	r3, [sp, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f43f af64 	beq.w	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	f47f af61 	bne.w	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d4e6:	b116      	cbz	r6, 800d4ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	462a      	mov	r2, r5
 800d4ec:	e779      	b.n	800d3e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800d4ee:	8a63      	ldrh	r3, [r4, #18]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f43f af59 	beq.w	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d4f6:	e7df      	b.n	800d4b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	f47f af55 	bne.w	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d4fe:	2e00      	cmp	r6, #0
 800d500:	f43f af52 	beq.w	800d3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d504:	2301      	movs	r3, #1
 800d506:	462a      	mov	r2, r5
 800d508:	e7db      	b.n	800d4c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800d50a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800d50a:	b530      	push	{r4, r5, lr}
 800d50c:	4605      	mov	r5, r0
 800d50e:	b08b      	sub	sp, #44	; 0x2c
 800d510:	b191      	cbz	r1, 800d538 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800d512:	2401      	movs	r4, #1
 800d514:	e9cd 3100 	strd	r3, r1, [sp]
 800d518:	4613      	mov	r3, r2
 800d51a:	4601      	mov	r1, r0
 800d51c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800d520:	a802      	add	r0, sp, #8
 800d522:	f7ff fd0b 	bl	800cf3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800d526:	2100      	movs	r1, #0
 800d528:	a802      	add	r0, sp, #8
 800d52a:	f7ff ff1f 	bl	800d36c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d52e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d532:	b163      	cbz	r3, 800d54e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800d534:	3401      	adds	r4, #1
 800d536:	e7f6      	b.n	800d526 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800d538:	2401      	movs	r4, #1
 800d53a:	f002 fd19 	bl	800ff70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d53e:	280a      	cmp	r0, #10
 800d540:	4628      	mov	r0, r5
 800d542:	bf08      	it	eq
 800d544:	3401      	addeq	r4, #1
 800d546:	f002 fd13 	bl	800ff70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d1f7      	bne.n	800d53e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800d54e:	b2a0      	uxth	r0, r4
 800d550:	b00b      	add	sp, #44	; 0x2c
 800d552:	bd30      	pop	{r4, r5, pc}

0800d554 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d558:	b0e5      	sub	sp, #404	; 0x194
 800d55a:	4689      	mov	r9, r1
 800d55c:	461c      	mov	r4, r3
 800d55e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800d562:	900a      	str	r0, [sp, #40]	; 0x28
 800d564:	f1ba 0f00 	cmp.w	sl, #0
 800d568:	f000 80b4 	beq.w	800d6d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 80b0 	beq.w	800d6d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d574:	7ba3      	ldrb	r3, [r4, #14]
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 80ac 	beq.w	800d6d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d57c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800d580:	6810      	ldr	r0, [r2, #0]
 800d582:	6851      	ldr	r1, [r2, #4]
 800d584:	2500      	movs	r5, #0
 800d586:	4643      	mov	r3, r8
 800d588:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800d58c:	950f      	str	r5, [sp, #60]	; 0x3c
 800d58e:	af19      	add	r7, sp, #100	; 0x64
 800d590:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d594:	79a2      	ldrb	r2, [r4, #6]
 800d596:	c303      	stmia	r3!, {r0, r1}
 800d598:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800d59c:	a90f      	add	r1, sp, #60	; 0x3c
 800d59e:	4640      	mov	r0, r8
 800d5a0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d5a4:	f7ff fd40 	bl	800d028 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800d5a8:	a90f      	add	r1, sp, #60	; 0x3c
 800d5aa:	79a2      	ldrb	r2, [r4, #6]
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	f7ff fd3b 	bl	800d028 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	f002 f88e 	bl	800f6d4 <_ZN8touchgfx12TextProviderC1Ev>
 800d5b8:	6820      	ldr	r0, [r4, #0]
 800d5ba:	6803      	ldr	r3, [r0, #0]
 800d5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5be:	4798      	blx	r3
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	6820      	ldr	r0, [r4, #0]
 800d5c4:	6803      	ldr	r3, [r0, #0]
 800d5c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5c8:	4798      	blx	r3
 800d5ca:	4633      	mov	r3, r6
 800d5cc:	9000      	str	r0, [sp, #0]
 800d5ce:	4651      	mov	r1, sl
 800d5d0:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	f002 f8d1 	bl	800f77a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d5d8:	7923      	ldrb	r3, [r4, #4]
 800d5da:	6820      	ldr	r0, [r4, #0]
 800d5dc:	9308      	str	r3, [sp, #32]
 800d5de:	6803      	ldr	r3, [r0, #0]
 800d5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e2:	4798      	blx	r3
 800d5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e8:	181e      	adds	r6, r3, r0
 800d5ea:	42ae      	cmp	r6, r5
 800d5ec:	dd06      	ble.n	800d5fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800d5ee:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800d5f2:	4282      	cmp	r2, r0
 800d5f4:	bfa4      	itt	ge
 800d5f6:	189d      	addge	r5, r3, r2
 800d5f8:	fb95 f5f6 	sdivge	r5, r5, r6
 800d5fc:	a832      	add	r0, sp, #200	; 0xc8
 800d5fe:	f002 f869 	bl	800f6d4 <_ZN8touchgfx12TextProviderC1Ev>
 800d602:	7c23      	ldrb	r3, [r4, #16]
 800d604:	b17b      	cbz	r3, 800d626 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800d606:	6820      	ldr	r0, [r4, #0]
 800d608:	6803      	ldr	r3, [r0, #0]
 800d60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d60c:	4798      	blx	r3
 800d60e:	4683      	mov	fp, r0
 800d610:	6820      	ldr	r0, [r4, #0]
 800d612:	6803      	ldr	r3, [r0, #0]
 800d614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d616:	4798      	blx	r3
 800d618:	465b      	mov	r3, fp
 800d61a:	9000      	str	r0, [sp, #0]
 800d61c:	4651      	mov	r1, sl
 800d61e:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800d620:	a832      	add	r0, sp, #200	; 0xc8
 800d622:	f002 f8aa 	bl	800f77a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d626:	7be1      	ldrb	r1, [r4, #15]
 800d628:	a811      	add	r0, sp, #68	; 0x44
 800d62a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d62e:	7963      	ldrb	r3, [r4, #5]
 800d630:	1a52      	subs	r2, r2, r1
 800d632:	7c21      	ldrb	r1, [r4, #16]
 800d634:	9101      	str	r1, [sp, #4]
 800d636:	b292      	uxth	r2, r2
 800d638:	6821      	ldr	r1, [r4, #0]
 800d63a:	9100      	str	r1, [sp, #0]
 800d63c:	a932      	add	r1, sp, #200	; 0xc8
 800d63e:	f7ff fc7d 	bl	800cf3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800d642:	7c23      	ldrb	r3, [r4, #16]
 800d644:	b9bb      	cbnz	r3, 800d676 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800d646:	fa1f fa86 	uxth.w	sl, r6
 800d64a:	2d00      	cmp	r5, #0
 800d64c:	dd45      	ble.n	800d6da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800d64e:	4638      	mov	r0, r7
 800d650:	f002 fc8e 	bl	800ff70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d654:	2800      	cmp	r0, #0
 800d656:	d03d      	beq.n	800d6d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d658:	280a      	cmp	r0, #10
 800d65a:	d1f6      	bne.n	800d64a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800d65c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d660:	3d01      	subs	r5, #1
 800d662:	4453      	add	r3, sl
 800d664:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d668:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800d66c:	eba3 030a 	sub.w	r3, r3, sl
 800d670:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d674:	e7e9      	b.n	800d64a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800d676:	0073      	lsls	r3, r6, #1
 800d678:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800d67c:	fa1f fa86 	uxth.w	sl, r6
 800d680:	9309      	str	r3, [sp, #36]	; 0x24
 800d682:	2d00      	cmp	r5, #0
 800d684:	dd29      	ble.n	800d6da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800d686:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d68a:	a811      	add	r0, sp, #68	; 0x44
 800d68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d68e:	428b      	cmp	r3, r1
 800d690:	bfd4      	ite	le
 800d692:	2100      	movle	r1, #0
 800d694:	2101      	movgt	r1, #1
 800d696:	f7ff fe69 	bl	800d36c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d69a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	455b      	cmp	r3, fp
 800d6a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6a6:	d005      	beq.n	800d6b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800d6a8:	7961      	ldrb	r1, [r4, #5]
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	f7fb f836 	bl	800871c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800d6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6b2:	e7f4      	b.n	800d69e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800d6b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d6b8:	3d01      	subs	r5, #1
 800d6ba:	4453      	add	r3, sl
 800d6bc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d6c0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800d6c4:	eba3 030a 	sub.w	r3, r3, sl
 800d6c8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d6cc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1d6      	bne.n	800d682 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800d6d4:	b065      	add	sp, #404	; 0x194
 800d6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6da:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800d6de:	ad4b      	add	r5, sp, #300	; 0x12c
 800d6e0:	f04f 0b00 	mov.w	fp, #0
 800d6e4:	7c23      	ldrb	r3, [r4, #16]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d067      	beq.n	800d7ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800d6ea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d6ee:	a811      	add	r0, sp, #68	; 0x44
 800d6f0:	458a      	cmp	sl, r1
 800d6f2:	bfd4      	ite	le
 800d6f4:	2100      	movle	r1, #0
 800d6f6:	2101      	movgt	r1, #1
 800d6f8:	f7ff fe38 	bl	800d36c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d6fc:	9b08      	ldr	r3, [sp, #32]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d056      	beq.n	800d7b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800d702:	7c23      	ldrb	r3, [r4, #16]
 800d704:	2264      	movs	r2, #100	; 0x64
 800d706:	4639      	mov	r1, r7
 800d708:	4628      	mov	r0, r5
 800d70a:	9309      	str	r3, [sp, #36]	; 0x24
 800d70c:	f009 fe78 	bl	8017400 <memcpy>
 800d710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d712:	2b00      	cmp	r3, #0
 800d714:	d059      	beq.n	800d7ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 800d716:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800d71a:	7922      	ldrb	r2, [r4, #4]
 800d71c:	2a01      	cmp	r2, #1
 800d71e:	d13d      	bne.n	800d79c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800d720:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800d724:	1ac0      	subs	r0, r0, r3
 800d726:	2302      	movs	r3, #2
 800d728:	fb90 f0f3 	sdiv	r0, r0, r3
 800d72c:	b200      	sxth	r0, r0
 800d72e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d732:	4418      	add	r0, r3
 800d734:	7c23      	ldrb	r3, [r4, #16]
 800d736:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d03a      	beq.n	800d7b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800d73e:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800d742:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800d746:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800d74a:	9500      	str	r5, [sp, #0]
 800d74c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d74e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800d752:	e9cd b703 	strd	fp, r7, [sp, #12]
 800d756:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800d75a:	464a      	mov	r2, r9
 800d75c:	2100      	movs	r1, #0
 800d75e:	f7ff fc94 	bl	800d08a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800d762:	2800      	cmp	r0, #0
 800d764:	d1b6      	bne.n	800d6d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d766:	b2b2      	uxth	r2, r6
 800d768:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d76c:	4611      	mov	r1, r2
 800d76e:	4413      	add	r3, r2
 800d770:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800d774:	b21b      	sxth	r3, r3
 800d776:	1a52      	subs	r2, r2, r1
 800d778:	7c21      	ldrb	r1, [r4, #16]
 800d77a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d77e:	b212      	sxth	r2, r2
 800d780:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 800d784:	b109      	cbz	r1, 800d78a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 800d786:	42b2      	cmp	r2, r6
 800d788:	dba4      	blt.n	800d6d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d78a:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800d78e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800d792:	440a      	add	r2, r1
 800d794:	b212      	sxth	r2, r2
 800d796:	4293      	cmp	r3, r2
 800d798:	dda4      	ble.n	800d6e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 800d79a:	e79b      	b.n	800d6d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d79c:	2a02      	cmp	r2, #2
 800d79e:	d105      	bne.n	800d7ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 800d7a0:	7be2      	ldrb	r2, [r4, #15]
 800d7a2:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800d7a6:	1a80      	subs	r0, r0, r2
 800d7a8:	1ac0      	subs	r0, r0, r3
 800d7aa:	e7bf      	b.n	800d72c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	e7be      	b.n	800d72e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800d7b0:	7be0      	ldrb	r0, [r4, #15]
 800d7b2:	e7bc      	b.n	800d72e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800d7b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d7b8:	e7c3      	b.n	800d742 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 800d7ba:	9b08      	ldr	r3, [sp, #32]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d0f7      	beq.n	800d7b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800d7c0:	2264      	movs	r2, #100	; 0x64
 800d7c2:	4639      	mov	r1, r7
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	f009 fe1b 	bl	8017400 <memcpy>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d7d0:	6821      	ldr	r1, [r4, #0]
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f7ff fbec 	bl	800cfb0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800d7d8:	b203      	sxth	r3, r0
 800d7da:	e79e      	b.n	800d71a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0800d7dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	b510      	push	{r4, lr}
 800d7e0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d7e4:	d00b      	beq.n	800d7fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d00e      	beq.n	800d808 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d001      	beq.n	800d7f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800d7ee:	1860      	adds	r0, r4, r1
 800d7f0:	bd10      	pop	{r4, pc}
 800d7f2:	8880      	ldrh	r0, [r0, #4]
 800d7f4:	4420      	add	r0, r4
 800d7f6:	b200      	sxth	r0, r0
 800d7f8:	1a80      	subs	r0, r0, r2
 800d7fa:	3801      	subs	r0, #1
 800d7fc:	e7f8      	b.n	800d7f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800d7fe:	8880      	ldrh	r0, [r0, #4]
 800d800:	4420      	add	r0, r4
 800d802:	b200      	sxth	r0, r0
 800d804:	1a40      	subs	r0, r0, r1
 800d806:	e7f8      	b.n	800d7fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800d808:	18a0      	adds	r0, r4, r2
 800d80a:	e7f1      	b.n	800d7f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800d80c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	b510      	push	{r4, lr}
 800d810:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800d814:	d006      	beq.n	800d824 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800d816:	2b03      	cmp	r3, #3
 800d818:	d00a      	beq.n	800d830 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	bf14      	ite	ne
 800d81e:	18a0      	addne	r0, r4, r2
 800d820:	1860      	addeq	r0, r4, r1
 800d822:	bd10      	pop	{r4, pc}
 800d824:	88c0      	ldrh	r0, [r0, #6]
 800d826:	4420      	add	r0, r4
 800d828:	b200      	sxth	r0, r0
 800d82a:	1a80      	subs	r0, r0, r2
 800d82c:	3801      	subs	r0, #1
 800d82e:	e7f8      	b.n	800d822 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800d830:	88c0      	ldrh	r0, [r0, #6]
 800d832:	4420      	add	r0, r4
 800d834:	b200      	sxth	r0, r0
 800d836:	1a40      	subs	r0, r0, r1
 800d838:	e7f8      	b.n	800d82c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800d83c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800d83c:	4b01      	ldr	r3, [pc, #4]	; (800d844 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800d83e:	2200      	movs	r2, #0
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	4770      	bx	lr
 800d844:	2400fa2c 	.word	0x2400fa2c

0800d848 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800d848:	4603      	mov	r3, r0
 800d84a:	b1c8      	cbz	r0, 800d880 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800d84c:	0c02      	lsrs	r2, r0, #16
 800d84e:	0412      	lsls	r2, r2, #16
 800d850:	b9a2      	cbnz	r2, 800d87c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800d852:	0403      	lsls	r3, r0, #16
 800d854:	2010      	movs	r0, #16
 800d856:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d85a:	bf04      	itt	eq
 800d85c:	021b      	lsleq	r3, r3, #8
 800d85e:	3008      	addeq	r0, #8
 800d860:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d864:	bf04      	itt	eq
 800d866:	011b      	lsleq	r3, r3, #4
 800d868:	3004      	addeq	r0, #4
 800d86a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d86e:	bf04      	itt	eq
 800d870:	009b      	lsleq	r3, r3, #2
 800d872:	3002      	addeq	r0, #2
 800d874:	2b00      	cmp	r3, #0
 800d876:	db04      	blt.n	800d882 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800d878:	3001      	adds	r0, #1
 800d87a:	4770      	bx	lr
 800d87c:	2000      	movs	r0, #0
 800d87e:	e7ea      	b.n	800d856 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800d880:	2020      	movs	r0, #32
 800d882:	4770      	bx	lr

0800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	b087      	sub	sp, #28
 800d88a:	4681      	mov	r9, r0
 800d88c:	4698      	mov	r8, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	460d      	mov	r5, r1
 800d892:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800d896:	b981      	cbnz	r1, 800d8ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800d898:	b14b      	cbz	r3, 800d8ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800d89a:	460b      	mov	r3, r1
 800d89c:	464a      	mov	r2, r9
 800d89e:	4641      	mov	r1, r8
 800d8a0:	e9cd 4700 	strd	r4, r7, [sp]
 800d8a4:	f7ff ffee 	bl	800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d8a8:	b007      	add	sp, #28
 800d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d8b6:	603b      	str	r3, [r7, #0]
 800d8b8:	e7f6      	b.n	800d8a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800d8ba:	fa32 fa01 	lsrs.w	sl, r2, r1
 800d8be:	d107      	bne.n	800d8d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800d8c0:	fb09 f602 	mul.w	r6, r9, r2
 800d8c4:	fbb6 f0f4 	udiv	r0, r6, r4
 800d8c8:	fb04 6610 	mls	r6, r4, r0, r6
 800d8cc:	603e      	str	r6, [r7, #0]
 800d8ce:	e7eb      	b.n	800d8a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800d8d0:	2601      	movs	r6, #1
 800d8d2:	fa09 fb01 	lsl.w	fp, r9, r1
 800d8d6:	408e      	lsls	r6, r1
 800d8d8:	fbbb f3f4 	udiv	r3, fp, r4
 800d8dc:	3e01      	subs	r6, #1
 800d8de:	9302      	str	r3, [sp, #8]
 800d8e0:	fb0a f303 	mul.w	r3, sl, r3
 800d8e4:	4016      	ands	r6, r2
 800d8e6:	9303      	str	r3, [sp, #12]
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f7ff ffad 	bl	800d848 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d8ee:	464a      	mov	r2, r9
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	e9cd 4700 	strd	r4, r7, [sp]
 800d8fa:	f7ff ffc3 	bl	800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d8fe:	9b02      	ldr	r3, [sp, #8]
 800d900:	4606      	mov	r6, r0
 800d902:	eb05 0108 	add.w	r1, r5, r8
 800d906:	fb04 bb13 	mls	fp, r4, r3, fp
 800d90a:	4658      	mov	r0, fp
 800d90c:	f7ff ff9c 	bl	800d848 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d910:	ab05      	add	r3, sp, #20
 800d912:	465a      	mov	r2, fp
 800d914:	e9cd 4300 	strd	r4, r3, [sp]
 800d918:	4603      	mov	r3, r0
 800d91a:	4650      	mov	r0, sl
 800d91c:	f7ff ffb2 	bl	800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d920:	6839      	ldr	r1, [r7, #0]
 800d922:	9a05      	ldr	r2, [sp, #20]
 800d924:	9b03      	ldr	r3, [sp, #12]
 800d926:	4411      	add	r1, r2
 800d928:	fbb1 f2f4 	udiv	r2, r1, r4
 800d92c:	18d3      	adds	r3, r2, r3
 800d92e:	fb04 1412 	mls	r4, r4, r2, r1
 800d932:	441e      	add	r6, r3
 800d934:	603c      	str	r4, [r7, #0]
 800d936:	4430      	add	r0, r6
 800d938:	e7b6      	b.n	800d8a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800d93a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d93e:	b085      	sub	sp, #20
 800d940:	f1b0 0900 	subs.w	r9, r0, #0
 800d944:	461d      	mov	r5, r3
 800d946:	4617      	mov	r7, r2
 800d948:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d94a:	bfbb      	ittet	lt
 800d94c:	f1c9 0900 	rsblt	r9, r9, #0
 800d950:	f04f 36ff 	movlt.w	r6, #4294967295
 800d954:	2601      	movge	r6, #1
 800d956:	6823      	ldrlt	r3, [r4, #0]
 800d958:	bfbc      	itt	lt
 800d95a:	425b      	neglt	r3, r3
 800d95c:	6023      	strlt	r3, [r4, #0]
 800d95e:	2a00      	cmp	r2, #0
 800d960:	da04      	bge.n	800d96c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	4257      	negs	r7, r2
 800d966:	4276      	negs	r6, r6
 800d968:	425b      	negs	r3, r3
 800d96a:	6023      	str	r3, [r4, #0]
 800d96c:	2d00      	cmp	r5, #0
 800d96e:	4638      	mov	r0, r7
 800d970:	bfba      	itte	lt
 800d972:	426d      	neglt	r5, r5
 800d974:	f04f 38ff 	movlt.w	r8, #4294967295
 800d978:	f04f 0801 	movge.w	r8, #1
 800d97c:	f7ff ff64 	bl	800d848 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d980:	ab03      	add	r3, sp, #12
 800d982:	463a      	mov	r2, r7
 800d984:	e9cd 5300 	strd	r5, r3, [sp]
 800d988:	4603      	mov	r3, r0
 800d98a:	4648      	mov	r0, r9
 800d98c:	f7ff ff7a 	bl	800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	9a03      	ldr	r2, [sp, #12]
 800d994:	4546      	cmp	r6, r8
 800d996:	441a      	add	r2, r3
 800d998:	fb92 f3f5 	sdiv	r3, r2, r5
 800d99c:	4418      	add	r0, r3
 800d99e:	fb05 2313 	mls	r3, r5, r3, r2
 800d9a2:	bf18      	it	ne
 800d9a4:	4240      	negne	r0, r0
 800d9a6:	1c72      	adds	r2, r6, #1
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	d105      	bne.n	800d9b8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f1c3 0200 	rsb	r2, r3, #0
 800d9b2:	db0b      	blt.n	800d9cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800d9b4:	6022      	str	r2, [r4, #0]
 800d9b6:	e006      	b.n	800d9c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d9b8:	2e01      	cmp	r6, #1
 800d9ba:	d104      	bne.n	800d9c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	da02      	bge.n	800d9c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d9c0:	442b      	add	r3, r5
 800d9c2:	3801      	subs	r0, #1
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	b005      	add	sp, #20
 800d9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9cc:	3801      	subs	r0, #1
 800d9ce:	1b52      	subs	r2, r2, r5
 800d9d0:	e7f0      	b.n	800d9b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800d9d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800d9d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d9d8:	4c1c      	ldr	r4, [pc, #112]	; (800da4c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800d9da:	4605      	mov	r5, r0
 800d9dc:	6807      	ldr	r7, [r0, #0]
 800d9de:	69a3      	ldr	r3, [r4, #24]
 800d9e0:	b92b      	cbnz	r3, 800d9ee <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800d9e2:	6840      	ldr	r0, [r0, #4]
 800d9e4:	e9c5 7000 	strd	r7, r0, [r5]
 800d9e8:	b004      	add	sp, #16
 800d9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ee:	f04f 0802 	mov.w	r8, #2
 800d9f2:	68a2      	ldr	r2, [r4, #8]
 800d9f4:	ae04      	add	r6, sp, #16
 800d9f6:	6820      	ldr	r0, [r4, #0]
 800d9f8:	fb93 f1f8 	sdiv	r1, r3, r8
 800d9fc:	440a      	add	r2, r1
 800d9fe:	69e1      	ldr	r1, [r4, #28]
 800da00:	f846 2d04 	str.w	r2, [r6, #-4]!
 800da04:	463a      	mov	r2, r7
 800da06:	9600      	str	r6, [sp, #0]
 800da08:	f7ff ff97 	bl	800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800da0c:	69a3      	ldr	r3, [r4, #24]
 800da0e:	4607      	mov	r7, r0
 800da10:	686a      	ldr	r2, [r5, #4]
 800da12:	6a21      	ldr	r1, [r4, #32]
 800da14:	9600      	str	r6, [sp, #0]
 800da16:	6860      	ldr	r0, [r4, #4]
 800da18:	f7ff ff8f 	bl	800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800da1c:	69a3      	ldr	r3, [r4, #24]
 800da1e:	6962      	ldr	r2, [r4, #20]
 800da20:	4407      	add	r7, r0
 800da22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800da24:	9600      	str	r6, [sp, #0]
 800da26:	68e0      	ldr	r0, [r4, #12]
 800da28:	fb93 f8f8 	sdiv	r8, r3, r8
 800da2c:	4442      	add	r2, r8
 800da2e:	9203      	str	r2, [sp, #12]
 800da30:	682a      	ldr	r2, [r5, #0]
 800da32:	f7ff ff82 	bl	800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800da36:	4680      	mov	r8, r0
 800da38:	9600      	str	r6, [sp, #0]
 800da3a:	69a3      	ldr	r3, [r4, #24]
 800da3c:	686a      	ldr	r2, [r5, #4]
 800da3e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800da40:	6920      	ldr	r0, [r4, #16]
 800da42:	f7ff ff7a 	bl	800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800da46:	4440      	add	r0, r8
 800da48:	e7cc      	b.n	800d9e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800da4a:	bf00      	nop
 800da4c:	2400fa30 	.word	0x2400fa30

0800da50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800da50:	4b07      	ldr	r3, [pc, #28]	; (800da70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d109      	bne.n	800da6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800da58:	f9b1 3000 	ldrsh.w	r3, [r1]
 800da5c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800da60:	8003      	strh	r3, [r0, #0]
 800da62:	4b04      	ldr	r3, [pc, #16]	; (800da74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	3b01      	subs	r3, #1
 800da68:	1a9b      	subs	r3, r3, r2
 800da6a:	800b      	strh	r3, [r1, #0]
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	2400fa14 	.word	0x2400fa14
 800da74:	2400fa18 	.word	0x2400fa18

0800da78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800da78:	4b07      	ldr	r3, [pc, #28]	; (800da98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800da7a:	b510      	push	{r4, lr}
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d108      	bne.n	800da94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800da82:	4b06      	ldr	r3, [pc, #24]	; (800da9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800da84:	880c      	ldrh	r4, [r1, #0]
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	f9b0 2000 	ldrsh.w	r2, [r0]
 800da8c:	3b01      	subs	r3, #1
 800da8e:	1b1b      	subs	r3, r3, r4
 800da90:	8003      	strh	r3, [r0, #0]
 800da92:	800a      	strh	r2, [r1, #0]
 800da94:	bd10      	pop	{r4, pc}
 800da96:	bf00      	nop
 800da98:	2400fa14 	.word	0x2400fa14
 800da9c:	2400fa18 	.word	0x2400fa18

0800daa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800daa0:	4b0a      	ldr	r3, [pc, #40]	; (800dacc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800daa2:	b510      	push	{r4, lr}
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d10e      	bne.n	800dac8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800daaa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800daae:	8843      	ldrh	r3, [r0, #2]
 800dab0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800dab4:	18ca      	adds	r2, r1, r3
 800dab6:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800dab8:	8044      	strh	r4, [r0, #2]
 800daba:	881b      	ldrh	r3, [r3, #0]
 800dabc:	1a9b      	subs	r3, r3, r2
 800dabe:	8003      	strh	r3, [r0, #0]
 800dac0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dac4:	8081      	strh	r1, [r0, #4]
 800dac6:	80c3      	strh	r3, [r0, #6]
 800dac8:	bd10      	pop	{r4, pc}
 800daca:	bf00      	nop
 800dacc:	2400fa14 	.word	0x2400fa14
 800dad0:	2400fa18 	.word	0x2400fa18

0800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800dad4:	4b08      	ldr	r3, [pc, #32]	; (800daf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d10c      	bne.n	800daf6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800dadc:	8803      	ldrh	r3, [r0, #0]
 800dade:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800dae2:	8842      	ldrh	r2, [r0, #2]
 800dae4:	8002      	strh	r2, [r0, #0]
 800dae6:	185a      	adds	r2, r3, r1
 800dae8:	4b04      	ldr	r3, [pc, #16]	; (800dafc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800daea:	881b      	ldrh	r3, [r3, #0]
 800daec:	1a9b      	subs	r3, r3, r2
 800daee:	8043      	strh	r3, [r0, #2]
 800daf0:	88c3      	ldrh	r3, [r0, #6]
 800daf2:	80c1      	strh	r1, [r0, #6]
 800daf4:	8083      	strh	r3, [r0, #4]
 800daf6:	4770      	bx	lr
 800daf8:	2400fa14 	.word	0x2400fa14
 800dafc:	2400fa18 	.word	0x2400fa18

0800db00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800db00:	4b07      	ldr	r3, [pc, #28]	; (800db20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800db02:	b510      	push	{r4, lr}
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d108      	bne.n	800db1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800db0a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800db0e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800db12:	8003      	strh	r3, [r0, #0]
 800db14:	8893      	ldrh	r3, [r2, #4]
 800db16:	3b01      	subs	r3, #1
 800db18:	1b1b      	subs	r3, r3, r4
 800db1a:	800b      	strh	r3, [r1, #0]
 800db1c:	bd10      	pop	{r4, pc}
 800db1e:	bf00      	nop
 800db20:	2400fa14 	.word	0x2400fa14

0800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800db24:	4b0a      	ldr	r3, [pc, #40]	; (800db50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800db26:	460a      	mov	r2, r1
 800db28:	b510      	push	{r4, lr}
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d10d      	bne.n	800db4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800db30:	8881      	ldrh	r1, [r0, #4]
 800db32:	8803      	ldrh	r3, [r0, #0]
 800db34:	440b      	add	r3, r1
 800db36:	4601      	mov	r1, r0
 800db38:	3b01      	subs	r3, #1
 800db3a:	f821 3b02 	strh.w	r3, [r1], #2
 800db3e:	f7ff ffdf 	bl	800db00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800db42:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800db46:	88c2      	ldrh	r2, [r0, #6]
 800db48:	80c3      	strh	r3, [r0, #6]
 800db4a:	8082      	strh	r2, [r0, #4]
 800db4c:	bd10      	pop	{r4, pc}
 800db4e:	bf00      	nop
 800db50:	2400fa14 	.word	0x2400fa14

0800db54 <_ZN8touchgfx11Application13requestRedrawEv>:
 800db54:	4b06      	ldr	r3, [pc, #24]	; (800db70 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800db56:	2100      	movs	r1, #0
 800db58:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db5c:	4b05      	ldr	r3, [pc, #20]	; (800db74 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800db5e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800db62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db66:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800db6a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800db6e:	4770      	bx	lr
 800db70:	2400fa10 	.word	0x2400fa10
 800db74:	2400fa12 	.word	0x2400fa12

0800db78 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800db78:	4b03      	ldr	r3, [pc, #12]	; (800db88 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800db7a:	6818      	ldr	r0, [r3, #0]
 800db7c:	b110      	cbz	r0, 800db84 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800db7e:	6803      	ldr	r3, [r0, #0]
 800db80:	699b      	ldr	r3, [r3, #24]
 800db82:	4718      	bx	r3
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	2400fa60 	.word	0x2400fa60

0800db8c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800db8c:	4770      	bx	lr
	...

0800db90 <_ZN8touchgfx11Application4drawEv>:
 800db90:	4b09      	ldr	r3, [pc, #36]	; (800dbb8 <_ZN8touchgfx11Application4drawEv+0x28>)
 800db92:	b507      	push	{r0, r1, r2, lr}
 800db94:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db98:	2100      	movs	r1, #0
 800db9a:	4b08      	ldr	r3, [pc, #32]	; (800dbbc <_ZN8touchgfx11Application4drawEv+0x2c>)
 800db9c:	9100      	str	r1, [sp, #0]
 800db9e:	4669      	mov	r1, sp
 800dba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dba4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800dba8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dbac:	6803      	ldr	r3, [r0, #0]
 800dbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbb0:	4798      	blx	r3
 800dbb2:	b003      	add	sp, #12
 800dbb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbb8:	2400fa10 	.word	0x2400fa10
 800dbbc:	2400fa12 	.word	0x2400fa12

0800dbc0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800dbc0:	4b03      	ldr	r3, [pc, #12]	; (800dbd0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800dbc2:	6818      	ldr	r0, [r3, #0]
 800dbc4:	b110      	cbz	r0, 800dbcc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800dbc6:	6803      	ldr	r3, [r0, #0]
 800dbc8:	69db      	ldr	r3, [r3, #28]
 800dbca:	4718      	bx	r3
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	2400fa60 	.word	0x2400fa60

0800dbd4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800dbd4:	4b03      	ldr	r3, [pc, #12]	; (800dbe4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	b110      	cbz	r0, 800dbe0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800dbda:	6803      	ldr	r3, [r0, #0]
 800dbdc:	6a1b      	ldr	r3, [r3, #32]
 800dbde:	4718      	bx	r3
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	2400fa60 	.word	0x2400fa60

0800dbe8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800dbe8:	4b03      	ldr	r3, [pc, #12]	; (800dbf8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800dbea:	6818      	ldr	r0, [r3, #0]
 800dbec:	b110      	cbz	r0, 800dbf4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800dbee:	6803      	ldr	r3, [r0, #0]
 800dbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf2:	4718      	bx	r3
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop
 800dbf8:	2400fa60 	.word	0x2400fa60

0800dbfc <_ZN8touchgfx11ApplicationD1Ev>:
 800dbfc:	4770      	bx	lr

0800dbfe <_ZN8touchgfx11ApplicationD0Ev>:
 800dbfe:	b510      	push	{r4, lr}
 800dc00:	4604      	mov	r4, r0
 800dc02:	f44f 719c 	mov.w	r1, #312	; 0x138
 800dc06:	f008 fc81 	bl	801650c <_ZdlPvj>
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	bd10      	pop	{r4, pc}
	...

0800dc10 <_ZN8touchgfx11Application15handleTickEventEv>:
 800dc10:	b570      	push	{r4, r5, r6, lr}
 800dc12:	4d38      	ldr	r5, [pc, #224]	; (800dcf4 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 800dc14:	4604      	mov	r4, r0
 800dc16:	6828      	ldr	r0, [r5, #0]
 800dc18:	b140      	cbz	r0, 800dc2c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800dc1a:	7a03      	ldrb	r3, [r0, #8]
 800dc1c:	b933      	cbnz	r3, 800dc2c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800dc1e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800dc22:	6803      	ldr	r3, [r0, #0]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc2a:	4718      	bx	r3
 800dc2c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800dc30:	b97b      	cbnz	r3, 800dc52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dc32:	b170      	cbz	r0, 800dc52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dc34:	7a03      	ldrb	r3, [r0, #8]
 800dc36:	b163      	cbz	r3, 800dc52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dc38:	4b2f      	ldr	r3, [pc, #188]	; (800dcf8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800dc3a:	6818      	ldr	r0, [r3, #0]
 800dc3c:	b110      	cbz	r0, 800dc44 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800dc3e:	6803      	ldr	r3, [r0, #0]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	4798      	blx	r3
 800dc44:	6828      	ldr	r0, [r5, #0]
 800dc46:	6803      	ldr	r3, [r0, #0]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	4798      	blx	r3
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800dc52:	2500      	movs	r5, #0
 800dc54:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800dc58:	42a8      	cmp	r0, r5
 800dc5a:	dd0c      	ble.n	800dc76 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800dc5c:	1963      	adds	r3, r4, r5
 800dc5e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800dc62:	b132      	cbz	r2, 800dc72 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800dc64:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800dc68:	4413      	add	r3, r2
 800dc6a:	6858      	ldr	r0, [r3, #4]
 800dc6c:	6803      	ldr	r3, [r0, #0]
 800dc6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc70:	4798      	blx	r3
 800dc72:	3501      	adds	r5, #1
 800dc74:	e7ee      	b.n	800dc54 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800dc76:	2300      	movs	r3, #0
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4298      	cmp	r0, r3
 800dc7c:	d10f      	bne.n	800dc9e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 800dc7e:	1d25      	adds	r5, r4, #4
 800dc80:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800dc84:	4291      	cmp	r1, r2
 800dc86:	dd2d      	ble.n	800dce4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 800dc88:	1e48      	subs	r0, r1, #1
 800dc8a:	b280      	uxth	r0, r0
 800dc8c:	4288      	cmp	r0, r1
 800dc8e:	d31a      	bcc.n	800dcc6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800dc90:	4b1a      	ldr	r3, [pc, #104]	; (800dcfc <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800dc92:	f240 11a9 	movw	r1, #425	; 0x1a9
 800dc96:	4a1a      	ldr	r2, [pc, #104]	; (800dd00 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800dc98:	481a      	ldr	r0, [pc, #104]	; (800dd04 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800dc9a:	f009 fa47 	bl	801712c <__assert_func>
 800dc9e:	18e1      	adds	r1, r4, r3
 800dca0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800dca4:	b16d      	cbz	r5, 800dcc2 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d00a      	beq.n	800dcc0 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 800dcaa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800dcae:	4431      	add	r1, r6
 800dcb0:	684e      	ldr	r6, [r1, #4]
 800dcb2:	b291      	uxth	r1, r2
 800dcb4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dcb8:	604e      	str	r6, [r1, #4]
 800dcba:	18a1      	adds	r1, r4, r2
 800dcbc:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800dcc0:	3201      	adds	r2, #1
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	e7d9      	b.n	800dc7a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800dcc6:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800dcca:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800dcce:	3304      	adds	r3, #4
 800dcd0:	428b      	cmp	r3, r1
 800dcd2:	d004      	beq.n	800dcde <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 800dcd4:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800dcd8:	f843 6c04 	str.w	r6, [r3, #-4]
 800dcdc:	e7f8      	b.n	800dcd0 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800dcde:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800dce2:	e7cd      	b.n	800dc80 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800dce4:	4b04      	ldr	r3, [pc, #16]	; (800dcf8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800dce6:	6818      	ldr	r0, [r3, #0]
 800dce8:	b110      	cbz	r0, 800dcf0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800dcea:	6803      	ldr	r3, [r0, #0]
 800dcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcee:	e79a      	b.n	800dc26 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800dcf0:	bd70      	pop	{r4, r5, r6, pc}
 800dcf2:	bf00      	nop
 800dcf4:	2400fa64 	.word	0x2400fa64
 800dcf8:	2400fa60 	.word	0x2400fa60
 800dcfc:	0801a512 	.word	0x0801a512
 800dd00:	0801a6fc 	.word	0x0801a6fc
 800dd04:	0801a520 	.word	0x0801a520

0800dd08 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800dd08:	b570      	push	{r4, r5, r6, lr}
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	460c      	mov	r4, r1
 800dd0e:	b929      	cbnz	r1, 800dd1c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800dd10:	4b0c      	ldr	r3, [pc, #48]	; (800dd44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800dd12:	2167      	movs	r1, #103	; 0x67
 800dd14:	4a0c      	ldr	r2, [pc, #48]	; (800dd48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800dd16:	480d      	ldr	r0, [pc, #52]	; (800dd4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800dd18:	f009 fa08 	bl	801712c <__assert_func>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	4d0c      	ldr	r5, [pc, #48]	; (800dd50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800dd20:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800dd24:	6828      	ldr	r0, [r5, #0]
 800dd26:	b110      	cbz	r0, 800dd2e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800dd28:	6803      	ldr	r3, [r0, #0]
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	4798      	blx	r3
 800dd2e:	602c      	str	r4, [r5, #0]
 800dd30:	4620      	mov	r0, r4
 800dd32:	6823      	ldr	r3, [r4, #0]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	4798      	blx	r3
 800dd38:	6833      	ldr	r3, [r6, #0]
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd42:	4718      	bx	r3
 800dd44:	0801a4de 	.word	0x0801a4de
 800dd48:	0801a5bc 	.word	0x0801a5bc
 800dd4c:	0801a4e8 	.word	0x0801a4e8
 800dd50:	2400fa60 	.word	0x2400fa60

0800dd54 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800dd54:	b510      	push	{r4, lr}
 800dd56:	f9b1 4000 	ldrsh.w	r4, [r1]
 800dd5a:	888a      	ldrh	r2, [r1, #4]
 800dd5c:	f9b0 3000 	ldrsh.w	r3, [r0]
 800dd60:	4422      	add	r2, r4
 800dd62:	b212      	sxth	r2, r2
 800dd64:	4293      	cmp	r3, r2
 800dd66:	da15      	bge.n	800dd94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800dd68:	8882      	ldrh	r2, [r0, #4]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	b21b      	sxth	r3, r3
 800dd6e:	429c      	cmp	r4, r3
 800dd70:	da10      	bge.n	800dd94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800dd72:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800dd76:	88c9      	ldrh	r1, [r1, #6]
 800dd78:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800dd7c:	4419      	add	r1, r3
 800dd7e:	b209      	sxth	r1, r1
 800dd80:	428a      	cmp	r2, r1
 800dd82:	da07      	bge.n	800dd94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800dd84:	88c0      	ldrh	r0, [r0, #6]
 800dd86:	4410      	add	r0, r2
 800dd88:	b200      	sxth	r0, r0
 800dd8a:	4283      	cmp	r3, r0
 800dd8c:	bfac      	ite	ge
 800dd8e:	2000      	movge	r0, #0
 800dd90:	2001      	movlt	r0, #1
 800dd92:	bd10      	pop	{r4, pc}
 800dd94:	2000      	movs	r0, #0
 800dd96:	e7fc      	b.n	800dd92 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800dd98 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800dd9e:	f9b0 5000 	ldrsh.w	r5, [r0]
 800dda2:	42ac      	cmp	r4, r5
 800dda4:	db18      	blt.n	800ddd8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800dda6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800ddaa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	db12      	blt.n	800ddd8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800ddb2:	8886      	ldrh	r6, [r0, #4]
 800ddb4:	4435      	add	r5, r6
 800ddb6:	888e      	ldrh	r6, [r1, #4]
 800ddb8:	4434      	add	r4, r6
 800ddba:	b22d      	sxth	r5, r5
 800ddbc:	b224      	sxth	r4, r4
 800ddbe:	42a5      	cmp	r5, r4
 800ddc0:	db0a      	blt.n	800ddd8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800ddc2:	88c0      	ldrh	r0, [r0, #6]
 800ddc4:	4418      	add	r0, r3
 800ddc6:	88cb      	ldrh	r3, [r1, #6]
 800ddc8:	441a      	add	r2, r3
 800ddca:	b200      	sxth	r0, r0
 800ddcc:	b212      	sxth	r2, r2
 800ddce:	4290      	cmp	r0, r2
 800ddd0:	bfb4      	ite	lt
 800ddd2:	2000      	movlt	r0, #0
 800ddd4:	2001      	movge	r0, #1
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	2000      	movs	r0, #0
 800ddda:	e7fc      	b.n	800ddd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800dddc <_ZN8touchgfx11Application11getInstanceEv>:
 800dddc:	4b01      	ldr	r3, [pc, #4]	; (800dde4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800ddde:	6818      	ldr	r0, [r3, #0]
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	2400fa70 	.word	0x2400fa70

0800dde8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800dde8:	2300      	movs	r3, #0
 800ddea:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800ddee:	30a8      	adds	r0, #168	; 0xa8
 800ddf0:	f820 3c24 	strh.w	r3, [r0, #-36]
 800ddf4:	f802 3b01 	strb.w	r3, [r2], #1
 800ddf8:	4282      	cmp	r2, r0
 800ddfa:	d1fb      	bne.n	800ddf4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800ddfc:	4770      	bx	lr

0800ddfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800ddfe:	4603      	mov	r3, r0
 800de00:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800de04:	2200      	movs	r2, #0
 800de06:	801a      	strh	r2, [r3, #0]
 800de08:	3308      	adds	r3, #8
 800de0a:	f823 2c06 	strh.w	r2, [r3, #-6]
 800de0e:	f823 2c04 	strh.w	r2, [r3, #-4]
 800de12:	f823 2c02 	strh.w	r2, [r3, #-2]
 800de16:	428b      	cmp	r3, r1
 800de18:	d1f5      	bne.n	800de06 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800de1a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800de1e:	4770      	bx	lr

0800de20 <_ZN8touchgfx11ApplicationC1Ev>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	4b1a      	ldr	r3, [pc, #104]	; (800de8c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800de24:	2500      	movs	r5, #0
 800de26:	4604      	mov	r4, r0
 800de28:	30a8      	adds	r0, #168	; 0xa8
 800de2a:	f840 3ca8 	str.w	r3, [r0, #-168]
 800de2e:	f820 5c24 	strh.w	r5, [r0, #-36]
 800de32:	f7ff ffe4 	bl	800ddfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800de36:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800de3a:	f7ff ffe0 	bl	800ddfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800de3e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800de42:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800de46:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800de4a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800de4e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800de52:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 800de56:	490e      	ldr	r1, [pc, #56]	; (800de90 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800de58:	480e      	ldr	r0, [pc, #56]	; (800de94 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800de5a:	f008 f929 	bl	80160b0 <CRC_Lock>
 800de5e:	4e0e      	ldr	r6, [pc, #56]	; (800de98 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800de60:	4b0e      	ldr	r3, [pc, #56]	; (800de9c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800de62:	b158      	cbz	r0, 800de7c <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 800de64:	801d      	strh	r5, [r3, #0]
 800de66:	2300      	movs	r3, #0
 800de68:	4a0d      	ldr	r2, [pc, #52]	; (800dea0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800de6a:	4620      	mov	r0, r4
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	4a0d      	ldr	r2, [pc, #52]	; (800dea4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800de70:	6033      	str	r3, [r6, #0]
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	f7ff ffb8 	bl	800dde8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800de78:	4620      	mov	r0, r4
 800de7a:	bd70      	pop	{r4, r5, r6, pc}
 800de7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de80:	2002      	movs	r0, #2
 800de82:	801a      	strh	r2, [r3, #0]
 800de84:	6030      	str	r0, [r6, #0]
 800de86:	f001 faab 	bl	800f3e0 <_ZN8touchgfx6Screen4drawEv>
 800de8a:	e7ec      	b.n	800de66 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 800de8c:	0801a580 	.word	0x0801a580
 800de90:	b5e8b5cd 	.word	0xb5e8b5cd
 800de94:	f407a5c2 	.word	0xf407a5c2
 800de98:	2400fa60 	.word	0x2400fa60
 800de9c:	24000030 	.word	0x24000030
 800dea0:	2400fa70 	.word	0x2400fa70
 800dea4:	2400fa64 	.word	0x2400fa64

0800dea8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800deae:	428b      	cmp	r3, r1
 800deb0:	d806      	bhi.n	800dec0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 800deb2:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 800deb4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800deb8:	4a0a      	ldr	r2, [pc, #40]	; (800dee4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 800deba:	480b      	ldr	r0, [pc, #44]	; (800dee8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 800debc:	f009 f936 	bl	801712c <__assert_func>
 800dec0:	3b01      	subs	r3, #1
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	428b      	cmp	r3, r1
 800dec6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800deca:	d908      	bls.n	800dede <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 800decc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ded0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800deda:	685a      	ldr	r2, [r3, #4]
 800dedc:	6062      	str	r2, [r4, #4]
 800dede:	bd10      	pop	{r4, pc}
 800dee0:	0801a512 	.word	0x0801a512
 800dee4:	0801a600 	.word	0x0801a600
 800dee8:	0801a520 	.word	0x0801a520

0800deec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800deec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deee:	466b      	mov	r3, sp
 800def0:	4604      	mov	r4, r0
 800def2:	e883 0006 	stmia.w	r3, {r1, r2}
 800def6:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800defa:	2a07      	cmp	r2, #7
 800defc:	d906      	bls.n	800df0c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800defe:	4b09      	ldr	r3, [pc, #36]	; (800df24 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800df00:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800df04:	4a08      	ldr	r2, [pc, #32]	; (800df28 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800df06:	4809      	ldr	r0, [pc, #36]	; (800df2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800df08:	f009 f910 	bl	801712c <__assert_func>
 800df0c:	1c51      	adds	r1, r2, #1
 800df0e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800df12:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800df16:	cb03      	ldmia	r3!, {r0, r1}
 800df18:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800df1c:	6069      	str	r1, [r5, #4]
 800df1e:	b003      	add	sp, #12
 800df20:	bd30      	pop	{r4, r5, pc}
 800df22:	bf00      	nop
 800df24:	0801a549 	.word	0x0801a549
 800df28:	0801a696 	.word	0x0801a696
 800df2c:	0801a520 	.word	0x0801a520

0800df30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df34:	b08d      	sub	sp, #52	; 0x34
 800df36:	4683      	mov	fp, r0
 800df38:	ac08      	add	r4, sp, #32
 800df3a:	4620      	mov	r0, r4
 800df3c:	e884 0006 	stmia.w	r4, {r1, r2}
 800df40:	f7fb ff95 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800df44:	2800      	cmp	r0, #0
 800df46:	d16a      	bne.n	800e01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800df48:	9402      	str	r4, [sp, #8]
 800df4a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800df4e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800df52:	2400      	movs	r4, #0
 800df54:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	36a0      	adds	r6, #160	; 0xa0
 800df5c:	42a5      	cmp	r5, r4
 800df5e:	d00d      	beq.n	800df7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 800df60:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800df64:	9802      	ldr	r0, [sp, #8]
 800df66:	f7ff ff17 	bl	800dd98 <_ZNK8touchgfx4Rect8includesERKS0_>
 800df6a:	b128      	cbz	r0, 800df78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 800df6c:	1e69      	subs	r1, r5, #1
 800df6e:	9801      	ldr	r0, [sp, #4]
 800df70:	1b09      	subs	r1, r1, r4
 800df72:	b289      	uxth	r1, r1
 800df74:	f7ff ff98 	bl	800dea8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800df78:	3401      	adds	r4, #1
 800df7a:	e7ef      	b.n	800df5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800df7c:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800df80:	1e7b      	subs	r3, r7, #1
 800df82:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800df86:	9703      	str	r7, [sp, #12]
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	2400      	movs	r4, #0
 800df8c:	4655      	mov	r5, sl
 800df8e:	9704      	str	r7, [sp, #16]
 800df90:	4626      	mov	r6, r4
 800df92:	9b04      	ldr	r3, [sp, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d078      	beq.n	800e08a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 800df98:	9902      	ldr	r1, [sp, #8]
 800df9a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800df9e:	f7ff fed9 	bl	800dd54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800dfa2:	b360      	cbz	r0, 800dffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800dfa4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 800dfa8:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800dfac:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 800dfb0:	45e6      	cmp	lr, ip
 800dfb2:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800dfb6:	db35      	blt.n	800e024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800dfb8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800dfbc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800dfc0:	4472      	add	r2, lr
 800dfc2:	4463      	add	r3, ip
 800dfc4:	b212      	sxth	r2, r2
 800dfc6:	b21b      	sxth	r3, r3
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	dc2b      	bgt.n	800e024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800dfcc:	fa1f f288 	uxth.w	r2, r8
 800dfd0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800dfd4:	45c1      	cmp	r9, r8
 800dfd6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800dfda:	4413      	add	r3, r2
 800dfdc:	fa1f fc89 	uxth.w	ip, r9
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	fa0f fe83 	sxth.w	lr, r3
 800dfe6:	db0f      	blt.n	800e008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 800dfe8:	eba3 030c 	sub.w	r3, r3, ip
 800dfec:	1ac9      	subs	r1, r1, r3
 800dfee:	b209      	sxth	r1, r1
 800dff0:	2900      	cmp	r1, #0
 800dff2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800dff6:	dd12      	ble.n	800e01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800dff8:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 800dffc:	4604      	mov	r4, r0
 800dffe:	9b04      	ldr	r3, [sp, #16]
 800e000:	3d08      	subs	r5, #8
 800e002:	3b01      	subs	r3, #1
 800e004:	9304      	str	r3, [sp, #16]
 800e006:	e7c4      	b.n	800df92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 800e008:	4461      	add	r1, ip
 800e00a:	b209      	sxth	r1, r1
 800e00c:	4571      	cmp	r1, lr
 800e00e:	dc3a      	bgt.n	800e086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800e010:	eba2 020c 	sub.w	r2, r2, ip
 800e014:	b212      	sxth	r2, r2
 800e016:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e01a:	2a00      	cmp	r2, #0
 800e01c:	dcee      	bgt.n	800dffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800e01e:	b00d      	add	sp, #52	; 0x34
 800e020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e024:	45c1      	cmp	r9, r8
 800e026:	db2e      	blt.n	800e086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800e028:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800e02c:	4499      	add	r9, r3
 800e02e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800e032:	4498      	add	r8, r3
 800e034:	fa0f f989 	sxth.w	r9, r9
 800e038:	fa0f f888 	sxth.w	r8, r8
 800e03c:	45c1      	cmp	r9, r8
 800e03e:	dc22      	bgt.n	800e086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800e040:	fa1f f28c 	uxth.w	r2, ip
 800e044:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800e048:	45e6      	cmp	lr, ip
 800e04a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800e04e:	4413      	add	r3, r2
 800e050:	fa1f f88e 	uxth.w	r8, lr
 800e054:	b29b      	uxth	r3, r3
 800e056:	fa0f f983 	sxth.w	r9, r3
 800e05a:	db0a      	blt.n	800e072 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 800e05c:	eba3 0308 	sub.w	r3, r3, r8
 800e060:	1ac9      	subs	r1, r1, r3
 800e062:	b209      	sxth	r1, r1
 800e064:	2900      	cmp	r1, #0
 800e066:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800e06a:	ddd8      	ble.n	800e01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800e06c:	f8ad 9020 	strh.w	r9, [sp, #32]
 800e070:	e7c4      	b.n	800dffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800e072:	4441      	add	r1, r8
 800e074:	b209      	sxth	r1, r1
 800e076:	4549      	cmp	r1, r9
 800e078:	dc05      	bgt.n	800e086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800e07a:	eba2 0208 	sub.w	r2, r2, r8
 800e07e:	b212      	sxth	r2, r2
 800e080:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800e084:	e7c9      	b.n	800e01a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800e086:	4606      	mov	r6, r0
 800e088:	e7b9      	b.n	800dffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800e08a:	2c00      	cmp	r4, #0
 800e08c:	f47f af7d 	bne.w	800df8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800e090:	2e00      	cmp	r6, #0
 800e092:	f000 81dc 	beq.w	800e44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800e096:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 800e09a:	4655      	mov	r5, sl
 800e09c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800e0a0:	b2b9      	uxth	r1, r7
 800e0a2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e0a6:	b2b3      	uxth	r3, r6
 800e0a8:	9104      	str	r1, [sp, #16]
 800e0aa:	9804      	ldr	r0, [sp, #16]
 800e0ac:	441a      	add	r2, r3
 800e0ae:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e0b2:	b292      	uxth	r2, r2
 800e0b4:	4401      	add	r1, r0
 800e0b6:	fa0f f882 	sxth.w	r8, r2
 800e0ba:	b289      	uxth	r1, r1
 800e0bc:	9105      	str	r1, [sp, #20]
 800e0be:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800e0c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e0c6:	9b03      	ldr	r3, [sp, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d054      	beq.n	800e176 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800e0cc:	9902      	ldr	r1, [sp, #8]
 800e0ce:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800e0d2:	f7ff fe3f 	bl	800dd54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e0d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0da:	b1d8      	cbz	r0, 800e114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e0dc:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800e0e0:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800e0e4:	4576      	cmp	r6, lr
 800e0e6:	dc26      	bgt.n	800e136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800e0e8:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800e0ec:	44f4      	add	ip, lr
 800e0ee:	fa0f fc8c 	sxth.w	ip, ip
 800e0f2:	45e0      	cmp	r8, ip
 800e0f4:	db1f      	blt.n	800e136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800e0f6:	428f      	cmp	r7, r1
 800e0f8:	fa1f fc81 	uxth.w	ip, r1
 800e0fc:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800e100:	dc0f      	bgt.n	800e122 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800e102:	9805      	ldr	r0, [sp, #20]
 800e104:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800e108:	eba0 0c0c 	sub.w	ip, r0, ip
 800e10c:	eba1 010c 	sub.w	r1, r1, ip
 800e110:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800e114:	4620      	mov	r0, r4
 800e116:	9903      	ldr	r1, [sp, #12]
 800e118:	3d08      	subs	r5, #8
 800e11a:	4604      	mov	r4, r0
 800e11c:	3901      	subs	r1, #1
 800e11e:	9103      	str	r1, [sp, #12]
 800e120:	e7cf      	b.n	800e0c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 800e122:	4461      	add	r1, ip
 800e124:	b209      	sxth	r1, r1
 800e126:	4549      	cmp	r1, r9
 800e128:	dcf5      	bgt.n	800e116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e12a:	9904      	ldr	r1, [sp, #16]
 800e12c:	eba1 0c0c 	sub.w	ip, r1, ip
 800e130:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800e134:	e7ee      	b.n	800e114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e136:	428f      	cmp	r7, r1
 800e138:	dced      	bgt.n	800e116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e13a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800e13e:	4461      	add	r1, ip
 800e140:	b209      	sxth	r1, r1
 800e142:	4589      	cmp	r9, r1
 800e144:	dbe7      	blt.n	800e116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e146:	4576      	cmp	r6, lr
 800e148:	fa1f fc8e 	uxth.w	ip, lr
 800e14c:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800e150:	dc08      	bgt.n	800e164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 800e152:	eba2 0c0c 	sub.w	ip, r2, ip
 800e156:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800e15a:	eba1 010c 	sub.w	r1, r1, ip
 800e15e:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800e162:	e7d7      	b.n	800e114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e164:	4461      	add	r1, ip
 800e166:	b209      	sxth	r1, r1
 800e168:	4588      	cmp	r8, r1
 800e16a:	dbd4      	blt.n	800e116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e16c:	eba3 0c0c 	sub.w	ip, r3, ip
 800e170:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800e174:	e7ce      	b.n	800e114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e176:	2c00      	cmp	r4, #0
 800e178:	f000 8169 	beq.w	800e44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800e17c:	9b00      	ldr	r3, [sp, #0]
 800e17e:	3301      	adds	r3, #1
 800e180:	f000 8165 	beq.w	800e44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800e184:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800e188:	9802      	ldr	r0, [sp, #8]
 800e18a:	4621      	mov	r1, r4
 800e18c:	f7ff fe04 	bl	800dd98 <_ZNK8touchgfx4Rect8includesERKS0_>
 800e190:	b120      	cbz	r0, 800e19c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 800e192:	f8bd 1000 	ldrh.w	r1, [sp]
 800e196:	9801      	ldr	r0, [sp, #4]
 800e198:	f7ff fe86 	bl	800dea8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e19c:	9902      	ldr	r1, [sp, #8]
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f7ff fdd8 	bl	800dd54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	f000 809b 	beq.w	800e2e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 800e1aa:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800e1ae:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800e1b2:	fa1f f288 	uxth.w	r2, r8
 800e1b6:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 800e1ba:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 800e1be:	19d5      	adds	r5, r2, r7
 800e1c0:	b2a1      	uxth	r1, r4
 800e1c2:	45a0      	cmp	r8, r4
 800e1c4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800e1c8:	fa1f f985 	uxth.w	r9, r5
 800e1cc:	440b      	add	r3, r1
 800e1ce:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 800e1d2:	fa0f f589 	sxth.w	r5, r9
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	9503      	str	r5, [sp, #12]
 800e1da:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800e1de:	9507      	str	r5, [sp, #28]
 800e1e0:	f340 809d 	ble.w	800e31e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800e1e4:	1a52      	subs	r2, r2, r1
 800e1e6:	4584      	cmp	ip, r0
 800e1e8:	fa0f fe83 	sxth.w	lr, r3
 800e1ec:	b292      	uxth	r2, r2
 800e1ee:	b215      	sxth	r5, r2
 800e1f0:	dd2f      	ble.n	800e252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 800e1f2:	9e00      	ldr	r6, [sp, #0]
 800e1f4:	fa1f fc8c 	uxth.w	ip, ip
 800e1f8:	b280      	uxth	r0, r0
 800e1fa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e1fe:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 800e202:	9e03      	ldr	r6, [sp, #12]
 800e204:	ebac 0300 	sub.w	r3, ip, r0
 800e208:	448c      	add	ip, r1
 800e20a:	eba6 060e 	sub.w	r6, r6, lr
 800e20e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 800e212:	b29b      	uxth	r3, r3
 800e214:	4470      	add	r0, lr
 800e216:	fa0f fc8c 	sxth.w	ip, ip
 800e21a:	b21c      	sxth	r4, r3
 800e21c:	b200      	sxth	r0, r0
 800e21e:	4366      	muls	r6, r4
 800e220:	ebac 0000 	sub.w	r0, ip, r0
 800e224:	4368      	muls	r0, r5
 800e226:	4286      	cmp	r6, r0
 800e228:	db09      	blt.n	800e23e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 800e22a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 800e22e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800e232:	4417      	add	r7, r2
 800e234:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e238:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800e23c:	e685      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e23e:	440b      	add	r3, r1
 800e240:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 800e244:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e248:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800e24c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e250:	e67b      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e252:	9e03      	ldr	r6, [sp, #12]
 800e254:	45b6      	cmp	lr, r6
 800e256:	da28      	bge.n	800e2aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 800e258:	9b00      	ldr	r3, [sp, #0]
 800e25a:	eba6 060e 	sub.w	r6, r6, lr
 800e25e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 800e262:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 800e266:	eb04 030c 	add.w	r3, r4, ip
 800e26a:	fa1f f883 	uxth.w	r8, r3
 800e26e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 800e272:	4403      	add	r3, r0
 800e274:	fa0f f988 	sxth.w	r9, r8
 800e278:	eba0 000c 	sub.w	r0, r0, ip
 800e27c:	eba3 0308 	sub.w	r3, r3, r8
 800e280:	4368      	muls	r0, r5
 800e282:	b29b      	uxth	r3, r3
 800e284:	fa0f f883 	sxth.w	r8, r3
 800e288:	fb08 f606 	mul.w	r6, r8, r6
 800e28c:	42b0      	cmp	r0, r6
 800e28e:	dc06      	bgt.n	800e29e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 800e290:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 800e294:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 800e298:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 800e29c:	e7c9      	b.n	800e232 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 800e29e:	4423      	add	r3, r4
 800e2a0:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 800e2a4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e2a8:	e64f      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e2aa:	eba3 0309 	sub.w	r3, r3, r9
 800e2ae:	9807      	ldr	r0, [sp, #28]
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	2806      	cmp	r0, #6
 800e2b4:	fa0f fc83 	sxth.w	ip, r3
 800e2b8:	d818      	bhi.n	800e2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 800e2ba:	4652      	mov	r2, sl
 800e2bc:	ab0a      	add	r3, sp, #40	; 0x28
 800e2be:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 800e2c2:	6851      	ldr	r1, [r2, #4]
 800e2c4:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 800e2c8:	c303      	stmia	r3!, {r0, r1}
 800e2ca:	9b03      	ldr	r3, [sp, #12]
 800e2cc:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800e2d0:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800e2d4:	ab0a      	add	r3, sp, #40	; 0x28
 800e2d6:	9801      	ldr	r0, [sp, #4]
 800e2d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e2dc:	f7ff fe06 	bl	800deec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e2e0:	9b00      	ldr	r3, [sp, #0]
 800e2e2:	f1aa 0a08 	sub.w	sl, sl, #8
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	e747      	b.n	800e17c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800e2ec:	9800      	ldr	r0, [sp, #0]
 800e2ee:	45ac      	cmp	ip, r5
 800e2f0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800e2f4:	db0c      	blt.n	800e310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 800e2f6:	4417      	add	r7, r2
 800e2f8:	4458      	add	r0, fp
 800e2fa:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e2fe:	b2bf      	uxth	r7, r7
 800e300:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 800e304:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800e308:	440f      	add	r7, r1
 800e30a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 800e30e:	e61c      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e310:	4458      	add	r0, fp
 800e312:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 800e316:	443b      	add	r3, r7
 800e318:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e31c:	e615      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e31e:	fa1f f18c 	uxth.w	r1, ip
 800e322:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 800e326:	b282      	uxth	r2, r0
 800e328:	4584      	cmp	ip, r0
 800e32a:	eb01 0e05 	add.w	lr, r1, r5
 800e32e:	9204      	str	r2, [sp, #16]
 800e330:	fa1f fe8e 	uxth.w	lr, lr
 800e334:	9e04      	ldr	r6, [sp, #16]
 800e336:	fa0f f28e 	sxth.w	r2, lr
 800e33a:	9205      	str	r2, [sp, #20]
 800e33c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 800e340:	4432      	add	r2, r6
 800e342:	b292      	uxth	r2, r2
 800e344:	9206      	str	r2, [sp, #24]
 800e346:	da26      	bge.n	800e396 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 800e348:	eba3 0309 	sub.w	r3, r3, r9
 800e34c:	eba2 020e 	sub.w	r2, r2, lr
 800e350:	eba0 000c 	sub.w	r0, r0, ip
 800e354:	eba4 0408 	sub.w	r4, r4, r8
 800e358:	b29b      	uxth	r3, r3
 800e35a:	b292      	uxth	r2, r2
 800e35c:	fa0f fa83 	sxth.w	sl, r3
 800e360:	b211      	sxth	r1, r2
 800e362:	fb0a f000 	mul.w	r0, sl, r0
 800e366:	434c      	muls	r4, r1
 800e368:	42a0      	cmp	r0, r4
 800e36a:	9800      	ldr	r0, [sp, #0]
 800e36c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800e370:	dc06      	bgt.n	800e380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 800e372:	4458      	add	r0, fp
 800e374:	9a05      	ldr	r2, [sp, #20]
 800e376:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 800e37a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800e37e:	e7ca      	b.n	800e316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800e380:	eb0b 0300 	add.w	r3, fp, r0
 800e384:	9903      	ldr	r1, [sp, #12]
 800e386:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 800e38a:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 800e38e:	442a      	add	r2, r5
 800e390:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e394:	e5d9      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e396:	9e04      	ldr	r6, [sp, #16]
 800e398:	9a03      	ldr	r2, [sp, #12]
 800e39a:	1b89      	subs	r1, r1, r6
 800e39c:	b21e      	sxth	r6, r3
 800e39e:	b289      	uxth	r1, r1
 800e3a0:	4296      	cmp	r6, r2
 800e3a2:	fa0f fc81 	sxth.w	ip, r1
 800e3a6:	dd25      	ble.n	800e3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 800e3a8:	eba3 0309 	sub.w	r3, r3, r9
 800e3ac:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800e3b0:	9e05      	ldr	r6, [sp, #20]
 800e3b2:	eba4 0408 	sub.w	r4, r4, r8
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	eba6 0902 	sub.w	r9, r6, r2
 800e3bc:	fb0c f404 	mul.w	r4, ip, r4
 800e3c0:	b218      	sxth	r0, r3
 800e3c2:	9a00      	ldr	r2, [sp, #0]
 800e3c4:	fb00 f909 	mul.w	r9, r0, r9
 800e3c8:	00d2      	lsls	r2, r2, #3
 800e3ca:	454c      	cmp	r4, r9
 800e3cc:	db03      	blt.n	800e3d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 800e3ce:	445a      	add	r2, fp
 800e3d0:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 800e3d4:	e79f      	b.n	800e316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800e3d6:	eb0b 0302 	add.w	r3, fp, r2
 800e3da:	9a03      	ldr	r2, [sp, #12]
 800e3dc:	4429      	add	r1, r5
 800e3de:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800e3e2:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 800e3e6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e3ea:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800e3ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e3f2:	e5aa      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e3f4:	9b06      	ldr	r3, [sp, #24]
 800e3f6:	9c07      	ldr	r4, [sp, #28]
 800e3f8:	eba3 020e 	sub.w	r2, r3, lr
 800e3fc:	2c06      	cmp	r4, #6
 800e3fe:	b292      	uxth	r2, r2
 800e400:	b213      	sxth	r3, r2
 800e402:	d80d      	bhi.n	800e420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 800e404:	4651      	mov	r1, sl
 800e406:	aa0a      	add	r2, sp, #40	; 0x28
 800e408:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 800e40c:	6849      	ldr	r1, [r1, #4]
 800e40e:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 800e412:	9b05      	ldr	r3, [sp, #20]
 800e414:	c203      	stmia	r2!, {r0, r1}
 800e416:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800e41a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 800e41e:	e759      	b.n	800e2d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 800e420:	9c00      	ldr	r4, [sp, #0]
 800e422:	4563      	cmp	r3, ip
 800e424:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800e428:	db0d      	blt.n	800e446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 800e42a:	4429      	add	r1, r5
 800e42c:	9a04      	ldr	r2, [sp, #16]
 800e42e:	445c      	add	r4, fp
 800e430:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800e434:	b289      	uxth	r1, r1
 800e436:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 800e43a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800e43e:	4411      	add	r1, r2
 800e440:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 800e444:	e581      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e446:	445c      	add	r4, fp
 800e448:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 800e44c:	e79f      	b.n	800e38e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 800e44e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800e452:	2f07      	cmp	r7, #7
 800e454:	d806      	bhi.n	800e464 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 800e456:	ab08      	add	r3, sp, #32
 800e458:	9801      	ldr	r0, [sp, #4]
 800e45a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e45e:	f7ff fd45 	bl	800deec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e462:	e5dc      	b.n	800e01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800e464:	f107 39ff 	add.w	r9, r7, #4294967295
 800e468:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800e46c:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800e470:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800e474:	f04f 35ff 	mov.w	r5, #4294967295
 800e478:	2400      	movs	r4, #0
 800e47a:	9304      	str	r3, [sp, #16]
 800e47c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800e480:	f109 32ff 	add.w	r2, r9, #4294967295
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	4690      	mov	r8, r2
 800e488:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800e48c:	9303      	str	r3, [sp, #12]
 800e48e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e492:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e496:	6818      	ldr	r0, [r3, #0]
 800e498:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800e49c:	9206      	str	r2, [sp, #24]
 800e49e:	bf16      	itet	ne
 800e4a0:	9904      	ldrne	r1, [sp, #16]
 800e4a2:	f8dd e008 	ldreq.w	lr, [sp, #8]
 800e4a6:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800e4b0:	f8be 6004 	ldrh.w	r6, [lr, #4]
 800e4b4:	fb16 f601 	smulbb	r6, r6, r1
 800e4b8:	6859      	ldr	r1, [r3, #4]
 800e4ba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e4be:	4671      	mov	r1, lr
 800e4c0:	a80a      	add	r0, sp, #40	; 0x28
 800e4c2:	f7fd fb28 	bl	800bb16 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e4c6:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800e4ca:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800e4ce:	9b03      	ldr	r3, [sp, #12]
 800e4d0:	9a00      	ldr	r2, [sp, #0]
 800e4d2:	fb11 f100 	smulbb	r1, r1, r0
 800e4d6:	2008      	movs	r0, #8
 800e4d8:	fb02 6603 	mla	r6, r2, r3, r6
 800e4dc:	1b8e      	subs	r6, r1, r6
 800e4de:	fb91 f1f0 	sdiv	r1, r1, r0
 800e4e2:	42b1      	cmp	r1, r6
 800e4e4:	dc21      	bgt.n	800e52a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800e4e6:	4556      	cmp	r6, sl
 800e4e8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800e4ec:	da03      	bge.n	800e4f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 800e4ee:	b1e6      	cbz	r6, 800e52a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800e4f0:	46b2      	mov	sl, r6
 800e4f2:	4645      	mov	r5, r8
 800e4f4:	464c      	mov	r4, r9
 800e4f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4fa:	f118 0f02 	cmn.w	r8, #2
 800e4fe:	d1c8      	bne.n	800e492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 800e500:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e504:	f1a7 0708 	sub.w	r7, r7, #8
 800e508:	4691      	mov	r9, r2
 800e50a:	d1b7      	bne.n	800e47c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 800e50c:	9b01      	ldr	r3, [sp, #4]
 800e50e:	b2a6      	uxth	r6, r4
 800e510:	00e4      	lsls	r4, r4, #3
 800e512:	1918      	adds	r0, r3, r4
 800e514:	1c6b      	adds	r3, r5, #1
 800e516:	d10b      	bne.n	800e530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 800e518:	4601      	mov	r1, r0
 800e51a:	9802      	ldr	r0, [sp, #8]
 800e51c:	f7fd fafb 	bl	800bb16 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e520:	4631      	mov	r1, r6
 800e522:	9801      	ldr	r0, [sp, #4]
 800e524:	f7ff fcc0 	bl	800dea8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e528:	e50f      	b.n	800df4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e52a:	4645      	mov	r5, r8
 800e52c:	464c      	mov	r4, r9
 800e52e:	e7ed      	b.n	800e50c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 800e530:	9b01      	ldr	r3, [sp, #4]
 800e532:	00ed      	lsls	r5, r5, #3
 800e534:	445c      	add	r4, fp
 800e536:	1959      	adds	r1, r3, r5
 800e538:	445d      	add	r5, fp
 800e53a:	f7fd faec 	bl	800bb16 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e53e:	9b02      	ldr	r3, [sp, #8]
 800e540:	cb03      	ldmia	r3!, {r0, r1}
 800e542:	9b02      	ldr	r3, [sp, #8]
 800e544:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800e548:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 800e54c:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 800e550:	6861      	ldr	r1, [r4, #4]
 800e552:	c303      	stmia	r3!, {r0, r1}
 800e554:	e7e4      	b.n	800e520 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0800e558 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800e558:	4b1d      	ldr	r3, [pc, #116]	; (800e5d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 800e55a:	b530      	push	{r4, r5, lr}
 800e55c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e560:	b085      	sub	sp, #20
 800e562:	4b1c      	ldr	r3, [pc, #112]	; (800e5d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 800e564:	460c      	mov	r4, r1
 800e566:	2100      	movs	r1, #0
 800e568:	4605      	mov	r5, r0
 800e56a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e56e:	6820      	ldr	r0, [r4, #0]
 800e570:	9100      	str	r1, [sp, #0]
 800e572:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e576:	ab02      	add	r3, sp, #8
 800e578:	6861      	ldr	r1, [r4, #4]
 800e57a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e57e:	c303      	stmia	r3!, {r0, r1}
 800e580:	4669      	mov	r1, sp
 800e582:	a802      	add	r0, sp, #8
 800e584:	f7fb fc30 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800e588:	ab02      	add	r3, sp, #8
 800e58a:	cb03      	ldmia	r3!, {r0, r1}
 800e58c:	4b12      	ldr	r3, [pc, #72]	; (800e5d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 800e58e:	6020      	str	r0, [r4, #0]
 800e590:	6818      	ldr	r0, [r3, #0]
 800e592:	6061      	str	r1, [r4, #4]
 800e594:	b138      	cbz	r0, 800e5a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800e596:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 800e59a:	b133      	cbz	r3, 800e5aa <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 800e59c:	6821      	ldr	r1, [r4, #0]
 800e59e:	4628      	mov	r0, r5
 800e5a0:	6862      	ldr	r2, [r4, #4]
 800e5a2:	f7ff fcc5 	bl	800df30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e5a6:	b005      	add	sp, #20
 800e5a8:	bd30      	pop	{r4, r5, pc}
 800e5aa:	6803      	ldr	r3, [r0, #0]
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	689b      	ldr	r3, [r3, #8]
 800e5b0:	4798      	blx	r3
 800e5b2:	4b0a      	ldr	r3, [pc, #40]	; (800e5dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 800e5b4:	6818      	ldr	r0, [r3, #0]
 800e5b6:	b118      	cbz	r0, 800e5c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 800e5b8:	6803      	ldr	r3, [r0, #0]
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	4798      	blx	r3
 800e5c0:	4b07      	ldr	r3, [pc, #28]	; (800e5e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 800e5c2:	4621      	mov	r1, r4
 800e5c4:	6818      	ldr	r0, [r3, #0]
 800e5c6:	6803      	ldr	r3, [r0, #0]
 800e5c8:	69db      	ldr	r3, [r3, #28]
 800e5ca:	4798      	blx	r3
 800e5cc:	e7eb      	b.n	800e5a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800e5ce:	bf00      	nop
 800e5d0:	2400fa10 	.word	0x2400fa10
 800e5d4:	2400fa12 	.word	0x2400fa12
 800e5d8:	2400fa60 	.word	0x2400fa60
 800e5dc:	2400fa5c 	.word	0x2400fa5c
 800e5e0:	2400fa1c 	.word	0x2400fa1c

0800e5e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800e5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	b09b      	sub	sp, #108	; 0x6c
 800e5ec:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 800e5f0:	b129      	cbz	r1, 800e5fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800e5f8:	b01b      	add	sp, #108	; 0x6c
 800e5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fe:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800e602:	4630      	mov	r0, r6
 800e604:	f7fb fc33 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e608:	4605      	mov	r5, r0
 800e60a:	b940      	cbnz	r0, 800e61e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 800e60c:	4620      	mov	r0, r4
 800e60e:	e896 0006 	ldmia.w	r6, {r1, r2}
 800e612:	f7ff fc8d 	bl	800df30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e616:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800e61a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800e61e:	4ba6      	ldr	r3, [pc, #664]	; (800e8b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	b33b      	cbz	r3, 800e674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800e624:	4da5      	ldr	r5, [pc, #660]	; (800e8bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 800e626:	4628      	mov	r0, r5
 800e628:	f7fb fc21 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e62c:	4606      	mov	r6, r0
 800e62e:	bb08      	cbnz	r0, 800e674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800e630:	4628      	mov	r0, r5
 800e632:	f7ff fa35 	bl	800daa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800e636:	6829      	ldr	r1, [r5, #0]
 800e638:	686a      	ldr	r2, [r5, #4]
 800e63a:	4620      	mov	r0, r4
 800e63c:	f7ff fc78 	bl	800df30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e640:	802e      	strh	r6, [r5, #0]
 800e642:	806e      	strh	r6, [r5, #2]
 800e644:	80ae      	strh	r6, [r5, #4]
 800e646:	80ee      	strh	r6, [r5, #6]
 800e648:	4f9d      	ldr	r7, [pc, #628]	; (800e8c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 800e64a:	a809      	add	r0, sp, #36	; 0x24
 800e64c:	f7ff fbd7 	bl	800ddfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e650:	883d      	ldrh	r5, [r7, #0]
 800e652:	462e      	mov	r6, r5
 800e654:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e658:	42b3      	cmp	r3, r6
 800e65a:	d910      	bls.n	800e67e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 800e65c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800e660:	3601      	adds	r6, #1
 800e662:	a809      	add	r0, sp, #36	; 0x24
 800e664:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800e668:	b2b6      	uxth	r6, r6
 800e66a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800e66e:	f7ff fc3d 	bl	800deec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e672:	e7ef      	b.n	800e654 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800e674:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1e5      	bne.n	800e648 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 800e67c:	e7bc      	b.n	800e5f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800e67e:	462e      	mov	r6, r5
 800e680:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800e684:	42b3      	cmp	r3, r6
 800e686:	d90b      	bls.n	800e6a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 800e688:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800e68c:	3601      	adds	r6, #1
 800e68e:	4620      	mov	r0, r4
 800e690:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800e694:	b2b6      	uxth	r6, r6
 800e696:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800e69a:	f7ff fc49 	bl	800df30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e69e:	e7ef      	b.n	800e680 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 800e6a0:	4a88      	ldr	r2, [pc, #544]	; (800e8c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 800e6a2:	6813      	ldr	r3, [r2, #0]
 800e6a4:	4690      	mov	r8, r2
 800e6a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	f040 8094 	bne.w	800e7d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 800e6b0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800e6b4:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 800e6b8:	f04f 0900 	mov.w	r9, #0
 800e6bc:	33aa      	adds	r3, #170	; 0xaa
 800e6be:	42a8      	cmp	r0, r5
 800e6c0:	f103 0308 	add.w	r3, r3, #8
 800e6c4:	dd0a      	ble.n	800e6dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 800e6c6:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800e6ca:	3501      	adds	r5, #1
 800e6cc:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800e6d0:	440a      	add	r2, r1
 800e6d2:	b212      	sxth	r2, r2
 800e6d4:	4591      	cmp	r9, r2
 800e6d6:	bfb8      	it	lt
 800e6d8:	4691      	movlt	r9, r2
 800e6da:	e7f0      	b.n	800e6be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 800e6dc:	4b7a      	ldr	r3, [pc, #488]	; (800e8c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 800e6de:	4e7b      	ldr	r6, [pc, #492]	; (800e8cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 800e6e0:	881d      	ldrh	r5, [r3, #0]
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	2d0f      	cmp	r5, #15
 800e6e6:	bf8c      	ite	hi
 800e6e8:	08ed      	lsrhi	r5, r5, #3
 800e6ea:	2501      	movls	r5, #1
 800e6ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e6f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800e6f4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800e6f8:	f8d8 0000 	ldr.w	r0, [r8]
 800e6fc:	440b      	add	r3, r1
 800e6fe:	6802      	ldr	r2, [r0, #0]
 800e700:	b21b      	sxth	r3, r3
 800e702:	4599      	cmp	r9, r3
 800e704:	dd4b      	ble.n	800e79e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 800e706:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800e70a:	4798      	blx	r3
 800e70c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800e710:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800e714:	4413      	add	r3, r2
 800e716:	b21b      	sxth	r3, r3
 800e718:	195a      	adds	r2, r3, r5
 800e71a:	4290      	cmp	r0, r2
 800e71c:	da07      	bge.n	800e72e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800e71e:	4581      	cmp	r9, r0
 800e720:	dd05      	ble.n	800e72e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800e722:	4298      	cmp	r0, r3
 800e724:	da33      	bge.n	800e78e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800e726:	2b00      	cmp	r3, #0
 800e728:	dd31      	ble.n	800e78e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800e72a:	4648      	mov	r0, r9
 800e72c:	e004      	b.n	800e738 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 800e72e:	4298      	cmp	r0, r3
 800e730:	dbfb      	blt.n	800e72a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 800e732:	4548      	cmp	r0, r9
 800e734:	bfa8      	it	ge
 800e736:	4648      	movge	r0, r9
 800e738:	f9b6 2000 	ldrsh.w	r2, [r6]
 800e73c:	2100      	movs	r1, #0
 800e73e:	1ac0      	subs	r0, r0, r3
 800e740:	f8b7 a000 	ldrh.w	sl, [r7]
 800e744:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e748:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e74c:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e750:	f8ad 001a 	strh.w	r0, [sp, #26]
 800e754:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e758:	4553      	cmp	r3, sl
 800e75a:	d9c9      	bls.n	800e6f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800e75c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800e760:	ab07      	add	r3, sp, #28
 800e762:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800e766:	6851      	ldr	r1, [r2, #4]
 800e768:	c303      	stmia	r3!, {r0, r1}
 800e76a:	a807      	add	r0, sp, #28
 800e76c:	a905      	add	r1, sp, #20
 800e76e:	f7fb fb3b 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800e772:	a807      	add	r0, sp, #28
 800e774:	f7fb fb7b 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e778:	b920      	cbnz	r0, 800e784 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	a907      	add	r1, sp, #28
 800e77e:	4620      	mov	r0, r4
 800e780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e782:	4798      	blx	r3
 800e784:	f10a 0a01 	add.w	sl, sl, #1
 800e788:	fa1f fa8a 	uxth.w	sl, sl
 800e78c:	e7e2      	b.n	800e754 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 800e78e:	f8d8 0000 	ldr.w	r0, [r8]
 800e792:	2101      	movs	r1, #1
 800e794:	6803      	ldr	r3, [r0, #0]
 800e796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e79a:	4798      	blx	r3
 800e79c:	e7a8      	b.n	800e6f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800e79e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e7a0:	4798      	blx	r3
 800e7a2:	4b4b      	ldr	r3, [pc, #300]	; (800e8d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	f43f af26 	beq.w	800e5f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	883d      	ldrh	r5, [r7, #0]
 800e7b0:	34ea      	adds	r4, #234	; 0xea
 800e7b2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800e7b6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800e7ba:	42ab      	cmp	r3, r5
 800e7bc:	f67f af1c 	bls.w	800e5f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800e7c0:	ab1a      	add	r3, sp, #104	; 0x68
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e7c8:	3501      	adds	r5, #1
 800e7ca:	3b44      	subs	r3, #68	; 0x44
 800e7cc:	b2ad      	uxth	r5, r5
 800e7ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e7d2:	f7ff fb8b 	bl	800deec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e7d6:	e7ee      	b.n	800e7b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 800e7d8:	2b02      	cmp	r3, #2
 800e7da:	f040 813d 	bne.w	800ea58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 800e7de:	4b3d      	ldr	r3, [pc, #244]	; (800e8d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d02c      	beq.n	800e840 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 800e7e6:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 800e7ea:	883a      	ldrh	r2, [r7, #0]
 800e7ec:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 800e7f0:	3201      	adds	r2, #1
 800e7f2:	b292      	uxth	r2, r2
 800e7f4:	2900      	cmp	r1, #0
 800e7f6:	d0d4      	beq.n	800e7a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800e7f8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800e802:	f04f 0a00 	mov.w	sl, #0
 800e806:	441d      	add	r5, r3
 800e808:	b22d      	sxth	r5, r5
 800e80a:	b283      	uxth	r3, r0
 800e80c:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 800e810:	4299      	cmp	r1, r3
 800e812:	f240 80c3 	bls.w	800e99c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 800e816:	4426      	add	r6, r4
 800e818:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 800e81c:	4684      	mov	ip, r0
 800e81e:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 800e822:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 800e826:	4573      	cmp	r3, lr
 800e828:	f340 80a5 	ble.w	800e976 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 800e82c:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 800e830:	4475      	add	r5, lr
 800e832:	b22d      	sxth	r5, r5
 800e834:	429d      	cmp	r5, r3
 800e836:	bfa8      	it	ge
 800e838:	461d      	movge	r5, r3
 800e83a:	3001      	adds	r0, #1
 800e83c:	46e2      	mov	sl, ip
 800e83e:	e7e4      	b.n	800e80a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 800e840:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800e844:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800e848:	f1bb 0f00 	cmp.w	fp, #0
 800e84c:	d0a9      	beq.n	800e7a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800e84e:	883b      	ldrh	r3, [r7, #0]
 800e850:	2600      	movs	r6, #0
 800e852:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800e856:	3301      	adds	r3, #1
 800e858:	b29b      	uxth	r3, r3
 800e85a:	b299      	uxth	r1, r3
 800e85c:	00f5      	lsls	r5, r6, #3
 800e85e:	458b      	cmp	fp, r1
 800e860:	d93a      	bls.n	800e8d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 800e862:	4425      	add	r5, r4
 800e864:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800e868:	469c      	mov	ip, r3
 800e86a:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800e86e:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800e872:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800e876:	4408      	add	r0, r1
 800e878:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800e87c:	4471      	add	r1, lr
 800e87e:	b200      	sxth	r0, r0
 800e880:	b209      	sxth	r1, r1
 800e882:	4288      	cmp	r0, r1
 800e884:	da06      	bge.n	800e894 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 800e886:	4586      	cmp	lr, r0
 800e888:	4672      	mov	r2, lr
 800e88a:	bfb8      	it	lt
 800e88c:	4602      	movlt	r2, r0
 800e88e:	3301      	adds	r3, #1
 800e890:	4666      	mov	r6, ip
 800e892:	e7e2      	b.n	800e85a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 800e894:	d10b      	bne.n	800e8ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 800e896:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800e89a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800e89e:	458c      	cmp	ip, r1
 800e8a0:	bfb4      	ite	lt
 800e8a2:	469c      	movlt	ip, r3
 800e8a4:	46b4      	movge	ip, r6
 800e8a6:	4572      	cmp	r2, lr
 800e8a8:	bfb8      	it	lt
 800e8aa:	4672      	movlt	r2, lr
 800e8ac:	e7ef      	b.n	800e88e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 800e8ae:	428a      	cmp	r2, r1
 800e8b0:	46b4      	mov	ip, r6
 800e8b2:	bfb8      	it	lt
 800e8b4:	460a      	movlt	r2, r1
 800e8b6:	e7ea      	b.n	800e88e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 800e8b8:	2400fa5c 	.word	0x2400fa5c
 800e8bc:	2400fa68 	.word	0x2400fa68
 800e8c0:	24000030 	.word	0x24000030
 800e8c4:	2400fa1c 	.word	0x2400fa1c
 800e8c8:	2400fa12 	.word	0x2400fa12
 800e8cc:	2400fa10 	.word	0x2400fa10
 800e8d0:	2400fa1a 	.word	0x2400fa1a
 800e8d4:	2400fa14 	.word	0x2400fa14
 800e8d8:	1961      	adds	r1, r4, r5
 800e8da:	ab07      	add	r3, sp, #28
 800e8dc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800e8e0:	6849      	ldr	r1, [r1, #4]
 800e8e2:	c303      	stmia	r3!, {r0, r1}
 800e8e4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800e8e8:	a807      	add	r0, sp, #28
 800e8ea:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800e8ee:	2b13      	cmp	r3, #19
 800e8f0:	440b      	add	r3, r1
 800e8f2:	bfd8      	it	le
 800e8f4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800e8f8:	1a9b      	subs	r3, r3, r2
 800e8fa:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e8fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e902:	f7ff f8e7 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e906:	a807      	add	r0, sp, #28
 800e908:	f7fb fab1 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d199      	bne.n	800e844 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 800e910:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800e914:	4425      	add	r5, r4
 800e916:	f8d8 0000 	ldr.w	r0, [r8]
 800e91a:	f1bc 0f14 	cmp.w	ip, #20
 800e91e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e922:	f8d0 e000 	ldr.w	lr, [r0]
 800e926:	bfa8      	it	ge
 800e928:	f04f 0c14 	movge.w	ip, #20
 800e92c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e930:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800e934:	fa1f fc8c 	uxth.w	ip, ip
 800e938:	f8cd c000 	str.w	ip, [sp]
 800e93c:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 800e940:	47d0      	blx	sl
 800e942:	4682      	mov	sl, r0
 800e944:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800e948:	a807      	add	r0, sp, #28
 800e94a:	f7ff f8a9 	bl	800daa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	4620      	mov	r0, r4
 800e952:	a907      	add	r1, sp, #28
 800e954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e956:	4798      	blx	r3
 800e958:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800e95c:	eba0 000a 	sub.w	r0, r0, sl
 800e960:	b200      	sxth	r0, r0
 800e962:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 800e966:	2800      	cmp	r0, #0
 800e968:	f47f af6c 	bne.w	800e844 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 800e96c:	b2b1      	uxth	r1, r6
 800e96e:	4648      	mov	r0, r9
 800e970:	f7ff fa9a 	bl	800dea8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e974:	e766      	b.n	800e844 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 800e976:	d10c      	bne.n	800e992 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 800e978:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 800e97c:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 800e980:	45b4      	cmp	ip, r6
 800e982:	bfb4      	ite	lt
 800e984:	4684      	movlt	ip, r0
 800e986:	46d4      	movge	ip, sl
 800e988:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 800e98c:	4433      	add	r3, r6
 800e98e:	b21b      	sxth	r3, r3
 800e990:	e750      	b.n	800e834 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 800e992:	4575      	cmp	r5, lr
 800e994:	46d4      	mov	ip, sl
 800e996:	bfa8      	it	ge
 800e998:	4675      	movge	r5, lr
 800e99a:	e74e      	b.n	800e83a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 800e99c:	eb0b 0006 	add.w	r0, fp, r6
 800e9a0:	4426      	add	r6, r4
 800e9a2:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 800e9a6:	f1b9 0f13 	cmp.w	r9, #19
 800e9aa:	bfdc      	itt	le
 800e9ac:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 800e9b0:	444d      	addle	r5, r9
 800e9b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e9b6:	bfd8      	it	le
 800e9b8:	b22d      	sxthle	r5, r5
 800e9ba:	f7fb fa58 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e9be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	f47f af16 	bne.w	800e7f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 800e9c8:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 800e9cc:	fa1f f989 	uxth.w	r9, r9
 800e9d0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800e9d4:	eba5 050c 	sub.w	r5, r5, ip
 800e9d8:	fa1f f28c 	uxth.w	r2, ip
 800e9dc:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 800e9e0:	eb02 0009 	add.w	r0, r2, r9
 800e9e4:	2d14      	cmp	r5, #20
 800e9e6:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 800e9ea:	bfa8      	it	ge
 800e9ec:	2514      	movge	r5, #20
 800e9ee:	b200      	sxth	r0, r0
 800e9f0:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e9f4:	b289      	uxth	r1, r1
 800e9f6:	fa1f fe85 	uxth.w	lr, r5
 800e9fa:	eba0 000c 	sub.w	r0, r0, ip
 800e9fe:	f8ad c01e 	strh.w	ip, [sp, #30]
 800ea02:	4586      	cmp	lr, r0
 800ea04:	f8d8 0000 	ldr.w	r0, [r8]
 800ea08:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	bfb8      	it	lt
 800ea10:	46f1      	movlt	r9, lr
 800ea12:	6805      	ldr	r5, [r0, #0]
 800ea14:	f8cd 9000 	str.w	r9, [sp]
 800ea18:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 800ea1c:	47a8      	blx	r5
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800ea24:	a907      	add	r1, sp, #28
 800ea26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea28:	4620      	mov	r0, r4
 800ea2a:	4798      	blx	r3
 800ea2c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ea30:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 800ea34:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 800ea38:	1a5b      	subs	r3, r3, r1
 800ea3a:	440a      	add	r2, r1
 800ea3c:	b21b      	sxth	r3, r3
 800ea3e:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 800ea42:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f47f aecf 	bne.w	800e7ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 800ea4c:	fa1f f18a 	uxth.w	r1, sl
 800ea50:	4658      	mov	r0, fp
 800ea52:	f7ff fa29 	bl	800dea8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ea56:	e6c8      	b.n	800e7ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 800ea58:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ea5c:	42ab      	cmp	r3, r5
 800ea5e:	f67f aea0 	bls.w	800e7a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800ea62:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800ea66:	ab07      	add	r3, sp, #28
 800ea68:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800ea6c:	6851      	ldr	r1, [r2, #4]
 800ea6e:	c303      	stmia	r3!, {r0, r1}
 800ea70:	a807      	add	r0, sp, #28
 800ea72:	f7fb f9fc 	bl	8009e6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ea76:	b920      	cbnz	r0, 800ea82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	a907      	add	r1, sp, #28
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea80:	4798      	blx	r3
 800ea82:	3501      	adds	r5, #1
 800ea84:	b2ad      	uxth	r5, r5
 800ea86:	e7e7      	b.n	800ea58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0800ea88 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800ea88:	4b03      	ldr	r3, [pc, #12]	; (800ea98 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	801a      	strh	r2, [r3, #0]
 800ea8e:	805a      	strh	r2, [r3, #2]
 800ea90:	809a      	strh	r2, [r3, #4]
 800ea92:	80da      	strh	r2, [r3, #6]
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	2400fa68 	.word	0x2400fa68

0800ea9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	b09d      	sub	sp, #116	; 0x74
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	4614      	mov	r4, r2
 800eaa6:	468a      	mov	sl, r1
 800eaa8:	a803      	add	r0, sp, #12
 800eaaa:	461d      	mov	r5, r3
 800eaac:	f000 fe12 	bl	800f6d4 <_ZN8touchgfx12TextProviderC1Ev>
 800eab0:	6833      	ldr	r3, [r6, #0]
 800eab2:	4630      	mov	r0, r6
 800eab4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800eab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaba:	4798      	blx	r3
 800eabc:	6833      	ldr	r3, [r6, #0]
 800eabe:	4607      	mov	r7, r0
 800eac0:	4630      	mov	r0, r6
 800eac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eac4:	4798      	blx	r3
 800eac6:	462a      	mov	r2, r5
 800eac8:	2500      	movs	r5, #0
 800eaca:	4621      	mov	r1, r4
 800eacc:	9000      	str	r0, [sp, #0]
 800eace:	463b      	mov	r3, r7
 800ead0:	462c      	mov	r4, r5
 800ead2:	46a9      	mov	r9, r5
 800ead4:	46a8      	mov	r8, r5
 800ead6:	a803      	add	r0, sp, #12
 800ead8:	f000 fe4f 	bl	800f77a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800eadc:	2300      	movs	r3, #0
 800eade:	9302      	str	r3, [sp, #8]
 800eae0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800eae4:	429c      	cmp	r4, r3
 800eae6:	d002      	beq.n	800eaee <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800eae8:	455c      	cmp	r4, fp
 800eaea:	bf18      	it	ne
 800eaec:	4625      	movne	r5, r4
 800eaee:	ab02      	add	r3, sp, #8
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	4651      	mov	r1, sl
 800eaf4:	a803      	add	r0, sp, #12
 800eaf6:	f001 f941 	bl	800fd7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800eafa:	4604      	mov	r4, r0
 800eafc:	b108      	cbz	r0, 800eb02 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800eafe:	280a      	cmp	r0, #10
 800eb00:	d10a      	bne.n	800eb18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800eb02:	45c1      	cmp	r9, r8
 800eb04:	bf38      	it	cc
 800eb06:	46c1      	movcc	r9, r8
 800eb08:	f04f 0800 	mov.w	r8, #0
 800eb0c:	2c00      	cmp	r4, #0
 800eb0e:	d1e5      	bne.n	800eadc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800eb10:	4648      	mov	r0, r9
 800eb12:	b01d      	add	sp, #116	; 0x74
 800eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb18:	9a02      	ldr	r2, [sp, #8]
 800eb1a:	2a00      	cmp	r2, #0
 800eb1c:	d0de      	beq.n	800eadc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800eb1e:	7b57      	ldrb	r7, [r2, #13]
 800eb20:	4629      	mov	r1, r5
 800eb22:	6833      	ldr	r3, [r6, #0]
 800eb24:	007f      	lsls	r7, r7, #1
 800eb26:	8894      	ldrh	r4, [r2, #4]
 800eb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb2a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800eb2e:	7a97      	ldrb	r7, [r2, #10]
 800eb30:	4307      	orrs	r7, r0
 800eb32:	4630      	mov	r0, r6
 800eb34:	4798      	blx	r3
 800eb36:	4438      	add	r0, r7
 800eb38:	4480      	add	r8, r0
 800eb3a:	fa1f f888 	uxth.w	r8, r8
 800eb3e:	e7e5      	b.n	800eb0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800eb40 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800eb40:	b508      	push	{r3, lr}
 800eb42:	6803      	ldr	r3, [r0, #0]
 800eb44:	68db      	ldr	r3, [r3, #12]
 800eb46:	4798      	blx	r3
 800eb48:	b128      	cbz	r0, 800eb56 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800eb4a:	7b43      	ldrb	r3, [r0, #13]
 800eb4c:	7a80      	ldrb	r0, [r0, #10]
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb54:	4318      	orrs	r0, r3
 800eb56:	bd08      	pop	{r3, pc}

0800eb58 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800eb58:	b40e      	push	{r1, r2, r3}
 800eb5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb5c:	b09e      	sub	sp, #120	; 0x78
 800eb5e:	4605      	mov	r5, r0
 800eb60:	ab23      	add	r3, sp, #140	; 0x8c
 800eb62:	a805      	add	r0, sp, #20
 800eb64:	f853 4b04 	ldr.w	r4, [r3], #4
 800eb68:	9303      	str	r3, [sp, #12]
 800eb6a:	f000 fdb3 	bl	800f6d4 <_ZN8touchgfx12TextProviderC1Ev>
 800eb6e:	682b      	ldr	r3, [r5, #0]
 800eb70:	4628      	mov	r0, r5
 800eb72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb74:	4798      	blx	r3
 800eb76:	682b      	ldr	r3, [r5, #0]
 800eb78:	4606      	mov	r6, r0
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb7e:	4798      	blx	r3
 800eb80:	4633      	mov	r3, r6
 800eb82:	4621      	mov	r1, r4
 800eb84:	ae1e      	add	r6, sp, #120	; 0x78
 800eb86:	2400      	movs	r4, #0
 800eb88:	9000      	str	r0, [sp, #0]
 800eb8a:	9a03      	ldr	r2, [sp, #12]
 800eb8c:	a805      	add	r0, sp, #20
 800eb8e:	f000 fdf4 	bl	800f77a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800eb92:	f846 4d68 	str.w	r4, [r6, #-104]!
 800eb96:	462a      	mov	r2, r5
 800eb98:	4633      	mov	r3, r6
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	a805      	add	r0, sp, #20
 800eb9e:	f001 f8ed 	bl	800fd7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800eba2:	b300      	cbz	r0, 800ebe6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800eba4:	280a      	cmp	r0, #10
 800eba6:	d01a      	beq.n	800ebde <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800eba8:	9f04      	ldr	r7, [sp, #16]
 800ebaa:	b1c7      	cbz	r7, 800ebde <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800ebac:	7b78      	ldrb	r0, [r7, #13]
 800ebae:	7a3b      	ldrb	r3, [r7, #8]
 800ebb0:	00c1      	lsls	r1, r0, #3
 800ebb2:	88aa      	ldrh	r2, [r5, #4]
 800ebb4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800ebb8:	4319      	orrs	r1, r3
 800ebba:	0643      	lsls	r3, r0, #25
 800ebbc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800ebc0:	bf48      	it	mi
 800ebc2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800ebc6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800ebca:	bf48      	it	mi
 800ebcc:	b219      	sxthmi	r1, r3
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	4303      	orrs	r3, r0
 800ebd2:	4413      	add	r3, r2
 800ebd4:	1a5b      	subs	r3, r3, r1
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	42a3      	cmp	r3, r4
 800ebda:	bfc8      	it	gt
 800ebdc:	b21c      	sxthgt	r4, r3
 800ebde:	4633      	mov	r3, r6
 800ebe0:	462a      	mov	r2, r5
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	e7da      	b.n	800eb9c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800ebe6:	b2a0      	uxth	r0, r4
 800ebe8:	b01e      	add	sp, #120	; 0x78
 800ebea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ebee:	b003      	add	sp, #12
 800ebf0:	4770      	bx	lr

0800ebf2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800ebf2:	b40e      	push	{r1, r2, r3}
 800ebf4:	b570      	push	{r4, r5, r6, lr}
 800ebf6:	b09d      	sub	sp, #116	; 0x74
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	ab21      	add	r3, sp, #132	; 0x84
 800ebfc:	a803      	add	r0, sp, #12
 800ebfe:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec02:	9302      	str	r3, [sp, #8]
 800ec04:	f000 fd66 	bl	800f6d4 <_ZN8touchgfx12TextProviderC1Ev>
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec0e:	4798      	blx	r3
 800ec10:	6823      	ldr	r3, [r4, #0]
 800ec12:	4606      	mov	r6, r0
 800ec14:	4620      	mov	r0, r4
 800ec16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec18:	2401      	movs	r4, #1
 800ec1a:	4798      	blx	r3
 800ec1c:	4633      	mov	r3, r6
 800ec1e:	9000      	str	r0, [sp, #0]
 800ec20:	4629      	mov	r1, r5
 800ec22:	9a02      	ldr	r2, [sp, #8]
 800ec24:	a803      	add	r0, sp, #12
 800ec26:	f000 fda8 	bl	800f77a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ec2a:	a803      	add	r0, sp, #12
 800ec2c:	f001 f9a0 	bl	800ff70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ec30:	b2a3      	uxth	r3, r4
 800ec32:	b138      	cbz	r0, 800ec44 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800ec34:	280a      	cmp	r0, #10
 800ec36:	a803      	add	r0, sp, #12
 800ec38:	bf04      	itt	eq
 800ec3a:	3301      	addeq	r3, #1
 800ec3c:	b21c      	sxtheq	r4, r3
 800ec3e:	f001 f997 	bl	800ff70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ec42:	e7f5      	b.n	800ec30 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800ec44:	4618      	mov	r0, r3
 800ec46:	b01d      	add	sp, #116	; 0x74
 800ec48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec4c:	b003      	add	sp, #12
 800ec4e:	4770      	bx	lr

0800ec50 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800ec50:	b40e      	push	{r1, r2, r3}
 800ec52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec54:	b09e      	sub	sp, #120	; 0x78
 800ec56:	4604      	mov	r4, r0
 800ec58:	ab23      	add	r3, sp, #140	; 0x8c
 800ec5a:	a805      	add	r0, sp, #20
 800ec5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec60:	9303      	str	r3, [sp, #12]
 800ec62:	f000 fd37 	bl	800f6d4 <_ZN8touchgfx12TextProviderC1Ev>
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	4620      	mov	r0, r4
 800ec6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec6c:	4798      	blx	r3
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	4606      	mov	r6, r0
 800ec72:	4620      	mov	r0, r4
 800ec74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec76:	4798      	blx	r3
 800ec78:	4633      	mov	r3, r6
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	9000      	str	r0, [sp, #0]
 800ec7e:	9a03      	ldr	r2, [sp, #12]
 800ec80:	a805      	add	r0, sp, #20
 800ec82:	f000 fd7a 	bl	800f77a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ec86:	ad1e      	add	r5, sp, #120	; 0x78
 800ec88:	2100      	movs	r1, #0
 800ec8a:	26ff      	movs	r6, #255	; 0xff
 800ec8c:	4622      	mov	r2, r4
 800ec8e:	a805      	add	r0, sp, #20
 800ec90:	f845 1d68 	str.w	r1, [r5, #-104]!
 800ec94:	462b      	mov	r3, r5
 800ec96:	f001 f871 	bl	800fd7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ec9a:	b1d8      	cbz	r0, 800ecd4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800ec9c:	280a      	cmp	r0, #10
 800ec9e:	d012      	beq.n	800ecc6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800eca0:	9804      	ldr	r0, [sp, #16]
 800eca2:	b180      	cbz	r0, 800ecc6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800eca4:	7b47      	ldrb	r7, [r0, #13]
 800eca6:	7922      	ldrb	r2, [r4, #4]
 800eca8:	00fb      	lsls	r3, r7, #3
 800ecaa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800ecae:	7a03      	ldrb	r3, [r0, #8]
 800ecb0:	430b      	orrs	r3, r1
 800ecb2:	0679      	lsls	r1, r7, #25
 800ecb4:	bf44      	itt	mi
 800ecb6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ecba:	b21b      	sxthmi	r3, r3
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	429e      	cmp	r6, r3
 800ecc2:	bf28      	it	cs
 800ecc4:	461e      	movcs	r6, r3
 800ecc6:	462b      	mov	r3, r5
 800ecc8:	4622      	mov	r2, r4
 800ecca:	2100      	movs	r1, #0
 800eccc:	a805      	add	r0, sp, #20
 800ecce:	f001 f855 	bl	800fd7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ecd2:	e7e2      	b.n	800ec9a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	b01e      	add	sp, #120	; 0x78
 800ecd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ecdc:	b003      	add	sp, #12
 800ecde:	4770      	bx	lr

0800ece0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800ece0:	b513      	push	{r0, r1, r4, lr}
 800ece2:	6803      	ldr	r3, [r0, #0]
 800ece4:	2400      	movs	r4, #0
 800ece6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ecea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ecee:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ecf2:	4669      	mov	r1, sp
 800ecf4:	691b      	ldr	r3, [r3, #16]
 800ecf6:	9400      	str	r4, [sp, #0]
 800ecf8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ecfc:	4798      	blx	r3
 800ecfe:	b002      	add	sp, #8
 800ed00:	bd10      	pop	{r4, pc}

0800ed02 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800ed02:	b538      	push	{r3, r4, r5, lr}
 800ed04:	680b      	ldr	r3, [r1, #0]
 800ed06:	460c      	mov	r4, r1
 800ed08:	4605      	mov	r5, r0
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	4798      	blx	r3
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	4620      	mov	r0, r4
 800ed12:	4629      	mov	r1, r5
 800ed14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed16:	4798      	blx	r3
 800ed18:	4628      	mov	r0, r5
 800ed1a:	bd38      	pop	{r3, r4, r5, pc}

0800ed1c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800ed1c:	b410      	push	{r4}
 800ed1e:	880a      	ldrh	r2, [r1, #0]
 800ed20:	8884      	ldrh	r4, [r0, #4]
 800ed22:	4422      	add	r2, r4
 800ed24:	800a      	strh	r2, [r1, #0]
 800ed26:	884a      	ldrh	r2, [r1, #2]
 800ed28:	88c4      	ldrh	r4, [r0, #6]
 800ed2a:	4422      	add	r2, r4
 800ed2c:	804a      	strh	r2, [r1, #2]
 800ed2e:	6940      	ldr	r0, [r0, #20]
 800ed30:	b120      	cbz	r0, 800ed3c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800ed32:	6803      	ldr	r3, [r0, #0]
 800ed34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed3a:	4718      	bx	r3
 800ed3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800ed42:	b570      	push	{r4, r5, r6, lr}
 800ed44:	8882      	ldrh	r2, [r0, #4]
 800ed46:	460c      	mov	r4, r1
 800ed48:	880b      	ldrh	r3, [r1, #0]
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	4413      	add	r3, r2
 800ed4e:	800b      	strh	r3, [r1, #0]
 800ed50:	884b      	ldrh	r3, [r1, #2]
 800ed52:	88c2      	ldrh	r2, [r0, #6]
 800ed54:	4413      	add	r3, r2
 800ed56:	804b      	strh	r3, [r1, #2]
 800ed58:	1d01      	adds	r1, r0, #4
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7fb f844 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800ed60:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	dd0b      	ble.n	800ed80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ed68:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	dd07      	ble.n	800ed80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ed70:	6968      	ldr	r0, [r5, #20]
 800ed72:	b128      	cbz	r0, 800ed80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ed74:	6803      	ldr	r3, [r0, #0]
 800ed76:	4621      	mov	r1, r4
 800ed78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed7e:	4718      	bx	r3
 800ed80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed84 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800ed84:	b570      	push	{r4, r5, r6, lr}
 800ed86:	8882      	ldrh	r2, [r0, #4]
 800ed88:	460c      	mov	r4, r1
 800ed8a:	880b      	ldrh	r3, [r1, #0]
 800ed8c:	4605      	mov	r5, r0
 800ed8e:	4413      	add	r3, r2
 800ed90:	800b      	strh	r3, [r1, #0]
 800ed92:	884b      	ldrh	r3, [r1, #2]
 800ed94:	88c2      	ldrh	r2, [r0, #6]
 800ed96:	4413      	add	r3, r2
 800ed98:	804b      	strh	r3, [r1, #2]
 800ed9a:	1d01      	adds	r1, r0, #4
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f7fb f823 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800eda2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	dd15      	ble.n	800edd6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 800edaa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	dd11      	ble.n	800edd6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 800edb2:	6968      	ldr	r0, [r5, #20]
 800edb4:	b128      	cbz	r0, 800edc2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800edb6:	6803      	ldr	r3, [r0, #0]
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	4621      	mov	r1, r4
 800edbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edc0:	4718      	bx	r3
 800edc2:	4b05      	ldr	r3, [pc, #20]	; (800edd8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	3304      	adds	r3, #4
 800edc8:	429d      	cmp	r5, r3
 800edca:	d104      	bne.n	800edd6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 800edcc:	f7ff f806 	bl	800dddc <_ZN8touchgfx11Application11getInstanceEv>
 800edd0:	6803      	ldr	r3, [r0, #0]
 800edd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd4:	e7f1      	b.n	800edba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 800edd6:	bd70      	pop	{r4, r5, r6, pc}
 800edd8:	2400fa60 	.word	0x2400fa60

0800eddc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	4604      	mov	r4, r0
 800ede0:	4616      	mov	r6, r2
 800ede2:	460d      	mov	r5, r1
 800ede4:	b901      	cbnz	r1, 800ede8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800ede6:	b192      	cbz	r2, 800ee0e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800ede8:	6823      	ldr	r3, [r4, #0]
 800edea:	4620      	mov	r0, r4
 800edec:	695b      	ldr	r3, [r3, #20]
 800edee:	4798      	blx	r3
 800edf0:	88e2      	ldrh	r2, [r4, #6]
 800edf2:	88a1      	ldrh	r1, [r4, #4]
 800edf4:	4620      	mov	r0, r4
 800edf6:	4432      	add	r2, r6
 800edf8:	4429      	add	r1, r5
 800edfa:	b212      	sxth	r2, r2
 800edfc:	b209      	sxth	r1, r1
 800edfe:	f7fb fad1 	bl	800a3a4 <_ZN8touchgfx8Drawable5setXYEss>
 800ee02:	6823      	ldr	r3, [r4, #0]
 800ee04:	4620      	mov	r0, r4
 800ee06:	695b      	ldr	r3, [r3, #20]
 800ee08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee0c:	4718      	bx	r3
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}

0800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800ee10:	b510      	push	{r4, lr}
 800ee12:	2300      	movs	r3, #0
 800ee14:	4604      	mov	r4, r0
 800ee16:	4608      	mov	r0, r1
 800ee18:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800ee1c:	8023      	strh	r3, [r4, #0]
 800ee1e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ee22:	8063      	strh	r3, [r4, #2]
 800ee24:	6803      	ldr	r3, [r0, #0]
 800ee26:	80a1      	strh	r1, [r4, #4]
 800ee28:	4621      	mov	r1, r4
 800ee2a:	80e2      	strh	r2, [r4, #6]
 800ee2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2e:	4798      	blx	r3
 800ee30:	4620      	mov	r0, r4
 800ee32:	bd10      	pop	{r4, pc}

0800ee34 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800ee34:	b530      	push	{r4, r5, lr}
 800ee36:	8083      	strh	r3, [r0, #4]
 800ee38:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ee3c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800ee40:	7183      	strb	r3, [r0, #6]
 800ee42:	79c3      	ldrb	r3, [r0, #7]
 800ee44:	6101      	str	r1, [r0, #16]
 800ee46:	f365 0306 	bfi	r3, r5, #0, #7
 800ee4a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800ee4e:	8282      	strh	r2, [r0, #20]
 800ee50:	f365 13c7 	bfi	r3, r5, #7, #1
 800ee54:	71c3      	strb	r3, [r0, #7]
 800ee56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ee5a:	7203      	strb	r3, [r0, #8]
 800ee5c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ee60:	7243      	strb	r3, [r0, #9]
 800ee62:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ee66:	8143      	strh	r3, [r0, #10]
 800ee68:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800ee6c:	8183      	strh	r3, [r0, #12]
 800ee6e:	4b01      	ldr	r3, [pc, #4]	; (800ee74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800ee70:	6003      	str	r3, [r0, #0]
 800ee72:	bd30      	pop	{r4, r5, pc}
 800ee74:	0801a7fc 	.word	0x0801a7fc

0800ee78 <_ZNK8touchgfx9ConstFont4findEt>:
 800ee78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee7a:	6904      	ldr	r4, [r0, #16]
 800ee7c:	b3bc      	cbz	r4, 800eeee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee7e:	88a3      	ldrh	r3, [r4, #4]
 800ee80:	8a82      	ldrh	r2, [r0, #20]
 800ee82:	1acb      	subs	r3, r1, r3
 800ee84:	f102 32ff 	add.w	r2, r2, #4294967295
 800ee88:	d431      	bmi.n	800eeee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	dd0c      	ble.n	800eea8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800ee8e:	230e      	movs	r3, #14
 800ee90:	fb03 4302 	mla	r3, r3, r2, r4
 800ee94:	889b      	ldrh	r3, [r3, #4]
 800ee96:	1a5b      	subs	r3, r3, r1
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	db27      	blt.n	800eeee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	bfbc      	itt	lt
 800eea2:	2302      	movlt	r3, #2
 800eea4:	fb92 f3f3 	sdivlt	r3, r2, r3
 800eea8:	2500      	movs	r5, #0
 800eeaa:	260e      	movs	r6, #14
 800eeac:	4295      	cmp	r5, r2
 800eeae:	dc1e      	bgt.n	800eeee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800eeb0:	fb06 4003 	mla	r0, r6, r3, r4
 800eeb4:	8887      	ldrh	r7, [r0, #4]
 800eeb6:	42b9      	cmp	r1, r7
 800eeb8:	d01a      	beq.n	800eef0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800eeba:	d20d      	bcs.n	800eed8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800eebc:	1e5a      	subs	r2, r3, #1
 800eebe:	4295      	cmp	r5, r2
 800eec0:	dc15      	bgt.n	800eeee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800eec2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800eec6:	1a5b      	subs	r3, r3, r1
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	429a      	cmp	r2, r3
 800eecc:	db0f      	blt.n	800eeee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800eece:	429d      	cmp	r5, r3
 800eed0:	ddec      	ble.n	800eeac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800eed2:	1953      	adds	r3, r2, r5
 800eed4:	105b      	asrs	r3, r3, #1
 800eed6:	e7e9      	b.n	800eeac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800eed8:	1c5d      	adds	r5, r3, #1
 800eeda:	42aa      	cmp	r2, r5
 800eedc:	db07      	blt.n	800eeee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800eede:	8a43      	ldrh	r3, [r0, #18]
 800eee0:	1acb      	subs	r3, r1, r3
 800eee2:	442b      	add	r3, r5
 800eee4:	429d      	cmp	r5, r3
 800eee6:	dc02      	bgt.n	800eeee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800eee8:	429a      	cmp	r2, r3
 800eeea:	dadf      	bge.n	800eeac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800eeec:	e7f1      	b.n	800eed2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800eeee:	2000      	movs	r0, #0
 800eef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eef2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800eef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef4:	4604      	mov	r4, r0
 800eef6:	4617      	mov	r7, r2
 800eef8:	461e      	mov	r6, r3
 800eefa:	b911      	cbnz	r1, 800ef02 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800eefc:	2500      	movs	r5, #0
 800eefe:	4628      	mov	r0, r5
 800ef00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef02:	290a      	cmp	r1, #10
 800ef04:	d0fa      	beq.n	800eefc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ef06:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800ef0a:	4291      	cmp	r1, r2
 800ef0c:	d0f6      	beq.n	800eefc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ef0e:	f242 020b 	movw	r2, #8203	; 0x200b
 800ef12:	4291      	cmp	r1, r2
 800ef14:	d0f2      	beq.n	800eefc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ef16:	f7ff ffaf 	bl	800ee78 <_ZNK8touchgfx9ConstFont4findEt>
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	b950      	cbnz	r0, 800ef34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	4620      	mov	r0, r4
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	4798      	blx	r3
 800ef26:	4601      	mov	r1, r0
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f7ff ffa5 	bl	800ee78 <_ZNK8touchgfx9ConstFont4findEt>
 800ef2e:	4605      	mov	r5, r0
 800ef30:	2800      	cmp	r0, #0
 800ef32:	d0e3      	beq.n	800eefc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ef34:	6823      	ldr	r3, [r4, #0]
 800ef36:	4629      	mov	r1, r5
 800ef38:	4620      	mov	r0, r4
 800ef3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef3c:	4798      	blx	r3
 800ef3e:	6038      	str	r0, [r7, #0]
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	4620      	mov	r0, r4
 800ef44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef46:	4798      	blx	r3
 800ef48:	7030      	strb	r0, [r6, #0]
 800ef4a:	e7d8      	b.n	800eefe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800ef4c <_ZN8touchgfx4clzuEm>:
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	b1c8      	cbz	r0, 800ef84 <_ZN8touchgfx4clzuEm+0x38>
 800ef50:	0c02      	lsrs	r2, r0, #16
 800ef52:	0412      	lsls	r2, r2, #16
 800ef54:	b9a2      	cbnz	r2, 800ef80 <_ZN8touchgfx4clzuEm+0x34>
 800ef56:	0403      	lsls	r3, r0, #16
 800ef58:	2010      	movs	r0, #16
 800ef5a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ef5e:	bf04      	itt	eq
 800ef60:	021b      	lsleq	r3, r3, #8
 800ef62:	3008      	addeq	r0, #8
 800ef64:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ef68:	bf04      	itt	eq
 800ef6a:	011b      	lsleq	r3, r3, #4
 800ef6c:	3004      	addeq	r0, #4
 800ef6e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ef72:	bf04      	itt	eq
 800ef74:	009b      	lsleq	r3, r3, #2
 800ef76:	3002      	addeq	r0, #2
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	db04      	blt.n	800ef86 <_ZN8touchgfx4clzuEm+0x3a>
 800ef7c:	3001      	adds	r0, #1
 800ef7e:	4770      	bx	lr
 800ef80:	2000      	movs	r0, #0
 800ef82:	e7ea      	b.n	800ef5a <_ZN8touchgfx4clzuEm+0xe>
 800ef84:	2020      	movs	r0, #32
 800ef86:	4770      	bx	lr

0800ef88 <_ZN8touchgfx7muldivuEmmmRm>:
 800ef88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	4680      	mov	r8, r0
 800ef8e:	460f      	mov	r7, r1
 800ef90:	4615      	mov	r5, r2
 800ef92:	461e      	mov	r6, r3
 800ef94:	f7ff ffda 	bl	800ef4c <_ZN8touchgfx4clzuEm>
 800ef98:	b998      	cbnz	r0, 800efc2 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 800ef9a:	4608      	mov	r0, r1
 800ef9c:	f7ff ffd6 	bl	800ef4c <_ZN8touchgfx4clzuEm>
 800efa0:	2800      	cmp	r0, #0
 800efa2:	dd08      	ble.n	800efb6 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 800efa4:	4633      	mov	r3, r6
 800efa6:	462a      	mov	r2, r5
 800efa8:	4641      	mov	r1, r8
 800efaa:	4638      	mov	r0, r7
 800efac:	f7ff ffec 	bl	800ef88 <_ZN8touchgfx7muldivuEmmmRm>
 800efb0:	b003      	add	sp, #12
 800efb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb6:	f04f 33ff 	mov.w	r3, #4294967295
 800efba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800efbe:	6033      	str	r3, [r6, #0]
 800efc0:	e7f6      	b.n	800efb0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 800efc2:	fa31 f900 	lsrs.w	r9, r1, r0
 800efc6:	fb01 f308 	mul.w	r3, r1, r8
 800efca:	d105      	bne.n	800efd8 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 800efcc:	fbb3 f0f5 	udiv	r0, r3, r5
 800efd0:	fb05 3510 	mls	r5, r5, r0, r3
 800efd4:	6035      	str	r5, [r6, #0]
 800efd6:	e7eb      	b.n	800efb0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 800efd8:	2301      	movs	r3, #1
 800efda:	fa08 fb00 	lsl.w	fp, r8, r0
 800efde:	462a      	mov	r2, r5
 800efe0:	4641      	mov	r1, r8
 800efe2:	fa03 f000 	lsl.w	r0, r3, r0
 800efe6:	4633      	mov	r3, r6
 800efe8:	fbbb faf5 	udiv	sl, fp, r5
 800efec:	3801      	subs	r0, #1
 800efee:	fb09 f40a 	mul.w	r4, r9, sl
 800eff2:	4038      	ands	r0, r7
 800eff4:	f7ff ffc8 	bl	800ef88 <_ZN8touchgfx7muldivuEmmmRm>
 800eff8:	462a      	mov	r2, r5
 800effa:	4607      	mov	r7, r0
 800effc:	ab01      	add	r3, sp, #4
 800effe:	fb05 b11a 	mls	r1, r5, sl, fp
 800f002:	4648      	mov	r0, r9
 800f004:	f7ff ffc0 	bl	800ef88 <_ZN8touchgfx7muldivuEmmmRm>
 800f008:	9b01      	ldr	r3, [sp, #4]
 800f00a:	6832      	ldr	r2, [r6, #0]
 800f00c:	441a      	add	r2, r3
 800f00e:	fbb2 f3f5 	udiv	r3, r2, r5
 800f012:	441c      	add	r4, r3
 800f014:	fb05 2513 	mls	r5, r5, r3, r2
 800f018:	443c      	add	r4, r7
 800f01a:	4420      	add	r0, r4
 800f01c:	e7da      	b.n	800efd4 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0800f01e <_ZN8touchgfx6muldivElllRl>:
 800f01e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f020:	2800      	cmp	r0, #0
 800f022:	461e      	mov	r6, r3
 800f024:	bfba      	itte	lt
 800f026:	4240      	neglt	r0, r0
 800f028:	f04f 34ff 	movlt.w	r4, #4294967295
 800f02c:	2401      	movge	r4, #1
 800f02e:	2900      	cmp	r1, #0
 800f030:	bfbc      	itt	lt
 800f032:	4249      	neglt	r1, r1
 800f034:	4264      	neglt	r4, r4
 800f036:	2a00      	cmp	r2, #0
 800f038:	bfb6      	itet	lt
 800f03a:	4265      	neglt	r5, r4
 800f03c:	4625      	movge	r5, r4
 800f03e:	4252      	neglt	r2, r2
 800f040:	4288      	cmp	r0, r1
 800f042:	bfc2      	ittt	gt
 800f044:	4603      	movgt	r3, r0
 800f046:	4608      	movgt	r0, r1
 800f048:	4619      	movgt	r1, r3
 800f04a:	ab01      	add	r3, sp, #4
 800f04c:	f7ff ff9c 	bl	800ef88 <_ZN8touchgfx7muldivuEmmmRm>
 800f050:	9b01      	ldr	r3, [sp, #4]
 800f052:	4368      	muls	r0, r5
 800f054:	435c      	muls	r4, r3
 800f056:	6034      	str	r4, [r6, #0]
 800f058:	b002      	add	sp, #8
 800f05a:	bd70      	pop	{r4, r5, r6, pc}

0800f05c <_ZN8touchgfx6muldivElll>:
 800f05c:	b513      	push	{r0, r1, r4, lr}
 800f05e:	4614      	mov	r4, r2
 800f060:	ab01      	add	r3, sp, #4
 800f062:	f7ff ffdc 	bl	800f01e <_ZN8touchgfx6muldivElllRl>
 800f066:	2800      	cmp	r0, #0
 800f068:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 800f06c:	9b01      	ldr	r3, [sp, #4]
 800f06e:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 800f072:	db0a      	blt.n	800f08a <_ZN8touchgfx6muldivElll+0x2e>
 800f074:	2b00      	cmp	r3, #0
 800f076:	f102 0201 	add.w	r2, r2, #1
 800f07a:	bfb8      	it	lt
 800f07c:	425b      	neglt	r3, r3
 800f07e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 800f082:	db00      	blt.n	800f086 <_ZN8touchgfx6muldivElll+0x2a>
 800f084:	3001      	adds	r0, #1
 800f086:	b002      	add	sp, #8
 800f088:	bd10      	pop	{r4, pc}
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	bfb8      	it	lt
 800f08e:	425b      	neglt	r3, r3
 800f090:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 800f094:	bfc8      	it	gt
 800f096:	f100 30ff 	addgt.w	r0, r0, #4294967295
 800f09a:	e7f4      	b.n	800f086 <_ZN8touchgfx6muldivElll+0x2a>

0800f09c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 800f09c:	2000      	movs	r0, #0
 800f09e:	4770      	bx	lr

0800f0a0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 800f0a0:	2001      	movs	r0, #1
 800f0a2:	4770      	bx	lr

0800f0a4 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 800f0a4:	2002      	movs	r0, #2
 800f0a6:	4770      	bx	lr

0800f0a8 <_ZN8touchgfx6ScreenD1Ev>:
 800f0a8:	4770      	bx	lr

0800f0aa <_ZN8touchgfx6Screen11setupScreenEv>:
 800f0aa:	4770      	bx	lr

0800f0ac <_ZN8touchgfx12GestureEventD1Ev>:
 800f0ac:	4770      	bx	lr

0800f0ae <_ZN8touchgfx9DragEventD1Ev>:
 800f0ae:	4770      	bx	lr

0800f0b0 <_ZN8touchgfx10ClickEventD1Ev>:
 800f0b0:	4770      	bx	lr

0800f0b2 <_ZN8touchgfx10ClickEventD0Ev>:
 800f0b2:	b510      	push	{r4, lr}
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	210c      	movs	r1, #12
 800f0b8:	f007 fa28 	bl	801650c <_ZdlPvj>
 800f0bc:	4620      	mov	r0, r4
 800f0be:	bd10      	pop	{r4, pc}

0800f0c0 <_ZN8touchgfx9DragEventD0Ev>:
 800f0c0:	b510      	push	{r4, lr}
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	2110      	movs	r1, #16
 800f0c6:	f007 fa21 	bl	801650c <_ZdlPvj>
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	bd10      	pop	{r4, pc}

0800f0ce <_ZN8touchgfx12GestureEventD0Ev>:
 800f0ce:	b510      	push	{r4, lr}
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	210c      	movs	r1, #12
 800f0d4:	f007 fa1a 	bl	801650c <_ZdlPvj>
 800f0d8:	4620      	mov	r0, r4
 800f0da:	bd10      	pop	{r4, pc}

0800f0dc <_ZN8touchgfx6ScreenD0Ev>:
 800f0dc:	b510      	push	{r4, lr}
 800f0de:	4604      	mov	r4, r0
 800f0e0:	213c      	movs	r1, #60	; 0x3c
 800f0e2:	f007 fa13 	bl	801650c <_ZdlPvj>
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	bd10      	pop	{r4, pc}
	...

0800f0ec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800f0ec:	b530      	push	{r4, r5, lr}
 800f0ee:	460d      	mov	r5, r1
 800f0f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f0f2:	b087      	sub	sp, #28
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	b301      	cbz	r1, 800f13a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800f0f8:	a801      	add	r0, sp, #4
 800f0fa:	f7ff fe89 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f0fe:	892a      	ldrh	r2, [r5, #8]
 800f100:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f104:	7928      	ldrb	r0, [r5, #4]
 800f106:	1ad2      	subs	r2, r2, r3
 800f108:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f10a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800f10e:	441a      	add	r2, r3
 800f110:	896b      	ldrh	r3, [r5, #10]
 800f112:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800f116:	f88d 0010 	strb.w	r0, [sp, #16]
 800f11a:	1b5b      	subs	r3, r3, r5
 800f11c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800f11e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f120:	442b      	add	r3, r5
 800f122:	4d07      	ldr	r5, [pc, #28]	; (800f140 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800f124:	f8ad 1012 	strh.w	r1, [sp, #18]
 800f128:	a903      	add	r1, sp, #12
 800f12a:	9503      	str	r5, [sp, #12]
 800f12c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f130:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f134:	6803      	ldr	r3, [r0, #0]
 800f136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f138:	4798      	blx	r3
 800f13a:	b007      	add	sp, #28
 800f13c:	bd30      	pop	{r4, r5, pc}
 800f13e:	bf00      	nop
 800f140:	0801a87c 	.word	0x0801a87c

0800f144 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f14a:	b08a      	sub	sp, #40	; 0x28
 800f14c:	4604      	mov	r4, r0
 800f14e:	460d      	mov	r5, r1
 800f150:	b113      	cbz	r3, 800f158 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800f152:	790b      	ldrb	r3, [r1, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d044      	beq.n	800f1e2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f158:	f104 0804 	add.w	r8, r4, #4
 800f15c:	a803      	add	r0, sp, #12
 800f15e:	4641      	mov	r1, r8
 800f160:	f7ff fe56 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f164:	792b      	ldrb	r3, [r5, #4]
 800f166:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800f16a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800f16e:	b983      	cbnz	r3, 800f192 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800f170:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800f174:	892a      	ldrh	r2, [r5, #8]
 800f176:	88e9      	ldrh	r1, [r5, #6]
 800f178:	4640      	mov	r0, r8
 800f17a:	1b92      	subs	r2, r2, r6
 800f17c:	9301      	str	r3, [sp, #4]
 800f17e:	1bc9      	subs	r1, r1, r7
 800f180:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f184:	b212      	sxth	r2, r2
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	b209      	sxth	r1, r1
 800f18a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f18e:	f7fa fd49 	bl	8009c24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800f192:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f194:	b329      	cbz	r1, 800f1e2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f196:	a805      	add	r0, sp, #20
 800f198:	f7ff fe3a 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f19c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f1a0:	792b      	ldrb	r3, [r5, #4]
 800f1a2:	a907      	add	r1, sp, #28
 800f1a4:	1abf      	subs	r7, r7, r2
 800f1a6:	88ea      	ldrh	r2, [r5, #6]
 800f1a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f1aa:	4417      	add	r7, r2
 800f1ac:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800f1ae:	f88d 3020 	strb.w	r3, [sp, #32]
 800f1b2:	4417      	add	r7, r2
 800f1b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800f1b8:	1ab6      	subs	r6, r6, r2
 800f1ba:	892a      	ldrh	r2, [r5, #8]
 800f1bc:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800f1c0:	4416      	add	r6, r2
 800f1c2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f1c4:	4416      	add	r6, r2
 800f1c6:	4a08      	ldr	r2, [pc, #32]	; (800f1e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800f1c8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800f1cc:	2600      	movs	r6, #0
 800f1ce:	9207      	str	r2, [sp, #28]
 800f1d0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800f1d4:	6803      	ldr	r3, [r0, #0]
 800f1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d8:	4798      	blx	r3
 800f1da:	792b      	ldrb	r3, [r5, #4]
 800f1dc:	b10b      	cbz	r3, 800f1e2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f1de:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800f1e2:	b00a      	add	sp, #40	; 0x28
 800f1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e8:	0801a854 	.word	0x0801a854

0800f1ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800f1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f0:	460c      	mov	r4, r1
 800f1f2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f1f4:	b088      	sub	sp, #32
 800f1f6:	4605      	mov	r5, r0
 800f1f8:	2900      	cmp	r1, #0
 800f1fa:	d06d      	beq.n	800f2d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800f1fc:	4668      	mov	r0, sp
 800f1fe:	f7ff fe07 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f202:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800f204:	88e3      	ldrh	r3, [r4, #6]
 800f206:	f9bd 8000 	ldrsh.w	r8, [sp]
 800f20a:	440b      	add	r3, r1
 800f20c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800f210:	b21b      	sxth	r3, r3
 800f212:	4543      	cmp	r3, r8
 800f214:	db31      	blt.n	800f27a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f216:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800f21a:	44c4      	add	ip, r8
 800f21c:	fa0f fc8c 	sxth.w	ip, ip
 800f220:	4563      	cmp	r3, ip
 800f222:	da2a      	bge.n	800f27a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f224:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800f226:	8926      	ldrh	r6, [r4, #8]
 800f228:	4416      	add	r6, r2
 800f22a:	b236      	sxth	r6, r6
 800f22c:	42be      	cmp	r6, r7
 800f22e:	db24      	blt.n	800f27a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f230:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800f234:	4438      	add	r0, r7
 800f236:	b200      	sxth	r0, r0
 800f238:	4286      	cmp	r6, r0
 800f23a:	da1e      	bge.n	800f27a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f23c:	8963      	ldrh	r3, [r4, #10]
 800f23e:	4419      	add	r1, r3
 800f240:	b209      	sxth	r1, r1
 800f242:	4541      	cmp	r1, r8
 800f244:	db08      	blt.n	800f258 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f246:	4561      	cmp	r1, ip
 800f248:	da06      	bge.n	800f258 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f24a:	89a3      	ldrh	r3, [r4, #12]
 800f24c:	441a      	add	r2, r3
 800f24e:	b212      	sxth	r2, r2
 800f250:	42ba      	cmp	r2, r7
 800f252:	db01      	blt.n	800f258 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f254:	4282      	cmp	r2, r0
 800f256:	db10      	blt.n	800f27a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f258:	4b21      	ldr	r3, [pc, #132]	; (800f2e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800f25a:	a904      	add	r1, sp, #16
 800f25c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f25e:	9304      	str	r3, [sp, #16]
 800f260:	2302      	movs	r3, #2
 800f262:	f88d 3014 	strb.w	r3, [sp, #20]
 800f266:	2300      	movs	r3, #0
 800f268:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f26c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f270:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f274:	6803      	ldr	r3, [r0, #0]
 800f276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f278:	4798      	blx	r3
 800f27a:	1d29      	adds	r1, r5, #4
 800f27c:	a802      	add	r0, sp, #8
 800f27e:	f7ff fdc7 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f282:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f286:	88e0      	ldrh	r0, [r4, #6]
 800f288:	eba3 0808 	sub.w	r8, r3, r8
 800f28c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f290:	7921      	ldrb	r1, [r4, #4]
 800f292:	fa1f f888 	uxth.w	r8, r8
 800f296:	1bdf      	subs	r7, r3, r7
 800f298:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800f29c:	b2bb      	uxth	r3, r7
 800f29e:	4440      	add	r0, r8
 800f2a0:	8922      	ldrh	r2, [r4, #8]
 800f2a2:	8967      	ldrh	r7, [r4, #10]
 800f2a4:	4460      	add	r0, ip
 800f2a6:	89a4      	ldrh	r4, [r4, #12]
 800f2a8:	441a      	add	r2, r3
 800f2aa:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800f2ac:	44b8      	add	r8, r7
 800f2ae:	4423      	add	r3, r4
 800f2b0:	f8ad 0016 	strh.w	r0, [sp, #22]
 800f2b4:	4432      	add	r2, r6
 800f2b6:	44e0      	add	r8, ip
 800f2b8:	4433      	add	r3, r6
 800f2ba:	4c0a      	ldr	r4, [pc, #40]	; (800f2e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800f2bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f2be:	f88d 1014 	strb.w	r1, [sp, #20]
 800f2c2:	a904      	add	r1, sp, #16
 800f2c4:	9404      	str	r4, [sp, #16]
 800f2c6:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f2ca:	f8ad 801a 	strh.w	r8, [sp, #26]
 800f2ce:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f2d2:	6803      	ldr	r3, [r0, #0]
 800f2d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2d6:	4798      	blx	r3
 800f2d8:	b008      	add	sp, #32
 800f2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2de:	bf00      	nop
 800f2e0:	0801a854 	.word	0x0801a854
 800f2e4:	0801a868 	.word	0x0801a868

0800f2e8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800f2e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800f2f0:	3201      	adds	r2, #1
 800f2f2:	d112      	bne.n	800f31a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800f2f4:	2500      	movs	r5, #0
 800f2f6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f2fa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f2fe:	6803      	ldr	r3, [r0, #0]
 800f300:	9500      	str	r5, [sp, #0]
 800f302:	466d      	mov	r5, sp
 800f304:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f308:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f30c:	4629      	mov	r1, r5
 800f30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f310:	4798      	blx	r3
 800f312:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f316:	e884 0003 	stmia.w	r4, {r0, r1}
 800f31a:	4620      	mov	r0, r4
 800f31c:	b003      	add	sp, #12
 800f31e:	bd30      	pop	{r4, r5, pc}

0800f320 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800f320:	b513      	push	{r0, r1, r4, lr}
 800f322:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800f326:	4604      	mov	r4, r0
 800f328:	3301      	adds	r3, #1
 800f32a:	d109      	bne.n	800f340 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800f32c:	4601      	mov	r1, r0
 800f32e:	4668      	mov	r0, sp
 800f330:	f7ff fd6e 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f334:	f8bd 3000 	ldrh.w	r3, [sp]
 800f338:	8423      	strh	r3, [r4, #32]
 800f33a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f33e:	8463      	strh	r3, [r4, #34]	; 0x22
 800f340:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800f344:	b002      	add	sp, #8
 800f346:	bd10      	pop	{r4, pc}

0800f348 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800f348:	b513      	push	{r0, r1, r4, lr}
 800f34a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800f34e:	4604      	mov	r4, r0
 800f350:	3301      	adds	r3, #1
 800f352:	d109      	bne.n	800f368 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800f354:	4601      	mov	r1, r0
 800f356:	4668      	mov	r0, sp
 800f358:	f7ff fd5a 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f35c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f360:	8423      	strh	r3, [r4, #32]
 800f362:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f366:	8463      	strh	r3, [r4, #34]	; 0x22
 800f368:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800f36c:	b002      	add	sp, #8
 800f36e:	bd10      	pop	{r4, pc}

0800f370 <_ZN8touchgfx6ScreenC1Ev>:
 800f370:	b570      	push	{r4, r5, r6, lr}
 800f372:	4b17      	ldr	r3, [pc, #92]	; (800f3d0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800f374:	4605      	mov	r5, r0
 800f376:	4a17      	ldr	r2, [pc, #92]	; (800f3d4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800f378:	2101      	movs	r1, #1
 800f37a:	f845 3b04 	str.w	r3, [r5], #4
 800f37e:	2300      	movs	r3, #0
 800f380:	6042      	str	r2, [r0, #4]
 800f382:	4604      	mov	r4, r0
 800f384:	8103      	strh	r3, [r0, #8]
 800f386:	8143      	strh	r3, [r0, #10]
 800f388:	8183      	strh	r3, [r0, #12]
 800f38a:	81c3      	strh	r3, [r0, #14]
 800f38c:	8203      	strh	r3, [r0, #16]
 800f38e:	8243      	strh	r3, [r0, #18]
 800f390:	8283      	strh	r3, [r0, #20]
 800f392:	82c3      	strh	r3, [r0, #22]
 800f394:	6203      	str	r3, [r0, #32]
 800f396:	8483      	strh	r3, [r0, #36]	; 0x24
 800f398:	84c3      	strh	r3, [r0, #38]	; 0x26
 800f39a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800f39e:	6343      	str	r3, [r0, #52]	; 0x34
 800f3a0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800f3a4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800f3a8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f3ac:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800f3b0:	4b09      	ldr	r3, [pc, #36]	; (800f3d8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f3b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f3ba:	4a08      	ldr	r2, [pc, #32]	; (800f3dc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800f3bc:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f3c0:	4798      	blx	r3
 800f3c2:	6863      	ldr	r3, [r4, #4]
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	4631      	mov	r1, r6
 800f3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3ca:	4798      	blx	r3
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	bd70      	pop	{r4, r5, r6, pc}
 800f3d0:	0801a890 	.word	0x0801a890
 800f3d4:	08019360 	.word	0x08019360
 800f3d8:	2400fa12 	.word	0x2400fa12
 800f3dc:	2400fa10 	.word	0x2400fa10

0800f3e0 <_ZN8touchgfx6Screen4drawEv>:
 800f3e0:	4b09      	ldr	r3, [pc, #36]	; (800f408 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800f3e2:	b507      	push	{r0, r1, r2, lr}
 800f3e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	4b08      	ldr	r3, [pc, #32]	; (800f40c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800f3ec:	9100      	str	r1, [sp, #0]
 800f3ee:	4669      	mov	r1, sp
 800f3f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3f4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f3f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f3fc:	6803      	ldr	r3, [r0, #0]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	4798      	blx	r3
 800f402:	b003      	add	sp, #12
 800f404:	f85d fb04 	ldr.w	pc, [sp], #4
 800f408:	2400fa10 	.word	0x2400fa10
 800f40c:	2400fa12 	.word	0x2400fa12

0800f410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f414:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f418:	b089      	sub	sp, #36	; 0x24
 800f41a:	4680      	mov	r8, r0
 800f41c:	460c      	mov	r4, r1
 800f41e:	2b00      	cmp	r3, #0
 800f420:	4615      	mov	r5, r2
 800f422:	dd0e      	ble.n	800f442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f424:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	dd0a      	ble.n	800f442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f42c:	4628      	mov	r0, r5
 800f42e:	f7ff ff5b 	bl	800f2e8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f432:	4621      	mov	r1, r4
 800f434:	f7fe fc8e 	bl	800dd54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f438:	69eb      	ldr	r3, [r5, #28]
 800f43a:	b928      	cbnz	r0, 800f448 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800f43c:	461d      	mov	r5, r3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1f4      	bne.n	800f42c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800f442:	b009      	add	sp, #36	; 0x24
 800f444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f448:	ae04      	add	r6, sp, #16
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f000 80b5 	beq.w	800f5ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f450:	682b      	ldr	r3, [r5, #0]
 800f452:	4629      	mov	r1, r5
 800f454:	a802      	add	r0, sp, #8
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	4798      	blx	r3
 800f45a:	4628      	mov	r0, r5
 800f45c:	f7ff ff60 	bl	800f320 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f460:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800f464:	4407      	add	r7, r0
 800f466:	4628      	mov	r0, r5
 800f468:	f7ff ff6e 	bl	800f348 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f46c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f470:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800f474:	b23f      	sxth	r7, r7
 800f476:	4418      	add	r0, r3
 800f478:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f47c:	4621      	mov	r1, r4
 800f47e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f482:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f486:	4630      	mov	r0, r6
 800f488:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f48c:	f8ad 7010 	strh.w	r7, [sp, #16]
 800f490:	f7fa fcaa 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800f494:	4628      	mov	r0, r5
 800f496:	f7ff ff27 	bl	800f2e8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f49a:	ab06      	add	r3, sp, #24
 800f49c:	4602      	mov	r2, r0
 800f49e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f4a2:	e883 0003 	stmia.w	r3, {r0, r1}
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7fa fc9d 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800f4ae:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f4b2:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f4b6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800f4ba:	4299      	cmp	r1, r3
 800f4bc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800f4c0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800f4c4:	d10b      	bne.n	800f4de <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f4c6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f4ca:	4552      	cmp	r2, sl
 800f4cc:	d107      	bne.n	800f4de <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f4ce:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f4d2:	455a      	cmp	r2, fp
 800f4d4:	d103      	bne.n	800f4de <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f4d6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f4da:	454a      	cmp	r2, r9
 800f4dc:	d06d      	beq.n	800f5ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f4de:	f1bb 0f00 	cmp.w	fp, #0
 800f4e2:	dd65      	ble.n	800f5b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800f4e4:	f1b9 0f00 	cmp.w	r9, #0
 800f4e8:	dd62      	ble.n	800f5b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800f4ea:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f4ee:	fa1f f08a 	uxth.w	r0, sl
 800f4f2:	4552      	cmp	r2, sl
 800f4f4:	9000      	str	r0, [sp, #0]
 800f4f6:	da12      	bge.n	800f51e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800f4f8:	9301      	str	r3, [sp, #4]
 800f4fa:	9b00      	ldr	r3, [sp, #0]
 800f4fc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f500:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f504:	1a9a      	subs	r2, r3, r2
 800f506:	f8ad 1010 	strh.w	r1, [sp, #16]
 800f50a:	4631      	mov	r1, r6
 800f50c:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f510:	4640      	mov	r0, r8
 800f512:	f8ad 2016 	strh.w	r2, [sp, #22]
 800f516:	69ea      	ldr	r2, [r5, #28]
 800f518:	f7ff ff7a 	bl	800f410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f51c:	9b01      	ldr	r3, [sp, #4]
 800f51e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f522:	b29f      	uxth	r7, r3
 800f524:	429a      	cmp	r2, r3
 800f526:	da0d      	bge.n	800f544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800f528:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f52c:	1aba      	subs	r2, r7, r2
 800f52e:	f8ad a012 	strh.w	sl, [sp, #18]
 800f532:	4631      	mov	r1, r6
 800f534:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f538:	4640      	mov	r0, r8
 800f53a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f53e:	69ea      	ldr	r2, [r5, #28]
 800f540:	f7ff ff66 	bl	800f410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f544:	8822      	ldrh	r2, [r4, #0]
 800f546:	445f      	add	r7, fp
 800f548:	88a3      	ldrh	r3, [r4, #4]
 800f54a:	b2bf      	uxth	r7, r7
 800f54c:	4413      	add	r3, r2
 800f54e:	b23a      	sxth	r2, r7
 800f550:	b29b      	uxth	r3, r3
 800f552:	b219      	sxth	r1, r3
 800f554:	4291      	cmp	r1, r2
 800f556:	dd0d      	ble.n	800f574 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800f558:	1bdb      	subs	r3, r3, r7
 800f55a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f55e:	f8ad a012 	strh.w	sl, [sp, #18]
 800f562:	4631      	mov	r1, r6
 800f564:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f568:	4640      	mov	r0, r8
 800f56a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f56e:	69ea      	ldr	r2, [r5, #28]
 800f570:	f7ff ff4e 	bl	800f410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f574:	88e2      	ldrh	r2, [r4, #6]
 800f576:	8863      	ldrh	r3, [r4, #2]
 800f578:	4413      	add	r3, r2
 800f57a:	9a00      	ldr	r2, [sp, #0]
 800f57c:	444a      	add	r2, r9
 800f57e:	b29b      	uxth	r3, r3
 800f580:	fa1f f982 	uxth.w	r9, r2
 800f584:	b219      	sxth	r1, r3
 800f586:	fa0f f289 	sxth.w	r2, r9
 800f58a:	428a      	cmp	r2, r1
 800f58c:	da15      	bge.n	800f5ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f58e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f592:	eba3 0309 	sub.w	r3, r3, r9
 800f596:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f59a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f59e:	4631      	mov	r1, r6
 800f5a0:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f5a4:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f5a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f5ac:	69ea      	ldr	r2, [r5, #28]
 800f5ae:	e001      	b.n	800f5b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800f5b0:	69ea      	ldr	r2, [r5, #28]
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	f7ff ff2b 	bl	800f410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	f7ff fe94 	bl	800f2e8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f5c0:	6861      	ldr	r1, [r4, #4]
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	4633      	mov	r3, r6
 800f5c6:	6820      	ldr	r0, [r4, #0]
 800f5c8:	c303      	stmia	r3!, {r0, r1}
 800f5ca:	4611      	mov	r1, r2
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	f7fa fc0b 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800f5d2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	f77f af33 	ble.w	800f442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f5dc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	f77f af2e 	ble.w	800f442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f7ff fe9a 	bl	800f320 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f5ec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f5f0:	1a18      	subs	r0, r3, r0
 800f5f2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	f7ff fea6 	bl	800f348 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f5fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f600:	4631      	mov	r1, r6
 800f602:	1a18      	subs	r0, r3, r0
 800f604:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f608:	4628      	mov	r0, r5
 800f60a:	682b      	ldr	r3, [r5, #0]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	4798      	blx	r3
 800f610:	e717      	b.n	800f442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800f612 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800f612:	b570      	push	{r4, r5, r6, lr}
 800f614:	1d06      	adds	r6, r0, #4
 800f616:	b086      	sub	sp, #24
 800f618:	460c      	mov	r4, r1
 800f61a:	2300      	movs	r3, #0
 800f61c:	4631      	mov	r1, r6
 800f61e:	4605      	mov	r5, r0
 800f620:	a802      	add	r0, sp, #8
 800f622:	9301      	str	r3, [sp, #4]
 800f624:	f7ff fbf4 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f628:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f62c:	8822      	ldrh	r2, [r4, #0]
 800f62e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800f632:	1ad2      	subs	r2, r2, r3
 800f634:	8863      	ldrh	r3, [r4, #2]
 800f636:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f63a:	1a5b      	subs	r3, r3, r1
 800f63c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f640:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f644:	aa01      	add	r2, sp, #4
 800f646:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f64a:	4630      	mov	r0, r6
 800f64c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f650:	a904      	add	r1, sp, #16
 800f652:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f656:	f7fa fc9f 	bl	8009f98 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800f65a:	9a01      	ldr	r2, [sp, #4]
 800f65c:	b11a      	cbz	r2, 800f666 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800f65e:	4621      	mov	r1, r4
 800f660:	4628      	mov	r0, r5
 800f662:	f7ff fed5 	bl	800f410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f666:	b006      	add	sp, #24
 800f668:	bd70      	pop	{r4, r5, r6, pc}

0800f66a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800f66a:	4602      	mov	r2, r0
 800f66c:	b530      	push	{r4, r5, lr}
 800f66e:	4604      	mov	r4, r0
 800f670:	b085      	sub	sp, #20
 800f672:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800f676:	460d      	mov	r5, r1
 800f678:	466b      	mov	r3, sp
 800f67a:	6851      	ldr	r1, [r2, #4]
 800f67c:	c303      	stmia	r3!, {r0, r1}
 800f67e:	4629      	mov	r1, r5
 800f680:	4668      	mov	r0, sp
 800f682:	f7fa fbb1 	bl	8009de8 <_ZN8touchgfx4RectaNERKS0_>
 800f686:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f68a:	b12b      	cbz	r3, 800f698 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800f68c:	4669      	mov	r1, sp
 800f68e:	4620      	mov	r0, r4
 800f690:	f7ff ffbf 	bl	800f612 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800f694:	b005      	add	sp, #20
 800f696:	bd30      	pop	{r4, r5, pc}
 800f698:	3404      	adds	r4, #4
 800f69a:	a802      	add	r0, sp, #8
 800f69c:	4621      	mov	r1, r4
 800f69e:	f7ff fbb7 	bl	800ee10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f6a2:	f8bd 3000 	ldrh.w	r3, [sp]
 800f6a6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f6aa:	4669      	mov	r1, sp
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	1a9b      	subs	r3, r3, r2
 800f6b0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f6b4:	f8ad 3000 	strh.w	r3, [sp]
 800f6b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f6bc:	1a9b      	subs	r3, r3, r2
 800f6be:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f6c2:	f7fa fc30 	bl	8009f26 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800f6c6:	e7e5      	b.n	800f694 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800f6c8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	680a      	ldr	r2, [r1, #0]
 800f6cc:	1d01      	adds	r1, r0, #4
 800f6ce:	6992      	ldr	r2, [r2, #24]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	4710      	bx	r2

0800f6d4 <_ZN8touchgfx12TextProviderC1Ev>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	2500      	movs	r5, #0
 800f6d8:	2302      	movs	r3, #2
 800f6da:	4604      	mov	r4, r0
 800f6dc:	220e      	movs	r2, #14
 800f6de:	7403      	strb	r3, [r0, #16]
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	6145      	str	r5, [r0, #20]
 800f6e4:	7605      	strb	r5, [r0, #24]
 800f6e6:	83c5      	strh	r5, [r0, #30]
 800f6e8:	8405      	strh	r5, [r0, #32]
 800f6ea:	86c5      	strh	r5, [r0, #54]	; 0x36
 800f6ec:	8705      	strh	r5, [r0, #56]	; 0x38
 800f6ee:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800f6f0:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800f6f4:	e9c0 5500 	strd	r5, r5, [r0]
 800f6f8:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800f6fc:	304c      	adds	r0, #76	; 0x4c
 800f6fe:	f007 fe8d 	bl	801741c <memset>
 800f702:	2301      	movs	r3, #1
 800f704:	4620      	mov	r0, r4
 800f706:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800f70a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800f70e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800f712:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800f716:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800f71a:	f7f9 f84b 	bl	80087b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800f71e:	4620      	mov	r0, r4
 800f720:	bd38      	pop	{r3, r4, r5, pc}

0800f722 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800f722:	b530      	push	{r4, r5, lr}
 800f724:	2500      	movs	r5, #0
 800f726:	2401      	movs	r4, #1
 800f728:	6843      	ldr	r3, [r0, #4]
 800f72a:	b913      	cbnz	r3, 800f732 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800f72c:	6803      	ldr	r3, [r0, #0]
 800f72e:	b313      	cbz	r3, 800f776 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f730:	6043      	str	r3, [r0, #4]
 800f732:	7e03      	ldrb	r3, [r0, #24]
 800f734:	b143      	cbz	r3, 800f748 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800f736:	6943      	ldr	r3, [r0, #20]
 800f738:	b12b      	cbz	r3, 800f746 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f73a:	881a      	ldrh	r2, [r3, #0]
 800f73c:	b11a      	cbz	r2, 800f746 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f73e:	1c9a      	adds	r2, r3, #2
 800f740:	6142      	str	r2, [r0, #20]
 800f742:	8818      	ldrh	r0, [r3, #0]
 800f744:	bd30      	pop	{r4, r5, pc}
 800f746:	7605      	strb	r5, [r0, #24]
 800f748:	6843      	ldr	r3, [r0, #4]
 800f74a:	8819      	ldrh	r1, [r3, #0]
 800f74c:	b199      	cbz	r1, 800f776 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f74e:	1c9a      	adds	r2, r3, #2
 800f750:	2902      	cmp	r1, #2
 800f752:	6042      	str	r2, [r0, #4]
 800f754:	d1f5      	bne.n	800f742 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800f756:	7c03      	ldrb	r3, [r0, #16]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d8e5      	bhi.n	800f728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f75c:	1c5a      	adds	r2, r3, #1
 800f75e:	3302      	adds	r3, #2
 800f760:	7402      	strb	r2, [r0, #16]
 800f762:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f766:	6143      	str	r3, [r0, #20]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d0dd      	beq.n	800f728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d0da      	beq.n	800f728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f772:	7604      	strb	r4, [r0, #24]
 800f774:	e7d8      	b.n	800f728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f776:	2000      	movs	r0, #0
 800f778:	e7e4      	b.n	800f744 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800f77a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800f77a:	b430      	push	{r4, r5}
 800f77c:	6815      	ldr	r5, [r2, #0]
 800f77e:	6085      	str	r5, [r0, #8]
 800f780:	6852      	ldr	r2, [r2, #4]
 800f782:	6443      	str	r3, [r0, #68]	; 0x44
 800f784:	60c2      	str	r2, [r0, #12]
 800f786:	2200      	movs	r2, #0
 800f788:	9b02      	ldr	r3, [sp, #8]
 800f78a:	7402      	strb	r2, [r0, #16]
 800f78c:	6001      	str	r1, [r0, #0]
 800f78e:	6483      	str	r3, [r0, #72]	; 0x48
 800f790:	6042      	str	r2, [r0, #4]
 800f792:	6142      	str	r2, [r0, #20]
 800f794:	7602      	strb	r2, [r0, #24]
 800f796:	8702      	strh	r2, [r0, #56]	; 0x38
 800f798:	8402      	strh	r2, [r0, #32]
 800f79a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800f79e:	bc30      	pop	{r4, r5}
 800f7a0:	f7f9 b808 	b.w	80087b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800f7a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800f7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	4608      	mov	r0, r1
 800f7aa:	b1f1      	cbz	r1, 800f7ea <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800f7ac:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	f101 0708 	add.w	r7, r1, #8
 800f7b6:	4622      	mov	r2, r4
 800f7b8:	6818      	ldr	r0, [r3, #0]
 800f7ba:	3308      	adds	r3, #8
 800f7bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f7c0:	4626      	mov	r6, r4
 800f7c2:	42bb      	cmp	r3, r7
 800f7c4:	c603      	stmia	r6!, {r0, r1}
 800f7c6:	4634      	mov	r4, r6
 800f7c8:	d1f6      	bne.n	800f7b8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800f7ca:	6818      	ldr	r0, [r3, #0]
 800f7cc:	6030      	str	r0, [r6, #0]
 800f7ce:	4610      	mov	r0, r2
 800f7d0:	889b      	ldrh	r3, [r3, #4]
 800f7d2:	80b3      	strh	r3, [r6, #4]
 800f7d4:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800f7d8:	015b      	lsls	r3, r3, #5
 800f7da:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800f7de:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800f7e2:	430b      	orrs	r3, r1
 800f7e4:	425b      	negs	r3, r3
 800f7e6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800f7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	460c      	mov	r4, r1
 800f7f0:	6811      	ldr	r1, [r2, #0]
 800f7f2:	4610      	mov	r0, r2
 800f7f4:	68cd      	ldr	r5, [r1, #12]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	47a8      	blx	r5
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	bf08      	it	eq
 800f7fe:	4620      	moveq	r0, r4
 800f800:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f804 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f806:	4604      	mov	r4, r0
 800f808:	4615      	mov	r5, r2
 800f80a:	4608      	mov	r0, r1
 800f80c:	b93a      	cbnz	r2, 800f81e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800f80e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800f812:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800f816:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800f81a:	4628      	mov	r0, r5
 800f81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f81e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800f822:	8893      	ldrh	r3, [r2, #4]
 800f824:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800f828:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800f82c:	79ee      	ldrb	r6, [r5, #7]
 800f82e:	4316      	orrs	r6, r2
 800f830:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 800f834:	189a      	adds	r2, r3, r2
 800f836:	b2b7      	uxth	r7, r6
 800f838:	b291      	uxth	r1, r2
 800f83a:	291d      	cmp	r1, #29
 800f83c:	f200 8084 	bhi.w	800f948 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800f840:	2201      	movs	r2, #1
 800f842:	10f6      	asrs	r6, r6, #3
 800f844:	408a      	lsls	r2, r1
 800f846:	4978      	ldr	r1, [pc, #480]	; (800fa28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 800f848:	420a      	tst	r2, r1
 800f84a:	d12e      	bne.n	800f8aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 800f84c:	f412 7f60 	tst.w	r2, #896	; 0x380
 800f850:	d07a      	beq.n	800f948 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800f852:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800f856:	462b      	mov	r3, r5
 800f858:	f105 0e08 	add.w	lr, r5, #8
 800f85c:	4615      	mov	r5, r2
 800f85e:	6818      	ldr	r0, [r3, #0]
 800f860:	3308      	adds	r3, #8
 800f862:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f866:	4694      	mov	ip, r2
 800f868:	4573      	cmp	r3, lr
 800f86a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f86e:	4662      	mov	r2, ip
 800f870:	d1f5      	bne.n	800f85e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800f872:	6818      	ldr	r0, [r3, #0]
 800f874:	f8cc 0000 	str.w	r0, [ip]
 800f878:	889b      	ldrh	r3, [r3, #4]
 800f87a:	f8ac 3004 	strh.w	r3, [ip, #4]
 800f87e:	b2b3      	uxth	r3, r6
 800f880:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800f884:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800f888:	1aca      	subs	r2, r1, r3
 800f88a:	1bcf      	subs	r7, r1, r7
 800f88c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800f890:	b292      	uxth	r2, r2
 800f892:	1afb      	subs	r3, r7, r3
 800f894:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800f898:	10d2      	asrs	r2, r2, #3
 800f89a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800f89e:	4302      	orrs	r2, r0
 800f8a0:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800f8a4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800f8a8:	e7b7      	b.n	800f81a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800f8aa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f8ac:	b92b      	cbnz	r3, 800f8ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 800f8ae:	4b5f      	ldr	r3, [pc, #380]	; (800fa2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 800f8b0:	21c0      	movs	r1, #192	; 0xc0
 800f8b2:	4a5f      	ldr	r2, [pc, #380]	; (800fa30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 800f8b4:	485f      	ldr	r0, [pc, #380]	; (800fa34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 800f8b6:	f007 fc39 	bl	801712c <__assert_func>
 800f8ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f8bc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f8c0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800f8c2:	f640 6333 	movw	r3, #3635	; 0xe33
 800f8c6:	4299      	cmp	r1, r3
 800f8c8:	d110      	bne.n	800f8ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 800f8ca:	6803      	ldr	r3, [r0, #0]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	4798      	blx	r3
 800f8d0:	7b41      	ldrb	r1, [r0, #13]
 800f8d2:	00cb      	lsls	r3, r1, #3
 800f8d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f8d8:	7a03      	ldrb	r3, [r0, #8]
 800f8da:	0648      	lsls	r0, r1, #25
 800f8dc:	ea43 0302 	orr.w	r3, r3, r2
 800f8e0:	bf44      	itt	mi
 800f8e2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f8e6:	b21b      	sxthmi	r3, r3
 800f8e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f8ec:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800f8f0:	462a      	mov	r2, r5
 800f8f2:	f105 0c08 	add.w	ip, r5, #8
 800f8f6:	443b      	add	r3, r7
 800f8f8:	4433      	add	r3, r6
 800f8fa:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800f8fe:	b29b      	uxth	r3, r3
 800f900:	4635      	mov	r5, r6
 800f902:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f906:	6810      	ldr	r0, [r2, #0]
 800f908:	3208      	adds	r2, #8
 800f90a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800f90e:	4637      	mov	r7, r6
 800f910:	4562      	cmp	r2, ip
 800f912:	c703      	stmia	r7!, {r0, r1}
 800f914:	463e      	mov	r6, r7
 800f916:	d1f6      	bne.n	800f906 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800f918:	6810      	ldr	r0, [r2, #0]
 800f91a:	6038      	str	r0, [r7, #0]
 800f91c:	8892      	ldrh	r2, [r2, #4]
 800f91e:	80ba      	strh	r2, [r7, #4]
 800f920:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800f924:	10db      	asrs	r3, r3, #3
 800f926:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800f92a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f92e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800f932:	4313      	orrs	r3, r2
 800f934:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800f938:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800f93c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800f940:	1a9b      	subs	r3, r3, r2
 800f942:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800f946:	e768      	b.n	800f81a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800f948:	f023 0204 	bic.w	r2, r3, #4
 800f94c:	f640 611b 	movw	r1, #3611	; 0xe1b
 800f950:	428a      	cmp	r2, r1
 800f952:	d003      	beq.n	800f95c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800f954:	f640 621d 	movw	r2, #3613	; 0xe1d
 800f958:	4293      	cmp	r3, r2
 800f95a:	d120      	bne.n	800f99e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 800f95c:	3b01      	subs	r3, #1
 800f95e:	4602      	mov	r2, r0
 800f960:	4629      	mov	r1, r5
 800f962:	4620      	mov	r0, r4
 800f964:	b29b      	uxth	r3, r3
 800f966:	f7ff ff41 	bl	800f7ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f96a:	7b41      	ldrb	r1, [r0, #13]
 800f96c:	00cb      	lsls	r3, r1, #3
 800f96e:	0649      	lsls	r1, r1, #25
 800f970:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f974:	7a03      	ldrb	r3, [r0, #8]
 800f976:	ea43 0302 	orr.w	r3, r3, r2
 800f97a:	bf44      	itt	mi
 800f97c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f980:	b21b      	sxthmi	r3, r3
 800f982:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f986:	7b6b      	ldrb	r3, [r5, #13]
 800f988:	7aaa      	ldrb	r2, [r5, #10]
 800f98a:	005b      	lsls	r3, r3, #1
 800f98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f990:	4313      	orrs	r3, r2
 800f992:	115a      	asrs	r2, r3, #5
 800f994:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800f998:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800f99c:	e035      	b.n	800fa0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 800f99e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800f9a2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f9a6:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800f9aa:	7a2a      	ldrb	r2, [r5, #8]
 800f9ac:	ea42 0201 	orr.w	r2, r2, r1
 800f9b0:	f640 6109 	movw	r1, #3593	; 0xe09
 800f9b4:	bf1c      	itt	ne
 800f9b6:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800f9ba:	b212      	sxthne	r2, r2
 800f9bc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800f9c0:	f023 0210 	bic.w	r2, r3, #16
 800f9c4:	428a      	cmp	r2, r1
 800f9c6:	d003      	beq.n	800f9d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 800f9c8:	f640 6213 	movw	r2, #3603	; 0xe13
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d129      	bne.n	800fa24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 800f9d0:	7b6e      	ldrb	r6, [r5, #13]
 800f9d2:	4629      	mov	r1, r5
 800f9d4:	0076      	lsls	r6, r6, #1
 800f9d6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800f9da:	7aae      	ldrb	r6, [r5, #10]
 800f9dc:	4316      	orrs	r6, r2
 800f9de:	f640 6213 	movw	r2, #3603	; 0xe13
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	bf16      	itet	ne
 800f9ea:	f103 33ff 	addne.w	r3, r3, #4294967295
 800f9ee:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800f9f2:	b29b      	uxthne	r3, r3
 800f9f4:	f7ff fefa 	bl	800f7ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f9f8:	7b43      	ldrb	r3, [r0, #13]
 800f9fa:	7a82      	ldrb	r2, [r0, #10]
 800f9fc:	005b      	lsls	r3, r3, #1
 800f9fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa02:	4313      	orrs	r3, r2
 800fa04:	1af6      	subs	r6, r6, r3
 800fa06:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800fa0a:	7b69      	ldrb	r1, [r5, #13]
 800fa0c:	00cb      	lsls	r3, r1, #3
 800fa0e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fa12:	7a2b      	ldrb	r3, [r5, #8]
 800fa14:	4313      	orrs	r3, r2
 800fa16:	064a      	lsls	r2, r1, #25
 800fa18:	bf44      	itt	mi
 800fa1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fa1e:	b21b      	sxthmi	r3, r3
 800fa20:	1bdb      	subs	r3, r3, r7
 800fa22:	e73f      	b.n	800f8a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 800fa24:	2300      	movs	r3, #0
 800fa26:	e7b7      	b.n	800f998 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 800fa28:	3fc00079 	.word	0x3fc00079
 800fa2c:	0801a8bc 	.word	0x0801a8bc
 800fa30:	0801ab2e 	.word	0x0801ab2e
 800fa34:	0801a8c5 	.word	0x0801a8c5

0800fa38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800fa38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	b942      	cbnz	r2, 800fa52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800fa40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa44:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800fa48:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800fa4c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800fa50:	e046      	b.n	800fae0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800fa52:	7b51      	ldrb	r1, [r2, #13]
 800fa54:	8893      	ldrh	r3, [r2, #4]
 800fa56:	010f      	lsls	r7, r1, #4
 800fa58:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800fa5c:	79d7      	ldrb	r7, [r2, #7]
 800fa5e:	4307      	orrs	r7, r0
 800fa60:	2f04      	cmp	r7, #4
 800fa62:	b2bd      	uxth	r5, r7
 800fa64:	bfcc      	ite	gt
 800fa66:	08bf      	lsrgt	r7, r7, #2
 800fa68:	2701      	movle	r7, #1
 800fa6a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800fa6e:	f200 80ab 	bhi.w	800fbc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 800fa72:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800fa76:	4283      	cmp	r3, r0
 800fa78:	d216      	bcs.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fa7a:	f240 605b 	movw	r0, #1627	; 0x65b
 800fa7e:	4283      	cmp	r3, r0
 800fa80:	d859      	bhi.n	800fb36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 800fa82:	f240 6057 	movw	r0, #1623	; 0x657
 800fa86:	4283      	cmp	r3, r0
 800fa88:	d20e      	bcs.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fa8a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800fa8e:	d24a      	bcs.n	800fb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 800fa90:	f240 604e 	movw	r0, #1614	; 0x64e
 800fa94:	4283      	cmp	r3, r0
 800fa96:	d207      	bcs.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fa98:	f240 601a 	movw	r0, #1562	; 0x61a
 800fa9c:	4283      	cmp	r3, r0
 800fa9e:	d02a      	beq.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800faa0:	d821      	bhi.n	800fae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 800faa2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800faa6:	d35b      	bcc.n	800fb60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800faa8:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800faac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fab0:	f040 80d0 	bne.w	800fc54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 800fab4:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800fab8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fabc:	f040 80ca 	bne.w	800fc54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 800fac0:	00cb      	lsls	r3, r1, #3
 800fac2:	0649      	lsls	r1, r1, #25
 800fac4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fac8:	7a13      	ldrb	r3, [r2, #8]
 800faca:	ea43 0300 	orr.w	r3, r3, r0
 800face:	bf44      	itt	mi
 800fad0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fad4:	b21b      	sxthmi	r3, r3
 800fad6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fada:	1b5d      	subs	r5, r3, r5
 800fadc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fae0:	4610      	mov	r0, r2
 800fae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fae6:	f240 604b 	movw	r0, #1611	; 0x64b
 800faea:	4283      	cmp	r3, r0
 800faec:	d338      	bcc.n	800fb60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800faee:	f240 604c 	movw	r0, #1612	; 0x64c
 800faf2:	4283      	cmp	r3, r0
 800faf4:	d9d8      	bls.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800faf6:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800fafa:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800fafe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fb02:	f040 80f2 	bne.w	800fcea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800fb06:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fb0a:	f040 80ee 	bne.w	800fcea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800fb0e:	00cb      	lsls	r3, r1, #3
 800fb10:	064e      	lsls	r6, r1, #25
 800fb12:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fb16:	7a13      	ldrb	r3, [r2, #8]
 800fb18:	ea43 0300 	orr.w	r3, r3, r0
 800fb1c:	bf44      	itt	mi
 800fb1e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fb22:	b21b      	sxthmi	r3, r3
 800fb24:	e7d9      	b.n	800fada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 800fb26:	f240 6054 	movw	r0, #1620	; 0x654
 800fb2a:	4283      	cmp	r3, r0
 800fb2c:	d8e3      	bhi.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fb2e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800fb32:	d9e0      	bls.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fb34:	e7b8      	b.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fb36:	f240 6074 	movw	r0, #1652	; 0x674
 800fb3a:	4283      	cmp	r3, r0
 800fb3c:	d0b4      	beq.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fb3e:	d82d      	bhi.n	800fb9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 800fb40:	f240 605e 	movw	r0, #1630	; 0x65e
 800fb44:	4283      	cmp	r3, r0
 800fb46:	d804      	bhi.n	800fb52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 800fb48:	f240 605d 	movw	r0, #1629	; 0x65d
 800fb4c:	4283      	cmp	r3, r0
 800fb4e:	d3d2      	bcc.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fb50:	e7aa      	b.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fb52:	f240 605f 	movw	r0, #1631	; 0x65f
 800fb56:	4283      	cmp	r3, r0
 800fb58:	d0cd      	beq.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fb5a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800fb5e:	d0a3      	beq.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fb60:	00cb      	lsls	r3, r1, #3
 800fb62:	0649      	lsls	r1, r1, #25
 800fb64:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fb68:	7a13      	ldrb	r3, [r2, #8]
 800fb6a:	ea43 0300 	orr.w	r3, r3, r0
 800fb6e:	bf44      	itt	mi
 800fb70:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fb74:	b21b      	sxthmi	r3, r3
 800fb76:	1b5d      	subs	r5, r3, r5
 800fb78:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fb7c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fb80:	7b53      	ldrb	r3, [r2, #13]
 800fb82:	015b      	lsls	r3, r3, #5
 800fb84:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800fb88:	7993      	ldrb	r3, [r2, #6]
 800fb8a:	430b      	orrs	r3, r1
 800fb8c:	2105      	movs	r1, #5
 800fb8e:	005b      	lsls	r3, r3, #1
 800fb90:	fb93 f3f1 	sdiv	r3, r3, r1
 800fb94:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800fb98:	440b      	add	r3, r1
 800fb9a:	e757      	b.n	800fa4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800fb9c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800fba0:	4283      	cmp	r3, r0
 800fba2:	d809      	bhi.n	800fbb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 800fba4:	f240 60df 	movw	r0, #1759	; 0x6df
 800fba8:	4283      	cmp	r3, r0
 800fbaa:	f4bf af7d 	bcs.w	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fbae:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800fbb2:	2b05      	cmp	r3, #5
 800fbb4:	d8d4      	bhi.n	800fb60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fbb6:	e777      	b.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fbb8:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800fbbc:	4283      	cmp	r3, r0
 800fbbe:	d09a      	beq.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fbc0:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800fbc4:	4283      	cmp	r3, r0
 800fbc6:	e7ca      	b.n	800fb5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 800fbc8:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800fbcc:	d22b      	bcs.n	800fc26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 800fbce:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800fbd2:	4283      	cmp	r3, r0
 800fbd4:	d28f      	bcs.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fbd6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fbda:	4283      	cmp	r3, r0
 800fbdc:	d816      	bhi.n	800fc0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 800fbde:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800fbe2:	4283      	cmp	r3, r0
 800fbe4:	f4bf af60 	bcs.w	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fbe8:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800fbec:	4283      	cmp	r3, r0
 800fbee:	d80a      	bhi.n	800fc06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 800fbf0:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800fbf4:	4283      	cmp	r3, r0
 800fbf6:	f4bf af57 	bcs.w	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fbfa:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800fbfe:	4283      	cmp	r3, r0
 800fc00:	f43f af79 	beq.w	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fc04:	e7ac      	b.n	800fb60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fc06:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800fc0a:	e7f8      	b.n	800fbfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 800fc0c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800fc10:	4283      	cmp	r3, r0
 800fc12:	d802      	bhi.n	800fc1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 800fc14:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fc18:	e798      	b.n	800fb4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 800fc1a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800fc1e:	4283      	cmp	r3, r0
 800fc20:	f47f af42 	bne.w	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fc24:	e767      	b.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fc26:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800fc2a:	4283      	cmp	r3, r0
 800fc2c:	f43f af63 	beq.w	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fc30:	d802      	bhi.n	800fc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 800fc32:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800fc36:	e7f2      	b.n	800fc1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 800fc38:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800fc3c:	4283      	cmp	r3, r0
 800fc3e:	d805      	bhi.n	800fc4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 800fc40:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800fc44:	4283      	cmp	r3, r0
 800fc46:	f4ff af2f 	bcc.w	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fc4a:	e754      	b.n	800faf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fc4c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800fc50:	4283      	cmp	r3, r0
 800fc52:	e7af      	b.n	800fbb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 800fc54:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800fc58:	4617      	mov	r7, r2
 800fc5a:	f102 0808 	add.w	r8, r2, #8
 800fc5e:	4666      	mov	r6, ip
 800fc60:	6838      	ldr	r0, [r7, #0]
 800fc62:	3708      	adds	r7, #8
 800fc64:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800fc68:	46e6      	mov	lr, ip
 800fc6a:	4547      	cmp	r7, r8
 800fc6c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800fc70:	46f4      	mov	ip, lr
 800fc72:	d1f5      	bne.n	800fc60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 800fc74:	6838      	ldr	r0, [r7, #0]
 800fc76:	f8ce 0000 	str.w	r0, [lr]
 800fc7a:	88b9      	ldrh	r1, [r7, #4]
 800fc7c:	f8ae 1004 	strh.w	r1, [lr, #4]
 800fc80:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800fc84:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fc88:	d009      	beq.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800fc8a:	7b51      	ldrb	r1, [r2, #13]
 800fc8c:	7992      	ldrb	r2, [r2, #6]
 800fc8e:	0149      	lsls	r1, r1, #5
 800fc90:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800fc94:	4311      	orrs	r1, r2
 800fc96:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800fc9a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800fc9e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fca2:	d00d      	beq.n	800fcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 800fca4:	442b      	add	r3, r5
 800fca6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fcb0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fcb4:	10db      	asrs	r3, r3, #3
 800fcb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800fcc0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fcc4:	00cb      	lsls	r3, r1, #3
 800fcc6:	064f      	lsls	r7, r1, #25
 800fcc8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fccc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800fcd0:	ea43 0302 	orr.w	r3, r3, r2
 800fcd4:	bf44      	itt	mi
 800fcd6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fcda:	b21b      	sxthmi	r3, r3
 800fcdc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fce0:	1b5d      	subs	r5, r3, r5
 800fce2:	4632      	mov	r2, r6
 800fce4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fce8:	e6fa      	b.n	800fae0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800fcea:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800fcee:	4694      	mov	ip, r2
 800fcf0:	f102 0908 	add.w	r9, r2, #8
 800fcf4:	4676      	mov	r6, lr
 800fcf6:	f8dc 0000 	ldr.w	r0, [ip]
 800fcfa:	f10c 0c08 	add.w	ip, ip, #8
 800fcfe:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 800fd02:	46f0      	mov	r8, lr
 800fd04:	45cc      	cmp	ip, r9
 800fd06:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800fd0a:	46c6      	mov	lr, r8
 800fd0c:	d1f3      	bne.n	800fcf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 800fd0e:	f8dc 0000 	ldr.w	r0, [ip]
 800fd12:	f8c8 0000 	str.w	r0, [r8]
 800fd16:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800fd1a:	f8a8 1004 	strh.w	r1, [r8, #4]
 800fd1e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800fd22:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fd26:	d009      	beq.n	800fd3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 800fd28:	7b51      	ldrb	r1, [r2, #13]
 800fd2a:	7992      	ldrb	r2, [r2, #6]
 800fd2c:	0149      	lsls	r1, r1, #5
 800fd2e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800fd32:	4311      	orrs	r1, r2
 800fd34:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800fd38:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800fd3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fd40:	d00d      	beq.n	800fd5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 800fd42:	1bdb      	subs	r3, r3, r7
 800fd44:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fd4e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fd52:	10db      	asrs	r3, r3, #3
 800fd54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800fd5e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fd62:	00cb      	lsls	r3, r1, #3
 800fd64:	0648      	lsls	r0, r1, #25
 800fd66:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fd6a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800fd6e:	ea43 0302 	orr.w	r3, r3, r2
 800fd72:	bf44      	itt	mi
 800fd74:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fd78:	b21b      	sxthmi	r3, r3
 800fd7a:	e7b1      	b.n	800fce0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0800fd7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800fd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd80:	461e      	mov	r6, r3
 800fd82:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800fd84:	4604      	mov	r4, r0
 800fd86:	4617      	mov	r7, r2
 800fd88:	b92b      	cbnz	r3, 800fd96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 800fd8a:	4b25      	ldr	r3, [pc, #148]	; (800fe20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 800fd8c:	21c0      	movs	r1, #192	; 0xc0
 800fd8e:	4a25      	ldr	r2, [pc, #148]	; (800fe24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 800fd90:	4825      	ldr	r0, [pc, #148]	; (800fe28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 800fd92:	f007 f9cb 	bl	801712c <__assert_func>
 800fd96:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800fd98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fd9c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800fda0:	f7f8 fcbc 	bl	800871c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fda4:	4605      	mov	r5, r0
 800fda6:	b918      	cbnz	r0, 800fdb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 800fda8:	6030      	str	r0, [r6, #0]
 800fdaa:	4628      	mov	r0, r5
 800fdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	4601      	mov	r1, r0
 800fdb4:	4638      	mov	r0, r7
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	4798      	blx	r3
 800fdba:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	6030      	str	r0, [r6, #0]
 800fdc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fdc6:	d213      	bcs.n	800fdf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 800fdc8:	4643      	mov	r3, r8
 800fdca:	4639      	mov	r1, r7
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f7ff fe33 	bl	800fa38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800fdd2:	6030      	str	r0, [r6, #0]
 800fdd4:	6833      	ldr	r3, [r6, #0]
 800fdd6:	b143      	cbz	r3, 800fdea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 800fdd8:	7b5a      	ldrb	r2, [r3, #13]
 800fdda:	7a9b      	ldrb	r3, [r3, #10]
 800fddc:	0052      	lsls	r2, r2, #1
 800fdde:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fde2:	4313      	orrs	r3, r2
 800fde4:	bf0c      	ite	eq
 800fde6:	2301      	moveq	r3, #1
 800fde8:	2300      	movne	r3, #0
 800fdea:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800fdee:	e7dc      	b.n	800fdaa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 800fdf0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	2b7f      	cmp	r3, #127	; 0x7f
 800fdf8:	d804      	bhi.n	800fe04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 800fdfa:	4639      	mov	r1, r7
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f7ff fd01 	bl	800f804 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800fe02:	e7e6      	b.n	800fdd2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 800fe04:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d0e3      	beq.n	800fdd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 800fe0c:	f640 1302 	movw	r3, #2306	; 0x902
 800fe10:	429d      	cmp	r5, r3
 800fe12:	d1df      	bne.n	800fdd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 800fe14:	4601      	mov	r1, r0
 800fe16:	4620      	mov	r0, r4
 800fe18:	f7ff fcc4 	bl	800f7a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800fe1c:	e7d9      	b.n	800fdd2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 800fe1e:	bf00      	nop
 800fe20:	0801a8bc 	.word	0x0801a8bc
 800fe24:	0801ab2e 	.word	0x0801ab2e
 800fe28:	0801a8c5 	.word	0x0801a8c5

0800fe2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800fe2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe30:	461e      	mov	r6, r3
 800fe32:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800fe34:	4604      	mov	r4, r0
 800fe36:	4617      	mov	r7, r2
 800fe38:	b92b      	cbnz	r3, 800fe46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 800fe3a:	4b26      	ldr	r3, [pc, #152]	; (800fed4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 800fe3c:	21c0      	movs	r1, #192	; 0xc0
 800fe3e:	4a26      	ldr	r2, [pc, #152]	; (800fed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 800fe40:	4826      	ldr	r0, [pc, #152]	; (800fedc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 800fe42:	f007 f973 	bl	801712c <__assert_func>
 800fe46:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800fe48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fe4c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800fe50:	f7f8 fc64 	bl	800871c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fe54:	4605      	mov	r5, r0
 800fe56:	b918      	cbnz	r0, 800fe60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 800fe58:	6030      	str	r0, [r6, #0]
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	4601      	mov	r1, r0
 800fe64:	4638      	mov	r0, r7
 800fe66:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800fe6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fe6e:	47c8      	blx	r9
 800fe70:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800fe74:	4602      	mov	r2, r0
 800fe76:	6030      	str	r0, [r6, #0]
 800fe78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fe7c:	d213      	bcs.n	800fea6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 800fe7e:	4643      	mov	r3, r8
 800fe80:	4639      	mov	r1, r7
 800fe82:	4620      	mov	r0, r4
 800fe84:	f7ff fdd8 	bl	800fa38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800fe88:	6030      	str	r0, [r6, #0]
 800fe8a:	6833      	ldr	r3, [r6, #0]
 800fe8c:	b143      	cbz	r3, 800fea0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 800fe8e:	7b5a      	ldrb	r2, [r3, #13]
 800fe90:	7a9b      	ldrb	r3, [r3, #10]
 800fe92:	0052      	lsls	r2, r2, #1
 800fe94:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	bf0c      	ite	eq
 800fe9c:	2301      	moveq	r3, #1
 800fe9e:	2300      	movne	r3, #0
 800fea0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800fea4:	e7d9      	b.n	800fe5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 800fea6:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800feaa:	b29b      	uxth	r3, r3
 800feac:	2b7f      	cmp	r3, #127	; 0x7f
 800feae:	d804      	bhi.n	800feba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 800feb0:	4639      	mov	r1, r7
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7ff fca6 	bl	800f804 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800feb8:	e7e6      	b.n	800fe88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 800feba:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0e3      	beq.n	800fe8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 800fec2:	f640 1302 	movw	r3, #2306	; 0x902
 800fec6:	429d      	cmp	r5, r3
 800fec8:	d1df      	bne.n	800fe8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 800feca:	4601      	mov	r1, r0
 800fecc:	4620      	mov	r0, r4
 800fece:	f7ff fc69 	bl	800f7a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800fed2:	e7d9      	b.n	800fe88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 800fed4:	0801a8bc 	.word	0x0801a8bc
 800fed8:	0801ab2e 	.word	0x0801ab2e
 800fedc:	0801a8c5 	.word	0x0801a8c5

0800fee0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800fee0:	b510      	push	{r4, lr}
 800fee2:	4604      	mov	r4, r0
 800fee4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800fee8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800feea:	b9d9      	cbnz	r1, 800ff24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 800feec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800feee:	2b0a      	cmp	r3, #10
 800fef0:	d037      	beq.n	800ff62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 800fef2:	4620      	mov	r0, r4
 800fef4:	f7ff fc15 	bl	800f722 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800fef8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fefa:	2b09      	cmp	r3, #9
 800fefc:	d906      	bls.n	800ff0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 800fefe:	4b19      	ldr	r3, [pc, #100]	; (800ff64 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 800ff00:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ff04:	4a18      	ldr	r2, [pc, #96]	; (800ff68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 800ff06:	4819      	ldr	r0, [pc, #100]	; (800ff6c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 800ff08:	f007 f910 	bl	801712c <__assert_func>
 800ff0c:	1c5a      	adds	r2, r3, #1
 800ff0e:	8722      	strh	r2, [r4, #56]	; 0x38
 800ff10:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800ff12:	4413      	add	r3, r2
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	2b09      	cmp	r3, #9
 800ff18:	bf88      	it	hi
 800ff1a:	3b0a      	subhi	r3, #10
 800ff1c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ff20:	8458      	strh	r0, [r3, #34]	; 0x22
 800ff22:	e7e3      	b.n	800feec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 800ff24:	2b0a      	cmp	r3, #10
 800ff26:	d01c      	beq.n	800ff62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 800ff28:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ff2a:	3901      	subs	r1, #1
 800ff2c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800ff30:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800ff32:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800ff36:	1c51      	adds	r1, r2, #1
 800ff38:	b289      	uxth	r1, r1
 800ff3a:	2901      	cmp	r1, #1
 800ff3c:	bf8a      	itet	hi
 800ff3e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ff42:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800ff44:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800ff46:	2b09      	cmp	r3, #9
 800ff48:	d8d9      	bhi.n	800fefe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	8722      	strh	r2, [r4, #56]	; 0x38
 800ff4e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800ff50:	4413      	add	r3, r2
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	2b09      	cmp	r3, #9
 800ff56:	bf88      	it	hi
 800ff58:	3b0a      	subhi	r3, #10
 800ff5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ff5e:	8458      	strh	r0, [r3, #34]	; 0x22
 800ff60:	e7c0      	b.n	800fee4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800ff62:	bd10      	pop	{r4, pc}
 800ff64:	0801a8f1 	.word	0x0801a8f1
 800ff68:	0801ac84 	.word	0x0801ac84
 800ff6c:	0801a8c5 	.word	0x0801a8c5

0800ff70 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800ff74:	4604      	mov	r4, r0
 800ff76:	b92a      	cbnz	r2, 800ff84 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 800ff78:	4b13      	ldr	r3, [pc, #76]	; (800ffc8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 800ff7a:	21d5      	movs	r1, #213	; 0xd5
 800ff7c:	4a13      	ldr	r2, [pc, #76]	; (800ffcc <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 800ff7e:	4814      	ldr	r0, [pc, #80]	; (800ffd0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 800ff80:	f007 f8d4 	bl	801712c <__assert_func>
 800ff84:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800ff86:	3a01      	subs	r2, #1
 800ff88:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 800ff8c:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 800ff8e:	8702      	strh	r2, [r0, #56]	; 0x38
 800ff90:	1c5a      	adds	r2, r3, #1
 800ff92:	b292      	uxth	r2, r2
 800ff94:	2a09      	cmp	r2, #9
 800ff96:	bf8a      	itet	hi
 800ff98:	3b09      	subhi	r3, #9
 800ff9a:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800ff9c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800ff9e:	f7ff ff9f 	bl	800fee0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ffa2:	8c23      	ldrh	r3, [r4, #32]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	bf9c      	itt	ls
 800ffa8:	3301      	addls	r3, #1
 800ffaa:	8423      	strhls	r3, [r4, #32]
 800ffac:	8be3      	ldrh	r3, [r4, #30]
 800ffae:	b90b      	cbnz	r3, 800ffb4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 800ffb0:	2302      	movs	r3, #2
 800ffb2:	83e3      	strh	r3, [r4, #30]
 800ffb4:	8be3      	ldrh	r3, [r4, #30]
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	3b01      	subs	r3, #1
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	83e3      	strh	r3, [r4, #30]
 800ffbe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800ffc2:	8365      	strh	r5, [r4, #26]
 800ffc4:	bd38      	pop	{r3, r4, r5, pc}
 800ffc6:	bf00      	nop
 800ffc8:	0801a8bc 	.word	0x0801a8bc
 800ffcc:	0801abd9 	.word	0x0801abd9
 800ffd0:	0801a8c5 	.word	0x0801a8c5

0800ffd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800ffd4:	428a      	cmp	r2, r1
 800ffd6:	b538      	push	{r3, r4, r5, lr}
 800ffd8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800ffda:	d90c      	bls.n	800fff6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 800ffdc:	b92c      	cbnz	r4, 800ffea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 800ffde:	4b1c      	ldr	r3, [pc, #112]	; (8010050 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 800ffe0:	21e1      	movs	r1, #225	; 0xe1
 800ffe2:	4a1c      	ldr	r2, [pc, #112]	; (8010054 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 800ffe4:	481c      	ldr	r0, [pc, #112]	; (8010058 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 800ffe6:	f007 f8a1 	bl	801712c <__assert_func>
 800ffea:	3c01      	subs	r4, #1
 800ffec:	4b1b      	ldr	r3, [pc, #108]	; (801005c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 800ffee:	4a1c      	ldr	r2, [pc, #112]	; (8010060 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 800fff0:	21c5      	movs	r1, #197	; 0xc5
 800fff2:	8704      	strh	r4, [r0, #56]	; 0x38
 800fff4:	e7f6      	b.n	800ffe4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 800fff6:	428c      	cmp	r4, r1
 800fff8:	d203      	bcs.n	8010002 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 800fffa:	4b1a      	ldr	r3, [pc, #104]	; (8010064 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 800fffc:	21cb      	movs	r1, #203	; 0xcb
 800fffe:	4a1a      	ldr	r2, [pc, #104]	; (8010068 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8010000:	e7f0      	b.n	800ffe4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8010002:	1a64      	subs	r4, r4, r1
 8010004:	250a      	movs	r5, #10
 8010006:	8704      	strh	r4, [r0, #56]	; 0x38
 8010008:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801000a:	4421      	add	r1, r4
 801000c:	b289      	uxth	r1, r1
 801000e:	2909      	cmp	r1, #9
 8010010:	bf88      	it	hi
 8010012:	390a      	subhi	r1, #10
 8010014:	86c1      	strh	r1, [r0, #54]	; 0x36
 8010016:	b1ba      	cbz	r2, 8010048 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8010018:	3a01      	subs	r2, #1
 801001a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801001c:	b292      	uxth	r2, r2
 801001e:	2909      	cmp	r1, #9
 8010020:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8010024:	d903      	bls.n	801002e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8010026:	4b11      	ldr	r3, [pc, #68]	; (801006c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8010028:	21e6      	movs	r1, #230	; 0xe6
 801002a:	4a11      	ldr	r2, [pc, #68]	; (8010070 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801002c:	e7da      	b.n	800ffe4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801002e:	3101      	adds	r1, #1
 8010030:	8701      	strh	r1, [r0, #56]	; 0x38
 8010032:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8010034:	b901      	cbnz	r1, 8010038 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8010036:	86c5      	strh	r5, [r0, #54]	; 0x36
 8010038:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801003a:	3901      	subs	r1, #1
 801003c:	b289      	uxth	r1, r1
 801003e:	86c1      	strh	r1, [r0, #54]	; 0x36
 8010040:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8010044:	844c      	strh	r4, [r1, #34]	; 0x22
 8010046:	e7e6      	b.n	8010016 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8010048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801004c:	f7ff bf48 	b.w	800fee0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8010050:	0801a8bc 	.word	0x0801a8bc
 8010054:	0801a9b2 	.word	0x0801a9b2
 8010058:	0801a8c5 	.word	0x0801a8c5
 801005c:	0801a8fd 	.word	0x0801a8fd
 8010060:	0801aa5c 	.word	0x0801aa5c
 8010064:	0801a90b 	.word	0x0801a90b
 8010068:	0801ad33 	.word	0x0801ad33
 801006c:	0801a917 	.word	0x0801a917
 8010070:	0801a92a 	.word	0x0801a92a

08010074 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8010074:	3a01      	subs	r2, #1
 8010076:	b570      	push	{r4, r5, r6, lr}
 8010078:	b292      	uxth	r2, r2
 801007a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801007e:	42b2      	cmp	r2, r6
 8010080:	d019      	beq.n	80100b6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8010082:	8c04      	ldrh	r4, [r0, #32]
 8010084:	f831 5b02 	ldrh.w	r5, [r1], #2
 8010088:	4294      	cmp	r4, r2
 801008a:	d805      	bhi.n	8010098 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801008c:	4b19      	ldr	r3, [pc, #100]	; (80100f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801008e:	4a1a      	ldr	r2, [pc, #104]	; (80100f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8010090:	21c5      	movs	r1, #197	; 0xc5
 8010092:	481a      	ldr	r0, [pc, #104]	; (80100fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8010094:	f007 f84a 	bl	801712c <__assert_func>
 8010098:	8bc4      	ldrh	r4, [r0, #30]
 801009a:	4414      	add	r4, r2
 801009c:	3a01      	subs	r2, #1
 801009e:	b2a4      	uxth	r4, r4
 80100a0:	b292      	uxth	r2, r2
 80100a2:	2c01      	cmp	r4, #1
 80100a4:	bf88      	it	hi
 80100a6:	3c02      	subhi	r4, #2
 80100a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80100ac:	8b64      	ldrh	r4, [r4, #26]
 80100ae:	42ac      	cmp	r4, r5
 80100b0:	d0e5      	beq.n	801007e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80100b2:	2000      	movs	r0, #0
 80100b4:	bd70      	pop	{r4, r5, r6, pc}
 80100b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80100ba:	2400      	movs	r4, #0
 80100bc:	4413      	add	r3, r2
 80100be:	b2a2      	uxth	r2, r4
 80100c0:	429a      	cmp	r2, r3
 80100c2:	da14      	bge.n	80100ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80100c4:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 80100c6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80100ca:	4296      	cmp	r6, r2
 80100cc:	d802      	bhi.n	80100d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80100ce:	4b09      	ldr	r3, [pc, #36]	; (80100f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80100d0:	4a0b      	ldr	r2, [pc, #44]	; (8010100 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80100d2:	e7dd      	b.n	8010090 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80100d4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80100d6:	3401      	adds	r4, #1
 80100d8:	4432      	add	r2, r6
 80100da:	b292      	uxth	r2, r2
 80100dc:	2a09      	cmp	r2, #9
 80100de:	bf88      	it	hi
 80100e0:	3a0a      	subhi	r2, #10
 80100e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80100e6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80100e8:	42aa      	cmp	r2, r5
 80100ea:	d0e8      	beq.n	80100be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80100ec:	e7e1      	b.n	80100b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80100ee:	2001      	movs	r0, #1
 80100f0:	e7e0      	b.n	80100b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80100f2:	bf00      	nop
 80100f4:	0801a8fd 	.word	0x0801a8fd
 80100f8:	0801adb7 	.word	0x0801adb7
 80100fc:	0801a8c5 	.word	0x0801a8c5
 8010100:	0801aa5c 	.word	0x0801aa5c

08010104 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8010104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010108:	4605      	mov	r5, r0
 801010a:	4616      	mov	r6, r2
 801010c:	1c8c      	adds	r4, r1, #2
 801010e:	8809      	ldrh	r1, [r1, #0]
 8010110:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8010114:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8010118:	42b3      	cmp	r3, r6
 801011a:	d124      	bne.n	8010166 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801011c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8010120:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8010124:	f001 070f 	and.w	r7, r1, #15
 8010128:	4652      	mov	r2, sl
 801012a:	f8cd 8000 	str.w	r8, [sp]
 801012e:	464b      	mov	r3, r9
 8010130:	4621      	mov	r1, r4
 8010132:	4628      	mov	r0, r5
 8010134:	f7ff ff9e 	bl	8010074 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8010138:	4683      	mov	fp, r0
 801013a:	b168      	cbz	r0, 8010158 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801013c:	eb0a 0109 	add.w	r1, sl, r9
 8010140:	463a      	mov	r2, r7
 8010142:	4628      	mov	r0, r5
 8010144:	4441      	add	r1, r8
 8010146:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801014a:	4649      	mov	r1, r9
 801014c:	f7ff ff42 	bl	800ffd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8010150:	4658      	mov	r0, fp
 8010152:	b003      	add	sp, #12
 8010154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010158:	eb07 010a 	add.w	r1, r7, sl
 801015c:	4449      	add	r1, r9
 801015e:	4441      	add	r1, r8
 8010160:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8010164:	e7d2      	b.n	801010c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8010166:	f04f 0b00 	mov.w	fp, #0
 801016a:	e7f1      	b.n	8010150 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801016c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	8810      	ldrh	r0, [r2, #0]
 8010170:	4298      	cmp	r0, r3
 8010172:	d817      	bhi.n	80101a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010174:	1e48      	subs	r0, r1, #1
 8010176:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801017a:	4298      	cmp	r0, r3
 801017c:	d312      	bcc.n	80101a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801017e:	2400      	movs	r4, #0
 8010180:	428c      	cmp	r4, r1
 8010182:	d20f      	bcs.n	80101a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010184:	1860      	adds	r0, r4, r1
 8010186:	1040      	asrs	r0, r0, #1
 8010188:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801018c:	0085      	lsls	r5, r0, #2
 801018e:	42b3      	cmp	r3, r6
 8010190:	d902      	bls.n	8010198 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8010192:	3001      	adds	r0, #1
 8010194:	b284      	uxth	r4, r0
 8010196:	e7f3      	b.n	8010180 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010198:	d201      	bcs.n	801019e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801019a:	b281      	uxth	r1, r0
 801019c:	e7f0      	b.n	8010180 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801019e:	442a      	add	r2, r5
 80101a0:	8850      	ldrh	r0, [r2, #2]
 80101a2:	bd70      	pop	{r4, r5, r6, pc}
 80101a4:	2000      	movs	r0, #0
 80101a6:	e7fc      	b.n	80101a2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080101a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80101a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ac:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80101ae:	4604      	mov	r4, r0
 80101b0:	260b      	movs	r6, #11
 80101b2:	886f      	ldrh	r7, [r5, #2]
 80101b4:	087f      	lsrs	r7, r7, #1
 80101b6:	3e01      	subs	r6, #1
 80101b8:	d01b      	beq.n	80101f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80101ba:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80101bc:	b92b      	cbnz	r3, 80101ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80101be:	4b0e      	ldr	r3, [pc, #56]	; (80101f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80101c0:	21c0      	movs	r1, #192	; 0xc0
 80101c2:	4a0e      	ldr	r2, [pc, #56]	; (80101fc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80101c4:	480e      	ldr	r0, [pc, #56]	; (8010200 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80101c6:	f006 ffb1 	bl	801712c <__assert_func>
 80101ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80101cc:	462a      	mov	r2, r5
 80101ce:	4639      	mov	r1, r7
 80101d0:	4620      	mov	r0, r4
 80101d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80101d6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80101da:	4643      	mov	r3, r8
 80101dc:	f7ff ffc6 	bl	801016c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80101e0:	b138      	cbz	r0, 80101f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80101e2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80101e6:	4642      	mov	r2, r8
 80101e8:	4620      	mov	r0, r4
 80101ea:	f7ff ff8b 	bl	8010104 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d1e1      	bne.n	80101b6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80101f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f6:	bf00      	nop
 80101f8:	0801a8bc 	.word	0x0801a8bc
 80101fc:	0801ab2e 	.word	0x0801ab2e
 8010200:	0801a8c5 	.word	0x0801a8c5

08010204 <_ZN8touchgfx8ceil28_4El>:
 8010204:	f110 030f 	adds.w	r3, r0, #15
 8010208:	d401      	bmi.n	801020e <_ZN8touchgfx8ceil28_4El+0xa>
 801020a:	1118      	asrs	r0, r3, #4
 801020c:	4770      	bx	lr
 801020e:	2210      	movs	r2, #16
 8010210:	f1c0 0001 	rsb	r0, r0, #1
 8010214:	fb93 f3f2 	sdiv	r3, r3, r2
 8010218:	f010 000f 	ands.w	r0, r0, #15
 801021c:	bf18      	it	ne
 801021e:	2001      	movne	r0, #1
 8010220:	1a18      	subs	r0, r3, r0
 8010222:	4770      	bx	lr

08010224 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8010224:	2900      	cmp	r1, #0
 8010226:	b538      	push	{r3, r4, r5, lr}
 8010228:	dc05      	bgt.n	8010236 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801022a:	4b0f      	ldr	r3, [pc, #60]	; (8010268 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801022c:	21f7      	movs	r1, #247	; 0xf7
 801022e:	4a0f      	ldr	r2, [pc, #60]	; (801026c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8010230:	480f      	ldr	r0, [pc, #60]	; (8010270 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8010232:	f006 ff7b 	bl	801712c <__assert_func>
 8010236:	2800      	cmp	r0, #0
 8010238:	db06      	blt.n	8010248 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801023a:	fb90 f4f1 	sdiv	r4, r0, r1
 801023e:	fb01 0114 	mls	r1, r1, r4, r0
 8010242:	6014      	str	r4, [r2, #0]
 8010244:	6019      	str	r1, [r3, #0]
 8010246:	bd38      	pop	{r3, r4, r5, pc}
 8010248:	4240      	negs	r0, r0
 801024a:	fb90 f4f1 	sdiv	r4, r0, r1
 801024e:	4265      	negs	r5, r4
 8010250:	fb01 0014 	mls	r0, r1, r4, r0
 8010254:	6015      	str	r5, [r2, #0]
 8010256:	6018      	str	r0, [r3, #0]
 8010258:	2800      	cmp	r0, #0
 801025a:	d0f4      	beq.n	8010246 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801025c:	6810      	ldr	r0, [r2, #0]
 801025e:	3801      	subs	r0, #1
 8010260:	6010      	str	r0, [r2, #0]
 8010262:	6818      	ldr	r0, [r3, #0]
 8010264:	1a09      	subs	r1, r1, r0
 8010266:	e7ed      	b.n	8010244 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8010268:	0801ae88 	.word	0x0801ae88
 801026c:	0801aec7 	.word	0x0801aec7
 8010270:	0801ae98 	.word	0x0801ae98

08010274 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	694a      	ldr	r2, [r1, #20]
 8010278:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801027a:	684b      	ldr	r3, [r1, #4]
 801027c:	1b54      	subs	r4, r2, r5
 801027e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8010280:	f000 8106 	beq.w	8010490 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8010284:	1b9b      	subs	r3, r3, r6
 8010286:	d003      	beq.n	8010290 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8010288:	4363      	muls	r3, r4
 801028a:	2210      	movs	r2, #16
 801028c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010290:	680c      	ldr	r4, [r1, #0]
 8010292:	698a      	ldr	r2, [r1, #24]
 8010294:	1b65      	subs	r5, r4, r5
 8010296:	f000 80fd 	beq.w	8010494 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801029a:	1b92      	subs	r2, r2, r6
 801029c:	d003      	beq.n	80102a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801029e:	436a      	muls	r2, r5
 80102a0:	2410      	movs	r4, #16
 80102a2:	fb92 f2f4 	sdiv	r2, r2, r4
 80102a6:	1a9b      	subs	r3, r3, r2
 80102a8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80104d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80102ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102b0:	460a      	mov	r2, r1
 80102b2:	ee07 3a90 	vmov	s15, r3
 80102b6:	f100 040c 	add.w	r4, r0, #12
 80102ba:	4603      	mov	r3, r0
 80102bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80102c4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80102c8:	eeb1 6a43 	vneg.f32	s12, s6
 80102cc:	edd2 7a02 	vldr	s15, [r2, #8]
 80102d0:	3214      	adds	r2, #20
 80102d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80102d6:	ece3 6a01 	vstmia	r3!, {s13}
 80102da:	429c      	cmp	r4, r3
 80102dc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80102e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80102e4:	edc3 7a02 	vstr	s15, [r3, #8]
 80102e8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80102ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80102f0:	edc3 7a05 	vstr	s15, [r3, #20]
 80102f4:	d1ea      	bne.n	80102cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80102f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80102f8:	698b      	ldr	r3, [r1, #24]
 80102fa:	edd0 4a02 	vldr	s9, [r0, #8]
 80102fe:	1a9b      	subs	r3, r3, r2
 8010300:	edd0 3a00 	vldr	s7, [r0]
 8010304:	edd0 6a01 	vldr	s13, [r0, #4]
 8010308:	ee07 3a90 	vmov	s15, r3
 801030c:	684b      	ldr	r3, [r1, #4]
 801030e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010312:	ed90 5a05 	vldr	s10, [r0, #20]
 8010316:	1a9b      	subs	r3, r3, r2
 8010318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801031c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8010320:	ed90 2a03 	vldr	s4, [r0, #12]
 8010324:	ee07 3a10 	vmov	s14, r3
 8010328:	edd0 5a04 	vldr	s11, [r0, #16]
 801032c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010330:	ed90 1a07 	vldr	s2, [r0, #28]
 8010334:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010338:	edd0 2a06 	vldr	s5, [r0, #24]
 801033c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8010340:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8010344:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010348:	ee32 5a45 	vsub.f32	s10, s4, s10
 801034c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010350:	ee67 7a83 	vmul.f32	s15, s15, s6
 8010354:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8010358:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801035a:	694a      	ldr	r2, [r1, #20]
 801035c:	1b13      	subs	r3, r2, r4
 801035e:	ee07 3a10 	vmov	s14, r3
 8010362:	680b      	ldr	r3, [r1, #0]
 8010364:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010368:	1b1b      	subs	r3, r3, r4
 801036a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801036e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8010372:	ee07 3a10 	vmov	s14, r3
 8010376:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801037a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801037e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8010382:	ee64 4a86 	vmul.f32	s9, s9, s12
 8010386:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801038a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801038c:	698b      	ldr	r3, [r1, #24]
 801038e:	1a9b      	subs	r3, r3, r2
 8010390:	ee06 3a90 	vmov	s13, r3
 8010394:	684b      	ldr	r3, [r1, #4]
 8010396:	1a9b      	subs	r3, r3, r2
 8010398:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801039c:	ee07 3a10 	vmov	s14, r3
 80103a0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80103a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80103a8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80103ac:	ee27 7a04 	vmul.f32	s14, s14, s8
 80103b0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80103b4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80103b8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80103bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80103be:	694a      	ldr	r2, [r1, #20]
 80103c0:	1b13      	subs	r3, r2, r4
 80103c2:	ee07 3a10 	vmov	s14, r3
 80103c6:	680b      	ldr	r3, [r1, #0]
 80103c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80103cc:	1b1b      	subs	r3, r3, r4
 80103ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 80103d2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80103d6:	ee07 3a10 	vmov	s14, r3
 80103da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80103de:	ee27 7a04 	vmul.f32	s14, s14, s8
 80103e2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80103e6:	edd0 5a08 	vldr	s11, [r0, #32]
 80103ea:	ee31 1a65 	vsub.f32	s2, s2, s11
 80103ee:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80103f2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80103f6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80103fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80103fc:	698b      	ldr	r3, [r1, #24]
 80103fe:	1a9b      	subs	r3, r3, r2
 8010400:	ee07 3a10 	vmov	s14, r3
 8010404:	684b      	ldr	r3, [r1, #4]
 8010406:	1a9b      	subs	r3, r3, r2
 8010408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801040c:	ee01 3a90 	vmov	s3, r3
 8010410:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010414:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8010418:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801041c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8010420:	eea1 7a21 	vfma.f32	s14, s2, s3
 8010424:	ee27 7a03 	vmul.f32	s14, s14, s6
 8010428:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801042c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801042e:	694a      	ldr	r2, [r1, #20]
 8010430:	1b13      	subs	r3, r2, r4
 8010432:	ee03 3a10 	vmov	s6, r3
 8010436:	680b      	ldr	r3, [r1, #0]
 8010438:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801043c:	1b1b      	subs	r3, r3, r4
 801043e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8010442:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8010446:	ee03 3a10 	vmov	s6, r3
 801044a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801044e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8010452:	eee1 5a04 	vfma.f32	s11, s2, s8
 8010456:	ee25 6a86 	vmul.f32	s12, s11, s12
 801045a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801045e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8010462:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8010466:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046e:	dd13      	ble.n	8010498 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8010470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010474:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8010478:	63c3      	str	r3, [r0, #60]	; 0x3c
 801047a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801047e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010486:	dd15      	ble.n	80104b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8010488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801048c:	6403      	str	r3, [r0, #64]	; 0x40
 801048e:	bd70      	pop	{r4, r5, r6, pc}
 8010490:	4623      	mov	r3, r4
 8010492:	e6fd      	b.n	8010290 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8010494:	462a      	mov	r2, r5
 8010496:	e706      	b.n	80102a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8010498:	d502      	bpl.n	80104a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801049a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801049e:	e7e9      	b.n	8010474 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80104a0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80104a4:	eea3 2a85 	vfma.f32	s4, s7, s10
 80104a8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80104ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b0:	dade      	bge.n	8010470 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80104b2:	e7f2      	b.n	801049a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80104b4:	d502      	bpl.n	80104bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80104b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80104ba:	e7e7      	b.n	801048c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80104bc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80104c0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80104c4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80104c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104cc:	dadc      	bge.n	8010488 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80104ce:	e7f2      	b.n	80104b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80104d0:	3d800000 	.word	0x3d800000

080104d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80104d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d8:	f04f 0814 	mov.w	r8, #20
 80104dc:	4604      	mov	r4, r0
 80104de:	4617      	mov	r7, r2
 80104e0:	460d      	mov	r5, r1
 80104e2:	fb08 f903 	mul.w	r9, r8, r3
 80104e6:	461e      	mov	r6, r3
 80104e8:	eb02 0a09 	add.w	sl, r2, r9
 80104ec:	f8da 0004 	ldr.w	r0, [sl, #4]
 80104f0:	f7ff fe88 	bl	8010204 <_ZN8touchgfx8ceil28_4El>
 80104f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104f6:	6160      	str	r0, [r4, #20]
 80104f8:	fb08 f803 	mul.w	r8, r8, r3
 80104fc:	9001      	str	r0, [sp, #4]
 80104fe:	eb07 0b08 	add.w	fp, r7, r8
 8010502:	f8db 0004 	ldr.w	r0, [fp, #4]
 8010506:	f7ff fe7d 	bl	8010204 <_ZN8touchgfx8ceil28_4El>
 801050a:	9a01      	ldr	r2, [sp, #4]
 801050c:	1a80      	subs	r0, r0, r2
 801050e:	61a0      	str	r0, [r4, #24]
 8010510:	2800      	cmp	r0, #0
 8010512:	f000 8088 	beq.w	8010626 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8010516:	f857 3009 	ldr.w	r3, [r7, r9]
 801051a:	f857 c008 	ldr.w	ip, [r7, r8]
 801051e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8010522:	ebac 0c03 	sub.w	ip, ip, r3
 8010526:	f8da 1004 	ldr.w	r1, [sl, #4]
 801052a:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801052e:	1a40      	subs	r0, r0, r1
 8010530:	fb0b f202 	mul.w	r2, fp, r2
 8010534:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8010538:	fb0c 2211 	mls	r2, ip, r1, r2
 801053c:	4641      	mov	r1, r8
 801053e:	fb00 2003 	mla	r0, r0, r3, r2
 8010542:	f104 0310 	add.w	r3, r4, #16
 8010546:	4622      	mov	r2, r4
 8010548:	3801      	subs	r0, #1
 801054a:	4440      	add	r0, r8
 801054c:	f7ff fe6a 	bl	8010224 <_ZN8touchgfx11floorDivModEllRlS0_>
 8010550:	f104 0308 	add.w	r3, r4, #8
 8010554:	1d22      	adds	r2, r4, #4
 8010556:	4641      	mov	r1, r8
 8010558:	4658      	mov	r0, fp
 801055a:	f7ff fe63 	bl	8010224 <_ZN8touchgfx11floorDivModEllRlS0_>
 801055e:	f8c4 800c 	str.w	r8, [r4, #12]
 8010562:	6962      	ldr	r2, [r4, #20]
 8010564:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010568:	eddf 6a31 	vldr	s13, [pc, #196]	; 8010630 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801056c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8010570:	6822      	ldr	r2, [r4, #0]
 8010572:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8010576:	ee07 3a10 	vmov	s14, r3
 801057a:	f857 3009 	ldr.w	r3, [r7, r9]
 801057e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8010582:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010586:	ee07 3a90 	vmov	s15, r3
 801058a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801058e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010596:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801059a:	edd3 6a00 	vldr	s13, [r3]
 801059e:	eee6 6a07 	vfma.f32	s13, s12, s14
 80105a2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80105a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80105aa:	edc4 6a07 	vstr	s13, [r4, #28]
 80105ae:	edd4 6a01 	vldr	s13, [r4, #4]
 80105b2:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 80105b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80105ba:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80105be:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80105c2:	ed84 6a08 	vstr	s12, [r4, #32]
 80105c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80105c8:	6262      	str	r2, [r4, #36]	; 0x24
 80105ca:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80105ce:	ed93 6a03 	vldr	s12, [r3, #12]
 80105d2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80105d6:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80105da:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80105de:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 80105e2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80105e6:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80105ea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80105ee:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 80105f2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80105f4:	6322      	str	r2, [r4, #48]	; 0x30
 80105f6:	ed93 6a06 	vldr	s12, [r3, #24]
 80105fa:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 80105fe:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010602:	eeb0 7a46 	vmov.f32	s14, s12
 8010606:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801060a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801060e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8010612:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8010616:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801061a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801061e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8010622:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010624:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010626:	4620      	mov	r0, r4
 8010628:	b003      	add	sp, #12
 801062a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801062e:	bf00      	nop
 8010630:	3d800000 	.word	0x3d800000

08010634 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8010634:	4602      	mov	r2, r0
 8010636:	b148      	cbz	r0, 801064c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8010638:	2300      	movs	r3, #0
 801063a:	b298      	uxth	r0, r3
 801063c:	3301      	adds	r3, #1
 801063e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8010642:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8010646:	2900      	cmp	r1, #0
 8010648:	d1f7      	bne.n	801063a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801064a:	4770      	bx	lr
 801064c:	4770      	bx	lr

0801064e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801064e:	b530      	push	{r4, r5, lr}
 8010650:	4604      	mov	r4, r0
 8010652:	b159      	cbz	r1, 801066c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8010654:	b148      	cbz	r0, 801066a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8010656:	2300      	movs	r3, #0
 8010658:	b298      	uxth	r0, r3
 801065a:	4282      	cmp	r2, r0
 801065c:	d905      	bls.n	801066a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801065e:	5ccd      	ldrb	r5, [r1, r3]
 8010660:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8010664:	3301      	adds	r3, #1
 8010666:	2d00      	cmp	r5, #0
 8010668:	d1f6      	bne.n	8010658 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801066a:	bd30      	pop	{r4, r5, pc}
 801066c:	4608      	mov	r0, r1
 801066e:	e7fc      	b.n	801066a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08010670 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8010670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010672:	468c      	mov	ip, r1
 8010674:	b08b      	sub	sp, #44	; 0x2c
 8010676:	2100      	movs	r1, #0
 8010678:	ae01      	add	r6, sp, #4
 801067a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801067e:	211f      	movs	r1, #31
 8010680:	fbb0 f7f3 	udiv	r7, r0, r3
 8010684:	fb03 0517 	mls	r5, r3, r7, r0
 8010688:	4638      	mov	r0, r7
 801068a:	b2ec      	uxtb	r4, r5
 801068c:	2d09      	cmp	r5, #9
 801068e:	bfd4      	ite	le
 8010690:	3430      	addle	r4, #48	; 0x30
 8010692:	3457      	addgt	r4, #87	; 0x57
 8010694:	b2e4      	uxtb	r4, r4
 8010696:	558c      	strb	r4, [r1, r6]
 8010698:	1e4c      	subs	r4, r1, #1
 801069a:	b92f      	cbnz	r7, 80106a8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801069c:	4431      	add	r1, r6
 801069e:	4660      	mov	r0, ip
 80106a0:	f7ff ffd5 	bl	801064e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80106a4:	b00b      	add	sp, #44	; 0x2c
 80106a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106a8:	4621      	mov	r1, r4
 80106aa:	e7e9      	b.n	8010680 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

080106ac <_ZN8touchgfx7Unicode4itoaElPtti>:
 80106ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ae:	4607      	mov	r7, r0
 80106b0:	b08b      	sub	sp, #44	; 0x2c
 80106b2:	4608      	mov	r0, r1
 80106b4:	b341      	cbz	r1, 8010708 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80106b6:	1e99      	subs	r1, r3, #2
 80106b8:	2922      	cmp	r1, #34	; 0x22
 80106ba:	d825      	bhi.n	8010708 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80106bc:	2100      	movs	r1, #0
 80106be:	463c      	mov	r4, r7
 80106c0:	261f      	movs	r6, #31
 80106c2:	f10d 0c04 	add.w	ip, sp, #4
 80106c6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80106ca:	1e71      	subs	r1, r6, #1
 80106cc:	fb94 fef3 	sdiv	lr, r4, r3
 80106d0:	fb03 441e 	mls	r4, r3, lr, r4
 80106d4:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80106d8:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80106dc:	b2ec      	uxtb	r4, r5
 80106de:	2d09      	cmp	r5, #9
 80106e0:	bfd4      	ite	le
 80106e2:	3430      	addle	r4, #48	; 0x30
 80106e4:	3457      	addgt	r4, #87	; 0x57
 80106e6:	b2e4      	uxtb	r4, r4
 80106e8:	f80c 4006 	strb.w	r4, [ip, r6]
 80106ec:	4674      	mov	r4, lr
 80106ee:	b96c      	cbnz	r4, 801070c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 80106f0:	2f00      	cmp	r7, #0
 80106f2:	da05      	bge.n	8010700 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 80106f4:	ab0a      	add	r3, sp, #40	; 0x28
 80106f6:	4419      	add	r1, r3
 80106f8:	232d      	movs	r3, #45	; 0x2d
 80106fa:	f801 3c24 	strb.w	r3, [r1, #-36]
 80106fe:	1eb1      	subs	r1, r6, #2
 8010700:	3101      	adds	r1, #1
 8010702:	4461      	add	r1, ip
 8010704:	f7ff ffa3 	bl	801064e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8010708:	b00b      	add	sp, #44	; 0x2c
 801070a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801070c:	460e      	mov	r6, r1
 801070e:	e7dc      	b.n	80106ca <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08010710 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8010710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010714:	b085      	sub	sp, #20
 8010716:	4691      	mov	r9, r2
 8010718:	6802      	ldr	r2, [r0, #0]
 801071a:	4688      	mov	r8, r1
 801071c:	461c      	mov	r4, r3
 801071e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8010722:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8010726:	4683      	mov	fp, r0
 8010728:	4610      	mov	r0, r2
 801072a:	9103      	str	r1, [sp, #12]
 801072c:	9302      	str	r3, [sp, #8]
 801072e:	9201      	str	r2, [sp, #4]
 8010730:	f7ff ff80 	bl	8010634 <_ZN8touchgfx7Unicode6strlenEPKt>
 8010734:	f1b8 0f00 	cmp.w	r8, #0
 8010738:	bf0c      	ite	eq
 801073a:	4684      	moveq	ip, r0
 801073c:	f100 0c01 	addne.w	ip, r0, #1
 8010740:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8010744:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8010748:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801074a:	fa1f fc8c 	uxth.w	ip, ip
 801074e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010750:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8010754:	9903      	ldr	r1, [sp, #12]
 8010756:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801075a:	d041      	beq.n	80107e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801075c:	d834      	bhi.n	80107c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801075e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8010762:	d059      	beq.n	8010818 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8010764:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8010768:	d03a      	beq.n	80107e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801076a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801076e:	d034      	beq.n	80107da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8010770:	2400      	movs	r4, #0
 8010772:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8010776:	3a01      	subs	r2, #1
 8010778:	b169      	cbz	r1, 8010796 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801077a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801077c:	458c      	cmp	ip, r1
 801077e:	da09      	bge.n	8010794 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8010780:	eba1 010c 	sub.w	r1, r1, ip
 8010784:	b289      	uxth	r1, r1
 8010786:	b933      	cbnz	r3, 8010796 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010788:	2e00      	cmp	r6, #0
 801078a:	d051      	beq.n	8010830 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801078c:	2800      	cmp	r0, #0
 801078e:	d04f      	beq.n	8010830 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8010790:	440c      	add	r4, r1
 8010792:	b2a4      	uxth	r4, r4
 8010794:	2100      	movs	r1, #0
 8010796:	682b      	ldr	r3, [r5, #0]
 8010798:	4293      	cmp	r3, r2
 801079a:	da07      	bge.n	80107ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801079c:	f1b8 0f00 	cmp.w	r8, #0
 80107a0:	d004      	beq.n	80107ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80107a2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80107a6:	682b      	ldr	r3, [r5, #0]
 80107a8:	3301      	adds	r3, #1
 80107aa:	602b      	str	r3, [r5, #0]
 80107ac:	2730      	movs	r7, #48	; 0x30
 80107ae:	2c00      	cmp	r4, #0
 80107b0:	d04e      	beq.n	8010850 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80107b2:	682e      	ldr	r6, [r5, #0]
 80107b4:	3c01      	subs	r4, #1
 80107b6:	42b2      	cmp	r2, r6
 80107b8:	b2a4      	uxth	r4, r4
 80107ba:	dd49      	ble.n	8010850 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80107bc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80107c0:	682b      	ldr	r3, [r5, #0]
 80107c2:	3301      	adds	r3, #1
 80107c4:	602b      	str	r3, [r5, #0]
 80107c6:	e7f2      	b.n	80107ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80107c8:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80107cc:	d01d      	beq.n	801080a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80107ce:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80107d2:	d002      	beq.n	80107da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80107d4:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80107d8:	e7c9      	b.n	801076e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80107da:	4684      	mov	ip, r0
 80107dc:	f04f 0800 	mov.w	r8, #0
 80107e0:	2c00      	cmp	r4, #0
 80107e2:	d0c6      	beq.n	8010772 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80107e4:	b947      	cbnz	r7, 80107f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80107e6:	2801      	cmp	r0, #1
 80107e8:	d106      	bne.n	80107f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80107ea:	8814      	ldrh	r4, [r2, #0]
 80107ec:	2c30      	cmp	r4, #48	; 0x30
 80107ee:	bf02      	ittt	eq
 80107f0:	3202      	addeq	r2, #2
 80107f2:	4638      	moveq	r0, r7
 80107f4:	f8cb 2000 	streq.w	r2, [fp]
 80107f8:	45bc      	cmp	ip, r7
 80107fa:	da14      	bge.n	8010826 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80107fc:	b2bf      	uxth	r7, r7
 80107fe:	eba7 040c 	sub.w	r4, r7, ip
 8010802:	46bc      	mov	ip, r7
 8010804:	b2a4      	uxth	r4, r4
 8010806:	2600      	movs	r6, #0
 8010808:	e7b3      	b.n	8010772 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801080a:	4684      	mov	ip, r0
 801080c:	b16c      	cbz	r4, 801082a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801080e:	42b8      	cmp	r0, r7
 8010810:	dd00      	ble.n	8010814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8010812:	b2b8      	uxth	r0, r7
 8010814:	2400      	movs	r4, #0
 8010816:	e003      	b.n	8010820 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8010818:	f04f 0c01 	mov.w	ip, #1
 801081c:	2400      	movs	r4, #0
 801081e:	4660      	mov	r0, ip
 8010820:	4626      	mov	r6, r4
 8010822:	46a0      	mov	r8, r4
 8010824:	e7a5      	b.n	8010772 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8010826:	2400      	movs	r4, #0
 8010828:	e7ed      	b.n	8010806 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801082a:	4626      	mov	r6, r4
 801082c:	46a0      	mov	r8, r4
 801082e:	e7a0      	b.n	8010772 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8010830:	2900      	cmp	r1, #0
 8010832:	d0b0      	beq.n	8010796 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010834:	2720      	movs	r7, #32
 8010836:	682e      	ldr	r6, [r5, #0]
 8010838:	2900      	cmp	r1, #0
 801083a:	d0ac      	beq.n	8010796 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801083c:	3901      	subs	r1, #1
 801083e:	4296      	cmp	r6, r2
 8010840:	b289      	uxth	r1, r1
 8010842:	daa7      	bge.n	8010794 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8010844:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8010848:	682b      	ldr	r3, [r5, #0]
 801084a:	3301      	adds	r3, #1
 801084c:	602b      	str	r3, [r5, #0]
 801084e:	e7f2      	b.n	8010836 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8010850:	b188      	cbz	r0, 8010876 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8010852:	682b      	ldr	r3, [r5, #0]
 8010854:	3801      	subs	r0, #1
 8010856:	429a      	cmp	r2, r3
 8010858:	b280      	uxth	r0, r0
 801085a:	dd0c      	ble.n	8010876 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801085c:	f8db 3000 	ldr.w	r3, [fp]
 8010860:	1c9c      	adds	r4, r3, #2
 8010862:	f8cb 4000 	str.w	r4, [fp]
 8010866:	881c      	ldrh	r4, [r3, #0]
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801086e:	682b      	ldr	r3, [r5, #0]
 8010870:	3301      	adds	r3, #1
 8010872:	602b      	str	r3, [r5, #0]
 8010874:	e7ec      	b.n	8010850 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8010876:	2620      	movs	r6, #32
 8010878:	b151      	cbz	r1, 8010890 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801087a:	6828      	ldr	r0, [r5, #0]
 801087c:	3901      	subs	r1, #1
 801087e:	4282      	cmp	r2, r0
 8010880:	b289      	uxth	r1, r1
 8010882:	dd05      	ble.n	8010890 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8010884:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8010888:	682b      	ldr	r3, [r5, #0]
 801088a:	3301      	adds	r3, #1
 801088c:	602b      	str	r3, [r5, #0]
 801088e:	e7f3      	b.n	8010878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8010890:	b005      	add	sp, #20
 8010892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010896 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8010896:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801089a:	2400      	movs	r4, #0
 801089c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80108a0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 80108a4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 80108a8:	8014      	strh	r4, [r2, #0]
 80108aa:	701c      	strb	r4, [r3, #0]
 80108ac:	f888 4000 	strb.w	r4, [r8]
 80108b0:	f88c 4000 	strb.w	r4, [ip]
 80108b4:	f88e 4000 	strb.w	r4, [lr]
 80108b8:	703c      	strb	r4, [r7, #0]
 80108ba:	6804      	ldr	r4, [r0, #0]
 80108bc:	b1a4      	cbz	r4, 80108e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80108be:	8824      	ldrh	r4, [r4, #0]
 80108c0:	f04f 0901 	mov.w	r9, #1
 80108c4:	b314      	cbz	r4, 801090c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80108c6:	2c2b      	cmp	r4, #43	; 0x2b
 80108c8:	d001      	beq.n	80108ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80108ca:	2c20      	cmp	r4, #32
 80108cc:	d110      	bne.n	80108f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80108ce:	8014      	strh	r4, [r2, #0]
 80108d0:	6804      	ldr	r4, [r0, #0]
 80108d2:	b10c      	cbz	r4, 80108d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80108d4:	3402      	adds	r4, #2
 80108d6:	6004      	str	r4, [r0, #0]
 80108d8:	680c      	ldr	r4, [r1, #0]
 80108da:	b10c      	cbz	r4, 80108e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80108dc:	3401      	adds	r4, #1
 80108de:	600c      	str	r4, [r1, #0]
 80108e0:	6804      	ldr	r4, [r0, #0]
 80108e2:	b17c      	cbz	r4, 8010904 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80108e4:	8824      	ldrh	r4, [r4, #0]
 80108e6:	e7ed      	b.n	80108c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80108e8:	680c      	ldr	r4, [r1, #0]
 80108ea:	b17c      	cbz	r4, 801090c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80108ec:	7824      	ldrb	r4, [r4, #0]
 80108ee:	e7e7      	b.n	80108c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80108f0:	2c2d      	cmp	r4, #45	; 0x2d
 80108f2:	d102      	bne.n	80108fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80108f4:	f883 9000 	strb.w	r9, [r3]
 80108f8:	e7ea      	b.n	80108d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80108fa:	2c23      	cmp	r4, #35	; 0x23
 80108fc:	d107      	bne.n	801090e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80108fe:	f888 9000 	strb.w	r9, [r8]
 8010902:	e7e5      	b.n	80108d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8010904:	680c      	ldr	r4, [r1, #0]
 8010906:	b10c      	cbz	r4, 801090c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010908:	7824      	ldrb	r4, [r4, #0]
 801090a:	e7db      	b.n	80108c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801090c:	2400      	movs	r4, #0
 801090e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010912:	2b09      	cmp	r3, #9
 8010914:	d901      	bls.n	801091a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8010916:	2c2a      	cmp	r4, #42	; 0x2a
 8010918:	d122      	bne.n	8010960 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801091a:	2301      	movs	r3, #1
 801091c:	2c30      	cmp	r4, #48	; 0x30
 801091e:	f88e 3000 	strb.w	r3, [lr]
 8010922:	d10d      	bne.n	8010940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8010924:	f88c 3000 	strb.w	r3, [ip]
 8010928:	6803      	ldr	r3, [r0, #0]
 801092a:	b10b      	cbz	r3, 8010930 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801092c:	3302      	adds	r3, #2
 801092e:	6003      	str	r3, [r0, #0]
 8010930:	680b      	ldr	r3, [r1, #0]
 8010932:	b10b      	cbz	r3, 8010938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8010934:	3301      	adds	r3, #1
 8010936:	600b      	str	r3, [r1, #0]
 8010938:	6803      	ldr	r3, [r0, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d02f      	beq.n	801099e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801093e:	881c      	ldrh	r4, [r3, #0]
 8010940:	2c2a      	cmp	r4, #42	; 0x2a
 8010942:	d135      	bne.n	80109b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8010944:	f04f 33ff 	mov.w	r3, #4294967295
 8010948:	6033      	str	r3, [r6, #0]
 801094a:	6803      	ldr	r3, [r0, #0]
 801094c:	b10b      	cbz	r3, 8010952 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801094e:	3302      	adds	r3, #2
 8010950:	6003      	str	r3, [r0, #0]
 8010952:	680b      	ldr	r3, [r1, #0]
 8010954:	b10b      	cbz	r3, 801095a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8010956:	3301      	adds	r3, #1
 8010958:	600b      	str	r3, [r1, #0]
 801095a:	6803      	ldr	r3, [r0, #0]
 801095c:	b31b      	cbz	r3, 80109a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801095e:	881c      	ldrh	r4, [r3, #0]
 8010960:	2c2e      	cmp	r4, #46	; 0x2e
 8010962:	d11a      	bne.n	801099a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010964:	2301      	movs	r3, #1
 8010966:	703b      	strb	r3, [r7, #0]
 8010968:	6803      	ldr	r3, [r0, #0]
 801096a:	b10b      	cbz	r3, 8010970 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801096c:	3302      	adds	r3, #2
 801096e:	6003      	str	r3, [r0, #0]
 8010970:	680b      	ldr	r3, [r1, #0]
 8010972:	b10b      	cbz	r3, 8010978 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8010974:	3301      	adds	r3, #1
 8010976:	600b      	str	r3, [r1, #0]
 8010978:	6803      	ldr	r3, [r0, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d036      	beq.n	80109ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801097e:	881b      	ldrh	r3, [r3, #0]
 8010980:	2b2a      	cmp	r3, #42	; 0x2a
 8010982:	d137      	bne.n	80109f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8010984:	f04f 33ff 	mov.w	r3, #4294967295
 8010988:	602b      	str	r3, [r5, #0]
 801098a:	6803      	ldr	r3, [r0, #0]
 801098c:	b10b      	cbz	r3, 8010992 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801098e:	3302      	adds	r3, #2
 8010990:	6003      	str	r3, [r0, #0]
 8010992:	680b      	ldr	r3, [r1, #0]
 8010994:	b10b      	cbz	r3, 801099a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010996:	3301      	adds	r3, #1
 8010998:	600b      	str	r3, [r1, #0]
 801099a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801099e:	680c      	ldr	r4, [r1, #0]
 80109a0:	b134      	cbz	r4, 80109b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80109a2:	7824      	ldrb	r4, [r4, #0]
 80109a4:	e7cc      	b.n	8010940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80109a6:	680b      	ldr	r3, [r1, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d0f6      	beq.n	801099a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80109ac:	781c      	ldrb	r4, [r3, #0]
 80109ae:	e7d7      	b.n	8010960 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80109b0:	2300      	movs	r3, #0
 80109b2:	220a      	movs	r2, #10
 80109b4:	6033      	str	r3, [r6, #0]
 80109b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80109ba:	fa1f f38c 	uxth.w	r3, ip
 80109be:	2b09      	cmp	r3, #9
 80109c0:	d8ce      	bhi.n	8010960 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80109c2:	6833      	ldr	r3, [r6, #0]
 80109c4:	fb02 c303 	mla	r3, r2, r3, ip
 80109c8:	6033      	str	r3, [r6, #0]
 80109ca:	6803      	ldr	r3, [r0, #0]
 80109cc:	b10b      	cbz	r3, 80109d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80109ce:	3302      	adds	r3, #2
 80109d0:	6003      	str	r3, [r0, #0]
 80109d2:	680b      	ldr	r3, [r1, #0]
 80109d4:	b10b      	cbz	r3, 80109da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80109d6:	3301      	adds	r3, #1
 80109d8:	600b      	str	r3, [r1, #0]
 80109da:	6803      	ldr	r3, [r0, #0]
 80109dc:	b10b      	cbz	r3, 80109e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80109de:	881c      	ldrh	r4, [r3, #0]
 80109e0:	e7e9      	b.n	80109b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80109e2:	680c      	ldr	r4, [r1, #0]
 80109e4:	2c00      	cmp	r4, #0
 80109e6:	d0e6      	beq.n	80109b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80109e8:	7824      	ldrb	r4, [r4, #0]
 80109ea:	e7e4      	b.n	80109b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80109ec:	680b      	ldr	r3, [r1, #0]
 80109ee:	b10b      	cbz	r3, 80109f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80109f0:	781b      	ldrb	r3, [r3, #0]
 80109f2:	e7c5      	b.n	8010980 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80109f4:	2200      	movs	r2, #0
 80109f6:	240a      	movs	r4, #10
 80109f8:	602a      	str	r2, [r5, #0]
 80109fa:	3b30      	subs	r3, #48	; 0x30
 80109fc:	682a      	ldr	r2, [r5, #0]
 80109fe:	b29e      	uxth	r6, r3
 8010a00:	2e09      	cmp	r6, #9
 8010a02:	d813      	bhi.n	8010a2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8010a04:	fb04 3302 	mla	r3, r4, r2, r3
 8010a08:	602b      	str	r3, [r5, #0]
 8010a0a:	6803      	ldr	r3, [r0, #0]
 8010a0c:	b10b      	cbz	r3, 8010a12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8010a0e:	3302      	adds	r3, #2
 8010a10:	6003      	str	r3, [r0, #0]
 8010a12:	680b      	ldr	r3, [r1, #0]
 8010a14:	b10b      	cbz	r3, 8010a1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8010a16:	3301      	adds	r3, #1
 8010a18:	600b      	str	r3, [r1, #0]
 8010a1a:	6803      	ldr	r3, [r0, #0]
 8010a1c:	b10b      	cbz	r3, 8010a22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8010a1e:	881b      	ldrh	r3, [r3, #0]
 8010a20:	e7eb      	b.n	80109fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8010a22:	680b      	ldr	r3, [r1, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d0e8      	beq.n	80109fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	e7e6      	b.n	80109fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8010a2c:	2a06      	cmp	r2, #6
 8010a2e:	bfa8      	it	ge
 8010a30:	2206      	movge	r2, #6
 8010a32:	602a      	str	r2, [r5, #0]
 8010a34:	e7b1      	b.n	801099a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08010a36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8010a36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a3a:	b0a3      	sub	sp, #140	; 0x8c
 8010a3c:	2600      	movs	r6, #0
 8010a3e:	4607      	mov	r7, r0
 8010a40:	4688      	mov	r8, r1
 8010a42:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8010a46:	4631      	mov	r1, r6
 8010a48:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8010a4a:	4648      	mov	r0, r9
 8010a4c:	960d      	str	r6, [sp, #52]	; 0x34
 8010a4e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010a52:	2242      	movs	r2, #66	; 0x42
 8010a54:	f006 fce2 	bl	801741c <memset>
 8010a58:	b15f      	cbz	r7, 8010a72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8010a5a:	f108 3aff 	add.w	sl, r8, #4294967295
 8010a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a62:	b152      	cbz	r2, 8010a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8010a64:	8812      	ldrh	r2, [r2, #0]
 8010a66:	b10a      	cbz	r2, 8010a6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8010a68:	459a      	cmp	sl, r3
 8010a6a:	dc2e      	bgt.n	8010aca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8010a72:	4638      	mov	r0, r7
 8010a74:	b023      	add	sp, #140	; 0x8c
 8010a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7a:	9a08      	ldr	r2, [sp, #32]
 8010a7c:	2a00      	cmp	r2, #0
 8010a7e:	d0f5      	beq.n	8010a6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8010a80:	7812      	ldrb	r2, [r2, #0]
 8010a82:	e7f0      	b.n	8010a66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8010a84:	2d00      	cmp	r5, #0
 8010a86:	d0ea      	beq.n	8010a5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010a88:	782a      	ldrb	r2, [r5, #0]
 8010a8a:	b142      	cbz	r2, 8010a9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8010a8c:	2a25      	cmp	r2, #37	; 0x25
 8010a8e:	d001      	beq.n	8010a94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8010a90:	459a      	cmp	sl, r3
 8010a92:	dc08      	bgt.n	8010aa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8010a94:	f1bb 0f00 	cmp.w	fp, #0
 8010a98:	d121      	bne.n	8010ade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8010a9a:	2d00      	cmp	r5, #0
 8010a9c:	d0df      	beq.n	8010a5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010a9e:	782a      	ldrb	r2, [r5, #0]
 8010aa0:	f04f 0b00 	mov.w	fp, #0
 8010aa4:	e01d      	b.n	8010ae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8010aa6:	f1bb 0f00 	cmp.w	fp, #0
 8010aaa:	d077      	beq.n	8010b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8010aac:	f8bb 2000 	ldrh.w	r2, [fp]
 8010ab0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8010ab4:	f1bb 0f00 	cmp.w	fp, #0
 8010ab8:	d002      	beq.n	8010ac0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8010aba:	f10b 0202 	add.w	r2, fp, #2
 8010abe:	9209      	str	r2, [sp, #36]	; 0x24
 8010ac0:	b10d      	cbz	r5, 8010ac6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8010ac2:	3501      	adds	r5, #1
 8010ac4:	9508      	str	r5, [sp, #32]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	930d      	str	r3, [sp, #52]	; 0x34
 8010aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010acc:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8010ad0:	f1bb 0f00 	cmp.w	fp, #0
 8010ad4:	d0d6      	beq.n	8010a84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8010ad6:	f8bb 2000 	ldrh.w	r2, [fp]
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	d1d6      	bne.n	8010a8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8010ade:	f8bb 2000 	ldrh.w	r2, [fp]
 8010ae2:	2a00      	cmp	r2, #0
 8010ae4:	d0bb      	beq.n	8010a5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010ae6:	459a      	cmp	sl, r3
 8010ae8:	ddb9      	ble.n	8010a5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010aea:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8010aee:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010af2:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8010af6:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8010afa:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8010afe:	960e      	str	r6, [sp, #56]	; 0x38
 8010b00:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8010b04:	960f      	str	r6, [sp, #60]	; 0x3c
 8010b06:	f1bb 0f00 	cmp.w	fp, #0
 8010b0a:	d002      	beq.n	8010b12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8010b0c:	f10b 0302 	add.w	r3, fp, #2
 8010b10:	9309      	str	r3, [sp, #36]	; 0x24
 8010b12:	b10d      	cbz	r5, 8010b18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8010b14:	1c6b      	adds	r3, r5, #1
 8010b16:	9308      	str	r3, [sp, #32]
 8010b18:	ab0f      	add	r3, sp, #60	; 0x3c
 8010b1a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8010b1e:	a908      	add	r1, sp, #32
 8010b20:	a809      	add	r0, sp, #36	; 0x24
 8010b22:	9305      	str	r3, [sp, #20]
 8010b24:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8010b28:	9304      	str	r3, [sp, #16]
 8010b2a:	ab0e      	add	r3, sp, #56	; 0x38
 8010b2c:	9303      	str	r3, [sp, #12]
 8010b2e:	ab0c      	add	r3, sp, #48	; 0x30
 8010b30:	9302      	str	r3, [sp, #8]
 8010b32:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8010b36:	9301      	str	r3, [sp, #4]
 8010b38:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010b3c:	9300      	str	r3, [sp, #0]
 8010b3e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8010b42:	f7ff fea8 	bl	8010896 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8010b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	bfbf      	itttt	lt
 8010b4c:	6823      	ldrlt	r3, [r4, #0]
 8010b4e:	3404      	addlt	r4, #4
 8010b50:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8010b54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	bfbe      	ittt	lt
 8010b5c:	6823      	ldrlt	r3, [r4, #0]
 8010b5e:	3404      	addlt	r4, #4
 8010b60:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8010b64:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8010b68:	bfb8      	it	lt
 8010b6a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8010b6c:	b1d9      	cbz	r1, 8010ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8010b6e:	880b      	ldrh	r3, [r1, #0]
 8010b70:	2b69      	cmp	r3, #105	; 0x69
 8010b72:	d01f      	beq.n	8010bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8010b74:	d82f      	bhi.n	8010bd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8010b76:	2b58      	cmp	r3, #88	; 0x58
 8010b78:	d01c      	beq.n	8010bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8010b7a:	d818      	bhi.n	8010bae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8010b7c:	2b25      	cmp	r3, #37	; 0x25
 8010b7e:	d034      	beq.n	8010bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8010b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b82:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8010b86:	f1bb 0f00 	cmp.w	fp, #0
 8010b8a:	f000 80b7 	beq.w	8010cfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8010b8e:	f8bb 5000 	ldrh.w	r5, [fp]
 8010b92:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8010b96:	3301      	adds	r3, #1
 8010b98:	930d      	str	r3, [sp, #52]	; 0x34
 8010b9a:	e029      	b.n	8010bf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8010b9c:	b10d      	cbz	r5, 8010ba2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8010b9e:	782a      	ldrb	r2, [r5, #0]
 8010ba0:	e786      	b.n	8010ab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8010ba2:	462a      	mov	r2, r5
 8010ba4:	e784      	b.n	8010ab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8010ba6:	2a00      	cmp	r2, #0
 8010ba8:	d0ea      	beq.n	8010b80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8010baa:	7813      	ldrb	r3, [r2, #0]
 8010bac:	e7e0      	b.n	8010b70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8010bae:	3b63      	subs	r3, #99	; 0x63
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d8e5      	bhi.n	8010b80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8010bb4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8010bb8:	b329      	cbz	r1, 8010c06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8010bba:	880b      	ldrh	r3, [r1, #0]
 8010bbc:	2b69      	cmp	r3, #105	; 0x69
 8010bbe:	d063      	beq.n	8010c88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8010bc0:	d825      	bhi.n	8010c0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8010bc2:	2b63      	cmp	r3, #99	; 0x63
 8010bc4:	d038      	beq.n	8010c38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8010bc6:	2b64      	cmp	r3, #100	; 0x64
 8010bc8:	d05e      	beq.n	8010c88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8010bca:	2b58      	cmp	r3, #88	; 0x58
 8010bcc:	d07a      	beq.n	8010cc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8010bce:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8010bd2:	4625      	mov	r5, r4
 8010bd4:	e036      	b.n	8010c44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8010bd6:	2b73      	cmp	r3, #115	; 0x73
 8010bd8:	d0ec      	beq.n	8010bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8010bda:	d802      	bhi.n	8010be2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8010bdc:	2b6f      	cmp	r3, #111	; 0x6f
 8010bde:	d1cf      	bne.n	8010b80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8010be0:	e7e8      	b.n	8010bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8010be2:	2b75      	cmp	r3, #117	; 0x75
 8010be4:	d0e6      	beq.n	8010bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8010be6:	2b78      	cmp	r3, #120	; 0x78
 8010be8:	e7f9      	b.n	8010bde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8010bea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bec:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8010bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bf2:	b10b      	cbz	r3, 8010bf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8010bf4:	3302      	adds	r3, #2
 8010bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8010bf8:	9b08      	ldr	r3, [sp, #32]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f43f af2f 	beq.w	8010a5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010c00:	3301      	adds	r3, #1
 8010c02:	9308      	str	r3, [sp, #32]
 8010c04:	e72b      	b.n	8010a5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010c06:	2a00      	cmp	r2, #0
 8010c08:	d0e1      	beq.n	8010bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8010c0a:	7813      	ldrb	r3, [r2, #0]
 8010c0c:	e7d6      	b.n	8010bbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8010c0e:	2b73      	cmp	r3, #115	; 0x73
 8010c10:	d036      	beq.n	8010c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8010c12:	d807      	bhi.n	8010c24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8010c14:	2b6f      	cmp	r3, #111	; 0x6f
 8010c16:	d1da      	bne.n	8010bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8010c18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c1a:	1d25      	adds	r5, r4, #4
 8010c1c:	2308      	movs	r3, #8
 8010c1e:	eba8 0202 	sub.w	r2, r8, r2
 8010c22:	e049      	b.n	8010cb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8010c24:	2b75      	cmp	r3, #117	; 0x75
 8010c26:	d042      	beq.n	8010cae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8010c28:	2b78      	cmp	r3, #120	; 0x78
 8010c2a:	d1d0      	bne.n	8010bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8010c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c2e:	1d25      	adds	r5, r4, #4
 8010c30:	2310      	movs	r3, #16
 8010c32:	eba8 0202 	sub.w	r2, r8, r2
 8010c36:	e03f      	b.n	8010cb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8010c38:	7823      	ldrb	r3, [r4, #0]
 8010c3a:	1d25      	adds	r5, r4, #4
 8010c3c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8010c40:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8010c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c46:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d051      	beq.n	8010cf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8010c4e:	881a      	ldrh	r2, [r3, #0]
 8010c50:	a80d      	add	r0, sp, #52	; 0x34
 8010c52:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8010c56:	462c      	mov	r4, r5
 8010c58:	9005      	str	r0, [sp, #20]
 8010c5a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8010c5e:	9004      	str	r0, [sp, #16]
 8010c60:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010c62:	9003      	str	r0, [sp, #12]
 8010c64:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8010c68:	9002      	str	r0, [sp, #8]
 8010c6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010c6c:	9001      	str	r0, [sp, #4]
 8010c6e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8010c72:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8010c76:	9000      	str	r0, [sp, #0]
 8010c78:	a810      	add	r0, sp, #64	; 0x40
 8010c7a:	f7ff fd49 	bl	8010710 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8010c7e:	e7b7      	b.n	8010bf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8010c80:	1d25      	adds	r5, r4, #4
 8010c82:	6823      	ldr	r3, [r4, #0]
 8010c84:	9310      	str	r3, [sp, #64]	; 0x40
 8010c86:	e7dd      	b.n	8010c44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8010c88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c8a:	230a      	movs	r3, #10
 8010c8c:	4649      	mov	r1, r9
 8010c8e:	6820      	ldr	r0, [r4, #0]
 8010c90:	eba8 0202 	sub.w	r2, r8, r2
 8010c94:	1d25      	adds	r5, r4, #4
 8010c96:	b292      	uxth	r2, r2
 8010c98:	f7ff fd08 	bl	80106ac <_ZN8touchgfx7Unicode4itoaElPtti>
 8010c9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010ca0:	2b2d      	cmp	r3, #45	; 0x2d
 8010ca2:	d1cf      	bne.n	8010c44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8010ca4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8010ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010caa:	3302      	adds	r3, #2
 8010cac:	e7ea      	b.n	8010c84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8010cae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cb0:	1d25      	adds	r5, r4, #4
 8010cb2:	230a      	movs	r3, #10
 8010cb4:	eba8 0202 	sub.w	r2, r8, r2
 8010cb8:	b292      	uxth	r2, r2
 8010cba:	4649      	mov	r1, r9
 8010cbc:	6820      	ldr	r0, [r4, #0]
 8010cbe:	f7ff fcd7 	bl	8010670 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8010cc2:	e7bf      	b.n	8010c44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8010cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cc6:	2310      	movs	r3, #16
 8010cc8:	4649      	mov	r1, r9
 8010cca:	6820      	ldr	r0, [r4, #0]
 8010ccc:	eba8 0202 	sub.w	r2, r8, r2
 8010cd0:	1d25      	adds	r5, r4, #4
 8010cd2:	b292      	uxth	r2, r2
 8010cd4:	f7ff fccc 	bl	8010670 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8010cd8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8010cdc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d0af      	beq.n	8010c44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8010ce4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8010ce8:	2919      	cmp	r1, #25
 8010cea:	d8f7      	bhi.n	8010cdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8010cec:	3b20      	subs	r3, #32
 8010cee:	8013      	strh	r3, [r2, #0]
 8010cf0:	e7f4      	b.n	8010cdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8010cf2:	9a08      	ldr	r2, [sp, #32]
 8010cf4:	2a00      	cmp	r2, #0
 8010cf6:	d0ab      	beq.n	8010c50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8010cf8:	7812      	ldrb	r2, [r2, #0]
 8010cfa:	e7a9      	b.n	8010c50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8010cfc:	2d00      	cmp	r5, #0
 8010cfe:	f43f af48 	beq.w	8010b92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8010d02:	782d      	ldrb	r5, [r5, #0]
 8010d04:	e745      	b.n	8010b92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08010d06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8010d06:	b507      	push	{r0, r1, r2, lr}
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	f7ff fe92 	bl	8010a36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8010d12:	b003      	add	sp, #12
 8010d14:	f85d fb04 	ldr.w	pc, [sp], #4

08010d18 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8010d18:	b40c      	push	{r2, r3}
 8010d1a:	b507      	push	{r0, r1, r2, lr}
 8010d1c:	ab04      	add	r3, sp, #16
 8010d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d22:	9301      	str	r3, [sp, #4]
 8010d24:	f7ff ffef 	bl	8010d06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8010d28:	b003      	add	sp, #12
 8010d2a:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d2e:	b002      	add	sp, #8
 8010d30:	4770      	bx	lr
	...

08010d34 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8010d34:	4b01      	ldr	r3, [pc, #4]	; (8010d3c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8010d36:	6018      	str	r0, [r3, #0]
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	2400fa84 	.word	0x2400fa84

08010d40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8010d40:	4b06      	ldr	r3, [pc, #24]	; (8010d5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8010d42:	881a      	ldrh	r2, [r3, #0]
 8010d44:	4282      	cmp	r2, r0
 8010d46:	d807      	bhi.n	8010d58 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8010d48:	4b05      	ldr	r3, [pc, #20]	; (8010d60 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	4298      	cmp	r0, r3
 8010d50:	bfac      	ite	ge
 8010d52:	2000      	movge	r0, #0
 8010d54:	2001      	movlt	r0, #1
 8010d56:	4770      	bx	lr
 8010d58:	2000      	movs	r0, #0
 8010d5a:	4770      	bx	lr
 8010d5c:	2400faa4 	.word	0x2400faa4
 8010d60:	2400faa8 	.word	0x2400faa8

08010d64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8010d64:	b508      	push	{r3, lr}
 8010d66:	4601      	mov	r1, r0
 8010d68:	f7ff ffea 	bl	8010d40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010d6c:	b118      	cbz	r0, 8010d76 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8010d6e:	4b02      	ldr	r3, [pc, #8]	; (8010d78 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010d76:	bd08      	pop	{r3, pc}
 8010d78:	2400fa88 	.word	0x2400fa88

08010d7c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8010d7c:	b538      	push	{r3, r4, r5, lr}
 8010d7e:	4604      	mov	r4, r0
 8010d80:	f7ff ffde 	bl	8010d40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010d84:	b188      	cbz	r0, 8010daa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8010d86:	4b09      	ldr	r3, [pc, #36]	; (8010dac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8010d88:	881a      	ldrh	r2, [r3, #0]
 8010d8a:	4b09      	ldr	r3, [pc, #36]	; (8010db0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8010d8c:	1aa4      	subs	r4, r4, r2
 8010d8e:	220e      	movs	r2, #14
 8010d90:	681d      	ldr	r5, [r3, #0]
 8010d92:	4362      	muls	r2, r4
 8010d94:	18ac      	adds	r4, r5, r2
 8010d96:	7b23      	ldrb	r3, [r4, #12]
 8010d98:	f013 0320 	ands.w	r3, r3, #32
 8010d9c:	bf17      	itett	ne
 8010d9e:	680b      	ldrne	r3, [r1, #0]
 8010da0:	4618      	moveq	r0, r3
 8010da2:	50ab      	strne	r3, [r5, r2]
 8010da4:	684b      	ldrne	r3, [r1, #4]
 8010da6:	bf18      	it	ne
 8010da8:	6063      	strne	r3, [r4, #4]
 8010daa:	bd38      	pop	{r3, r4, r5, pc}
 8010dac:	2400faa4 	.word	0x2400faa4
 8010db0:	2400fa8c 	.word	0x2400fa8c

08010db4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8010db4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010db8:	4606      	mov	r6, r0
 8010dba:	460c      	mov	r4, r1
 8010dbc:	f7ff ffc0 	bl	8010d40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010dc0:	b918      	cbnz	r0, 8010dca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8010dc2:	2000      	movs	r0, #0
 8010dc4:	b002      	add	sp, #8
 8010dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dca:	4b39      	ldr	r3, [pc, #228]	; (8010eb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfc>)
 8010dcc:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8010eb4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x100>
 8010dd0:	881d      	ldrh	r5, [r3, #0]
 8010dd2:	f8d9 a000 	ldr.w	sl, [r9]
 8010dd6:	46c8      	mov	r8, r9
 8010dd8:	1b73      	subs	r3, r6, r5
 8010dda:	250e      	movs	r5, #14
 8010ddc:	435d      	muls	r5, r3
 8010dde:	eb0a 0705 	add.w	r7, sl, r5
 8010de2:	7b3b      	ldrb	r3, [r7, #12]
 8010de4:	f013 0f20 	tst.w	r3, #32
 8010de8:	d0eb      	beq.n	8010dc2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8010dea:	4638      	mov	r0, r7
 8010dec:	f7fc ffd4 	bl	800dd98 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	d1e7      	bne.n	8010dc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8010df4:	4639      	mov	r1, r7
 8010df6:	4620      	mov	r0, r4
 8010df8:	f7fc ffce 	bl	800dd98 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010dfc:	b108      	cbz	r0, 8010e02 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x4e>
 8010dfe:	4621      	mov	r1, r4
 8010e00:	e020      	b.n	8010e44 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x90>
 8010e02:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010e06:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d11e      	bne.n	8010e4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x98>
 8010e0e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010e12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d118      	bne.n	8010e4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x98>
 8010e1a:	6820      	ldr	r0, [r4, #0]
 8010e1c:	466b      	mov	r3, sp
 8010e1e:	6861      	ldr	r1, [r4, #4]
 8010e20:	c303      	stmia	r3!, {r0, r1}
 8010e22:	4639      	mov	r1, r7
 8010e24:	4668      	mov	r0, sp
 8010e26:	f7fa fe76 	bl	800bb16 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010e2a:	f8d9 3000 	ldr.w	r3, [r9]
 8010e2e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010e32:	442b      	add	r3, r5
 8010e34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e38:	4413      	add	r3, r2
 8010e3a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	dc04      	bgt.n	8010e4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x98>
 8010e42:	4669      	mov	r1, sp
 8010e44:	4630      	mov	r0, r6
 8010e46:	f7ff ff99 	bl	8010d7c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8010e4a:	e7bb      	b.n	8010dc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8010e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8010e50:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010e54:	442b      	add	r3, r5
 8010e56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010e5a:	4291      	cmp	r1, r2
 8010e5c:	d119      	bne.n	8010e92 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xde>
 8010e5e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8010e62:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010e66:	4291      	cmp	r1, r2
 8010e68:	d113      	bne.n	8010e92 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xde>
 8010e6a:	6820      	ldr	r0, [r4, #0]
 8010e6c:	466a      	mov	r2, sp
 8010e6e:	6861      	ldr	r1, [r4, #4]
 8010e70:	c203      	stmia	r2!, {r0, r1}
 8010e72:	4619      	mov	r1, r3
 8010e74:	4668      	mov	r0, sp
 8010e76:	f7fa fe4e 	bl	800bb16 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8010e7e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010e82:	442b      	add	r3, r5
 8010e84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010e88:	4413      	add	r3, r2
 8010e8a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	ddd7      	ble.n	8010e42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x8e>
 8010e92:	f8d8 3000 	ldr.w	r3, [r8]
 8010e96:	88e1      	ldrh	r1, [r4, #6]
 8010e98:	441d      	add	r5, r3
 8010e9a:	88ab      	ldrh	r3, [r5, #4]
 8010e9c:	88ea      	ldrh	r2, [r5, #6]
 8010e9e:	fb12 f203 	smulbb	r2, r2, r3
 8010ea2:	88a3      	ldrh	r3, [r4, #4]
 8010ea4:	fb13 f301 	smulbb	r3, r3, r1
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d28a      	bcs.n	8010dc2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8010eac:	e7a7      	b.n	8010dfe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x4a>
 8010eae:	bf00      	nop
 8010eb0:	2400faa4 	.word	0x2400faa4
 8010eb4:	2400fa8c 	.word	0x2400fa8c

08010eb8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8010eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ebc:	4d28      	ldr	r5, [pc, #160]	; (8010f60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8010ebe:	682b      	ldr	r3, [r5, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d04a      	beq.n	8010f5a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8010ec4:	4a27      	ldr	r2, [pc, #156]	; (8010f64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010ec6:	4e28      	ldr	r6, [pc, #160]	; (8010f68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8010ec8:	8810      	ldrh	r0, [r2, #0]
 8010eca:	f8b6 8000 	ldrh.w	r8, [r6]
 8010ece:	4c27      	ldr	r4, [pc, #156]	; (8010f6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8010ed0:	4440      	add	r0, r8
 8010ed2:	4f27      	ldr	r7, [pc, #156]	; (8010f70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010ed4:	1c41      	adds	r1, r0, #1
 8010ed6:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8010eda:	f021 0101 	bic.w	r1, r1, #1
 8010ede:	eb03 020e 	add.w	r2, r3, lr
 8010ee2:	0409      	lsls	r1, r1, #16
 8010ee4:	6022      	str	r2, [r4, #0]
 8010ee6:	0c09      	lsrs	r1, r1, #16
 8010ee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010eec:	eb0e 010c 	add.w	r1, lr, ip
 8010ef0:	185a      	adds	r2, r3, r1
 8010ef2:	603a      	str	r2, [r7, #0]
 8010ef4:	220e      	movs	r2, #14
 8010ef6:	fb02 f208 	mul.w	r2, r2, r8
 8010efa:	3203      	adds	r2, #3
 8010efc:	f022 0203 	bic.w	r2, r2, #3
 8010f00:	4411      	add	r1, r2
 8010f02:	440b      	add	r3, r1
 8010f04:	491b      	ldr	r1, [pc, #108]	; (8010f74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8010f06:	600b      	str	r3, [r1, #0]
 8010f08:	2300      	movs	r3, #0
 8010f0a:	491b      	ldr	r1, [pc, #108]	; (8010f78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8010f0c:	800b      	strh	r3, [r1, #0]
 8010f0e:	491b      	ldr	r1, [pc, #108]	; (8010f7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8010f10:	6809      	ldr	r1, [r1, #0]
 8010f12:	eba1 010e 	sub.w	r1, r1, lr
 8010f16:	eba1 010c 	sub.w	r1, r1, ip
 8010f1a:	469c      	mov	ip, r3
 8010f1c:	1a8a      	subs	r2, r1, r2
 8010f1e:	4918      	ldr	r1, [pc, #96]	; (8010f80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8010f20:	600a      	str	r2, [r1, #0]
 8010f22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f26:	4a17      	ldr	r2, [pc, #92]	; (8010f84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8010f28:	8013      	strh	r3, [r2, #0]
 8010f2a:	4283      	cmp	r3, r0
 8010f2c:	d10d      	bne.n	8010f4a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8010f2e:	8835      	ldrh	r5, [r6, #0]
 8010f30:	2300      	movs	r3, #0
 8010f32:	6838      	ldr	r0, [r7, #0]
 8010f34:	240e      	movs	r4, #14
 8010f36:	429d      	cmp	r5, r3
 8010f38:	d90f      	bls.n	8010f5a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8010f3a:	fb04 0203 	mla	r2, r4, r3, r0
 8010f3e:	3301      	adds	r3, #1
 8010f40:	7b11      	ldrb	r1, [r2, #12]
 8010f42:	f36f 1145 	bfc	r1, #5, #1
 8010f46:	7311      	strb	r1, [r2, #12]
 8010f48:	e7f5      	b.n	8010f36 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 8010f4a:	682a      	ldr	r2, [r5, #0]
 8010f4c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8010f50:	6822      	ldr	r2, [r4, #0]
 8010f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8010f56:	3301      	adds	r3, #1
 8010f58:	e7e7      	b.n	8010f2a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 8010f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f5e:	bf00      	nop
 8010f60:	2400fa88 	.word	0x2400fa88
 8010f64:	2400faa4 	.word	0x2400faa4
 8010f68:	2400faa8 	.word	0x2400faa8
 8010f6c:	2400fa9c 	.word	0x2400fa9c
 8010f70:	2400fa8c 	.word	0x2400fa8c
 8010f74:	2400fa94 	.word	0x2400fa94
 8010f78:	2400faa6 	.word	0x2400faa6
 8010f7c:	2400fa90 	.word	0x2400fa90
 8010f80:	2400faa0 	.word	0x2400faa0
 8010f84:	2400fa98 	.word	0x2400fa98

08010f88 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8010f88:	4b10      	ldr	r3, [pc, #64]	; (8010fcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8010f8a:	b510      	push	{r4, lr}
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	b9db      	cbnz	r3, 8010fc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8010f90:	b1d1      	cbz	r1, 8010fc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8010f92:	4b0f      	ldr	r3, [pc, #60]	; (8010fd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8010f94:	240e      	movs	r4, #14
 8010f96:	801a      	strh	r2, [r3, #0]
 8010f98:	b292      	uxth	r2, r2
 8010f9a:	4b0e      	ldr	r3, [pc, #56]	; (8010fd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	4362      	muls	r2, r4
 8010fa2:	2406      	movs	r4, #6
 8010fa4:	fb04 2203 	mla	r2, r4, r3, r2
 8010fa8:	428a      	cmp	r2, r1
 8010faa:	d305      	bcc.n	8010fb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8010fac:	4b0a      	ldr	r3, [pc, #40]	; (8010fd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8010fae:	2135      	movs	r1, #53	; 0x35
 8010fb0:	4a0a      	ldr	r2, [pc, #40]	; (8010fdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8010fb2:	480b      	ldr	r0, [pc, #44]	; (8010fe0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8010fb4:	f006 f8ba 	bl	801712c <__assert_func>
 8010fb8:	4b0a      	ldr	r3, [pc, #40]	; (8010fe4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8010fba:	6019      	str	r1, [r3, #0]
 8010fbc:	4b0a      	ldr	r3, [pc, #40]	; (8010fe8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8010fbe:	6018      	str	r0, [r3, #0]
 8010fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fc4:	f7ff bf78 	b.w	8010eb8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8010fc8:	bd10      	pop	{r4, pc}
 8010fca:	bf00      	nop
 8010fcc:	2400fa94 	.word	0x2400fa94
 8010fd0:	2400faa8 	.word	0x2400faa8
 8010fd4:	2400faa4 	.word	0x2400faa4
 8010fd8:	0801af65 	.word	0x0801af65
 8010fdc:	0801afbe 	.word	0x0801afbe
 8010fe0:	0801af40 	.word	0x0801af40
 8010fe4:	2400fa90 	.word	0x2400fa90
 8010fe8:	2400fa88 	.word	0x2400fa88

08010fec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8010fec:	b470      	push	{r4, r5, r6}
 8010fee:	4c07      	ldr	r4, [pc, #28]	; (801100c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8010ff0:	4605      	mov	r5, r0
 8010ff2:	4610      	mov	r0, r2
 8010ff4:	9a03      	ldr	r2, [sp, #12]
 8010ff6:	6826      	ldr	r6, [r4, #0]
 8010ff8:	b936      	cbnz	r6, 8011008 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8010ffa:	6025      	str	r5, [r4, #0]
 8010ffc:	4c04      	ldr	r4, [pc, #16]	; (8011010 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8010ffe:	8021      	strh	r1, [r4, #0]
 8011000:	4619      	mov	r1, r3
 8011002:	bc70      	pop	{r4, r5, r6}
 8011004:	f7ff bfc0 	b.w	8010f88 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8011008:	bc70      	pop	{r4, r5, r6}
 801100a:	4770      	bx	lr
 801100c:	2400faac 	.word	0x2400faac
 8011010:	2400faa4 	.word	0x2400faa4

08011014 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8011014:	b508      	push	{r3, lr}
 8011016:	4b14      	ldr	r3, [pc, #80]	; (8011068 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8011018:	6819      	ldr	r1, [r3, #0]
 801101a:	b931      	cbnz	r1, 801102a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801101c:	4b13      	ldr	r3, [pc, #76]	; (801106c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801101e:	f240 4185 	movw	r1, #1157	; 0x485
 8011022:	4a13      	ldr	r2, [pc, #76]	; (8011070 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8011024:	4813      	ldr	r0, [pc, #76]	; (8011074 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8011026:	f006 f881 	bl	801712c <__assert_func>
 801102a:	4a13      	ldr	r2, [pc, #76]	; (8011078 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801102c:	8803      	ldrh	r3, [r0, #0]
 801102e:	8812      	ldrh	r2, [r2, #0]
 8011030:	4293      	cmp	r3, r2
 8011032:	d204      	bcs.n	801103e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8011034:	2214      	movs	r2, #20
 8011036:	fb02 1303 	mla	r3, r2, r3, r1
 801103a:	8918      	ldrh	r0, [r3, #8]
 801103c:	bd08      	pop	{r3, pc}
 801103e:	490f      	ldr	r1, [pc, #60]	; (801107c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8011040:	8809      	ldrh	r1, [r1, #0]
 8011042:	4411      	add	r1, r2
 8011044:	428b      	cmp	r3, r1
 8011046:	da06      	bge.n	8011056 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8011048:	1a9b      	subs	r3, r3, r2
 801104a:	4a0d      	ldr	r2, [pc, #52]	; (8011080 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801104c:	210e      	movs	r1, #14
 801104e:	6812      	ldr	r2, [r2, #0]
 8011050:	fb01 2303 	mla	r3, r1, r3, r2
 8011054:	e7f1      	b.n	801103a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8011056:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801105a:	4293      	cmp	r3, r2
 801105c:	bf0a      	itet	eq
 801105e:	4b09      	ldreq	r3, [pc, #36]	; (8011084 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8011060:	2000      	movne	r0, #0
 8011062:	8818      	ldrheq	r0, [r3, #0]
 8011064:	e7ea      	b.n	801103c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8011066:	bf00      	nop
 8011068:	2400faac 	.word	0x2400faac
 801106c:	0801a3a0 	.word	0x0801a3a0
 8011070:	0801b06b 	.word	0x0801b06b
 8011074:	0801af40 	.word	0x0801af40
 8011078:	2400faa4 	.word	0x2400faa4
 801107c:	2400faa8 	.word	0x2400faa8
 8011080:	2400fa8c 	.word	0x2400fa8c
 8011084:	2400fa10 	.word	0x2400fa10

08011088 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8011088:	b508      	push	{r3, lr}
 801108a:	4b14      	ldr	r3, [pc, #80]	; (80110dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801108c:	6819      	ldr	r1, [r3, #0]
 801108e:	b931      	cbnz	r1, 801109e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8011090:	4b13      	ldr	r3, [pc, #76]	; (80110e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8011092:	f240 4199 	movw	r1, #1177	; 0x499
 8011096:	4a13      	ldr	r2, [pc, #76]	; (80110e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8011098:	4813      	ldr	r0, [pc, #76]	; (80110e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801109a:	f006 f847 	bl	801712c <__assert_func>
 801109e:	4a13      	ldr	r2, [pc, #76]	; (80110ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80110a0:	8803      	ldrh	r3, [r0, #0]
 80110a2:	8812      	ldrh	r2, [r2, #0]
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d204      	bcs.n	80110b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80110a8:	2214      	movs	r2, #20
 80110aa:	fb02 1303 	mla	r3, r2, r3, r1
 80110ae:	8958      	ldrh	r0, [r3, #10]
 80110b0:	bd08      	pop	{r3, pc}
 80110b2:	490f      	ldr	r1, [pc, #60]	; (80110f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80110b4:	8809      	ldrh	r1, [r1, #0]
 80110b6:	4411      	add	r1, r2
 80110b8:	428b      	cmp	r3, r1
 80110ba:	da06      	bge.n	80110ca <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80110bc:	1a9b      	subs	r3, r3, r2
 80110be:	4a0d      	ldr	r2, [pc, #52]	; (80110f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80110c0:	210e      	movs	r1, #14
 80110c2:	6812      	ldr	r2, [r2, #0]
 80110c4:	fb01 2303 	mla	r3, r1, r3, r2
 80110c8:	e7f1      	b.n	80110ae <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80110ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80110ce:	4293      	cmp	r3, r2
 80110d0:	bf0a      	itet	eq
 80110d2:	4b09      	ldreq	r3, [pc, #36]	; (80110f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80110d4:	2000      	movne	r0, #0
 80110d6:	8818      	ldrheq	r0, [r3, #0]
 80110d8:	e7ea      	b.n	80110b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80110da:	bf00      	nop
 80110dc:	2400faac 	.word	0x2400faac
 80110e0:	0801a3a0 	.word	0x0801a3a0
 80110e4:	0801b097 	.word	0x0801b097
 80110e8:	0801af40 	.word	0x0801af40
 80110ec:	2400faa4 	.word	0x2400faa4
 80110f0:	2400faa8 	.word	0x2400faa8
 80110f4:	2400fa8c 	.word	0x2400fa8c
 80110f8:	2400fa12 	.word	0x2400fa12

080110fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80110fc:	4b23      	ldr	r3, [pc, #140]	; (801118c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80110fe:	b510      	push	{r4, lr}
 8011100:	681c      	ldr	r4, [r3, #0]
 8011102:	b934      	cbnz	r4, 8011112 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8011104:	4b22      	ldr	r3, [pc, #136]	; (8011190 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8011106:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801110a:	4a22      	ldr	r2, [pc, #136]	; (8011194 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801110c:	4822      	ldr	r0, [pc, #136]	; (8011198 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801110e:	f006 f80d 	bl	801712c <__assert_func>
 8011112:	4a22      	ldr	r2, [pc, #136]	; (801119c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8011114:	880b      	ldrh	r3, [r1, #0]
 8011116:	8812      	ldrh	r2, [r2, #0]
 8011118:	4293      	cmp	r3, r2
 801111a:	d211      	bcs.n	8011140 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801111c:	2214      	movs	r2, #20
 801111e:	fb02 4303 	mla	r3, r2, r3, r4
 8011122:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8011126:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801112a:	8a1a      	ldrh	r2, [r3, #16]
 801112c:	8a5b      	ldrh	r3, [r3, #18]
 801112e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011132:	8004      	strh	r4, [r0, #0]
 8011134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011138:	8041      	strh	r1, [r0, #2]
 801113a:	8082      	strh	r2, [r0, #4]
 801113c:	80c3      	strh	r3, [r0, #6]
 801113e:	e00e      	b.n	801115e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8011140:	4917      	ldr	r1, [pc, #92]	; (80111a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8011142:	8809      	ldrh	r1, [r1, #0]
 8011144:	4411      	add	r1, r2
 8011146:	428b      	cmp	r3, r1
 8011148:	da0a      	bge.n	8011160 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801114a:	1a9b      	subs	r3, r3, r2
 801114c:	4a15      	ldr	r2, [pc, #84]	; (80111a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801114e:	210e      	movs	r1, #14
 8011150:	6812      	ldr	r2, [r2, #0]
 8011152:	fb01 2303 	mla	r3, r1, r3, r2
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	6002      	str	r2, [r0, #0]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	6042      	str	r2, [r0, #4]
 801115e:	bd10      	pop	{r4, pc}
 8011160:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011164:	4293      	cmp	r3, r2
 8011166:	d10b      	bne.n	8011180 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8011168:	4b0f      	ldr	r3, [pc, #60]	; (80111a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801116a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801116e:	4b0f      	ldr	r3, [pc, #60]	; (80111ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8011170:	8081      	strh	r1, [r0, #4]
 8011172:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011176:	2300      	movs	r3, #0
 8011178:	80c2      	strh	r2, [r0, #6]
 801117a:	8003      	strh	r3, [r0, #0]
 801117c:	8043      	strh	r3, [r0, #2]
 801117e:	e7ee      	b.n	801115e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8011180:	2300      	movs	r3, #0
 8011182:	8003      	strh	r3, [r0, #0]
 8011184:	8043      	strh	r3, [r0, #2]
 8011186:	8083      	strh	r3, [r0, #4]
 8011188:	e7d8      	b.n	801113c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801118a:	bf00      	nop
 801118c:	2400faac 	.word	0x2400faac
 8011190:	0801a3a0 	.word	0x0801a3a0
 8011194:	0801b004 	.word	0x0801b004
 8011198:	0801af40 	.word	0x0801af40
 801119c:	2400faa4 	.word	0x2400faa4
 80111a0:	2400faa8 	.word	0x2400faa8
 80111a4:	2400fa8c 	.word	0x2400fa8c
 80111a8:	2400fa10 	.word	0x2400fa10
 80111ac:	2400fa12 	.word	0x2400fa12

080111b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80111b0:	4b18      	ldr	r3, [pc, #96]	; (8011214 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	b34b      	cbz	r3, 801120a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80111b6:	4a18      	ldr	r2, [pc, #96]	; (8011218 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80111b8:	8800      	ldrh	r0, [r0, #0]
 80111ba:	8812      	ldrh	r2, [r2, #0]
 80111bc:	4290      	cmp	r0, r2
 80111be:	d211      	bcs.n	80111e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80111c0:	2214      	movs	r2, #20
 80111c2:	fb02 3300 	mla	r3, r2, r0, r3
 80111c6:	8a1a      	ldrh	r2, [r3, #16]
 80111c8:	8919      	ldrh	r1, [r3, #8]
 80111ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80111ce:	428a      	cmp	r2, r1
 80111d0:	db1d      	blt.n	801120e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80111d2:	8a58      	ldrh	r0, [r3, #18]
 80111d4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80111d8:	895b      	ldrh	r3, [r3, #10]
 80111da:	4298      	cmp	r0, r3
 80111dc:	bfac      	ite	ge
 80111de:	2000      	movge	r0, #0
 80111e0:	2001      	movlt	r0, #1
 80111e2:	4770      	bx	lr
 80111e4:	4b0d      	ldr	r3, [pc, #52]	; (801121c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	4413      	add	r3, r2
 80111ea:	4298      	cmp	r0, r3
 80111ec:	da0d      	bge.n	801120a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80111ee:	4b0c      	ldr	r3, [pc, #48]	; (8011220 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80111f0:	1a80      	subs	r0, r0, r2
 80111f2:	220e      	movs	r2, #14
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	fb02 3300 	mla	r3, r2, r0, r3
 80111fa:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80111fe:	891a      	ldrh	r2, [r3, #8]
 8011200:	4291      	cmp	r1, r2
 8011202:	db04      	blt.n	801120e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8011204:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8011208:	e7e6      	b.n	80111d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801120a:	2000      	movs	r0, #0
 801120c:	4770      	bx	lr
 801120e:	2001      	movs	r0, #1
 8011210:	4770      	bx	lr
 8011212:	bf00      	nop
 8011214:	2400faac 	.word	0x2400faac
 8011218:	2400faa4 	.word	0x2400faa4
 801121c:	2400faa8 	.word	0x2400faa8
 8011220:	2400fa8c 	.word	0x2400fa8c

08011224 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8011224:	b508      	push	{r3, lr}
 8011226:	4b12      	ldr	r3, [pc, #72]	; (8011270 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8011228:	6819      	ldr	r1, [r3, #0]
 801122a:	b931      	cbnz	r1, 801123a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801122c:	4b11      	ldr	r3, [pc, #68]	; (8011274 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801122e:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8011232:	4a11      	ldr	r2, [pc, #68]	; (8011278 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8011234:	4811      	ldr	r0, [pc, #68]	; (801127c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8011236:	f005 ff79 	bl	801712c <__assert_func>
 801123a:	8803      	ldrh	r3, [r0, #0]
 801123c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011240:	4293      	cmp	r3, r2
 8011242:	d012      	beq.n	801126a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8011244:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011248:	4293      	cmp	r3, r2
 801124a:	d103      	bne.n	8011254 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801124c:	4b0c      	ldr	r3, [pc, #48]	; (8011280 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8011252:	bd08      	pop	{r3, pc}
 8011254:	4a0b      	ldr	r2, [pc, #44]	; (8011284 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8011256:	6812      	ldr	r2, [r2, #0]
 8011258:	b11a      	cbz	r2, 8011262 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801125a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801125e:	2800      	cmp	r0, #0
 8011260:	d1f7      	bne.n	8011252 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8011262:	2214      	movs	r2, #20
 8011264:	4353      	muls	r3, r2
 8011266:	58c8      	ldr	r0, [r1, r3]
 8011268:	e7f3      	b.n	8011252 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801126a:	2000      	movs	r0, #0
 801126c:	e7f1      	b.n	8011252 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801126e:	bf00      	nop
 8011270:	2400faac 	.word	0x2400faac
 8011274:	0801a3a0 	.word	0x0801a3a0
 8011278:	0801b03a 	.word	0x0801b03a
 801127c:	0801af40 	.word	0x0801af40
 8011280:	2400fa1c 	.word	0x2400fa1c
 8011284:	2400fa88 	.word	0x2400fa88

08011288 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8011288:	8802      	ldrh	r2, [r0, #0]
 801128a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801128e:	429a      	cmp	r2, r3
 8011290:	d845      	bhi.n	801131e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8011292:	4b24      	ldr	r3, [pc, #144]	; (8011324 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8011294:	8818      	ldrh	r0, [r3, #0]
 8011296:	4282      	cmp	r2, r0
 8011298:	d221      	bcs.n	80112de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801129a:	4b23      	ldr	r3, [pc, #140]	; (8011328 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801129c:	6819      	ldr	r1, [r3, #0]
 801129e:	2314      	movs	r3, #20
 80112a0:	fb03 1302 	mla	r3, r3, r2, r1
 80112a4:	6858      	ldr	r0, [r3, #4]
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d03a      	beq.n	8011320 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80112aa:	4920      	ldr	r1, [pc, #128]	; (801132c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80112ac:	6809      	ldr	r1, [r1, #0]
 80112ae:	2900      	cmp	r1, #0
 80112b0:	d036      	beq.n	8011320 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80112b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80112b6:	2900      	cmp	r1, #0
 80112b8:	d032      	beq.n	8011320 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80112ba:	891a      	ldrh	r2, [r3, #8]
 80112bc:	8958      	ldrh	r0, [r3, #10]
 80112be:	4350      	muls	r0, r2
 80112c0:	7c5a      	ldrb	r2, [r3, #17]
 80112c2:	7cdb      	ldrb	r3, [r3, #19]
 80112c4:	0952      	lsrs	r2, r2, #5
 80112c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80112ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80112ce:	2b0b      	cmp	r3, #11
 80112d0:	bf18      	it	ne
 80112d2:	0040      	lslne	r0, r0, #1
 80112d4:	3003      	adds	r0, #3
 80112d6:	f020 0003 	bic.w	r0, r0, #3
 80112da:	4408      	add	r0, r1
 80112dc:	4770      	bx	lr
 80112de:	4b14      	ldr	r3, [pc, #80]	; (8011330 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80112e0:	881b      	ldrh	r3, [r3, #0]
 80112e2:	4403      	add	r3, r0
 80112e4:	429a      	cmp	r2, r3
 80112e6:	da1a      	bge.n	801131e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80112e8:	4b12      	ldr	r3, [pc, #72]	; (8011334 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80112ea:	1a10      	subs	r0, r2, r0
 80112ec:	210e      	movs	r1, #14
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	fb01 3000 	mla	r0, r1, r0, r3
 80112f4:	7b03      	ldrb	r3, [r0, #12]
 80112f6:	f003 031f 	and.w	r3, r3, #31
 80112fa:	2b0b      	cmp	r3, #11
 80112fc:	d10b      	bne.n	8011316 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80112fe:	8903      	ldrh	r3, [r0, #8]
 8011300:	8940      	ldrh	r0, [r0, #10]
 8011302:	4358      	muls	r0, r3
 8011304:	4b09      	ldr	r3, [pc, #36]	; (801132c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8011306:	3003      	adds	r0, #3
 8011308:	6819      	ldr	r1, [r3, #0]
 801130a:	f020 0303 	bic.w	r3, r0, #3
 801130e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8011312:	4418      	add	r0, r3
 8011314:	4770      	bx	lr
 8011316:	2b0d      	cmp	r3, #13
 8011318:	d101      	bne.n	801131e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801131a:	300d      	adds	r0, #13
 801131c:	4770      	bx	lr
 801131e:	2000      	movs	r0, #0
 8011320:	4770      	bx	lr
 8011322:	bf00      	nop
 8011324:	2400faa4 	.word	0x2400faa4
 8011328:	2400faac 	.word	0x2400faac
 801132c:	2400fa88 	.word	0x2400fa88
 8011330:	2400faa8 	.word	0x2400faa8
 8011334:	2400fa8c 	.word	0x2400fa8c

08011338 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8011338:	4b17      	ldr	r3, [pc, #92]	; (8011398 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801133a:	b510      	push	{r4, lr}
 801133c:	6819      	ldr	r1, [r3, #0]
 801133e:	8803      	ldrh	r3, [r0, #0]
 8011340:	b1e9      	cbz	r1, 801137e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8011342:	4a16      	ldr	r2, [pc, #88]	; (801139c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8011344:	8812      	ldrh	r2, [r2, #0]
 8011346:	429a      	cmp	r2, r3
 8011348:	d90a      	bls.n	8011360 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801134a:	2214      	movs	r2, #20
 801134c:	fb02 1303 	mla	r3, r2, r3, r1
 8011350:	7c58      	ldrb	r0, [r3, #17]
 8011352:	0942      	lsrs	r2, r0, #5
 8011354:	7cd8      	ldrb	r0, [r3, #19]
 8011356:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801135a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801135e:	bd10      	pop	{r4, pc}
 8011360:	490f      	ldr	r1, [pc, #60]	; (80113a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8011362:	8809      	ldrh	r1, [r1, #0]
 8011364:	4411      	add	r1, r2
 8011366:	428b      	cmp	r3, r1
 8011368:	da09      	bge.n	801137e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801136a:	1a9b      	subs	r3, r3, r2
 801136c:	4a0d      	ldr	r2, [pc, #52]	; (80113a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801136e:	210e      	movs	r1, #14
 8011370:	6812      	ldr	r2, [r2, #0]
 8011372:	fb01 2303 	mla	r3, r1, r3, r2
 8011376:	7b18      	ldrb	r0, [r3, #12]
 8011378:	f000 001f 	and.w	r0, r0, #31
 801137c:	e7ef      	b.n	801135e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801137e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011382:	4293      	cmp	r3, r2
 8011384:	d106      	bne.n	8011394 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8011386:	f7f9 f81b 	bl	800a3c0 <_ZN8touchgfx3HAL3lcdEv>
 801138a:	6803      	ldr	r3, [r0, #0]
 801138c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011392:	4718      	bx	r3
 8011394:	2000      	movs	r0, #0
 8011396:	e7e2      	b.n	801135e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8011398:	2400faac 	.word	0x2400faac
 801139c:	2400faa4 	.word	0x2400faa4
 80113a0:	2400faa8 	.word	0x2400faa8
 80113a4:	2400fa8c 	.word	0x2400fa8c

080113a8 <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 80113a8:	2020      	movs	r0, #32
 80113aa:	4770      	bx	lr

080113ac <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 80113ac:	2002      	movs	r0, #2
 80113ae:	4770      	bx	lr

080113b0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80113b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80113b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80113ba:	f1bc 0f00 	cmp.w	ip, #0
 80113be:	d073      	beq.n	80114a8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80113c0:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80113c4:	2c00      	cmp	r4, #0
 80113c6:	dd6f      	ble.n	80114a8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80113c8:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 80113cc:	2e00      	cmp	r6, #0
 80113ce:	dd6b      	ble.n	80114a8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80113d0:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 80113d4:	4356      	muls	r6, r2
 80113d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113da:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80113de:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80113e2:	fb02 3305 	mla	r3, r2, r5, r3
 80113e6:	eba2 0204 	sub.w	r2, r2, r4
 80113ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80113ee:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80113f2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80113f6:	d10a      	bne.n	801140e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 80113f8:	42b1      	cmp	r1, r6
 80113fa:	d255      	bcs.n	80114a8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80113fc:	eb01 030a 	add.w	r3, r1, sl
 8011400:	4299      	cmp	r1, r3
 8011402:	d202      	bcs.n	801140a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 8011404:	f841 0b04 	str.w	r0, [r1], #4
 8011408:	e7fa      	b.n	8011400 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 801140a:	4411      	add	r1, r2
 801140c:	e7f4      	b.n	80113f8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 801140e:	fa1f fe8c 	uxth.w	lr, ip
 8011412:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011416:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801141a:	fa5f f980 	uxtb.w	r9, r0
 801141e:	fb03 f30e 	mul.w	r3, r3, lr
 8011422:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8011426:	fb08 f80e 	mul.w	r8, r8, lr
 801142a:	9301      	str	r3, [sp, #4]
 801142c:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 8011430:	fb09 f90e 	mul.w	r9, r9, lr
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	42b1      	cmp	r1, r6
 8011438:	d236      	bcs.n	80114a8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801143a:	eb01 0b0a 	add.w	fp, r1, sl
 801143e:	4559      	cmp	r1, fp
 8011440:	d230      	bcs.n	80114a4 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 8011442:	680b      	ldr	r3, [r1, #0]
 8011444:	0e1c      	lsrs	r4, r3, #24
 8011446:	d102      	bne.n	801144e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 8011448:	9b00      	ldr	r3, [sp, #0]
 801144a:	600b      	str	r3, [r1, #0]
 801144c:	e7f7      	b.n	801143e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801144e:	fb04 f00e 	mul.w	r0, r4, lr
 8011452:	eb0c 0504 	add.w	r5, ip, r4
 8011456:	3104      	adds	r1, #4
 8011458:	1c47      	adds	r7, r0, #1
 801145a:	eb07 2720 	add.w	r7, r7, r0, asr #8
 801145e:	1238      	asrs	r0, r7, #8
 8011460:	1a27      	subs	r7, r4, r0
 8011462:	1a2d      	subs	r5, r5, r0
 8011464:	f3c3 4407 	ubfx	r4, r3, #16, #8
 8011468:	9801      	ldr	r0, [sp, #4]
 801146a:	b2ed      	uxtb	r5, r5
 801146c:	fb07 0404 	mla	r4, r7, r4, r0
 8011470:	b2d8      	uxtb	r0, r3
 8011472:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011476:	fb07 9000 	mla	r0, r7, r0, r9
 801147a:	fbb4 f4f5 	udiv	r4, r4, r5
 801147e:	fbb0 f0f5 	udiv	r0, r0, r5
 8011482:	0424      	lsls	r4, r4, #16
 8011484:	b2c0      	uxtb	r0, r0
 8011486:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 801148a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 801148e:	4320      	orrs	r0, r4
 8011490:	fb07 8403 	mla	r4, r7, r3, r8
 8011494:	fbb4 f4f5 	udiv	r4, r4, r5
 8011498:	0224      	lsls	r4, r4, #8
 801149a:	b2a4      	uxth	r4, r4
 801149c:	4320      	orrs	r0, r4
 801149e:	f841 0c04 	str.w	r0, [r1, #-4]
 80114a2:	e7cc      	b.n	801143e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 80114a4:	4411      	add	r1, r2
 80114a6:	e7c6      	b.n	8011436 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 80114a8:	b003      	add	sp, #12
 80114aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080114b0 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80114b0:	2bff      	cmp	r3, #255	; 0xff
 80114b2:	d061      	beq.n	8011578 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80114b4:	2a33      	cmp	r2, #51	; 0x33
 80114b6:	d83d      	bhi.n	8011534 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 80114b8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80114bc:	00500054 	.word	0x00500054
 80114c0:	004e0052 	.word	0x004e0052
 80114c4:	00560058 	.word	0x00560058
 80114c8:	003c003c 	.word	0x003c003c
 80114cc:	010000fe 	.word	0x010000fe
 80114d0:	010000fe 	.word	0x010000fe
 80114d4:	003c003c 	.word	0x003c003c
 80114d8:	003c003c 	.word	0x003c003c
 80114dc:	003c003c 	.word	0x003c003c
 80114e0:	003c003c 	.word	0x003c003c
 80114e4:	003c003c 	.word	0x003c003c
 80114e8:	003c003c 	.word	0x003c003c
 80114ec:	003c003c 	.word	0x003c003c
 80114f0:	003c003c 	.word	0x003c003c
 80114f4:	003c003c 	.word	0x003c003c
 80114f8:	003c003c 	.word	0x003c003c
 80114fc:	003c003c 	.word	0x003c003c
 8011500:	003c003c 	.word	0x003c003c
 8011504:	003c003c 	.word	0x003c003c
 8011508:	003c003c 	.word	0x003c003c
 801150c:	003c003c 	.word	0x003c003c
 8011510:	003c003c 	.word	0x003c003c
 8011514:	00340042 	.word	0x00340042
 8011518:	00e400eb 	.word	0x00e400eb
 801151c:	005a005c 	.word	0x005a005c
 8011520:	005a005c 	.word	0x005a005c
 8011524:	684b      	ldr	r3, [r1, #4]
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	2b01      	cmp	r3, #1
 801152a:	d005      	beq.n	8011538 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801152c:	f0c0 80af 	bcc.w	801168e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 8011530:	2b02      	cmp	r3, #2
 8011532:	d003      	beq.n	801153c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8011534:	2000      	movs	r0, #0
 8011536:	4770      	bx	lr
 8011538:	6a00      	ldr	r0, [r0, #32]
 801153a:	4770      	bx	lr
 801153c:	6900      	ldr	r0, [r0, #16]
 801153e:	4770      	bx	lr
 8011540:	684b      	ldr	r3, [r1, #4]
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	2b01      	cmp	r3, #1
 8011546:	d005      	beq.n	8011554 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa4>
 8011548:	f0c0 80a8 	bcc.w	801169c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801154c:	2b02      	cmp	r3, #2
 801154e:	d1f1      	bne.n	8011534 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8011550:	6880      	ldr	r0, [r0, #8]
 8011552:	4770      	bx	lr
 8011554:	6980      	ldr	r0, [r0, #24]
 8011556:	4770      	bx	lr
 8011558:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801155a:	4770      	bx	lr
 801155c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801155e:	4770      	bx	lr
 8011560:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011562:	4770      	bx	lr
 8011564:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8011566:	4770      	bx	lr
 8011568:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801156a:	4770      	bx	lr
 801156c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801156e:	4770      	bx	lr
 8011570:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8011572:	4770      	bx	lr
 8011574:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8011576:	4770      	bx	lr
 8011578:	2a33      	cmp	r2, #51	; 0x33
 801157a:	d8db      	bhi.n	8011534 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801157c:	a301      	add	r3, pc, #4	; (adr r3, 8011584 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd4>)
 801157e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8011582:	bf00      	nop
 8011584:	080116ad 	.word	0x080116ad
 8011588:	080116a5 	.word	0x080116a5
 801158c:	080116a9 	.word	0x080116a9
 8011590:	080116a1 	.word	0x080116a1
 8011594:	080116b5 	.word	0x080116b5
 8011598:	080116b1 	.word	0x080116b1
 801159c:	08011535 	.word	0x08011535
 80115a0:	08011535 	.word	0x08011535
 80115a4:	080116b9 	.word	0x080116b9
 80115a8:	080116bd 	.word	0x080116bd
 80115ac:	080116b9 	.word	0x080116b9
 80115b0:	080116bd 	.word	0x080116bd
 80115b4:	08011535 	.word	0x08011535
 80115b8:	08011535 	.word	0x08011535
 80115bc:	08011535 	.word	0x08011535
 80115c0:	08011535 	.word	0x08011535
 80115c4:	08011535 	.word	0x08011535
 80115c8:	08011535 	.word	0x08011535
 80115cc:	08011535 	.word	0x08011535
 80115d0:	08011535 	.word	0x08011535
 80115d4:	08011535 	.word	0x08011535
 80115d8:	08011535 	.word	0x08011535
 80115dc:	08011535 	.word	0x08011535
 80115e0:	08011535 	.word	0x08011535
 80115e4:	08011535 	.word	0x08011535
 80115e8:	08011535 	.word	0x08011535
 80115ec:	08011535 	.word	0x08011535
 80115f0:	08011535 	.word	0x08011535
 80115f4:	08011535 	.word	0x08011535
 80115f8:	08011535 	.word	0x08011535
 80115fc:	08011535 	.word	0x08011535
 8011600:	08011535 	.word	0x08011535
 8011604:	08011535 	.word	0x08011535
 8011608:	08011535 	.word	0x08011535
 801160c:	08011535 	.word	0x08011535
 8011610:	08011535 	.word	0x08011535
 8011614:	08011535 	.word	0x08011535
 8011618:	08011535 	.word	0x08011535
 801161c:	08011535 	.word	0x08011535
 8011620:	08011535 	.word	0x08011535
 8011624:	08011535 	.word	0x08011535
 8011628:	08011535 	.word	0x08011535
 801162c:	08011535 	.word	0x08011535
 8011630:	08011535 	.word	0x08011535
 8011634:	0801166d 	.word	0x0801166d
 8011638:	08011655 	.word	0x08011655
 801163c:	08011693 	.word	0x08011693
 8011640:	08011685 	.word	0x08011685
 8011644:	080116c5 	.word	0x080116c5
 8011648:	080116c1 	.word	0x080116c1
 801164c:	080116c5 	.word	0x080116c5
 8011650:	080116c1 	.word	0x080116c1
 8011654:	684b      	ldr	r3, [r1, #4]
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	2b01      	cmp	r3, #1
 801165a:	d005      	beq.n	8011668 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1b8>
 801165c:	d317      	bcc.n	801168e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801165e:	2b02      	cmp	r3, #2
 8011660:	f47f af68 	bne.w	8011534 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8011664:	6940      	ldr	r0, [r0, #20]
 8011666:	4770      	bx	lr
 8011668:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801166a:	4770      	bx	lr
 801166c:	684b      	ldr	r3, [r1, #4]
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	2b01      	cmp	r3, #1
 8011672:	d005      	beq.n	8011680 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1d0>
 8011674:	d312      	bcc.n	801169c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 8011676:	2b02      	cmp	r3, #2
 8011678:	f47f af5c 	bne.w	8011534 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801167c:	68c0      	ldr	r0, [r0, #12]
 801167e:	4770      	bx	lr
 8011680:	69c0      	ldr	r0, [r0, #28]
 8011682:	4770      	bx	lr
 8011684:	684b      	ldr	r3, [r1, #4]
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	f47f af53 	bne.w	8011534 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801168e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8011690:	4770      	bx	lr
 8011692:	684b      	ldr	r3, [r1, #4]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	f47f af4c 	bne.w	8011534 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801169c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801169e:	4770      	bx	lr
 80116a0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80116a2:	4770      	bx	lr
 80116a4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80116a6:	4770      	bx	lr
 80116a8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80116aa:	4770      	bx	lr
 80116ac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80116ae:	4770      	bx	lr
 80116b0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80116b2:	4770      	bx	lr
 80116b4:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80116b6:	4770      	bx	lr
 80116b8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80116ba:	4770      	bx	lr
 80116bc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80116be:	4770      	bx	lr
 80116c0:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80116c2:	4770      	bx	lr
 80116c4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80116c6:	4770      	bx	lr

080116c8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80116c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116cc:	b085      	sub	sp, #20
 80116ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80116d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80116d4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80116d8:	6868      	ldr	r0, [r5, #4]
 80116da:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80116de:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 80116e2:	fb00 1404 	mla	r4, r0, r4, r1
 80116e6:	6829      	ldr	r1, [r5, #0]
 80116e8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80116ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80116ee:	6809      	ldr	r1, [r1, #0]
 80116f0:	9101      	str	r1, [sp, #4]
 80116f2:	9902      	ldr	r1, [sp, #8]
 80116f4:	2900      	cmp	r1, #0
 80116f6:	dc03      	bgt.n	8011700 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80116f8:	9903      	ldr	r1, [sp, #12]
 80116fa:	2900      	cmp	r1, #0
 80116fc:	f340 8137 	ble.w	801196e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8011700:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011702:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8011706:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801170a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801170c:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 8011710:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011712:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8011716:	2b00      	cmp	r3, #0
 8011718:	dd0e      	ble.n	8011738 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801171a:	1405      	asrs	r5, r0, #16
 801171c:	d405      	bmi.n	801172a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801171e:	4565      	cmp	r5, ip
 8011720:	da03      	bge.n	801172a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8011722:	140d      	asrs	r5, r1, #16
 8011724:	d401      	bmi.n	801172a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8011726:	42bd      	cmp	r5, r7
 8011728:	db07      	blt.n	801173a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801172a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801172c:	3b01      	subs	r3, #1
 801172e:	3404      	adds	r4, #4
 8011730:	4428      	add	r0, r5
 8011732:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8011734:	4429      	add	r1, r5
 8011736:	e7ee      	b.n	8011716 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8011738:	d041      	beq.n	80117be <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801173a:	1e5d      	subs	r5, r3, #1
 801173c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801173e:	fb06 0605 	mla	r6, r6, r5, r0
 8011742:	1436      	asrs	r6, r6, #16
 8011744:	d433      	bmi.n	80117ae <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8011746:	4566      	cmp	r6, ip
 8011748:	da31      	bge.n	80117ae <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801174a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801174c:	fb06 1505 	mla	r5, r6, r5, r1
 8011750:	142d      	asrs	r5, r5, #16
 8011752:	d42c      	bmi.n	80117ae <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8011754:	42bd      	cmp	r5, r7
 8011756:	da2a      	bge.n	80117ae <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8011758:	1d25      	adds	r5, r4, #4
 801175a:	469a      	mov	sl, r3
 801175c:	f1ba 0f00 	cmp.w	sl, #0
 8011760:	dd29      	ble.n	80117b6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8011762:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8011764:	140e      	asrs	r6, r1, #16
 8011766:	2aff      	cmp	r2, #255	; 0xff
 8011768:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801176c:	ea4f 4720 	mov.w	r7, r0, asr #16
 8011770:	fb0c 7606 	mla	r6, ip, r6, r7
 8011774:	9f01      	ldr	r7, [sp, #4]
 8011776:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801177a:	4437      	add	r7, r6
 801177c:	f897 e002 	ldrb.w	lr, [r7, #2]
 8011780:	f897 8001 	ldrb.w	r8, [r7, #1]
 8011784:	9f01      	ldr	r7, [sp, #4]
 8011786:	f817 9006 	ldrb.w	r9, [r7, r6]
 801178a:	f040 80bb 	bne.w	8011904 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 801178e:	f805 9c04 	strb.w	r9, [r5, #-4]
 8011792:	f805 8c03 	strb.w	r8, [r5, #-3]
 8011796:	f805 ec02 	strb.w	lr, [r5, #-2]
 801179a:	f805 2c01 	strb.w	r2, [r5, #-1]
 801179e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80117a0:	3504      	adds	r5, #4
 80117a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117a6:	4430      	add	r0, r6
 80117a8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80117aa:	4431      	add	r1, r6
 80117ac:	e7d6      	b.n	801175c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80117ae:	2500      	movs	r5, #0
 80117b0:	195e      	adds	r6, r3, r5
 80117b2:	2e00      	cmp	r6, #0
 80117b4:	dc3f      	bgt.n	8011836 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80117b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80117ba:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80117be:	9b02      	ldr	r3, [sp, #8]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f340 80d4 	ble.w	801196e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80117c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80117ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80117d0:	eeb0 6a62 	vmov.f32	s12, s5
 80117d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80117d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80117dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80117e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80117e4:	eeb0 6a43 	vmov.f32	s12, s6
 80117e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80117ec:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80117f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80117f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80117f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80117fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011800:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011804:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011808:	ee12 1a90 	vmov	r1, s5
 801180c:	eef0 2a47 	vmov.f32	s5, s14
 8011810:	fb91 f3f3 	sdiv	r3, r1, r3
 8011814:	ee13 1a10 	vmov	r1, s6
 8011818:	9311      	str	r3, [sp, #68]	; 0x44
 801181a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801181c:	eeb0 3a67 	vmov.f32	s6, s15
 8011820:	fb91 f3f3 	sdiv	r3, r1, r3
 8011824:	9312      	str	r3, [sp, #72]	; 0x48
 8011826:	9b02      	ldr	r3, [sp, #8]
 8011828:	9903      	ldr	r1, [sp, #12]
 801182a:	3b01      	subs	r3, #1
 801182c:	9302      	str	r3, [sp, #8]
 801182e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011830:	bf08      	it	eq
 8011832:	460b      	moveq	r3, r1
 8011834:	e75d      	b.n	80116f2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8011836:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801183a:	d424      	bmi.n	8011886 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801183c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801183e:	68b7      	ldr	r7, [r6, #8]
 8011840:	4567      	cmp	r7, ip
 8011842:	dd20      	ble.n	8011886 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8011844:	ea5f 4e21 	movs.w	lr, r1, asr #16
 8011848:	d41d      	bmi.n	8011886 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801184a:	68f6      	ldr	r6, [r6, #12]
 801184c:	4576      	cmp	r6, lr
 801184e:	dd1a      	ble.n	8011886 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8011850:	b23f      	sxth	r7, r7
 8011852:	9e01      	ldr	r6, [sp, #4]
 8011854:	2aff      	cmp	r2, #255	; 0xff
 8011856:	fb0e cc07 	mla	ip, lr, r7, ip
 801185a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801185e:	4466      	add	r6, ip
 8011860:	f896 8002 	ldrb.w	r8, [r6, #2]
 8011864:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011868:	9e01      	ldr	r6, [sp, #4]
 801186a:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801186e:	d110      	bne.n	8011892 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8011870:	f06f 0603 	mvn.w	r6, #3
 8011874:	436e      	muls	r6, r5
 8011876:	f804 a006 	strb.w	sl, [r4, r6]
 801187a:	4426      	add	r6, r4
 801187c:	f886 9001 	strb.w	r9, [r6, #1]
 8011880:	f886 8002 	strb.w	r8, [r6, #2]
 8011884:	70f2      	strb	r2, [r6, #3]
 8011886:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011888:	3d01      	subs	r5, #1
 801188a:	4430      	add	r0, r6
 801188c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801188e:	4431      	add	r1, r6
 8011890:	e78e      	b.n	80117b0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 8011892:	2a00      	cmp	r2, #0
 8011894:	d0f7      	beq.n	8011886 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8011896:	fb1a fa02 	smulbb	sl, sl, r2
 801189a:	f06f 0603 	mvn.w	r6, #3
 801189e:	fb12 f909 	smulbb	r9, r2, r9
 80118a2:	fb12 f808 	smulbb	r8, r2, r8
 80118a6:	fb06 fb05 	mul.w	fp, r6, r5
 80118aa:	eb04 0c0b 	add.w	ip, r4, fp
 80118ae:	f89c 7003 	ldrb.w	r7, [ip, #3]
 80118b2:	fb02 f607 	mul.w	r6, r2, r7
 80118b6:	f106 0e01 	add.w	lr, r6, #1
 80118ba:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 80118be:	19d6      	adds	r6, r2, r7
 80118c0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80118c4:	eba7 070e 	sub.w	r7, r7, lr
 80118c8:	eba6 060e 	sub.w	r6, r6, lr
 80118cc:	f814 e00b 	ldrb.w	lr, [r4, fp]
 80118d0:	b2f6      	uxtb	r6, r6
 80118d2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80118d6:	fb9a faf6 	sdiv	sl, sl, r6
 80118da:	f804 a00b 	strb.w	sl, [r4, fp]
 80118de:	f89c e001 	ldrb.w	lr, [ip, #1]
 80118e2:	f88c 6003 	strb.w	r6, [ip, #3]
 80118e6:	fb07 990e 	mla	r9, r7, lr, r9
 80118ea:	f89c e002 	ldrb.w	lr, [ip, #2]
 80118ee:	fb07 880e 	mla	r8, r7, lr, r8
 80118f2:	fb99 f9f6 	sdiv	r9, r9, r6
 80118f6:	fb98 f8f6 	sdiv	r8, r8, r6
 80118fa:	f88c 9001 	strb.w	r9, [ip, #1]
 80118fe:	f88c 8002 	strb.w	r8, [ip, #2]
 8011902:	e7c0      	b.n	8011886 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8011904:	2a00      	cmp	r2, #0
 8011906:	f43f af4a 	beq.w	801179e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801190a:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801190e:	fb19 f902 	smulbb	r9, r9, r2
 8011912:	fb12 f808 	smulbb	r8, r2, r8
 8011916:	fb02 fc0b 	mul.w	ip, r2, fp
 801191a:	eb02 060b 	add.w	r6, r2, fp
 801191e:	fb12 fe0e 	smulbb	lr, r2, lr
 8011922:	f10c 0701 	add.w	r7, ip, #1
 8011926:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801192a:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801192e:	ebab 070c 	sub.w	r7, fp, ip
 8011932:	eba6 060c 	sub.w	r6, r6, ip
 8011936:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801193a:	b2f6      	uxtb	r6, r6
 801193c:	fb07 990c 	mla	r9, r7, ip, r9
 8011940:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 8011944:	f805 6c01 	strb.w	r6, [r5, #-1]
 8011948:	fb07 880c 	mla	r8, r7, ip, r8
 801194c:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 8011950:	fb07 ee0c 	mla	lr, r7, ip, lr
 8011954:	fb99 f9f6 	sdiv	r9, r9, r6
 8011958:	fb98 f8f6 	sdiv	r8, r8, r6
 801195c:	fb9e fef6 	sdiv	lr, lr, r6
 8011960:	f805 9c04 	strb.w	r9, [r5, #-4]
 8011964:	f805 8c03 	strb.w	r8, [r5, #-3]
 8011968:	f805 ec02 	strb.w	lr, [r5, #-2]
 801196c:	e717      	b.n	801179e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801196e:	b005      	add	sp, #20
 8011970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011974 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011978:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801197a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801197e:	9201      	str	r2, [sp, #4]
 8011980:	6868      	ldr	r0, [r5, #4]
 8011982:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011984:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8011988:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801198c:	fb00 2404 	mla	r4, r0, r4, r2
 8011990:	682a      	ldr	r2, [r5, #0]
 8011992:	f8d7 8000 	ldr.w	r8, [r7]
 8011996:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801199a:	2900      	cmp	r1, #0
 801199c:	dc03      	bgt.n	80119a6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801199e:	9a01      	ldr	r2, [sp, #4]
 80119a0:	2a00      	cmp	r2, #0
 80119a2:	f340 80af 	ble.w	8011b04 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80119a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80119a8:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80119ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80119b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119b2:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80119b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	dd0c      	ble.n	80119d8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80119be:	1405      	asrs	r5, r0, #16
 80119c0:	d405      	bmi.n	80119ce <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80119c2:	4555      	cmp	r5, sl
 80119c4:	da03      	bge.n	80119ce <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80119c6:	1415      	asrs	r5, r2, #16
 80119c8:	d401      	bmi.n	80119ce <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80119ca:	454d      	cmp	r5, r9
 80119cc:	db05      	blt.n	80119da <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80119ce:	4470      	add	r0, lr
 80119d0:	4462      	add	r2, ip
 80119d2:	3b01      	subs	r3, #1
 80119d4:	3404      	adds	r4, #4
 80119d6:	e7f0      	b.n	80119ba <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80119d8:	d037      	beq.n	8011a4a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 80119da:	1e5d      	subs	r5, r3, #1
 80119dc:	fb0e 0605 	mla	r6, lr, r5, r0
 80119e0:	1436      	asrs	r6, r6, #16
 80119e2:	d42a      	bmi.n	8011a3a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80119e4:	4556      	cmp	r6, sl
 80119e6:	da28      	bge.n	8011a3a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80119e8:	fb0c 2505 	mla	r5, ip, r5, r2
 80119ec:	142d      	asrs	r5, r5, #16
 80119ee:	d424      	bmi.n	8011a3a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80119f0:	454d      	cmp	r5, r9
 80119f2:	da22      	bge.n	8011a3a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80119f4:	1d26      	adds	r6, r4, #4
 80119f6:	4699      	mov	r9, r3
 80119f8:	f1b9 0f00 	cmp.w	r9, #0
 80119fc:	f106 0604 	add.w	r6, r6, #4
 8011a00:	dd1f      	ble.n	8011a42 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 8011a02:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8011a06:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8011a0a:	1415      	asrs	r5, r2, #16
 8011a0c:	4470      	add	r0, lr
 8011a0e:	4462      	add	r2, ip
 8011a10:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a14:	fb0b a505 	mla	r5, fp, r5, sl
 8011a18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a1c:	eb08 0a05 	add.w	sl, r8, r5
 8011a20:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011a24:	f806 5c08 	strb.w	r5, [r6, #-8]
 8011a28:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8011a2c:	f806 5c07 	strb.w	r5, [r6, #-7]
 8011a30:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8011a34:	f806 5c06 	strb.w	r5, [r6, #-6]
 8011a38:	e7de      	b.n	80119f8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8011a3a:	2600      	movs	r6, #0
 8011a3c:	199d      	adds	r5, r3, r6
 8011a3e:	2d00      	cmp	r5, #0
 8011a40:	dc37      	bgt.n	8011ab2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8011a42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011a46:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8011a4a:	2900      	cmp	r1, #0
 8011a4c:	dd5a      	ble.n	8011b04 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8011a4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011a58:	3901      	subs	r1, #1
 8011a5a:	eeb0 6a62 	vmov.f32	s12, s5
 8011a5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011a62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011a66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011a6a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8011a6e:	eeb0 6a43 	vmov.f32	s12, s6
 8011a72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011a76:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011a7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011a7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011a82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011a86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011a8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011a8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011a92:	ee12 2a90 	vmov	r2, s5
 8011a96:	eef0 2a47 	vmov.f32	s5, s14
 8011a9a:	fb92 fef3 	sdiv	lr, r2, r3
 8011a9e:	ee13 2a10 	vmov	r2, s6
 8011aa2:	eeb0 3a67 	vmov.f32	s6, s15
 8011aa6:	fb92 fcf3 	sdiv	ip, r2, r3
 8011aaa:	9a01      	ldr	r2, [sp, #4]
 8011aac:	bf08      	it	eq
 8011aae:	4613      	moveq	r3, r2
 8011ab0:	e773      	b.n	801199a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 8011ab2:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011ab6:	d421      	bmi.n	8011afc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8011ab8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8011abc:	45cb      	cmp	fp, r9
 8011abe:	dd1d      	ble.n	8011afc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8011ac0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8011ac4:	d41a      	bmi.n	8011afc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8011ac6:	68fd      	ldr	r5, [r7, #12]
 8011ac8:	4555      	cmp	r5, sl
 8011aca:	dd17      	ble.n	8011afc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8011acc:	fa0f f58b 	sxth.w	r5, fp
 8011ad0:	fb0a 9505 	mla	r5, sl, r5, r9
 8011ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ad8:	f818 9005 	ldrb.w	r9, [r8, r5]
 8011adc:	eb08 0b05 	add.w	fp, r8, r5
 8011ae0:	f06f 0503 	mvn.w	r5, #3
 8011ae4:	4375      	muls	r5, r6
 8011ae6:	f804 9005 	strb.w	r9, [r4, r5]
 8011aea:	4425      	add	r5, r4
 8011aec:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8011af0:	f885 9001 	strb.w	r9, [r5, #1]
 8011af4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8011af8:	f885 9002 	strb.w	r9, [r5, #2]
 8011afc:	4470      	add	r0, lr
 8011afe:	4462      	add	r2, ip
 8011b00:	3e01      	subs	r6, #1
 8011b02:	e79b      	b.n	8011a3c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8011b04:	b003      	add	sp, #12
 8011b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b0a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0e:	b087      	sub	sp, #28
 8011b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b14:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011b16:	9203      	str	r2, [sp, #12]
 8011b18:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011b1c:	9100      	str	r1, [sp, #0]
 8011b1e:	9204      	str	r2, [sp, #16]
 8011b20:	6861      	ldr	r1, [r4, #4]
 8011b22:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8011b26:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8011b2a:	fb01 2000 	mla	r0, r1, r0, r2
 8011b2e:	6822      	ldr	r2, [r4, #0]
 8011b30:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8011b34:	f8db 2000 	ldr.w	r2, [fp]
 8011b38:	9201      	str	r2, [sp, #4]
 8011b3a:	9a00      	ldr	r2, [sp, #0]
 8011b3c:	2a00      	cmp	r2, #0
 8011b3e:	dc03      	bgt.n	8011b48 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8011b40:	9a03      	ldr	r2, [sp, #12]
 8011b42:	2a00      	cmp	r2, #0
 8011b44:	f340 8147 	ble.w	8011dd6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8011b48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011b4a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8011b4e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8011b52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b54:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8011b58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	dd0e      	ble.n	8011b7e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8011b60:	140c      	asrs	r4, r1, #16
 8011b62:	d405      	bmi.n	8011b70 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8011b64:	42bc      	cmp	r4, r7
 8011b66:	da03      	bge.n	8011b70 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8011b68:	1414      	asrs	r4, r2, #16
 8011b6a:	d401      	bmi.n	8011b70 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8011b6c:	42b4      	cmp	r4, r6
 8011b6e:	db07      	blt.n	8011b80 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8011b70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011b72:	3b01      	subs	r3, #1
 8011b74:	3004      	adds	r0, #4
 8011b76:	4421      	add	r1, r4
 8011b78:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8011b7a:	4422      	add	r2, r4
 8011b7c:	e7ee      	b.n	8011b5c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8011b7e:	d048      	beq.n	8011c12 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8011b80:	1e5c      	subs	r4, r3, #1
 8011b82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011b84:	fb05 1504 	mla	r5, r5, r4, r1
 8011b88:	142d      	asrs	r5, r5, #16
 8011b8a:	d438      	bmi.n	8011bfe <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8011b8c:	42bd      	cmp	r5, r7
 8011b8e:	da36      	bge.n	8011bfe <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8011b90:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011b92:	fb05 2404 	mla	r4, r5, r4, r2
 8011b96:	1424      	asrs	r4, r4, #16
 8011b98:	d431      	bmi.n	8011bfe <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8011b9a:	42b4      	cmp	r4, r6
 8011b9c:	da2f      	bge.n	8011bfe <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8011b9e:	469e      	mov	lr, r3
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	f1be 0f00 	cmp.w	lr, #0
 8011ba6:	dd30      	ble.n	8011c0a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8011ba8:	140e      	asrs	r6, r1, #16
 8011baa:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8011bae:	1415      	asrs	r5, r2, #16
 8011bb0:	fb07 6505 	mla	r5, r7, r5, r6
 8011bb4:	9e01      	ldr	r6, [sp, #4]
 8011bb6:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8011bba:	0e35      	lsrs	r5, r6, #24
 8011bbc:	d017      	beq.n	8011bee <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8011bbe:	9f04      	ldr	r7, [sp, #16]
 8011bc0:	f3c6 4907 	ubfx	r9, r6, #16, #8
 8011bc4:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8011bc8:	437d      	muls	r5, r7
 8011bca:	fa5f f88c 	uxtb.w	r8, ip
 8011bce:	1c6f      	adds	r7, r5, #1
 8011bd0:	eb07 2525 	add.w	r5, r7, r5, asr #8
 8011bd4:	fa5f f789 	uxtb.w	r7, r9
 8011bd8:	122d      	asrs	r5, r5, #8
 8011bda:	9702      	str	r7, [sp, #8]
 8011bdc:	2dff      	cmp	r5, #255	; 0xff
 8011bde:	f040 80c7 	bne.w	8011d70 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8011be2:	7026      	strb	r6, [r4, #0]
 8011be4:	f884 c001 	strb.w	ip, [r4, #1]
 8011be8:	f884 9002 	strb.w	r9, [r4, #2]
 8011bec:	70e5      	strb	r5, [r4, #3]
 8011bee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011bf0:	3404      	adds	r4, #4
 8011bf2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011bf6:	4429      	add	r1, r5
 8011bf8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011bfa:	442a      	add	r2, r5
 8011bfc:	e7d1      	b.n	8011ba2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8011bfe:	f04f 0c00 	mov.w	ip, #0
 8011c02:	eb03 040c 	add.w	r4, r3, ip
 8011c06:	2c00      	cmp	r4, #0
 8011c08:	dc3f      	bgt.n	8011c8a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 8011c0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c0e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011c12:	9b00      	ldr	r3, [sp, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f340 80de 	ble.w	8011dd6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8011c1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011c24:	eeb0 6a62 	vmov.f32	s12, s5
 8011c28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011c2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011c30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011c34:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8011c38:	eeb0 6a43 	vmov.f32	s12, s6
 8011c3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011c40:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8011c44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011c48:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011c4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011c50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011c54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011c58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011c5c:	ee12 2a90 	vmov	r2, s5
 8011c60:	eef0 2a47 	vmov.f32	s5, s14
 8011c64:	fb92 f3f3 	sdiv	r3, r2, r3
 8011c68:	ee13 2a10 	vmov	r2, s6
 8011c6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8011c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c70:	eeb0 3a67 	vmov.f32	s6, s15
 8011c74:	fb92 f3f3 	sdiv	r3, r2, r3
 8011c78:	9314      	str	r3, [sp, #80]	; 0x50
 8011c7a:	9b00      	ldr	r3, [sp, #0]
 8011c7c:	9a03      	ldr	r2, [sp, #12]
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c84:	bf08      	it	eq
 8011c86:	4613      	moveq	r3, r2
 8011c88:	e757      	b.n	8011b3a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8011c8a:	140e      	asrs	r6, r1, #16
 8011c8c:	d42e      	bmi.n	8011cec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8011c8e:	f8db 5008 	ldr.w	r5, [fp, #8]
 8011c92:	42b5      	cmp	r5, r6
 8011c94:	dd2a      	ble.n	8011cec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8011c96:	1417      	asrs	r7, r2, #16
 8011c98:	d428      	bmi.n	8011cec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8011c9a:	f8db 400c 	ldr.w	r4, [fp, #12]
 8011c9e:	42bc      	cmp	r4, r7
 8011ca0:	dd24      	ble.n	8011cec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8011ca2:	b22d      	sxth	r5, r5
 8011ca4:	9c01      	ldr	r4, [sp, #4]
 8011ca6:	fb07 6505 	mla	r5, r7, r5, r6
 8011caa:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8011cae:	0e2c      	lsrs	r4, r5, #24
 8011cb0:	d01c      	beq.n	8011cec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8011cb2:	9e04      	ldr	r6, [sp, #16]
 8011cb4:	4374      	muls	r4, r6
 8011cb6:	1c66      	adds	r6, r4, #1
 8011cb8:	eb06 2424 	add.w	r4, r6, r4, asr #8
 8011cbc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8011cc0:	1224      	asrs	r4, r4, #8
 8011cc2:	b2f7      	uxtb	r7, r6
 8011cc4:	2cff      	cmp	r4, #255	; 0xff
 8011cc6:	9705      	str	r7, [sp, #20]
 8011cc8:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8011ccc:	fa5f f887 	uxtb.w	r8, r7
 8011cd0:	d113      	bne.n	8011cfa <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8011cd2:	f06f 0e03 	mvn.w	lr, #3
 8011cd6:	fb0e fe0c 	mul.w	lr, lr, ip
 8011cda:	f800 500e 	strb.w	r5, [r0, lr]
 8011cde:	4486      	add	lr, r0
 8011ce0:	f88e 7001 	strb.w	r7, [lr, #1]
 8011ce4:	f88e 6002 	strb.w	r6, [lr, #2]
 8011ce8:	f88e 4003 	strb.w	r4, [lr, #3]
 8011cec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011cee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011cf2:	4421      	add	r1, r4
 8011cf4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8011cf6:	4422      	add	r2, r4
 8011cf8:	e783      	b.n	8011c02 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 8011cfa:	b2e6      	uxtb	r6, r4
 8011cfc:	9602      	str	r6, [sp, #8]
 8011cfe:	2c00      	cmp	r4, #0
 8011d00:	d0f4      	beq.n	8011cec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8011d02:	f06f 0603 	mvn.w	r6, #3
 8011d06:	b2ed      	uxtb	r5, r5
 8011d08:	fb04 f808 	mul.w	r8, r4, r8
 8011d0c:	fb06 f90c 	mul.w	r9, r6, ip
 8011d10:	9e02      	ldr	r6, [sp, #8]
 8011d12:	eb00 0e09 	add.w	lr, r0, r9
 8011d16:	f89e a003 	ldrb.w	sl, [lr, #3]
 8011d1a:	fb06 f70a 	mul.w	r7, r6, sl
 8011d1e:	1c7e      	adds	r6, r7, #1
 8011d20:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 8011d24:	9e02      	ldr	r6, [sp, #8]
 8011d26:	123f      	asrs	r7, r7, #8
 8011d28:	4456      	add	r6, sl
 8011d2a:	1bf6      	subs	r6, r6, r7
 8011d2c:	ebaa 0707 	sub.w	r7, sl, r7
 8011d30:	f810 a009 	ldrb.w	sl, [r0, r9]
 8011d34:	b2f6      	uxtb	r6, r6
 8011d36:	fb07 fa0a 	mul.w	sl, r7, sl
 8011d3a:	fb04 a505 	mla	r5, r4, r5, sl
 8011d3e:	fb95 f5f6 	sdiv	r5, r5, r6
 8011d42:	f800 5009 	strb.w	r5, [r0, r9]
 8011d46:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8011d4a:	f89e a002 	ldrb.w	sl, [lr, #2]
 8011d4e:	fb07 8805 	mla	r8, r7, r5, r8
 8011d52:	9d05      	ldr	r5, [sp, #20]
 8011d54:	f88e 6003 	strb.w	r6, [lr, #3]
 8011d58:	436c      	muls	r4, r5
 8011d5a:	fb07 470a 	mla	r7, r7, sl, r4
 8011d5e:	fb98 f8f6 	sdiv	r8, r8, r6
 8011d62:	fb97 f7f6 	sdiv	r7, r7, r6
 8011d66:	f88e 8001 	strb.w	r8, [lr, #1]
 8011d6a:	f88e 7002 	strb.w	r7, [lr, #2]
 8011d6e:	e7bd      	b.n	8011cec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8011d70:	b2ef      	uxtb	r7, r5
 8011d72:	2d00      	cmp	r5, #0
 8011d74:	f43f af3b 	beq.w	8011bee <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8011d78:	f894 9003 	ldrb.w	r9, [r4, #3]
 8011d7c:	b2f6      	uxtb	r6, r6
 8011d7e:	fb05 f808 	mul.w	r8, r5, r8
 8011d82:	fb07 fa09 	mul.w	sl, r7, r9
 8011d86:	444f      	add	r7, r9
 8011d88:	f10a 0c01 	add.w	ip, sl, #1
 8011d8c:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8011d90:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8011d94:	eba7 070c 	sub.w	r7, r7, ip
 8011d98:	eba9 0c0c 	sub.w	ip, r9, ip
 8011d9c:	f894 9000 	ldrb.w	r9, [r4]
 8011da0:	b2ff      	uxtb	r7, r7
 8011da2:	fb0c f909 	mul.w	r9, ip, r9
 8011da6:	70e7      	strb	r7, [r4, #3]
 8011da8:	fb05 9606 	mla	r6, r5, r6, r9
 8011dac:	f894 9002 	ldrb.w	r9, [r4, #2]
 8011db0:	fb96 f6f7 	sdiv	r6, r6, r7
 8011db4:	7026      	strb	r6, [r4, #0]
 8011db6:	7866      	ldrb	r6, [r4, #1]
 8011db8:	fb0c 8806 	mla	r8, ip, r6, r8
 8011dbc:	9e02      	ldr	r6, [sp, #8]
 8011dbe:	4375      	muls	r5, r6
 8011dc0:	fb0c 5c09 	mla	ip, ip, r9, r5
 8011dc4:	fb98 f8f7 	sdiv	r8, r8, r7
 8011dc8:	fb9c fcf7 	sdiv	ip, ip, r7
 8011dcc:	f884 8001 	strb.w	r8, [r4, #1]
 8011dd0:	f884 c002 	strb.w	ip, [r4, #2]
 8011dd4:	e70b      	b.n	8011bee <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8011dd6:	b007      	add	sp, #28
 8011dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ddc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de0:	b089      	sub	sp, #36	; 0x24
 8011de2:	469a      	mov	sl, r3
 8011de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011de8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011dea:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8011dee:	9102      	str	r1, [sp, #8]
 8011df0:	9206      	str	r2, [sp, #24]
 8011df2:	9307      	str	r3, [sp, #28]
 8011df4:	6842      	ldr	r2, [r0, #4]
 8011df6:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8011dfa:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 8011dfe:	fb02 3101 	mla	r1, r2, r1, r3
 8011e02:	6803      	ldr	r3, [r0, #0]
 8011e04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8011e08:	f8db 3008 	ldr.w	r3, [fp, #8]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	f023 0301 	bic.w	r3, r3, #1
 8011e12:	9303      	str	r3, [sp, #12]
 8011e14:	f8db 3000 	ldr.w	r3, [fp]
 8011e18:	9304      	str	r3, [sp, #16]
 8011e1a:	9b02      	ldr	r3, [sp, #8]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	dc03      	bgt.n	8011e28 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8011e20:	9b06      	ldr	r3, [sp, #24]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	f340 8154 	ble.w	80120d0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8011e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011e2a:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 8011e2e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8011e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e34:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 8011e38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e3c:	9301      	str	r3, [sp, #4]
 8011e3e:	f1ba 0f00 	cmp.w	sl, #0
 8011e42:	dd12      	ble.n	8011e6a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8011e44:	1410      	asrs	r0, r2, #16
 8011e46:	d406      	bmi.n	8011e56 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8011e48:	42b0      	cmp	r0, r6
 8011e4a:	da04      	bge.n	8011e56 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8011e4c:	9b01      	ldr	r3, [sp, #4]
 8011e4e:	1418      	asrs	r0, r3, #16
 8011e50:	d401      	bmi.n	8011e56 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8011e52:	42a8      	cmp	r0, r5
 8011e54:	db0a      	blt.n	8011e6c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8011e56:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011e58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e5c:	9b01      	ldr	r3, [sp, #4]
 8011e5e:	3104      	adds	r1, #4
 8011e60:	4402      	add	r2, r0
 8011e62:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011e64:	4403      	add	r3, r0
 8011e66:	9301      	str	r3, [sp, #4]
 8011e68:	e7e9      	b.n	8011e3e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8011e6a:	d050      	beq.n	8011f0e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8011e6c:	f10a 30ff 	add.w	r0, sl, #4294967295
 8011e70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011e72:	fb04 2400 	mla	r4, r4, r0, r2
 8011e76:	1424      	asrs	r4, r4, #16
 8011e78:	d440      	bmi.n	8011efc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8011e7a:	42b4      	cmp	r4, r6
 8011e7c:	da3e      	bge.n	8011efc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8011e7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8011e80:	9b01      	ldr	r3, [sp, #4]
 8011e82:	fb04 3000 	mla	r0, r4, r0, r3
 8011e86:	1400      	asrs	r0, r0, #16
 8011e88:	d438      	bmi.n	8011efc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8011e8a:	42a8      	cmp	r0, r5
 8011e8c:	da36      	bge.n	8011efc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8011e8e:	1d08      	adds	r0, r1, #4
 8011e90:	46d6      	mov	lr, sl
 8011e92:	f1be 0f00 	cmp.w	lr, #0
 8011e96:	dd36      	ble.n	8011f06 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8011e98:	9b01      	ldr	r3, [sp, #4]
 8011e9a:	1414      	asrs	r4, r2, #16
 8011e9c:	141d      	asrs	r5, r3, #16
 8011e9e:	9b03      	ldr	r3, [sp, #12]
 8011ea0:	fb03 4505 	mla	r5, r3, r5, r4
 8011ea4:	9b04      	ldr	r3, [sp, #16]
 8011ea6:	086c      	lsrs	r4, r5, #1
 8011ea8:	5d1c      	ldrb	r4, [r3, r4]
 8011eaa:	07eb      	lsls	r3, r5, #31
 8011eac:	9b07      	ldr	r3, [sp, #28]
 8011eae:	bf54      	ite	pl
 8011eb0:	f004 040f 	andpl.w	r4, r4, #15
 8011eb4:	1124      	asrmi	r4, r4, #4
 8011eb6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8011eba:	b2e4      	uxtb	r4, r4
 8011ebc:	435c      	muls	r4, r3
 8011ebe:	1c65      	adds	r5, r4, #1
 8011ec0:	eb05 2424 	add.w	r4, r5, r4, asr #8
 8011ec4:	4d84      	ldr	r5, [pc, #528]	; (80120d8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8011ec6:	1224      	asrs	r4, r4, #8
 8011ec8:	f895 9002 	ldrb.w	r9, [r5, #2]
 8011ecc:	786f      	ldrb	r7, [r5, #1]
 8011ece:	2cff      	cmp	r4, #255	; 0xff
 8011ed0:	f895 c000 	ldrb.w	ip, [r5]
 8011ed4:	f040 80cb 	bne.w	801206e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8011ed8:	f800 cc04 	strb.w	ip, [r0, #-4]
 8011edc:	f800 7c03 	strb.w	r7, [r0, #-3]
 8011ee0:	f800 9c02 	strb.w	r9, [r0, #-2]
 8011ee4:	f800 4c01 	strb.w	r4, [r0, #-1]
 8011ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011eea:	3004      	adds	r0, #4
 8011eec:	9c01      	ldr	r4, [sp, #4]
 8011eee:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011ef2:	441a      	add	r2, r3
 8011ef4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ef6:	441c      	add	r4, r3
 8011ef8:	9401      	str	r4, [sp, #4]
 8011efa:	e7ca      	b.n	8011e92 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8011efc:	2600      	movs	r6, #0
 8011efe:	eb0a 0006 	add.w	r0, sl, r6
 8011f02:	2800      	cmp	r0, #0
 8011f04:	dc41      	bgt.n	8011f8a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8011f06:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8011f0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011f0e:	9b02      	ldr	r3, [sp, #8]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f340 80dd 	ble.w	80120d0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8011f16:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011f1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011f20:	eeb0 6a62 	vmov.f32	s12, s5
 8011f24:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011f28:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011f2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011f30:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8011f34:	eeb0 6a43 	vmov.f32	s12, s6
 8011f38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011f3c:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8011f40:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011f44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011f48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011f4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011f50:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011f54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011f58:	ee12 2a90 	vmov	r2, s5
 8011f5c:	eef0 2a47 	vmov.f32	s5, s14
 8011f60:	fb92 f3f3 	sdiv	r3, r2, r3
 8011f64:	ee13 2a10 	vmov	r2, s6
 8011f68:	9315      	str	r3, [sp, #84]	; 0x54
 8011f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f6c:	eeb0 3a67 	vmov.f32	s6, s15
 8011f70:	fb92 f3f3 	sdiv	r3, r2, r3
 8011f74:	9316      	str	r3, [sp, #88]	; 0x58
 8011f76:	9b02      	ldr	r3, [sp, #8]
 8011f78:	9a06      	ldr	r2, [sp, #24]
 8011f7a:	3b01      	subs	r3, #1
 8011f7c:	9302      	str	r3, [sp, #8]
 8011f7e:	bf08      	it	eq
 8011f80:	4692      	moveq	sl, r2
 8011f82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f84:	bf18      	it	ne
 8011f86:	469a      	movne	sl, r3
 8011f88:	e747      	b.n	8011e1a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8011f8a:	1414      	asrs	r4, r2, #16
 8011f8c:	d432      	bmi.n	8011ff4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8011f8e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8011f92:	42a0      	cmp	r0, r4
 8011f94:	dd2e      	ble.n	8011ff4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8011f96:	9b01      	ldr	r3, [sp, #4]
 8011f98:	141d      	asrs	r5, r3, #16
 8011f9a:	d42b      	bmi.n	8011ff4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8011f9c:	f8db 000c 	ldr.w	r0, [fp, #12]
 8011fa0:	42a8      	cmp	r0, r5
 8011fa2:	dd27      	ble.n	8011ff4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8011fa4:	9803      	ldr	r0, [sp, #12]
 8011fa6:	fb05 4400 	mla	r4, r5, r0, r4
 8011faa:	9d04      	ldr	r5, [sp, #16]
 8011fac:	0860      	lsrs	r0, r4, #1
 8011fae:	07e4      	lsls	r4, r4, #31
 8011fb0:	9c07      	ldr	r4, [sp, #28]
 8011fb2:	5c28      	ldrb	r0, [r5, r0]
 8011fb4:	bf54      	ite	pl
 8011fb6:	f000 000f 	andpl.w	r0, r0, #15
 8011fba:	1100      	asrmi	r0, r0, #4
 8011fbc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8011fc0:	b2c0      	uxtb	r0, r0
 8011fc2:	4360      	muls	r0, r4
 8011fc4:	1c44      	adds	r4, r0, #1
 8011fc6:	eb04 2020 	add.w	r0, r4, r0, asr #8
 8011fca:	4c43      	ldr	r4, [pc, #268]	; (80120d8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8011fcc:	1200      	asrs	r0, r0, #8
 8011fce:	78a5      	ldrb	r5, [r4, #2]
 8011fd0:	f894 c001 	ldrb.w	ip, [r4, #1]
 8011fd4:	28ff      	cmp	r0, #255	; 0xff
 8011fd6:	9505      	str	r5, [sp, #20]
 8011fd8:	f894 e000 	ldrb.w	lr, [r4]
 8011fdc:	d112      	bne.n	8012004 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8011fde:	f06f 0303 	mvn.w	r3, #3
 8011fe2:	fb03 f406 	mul.w	r4, r3, r6
 8011fe6:	f801 e004 	strb.w	lr, [r1, r4]
 8011fea:	440c      	add	r4, r1
 8011fec:	f884 c001 	strb.w	ip, [r4, #1]
 8011ff0:	70a5      	strb	r5, [r4, #2]
 8011ff2:	70e0      	strb	r0, [r4, #3]
 8011ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ff6:	3e01      	subs	r6, #1
 8011ff8:	9801      	ldr	r0, [sp, #4]
 8011ffa:	441a      	add	r2, r3
 8011ffc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ffe:	4418      	add	r0, r3
 8012000:	9001      	str	r0, [sp, #4]
 8012002:	e77c      	b.n	8011efe <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8012004:	b2c4      	uxtb	r4, r0
 8012006:	2800      	cmp	r0, #0
 8012008:	d0f4      	beq.n	8011ff4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801200a:	f06f 0303 	mvn.w	r3, #3
 801200e:	fb00 fe0e 	mul.w	lr, r0, lr
 8012012:	fb00 fc0c 	mul.w	ip, r0, ip
 8012016:	fb03 f806 	mul.w	r8, r3, r6
 801201a:	eb01 0708 	add.w	r7, r1, r8
 801201e:	f897 9003 	ldrb.w	r9, [r7, #3]
 8012022:	fb04 f509 	mul.w	r5, r4, r9
 8012026:	444c      	add	r4, r9
 8012028:	1c6b      	adds	r3, r5, #1
 801202a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801202e:	9b05      	ldr	r3, [sp, #20]
 8012030:	122d      	asrs	r5, r5, #8
 8012032:	4358      	muls	r0, r3
 8012034:	1b64      	subs	r4, r4, r5
 8012036:	eba9 0505 	sub.w	r5, r9, r5
 801203a:	f811 9008 	ldrb.w	r9, [r1, r8]
 801203e:	b2e4      	uxtb	r4, r4
 8012040:	fb05 ee09 	mla	lr, r5, r9, lr
 8012044:	fb9e fef4 	sdiv	lr, lr, r4
 8012048:	f801 e008 	strb.w	lr, [r1, r8]
 801204c:	f897 e001 	ldrb.w	lr, [r7, #1]
 8012050:	f897 9002 	ldrb.w	r9, [r7, #2]
 8012054:	fb05 cc0e 	mla	ip, r5, lr, ip
 8012058:	fb05 0509 	mla	r5, r5, r9, r0
 801205c:	70fc      	strb	r4, [r7, #3]
 801205e:	fb9c fcf4 	sdiv	ip, ip, r4
 8012062:	fb95 f5f4 	sdiv	r5, r5, r4
 8012066:	f887 c001 	strb.w	ip, [r7, #1]
 801206a:	70bd      	strb	r5, [r7, #2]
 801206c:	e7c2      	b.n	8011ff4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801206e:	b2e5      	uxtb	r5, r4
 8012070:	2c00      	cmp	r4, #0
 8012072:	f43f af39 	beq.w	8011ee8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8012076:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801207a:	fb04 fc0c 	mul.w	ip, r4, ip
 801207e:	4367      	muls	r7, r4
 8012080:	fb05 f608 	mul.w	r6, r5, r8
 8012084:	4445      	add	r5, r8
 8012086:	fb04 f409 	mul.w	r4, r4, r9
 801208a:	1c73      	adds	r3, r6, #1
 801208c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8012090:	1236      	asrs	r6, r6, #8
 8012092:	1bad      	subs	r5, r5, r6
 8012094:	eba8 0606 	sub.w	r6, r8, r6
 8012098:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801209c:	b2ed      	uxtb	r5, r5
 801209e:	fb06 cc08 	mla	ip, r6, r8, ip
 80120a2:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 80120a6:	f800 5c01 	strb.w	r5, [r0, #-1]
 80120aa:	fb9c fcf5 	sdiv	ip, ip, r5
 80120ae:	f800 cc04 	strb.w	ip, [r0, #-4]
 80120b2:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80120b6:	fb06 770c 	mla	r7, r6, ip, r7
 80120ba:	fb06 4608 	mla	r6, r6, r8, r4
 80120be:	fb97 f7f5 	sdiv	r7, r7, r5
 80120c2:	fb96 f6f5 	sdiv	r6, r6, r5
 80120c6:	f800 7c03 	strb.w	r7, [r0, #-3]
 80120ca:	f800 6c02 	strb.w	r6, [r0, #-2]
 80120ce:	e70b      	b.n	8011ee8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80120d0:	b009      	add	sp, #36	; 0x24
 80120d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d6:	bf00      	nop
 80120d8:	2400fa2c 	.word	0x2400fa2c

080120dc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80120dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e0:	b089      	sub	sp, #36	; 0x24
 80120e2:	469a      	mov	sl, r3
 80120e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80120e8:	4cb8      	ldr	r4, [pc, #736]	; (80123cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 80120ea:	9102      	str	r1, [sp, #8]
 80120ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80120ee:	9205      	str	r2, [sp, #20]
 80120f0:	684a      	ldr	r2, [r1, #4]
 80120f2:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 80120f6:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	; 0x60
 80120fa:	fb02 3000 	mla	r0, r2, r0, r3
 80120fe:	680b      	ldr	r3, [r1, #0]
 8012100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012104:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012108:	3301      	adds	r3, #1
 801210a:	f023 0301 	bic.w	r3, r3, #1
 801210e:	9303      	str	r3, [sp, #12]
 8012110:	f8db 3000 	ldr.w	r3, [fp]
 8012114:	9304      	str	r3, [sp, #16]
 8012116:	9b02      	ldr	r3, [sp, #8]
 8012118:	2b00      	cmp	r3, #0
 801211a:	dc03      	bgt.n	8012124 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801211c:	9b05      	ldr	r3, [sp, #20]
 801211e:	2b00      	cmp	r3, #0
 8012120:	f340 8150 	ble.w	80123c4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8012124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012126:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801212a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 801212e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012130:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8012134:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012138:	9301      	str	r3, [sp, #4]
 801213a:	f1ba 0f00 	cmp.w	sl, #0
 801213e:	dd12      	ble.n	8012166 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8012140:	140b      	asrs	r3, r1, #16
 8012142:	d406      	bmi.n	8012152 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8012144:	42bb      	cmp	r3, r7
 8012146:	da04      	bge.n	8012152 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8012148:	9b01      	ldr	r3, [sp, #4]
 801214a:	141b      	asrs	r3, r3, #16
 801214c:	d401      	bmi.n	8012152 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801214e:	42b3      	cmp	r3, r6
 8012150:	db0a      	blt.n	8012168 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8012152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012154:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012158:	9a01      	ldr	r2, [sp, #4]
 801215a:	3004      	adds	r0, #4
 801215c:	4419      	add	r1, r3
 801215e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012160:	441a      	add	r2, r3
 8012162:	9201      	str	r2, [sp, #4]
 8012164:	e7e9      	b.n	801213a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8012166:	d046      	beq.n	80121f6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8012168:	f10a 33ff 	add.w	r3, sl, #4294967295
 801216c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801216e:	fb05 1503 	mla	r5, r5, r3, r1
 8012172:	142d      	asrs	r5, r5, #16
 8012174:	d436      	bmi.n	80121e4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8012176:	42bd      	cmp	r5, r7
 8012178:	da34      	bge.n	80121e4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801217a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801217c:	9a01      	ldr	r2, [sp, #4]
 801217e:	fb05 2303 	mla	r3, r5, r3, r2
 8012182:	141b      	asrs	r3, r3, #16
 8012184:	d42e      	bmi.n	80121e4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8012186:	42b3      	cmp	r3, r6
 8012188:	da2c      	bge.n	80121e4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801218a:	1d05      	adds	r5, r0, #4
 801218c:	46d0      	mov	r8, sl
 801218e:	f1b8 0f00 	cmp.w	r8, #0
 8012192:	dd2c      	ble.n	80121ee <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8012194:	9b01      	ldr	r3, [sp, #4]
 8012196:	9a03      	ldr	r2, [sp, #12]
 8012198:	141e      	asrs	r6, r3, #16
 801219a:	f894 e000 	ldrb.w	lr, [r4]
 801219e:	140b      	asrs	r3, r1, #16
 80121a0:	fb02 3606 	mla	r6, r2, r6, r3
 80121a4:	9a04      	ldr	r2, [sp, #16]
 80121a6:	0873      	lsrs	r3, r6, #1
 80121a8:	5cd3      	ldrb	r3, [r2, r3]
 80121aa:	07f2      	lsls	r2, r6, #31
 80121ac:	bf54      	ite	pl
 80121ae:	f003 030f 	andpl.w	r3, r3, #15
 80121b2:	111b      	asrmi	r3, r3, #4
 80121b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80121b8:	b2db      	uxtb	r3, r3
 80121ba:	2bff      	cmp	r3, #255	; 0xff
 80121bc:	f040 80c9 	bne.w	8012352 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80121c0:	f805 ec04 	strb.w	lr, [r5, #-4]
 80121c4:	7863      	ldrb	r3, [r4, #1]
 80121c6:	f805 3c03 	strb.w	r3, [r5, #-3]
 80121ca:	78a3      	ldrb	r3, [r4, #2]
 80121cc:	f805 3c02 	strb.w	r3, [r5, #-2]
 80121d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121d2:	3504      	adds	r5, #4
 80121d4:	9a01      	ldr	r2, [sp, #4]
 80121d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80121da:	4419      	add	r1, r3
 80121dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80121de:	441a      	add	r2, r3
 80121e0:	9201      	str	r2, [sp, #4]
 80121e2:	e7d4      	b.n	801218e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80121e4:	2500      	movs	r5, #0
 80121e6:	eb0a 0305 	add.w	r3, sl, r5
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	dc41      	bgt.n	8012272 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80121ee:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80121f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80121f6:	9b02      	ldr	r3, [sp, #8]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f340 80e3 	ble.w	80123c4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80121fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012202:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012204:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012208:	eeb0 6a62 	vmov.f32	s12, s5
 801220c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012210:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012214:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012218:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801221c:	eeb0 6a43 	vmov.f32	s12, s6
 8012220:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012224:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8012228:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801222c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012230:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012234:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012238:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801223c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012240:	ee12 2a90 	vmov	r2, s5
 8012244:	eef0 2a47 	vmov.f32	s5, s14
 8012248:	fb92 f3f3 	sdiv	r3, r2, r3
 801224c:	ee13 2a10 	vmov	r2, s6
 8012250:	9315      	str	r3, [sp, #84]	; 0x54
 8012252:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012254:	eeb0 3a67 	vmov.f32	s6, s15
 8012258:	fb92 f3f3 	sdiv	r3, r2, r3
 801225c:	9316      	str	r3, [sp, #88]	; 0x58
 801225e:	9b02      	ldr	r3, [sp, #8]
 8012260:	9a05      	ldr	r2, [sp, #20]
 8012262:	3b01      	subs	r3, #1
 8012264:	9302      	str	r3, [sp, #8]
 8012266:	bf08      	it	eq
 8012268:	4692      	moveq	sl, r2
 801226a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801226c:	bf18      	it	ne
 801226e:	469a      	movne	sl, r3
 8012270:	e751      	b.n	8012116 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8012272:	140e      	asrs	r6, r1, #16
 8012274:	d426      	bmi.n	80122c4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8012276:	f8db 3008 	ldr.w	r3, [fp, #8]
 801227a:	42b3      	cmp	r3, r6
 801227c:	dd22      	ble.n	80122c4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801227e:	9b01      	ldr	r3, [sp, #4]
 8012280:	141f      	asrs	r7, r3, #16
 8012282:	d41f      	bmi.n	80122c4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8012284:	f8db 300c 	ldr.w	r3, [fp, #12]
 8012288:	42bb      	cmp	r3, r7
 801228a:	dd1b      	ble.n	80122c4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801228c:	9b03      	ldr	r3, [sp, #12]
 801228e:	f894 8000 	ldrb.w	r8, [r4]
 8012292:	fb07 6603 	mla	r6, r7, r3, r6
 8012296:	9f04      	ldr	r7, [sp, #16]
 8012298:	0873      	lsrs	r3, r6, #1
 801229a:	07f6      	lsls	r6, r6, #31
 801229c:	5cfb      	ldrb	r3, [r7, r3]
 801229e:	bf54      	ite	pl
 80122a0:	f003 030f 	andpl.w	r3, r3, #15
 80122a4:	111b      	asrmi	r3, r3, #4
 80122a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2bff      	cmp	r3, #255	; 0xff
 80122ae:	d111      	bne.n	80122d4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80122b0:	f06f 0303 	mvn.w	r3, #3
 80122b4:	436b      	muls	r3, r5
 80122b6:	f800 8003 	strb.w	r8, [r0, r3]
 80122ba:	4403      	add	r3, r0
 80122bc:	7866      	ldrb	r6, [r4, #1]
 80122be:	705e      	strb	r6, [r3, #1]
 80122c0:	78a6      	ldrb	r6, [r4, #2]
 80122c2:	709e      	strb	r6, [r3, #2]
 80122c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122c6:	3d01      	subs	r5, #1
 80122c8:	9a01      	ldr	r2, [sp, #4]
 80122ca:	4419      	add	r1, r3
 80122cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80122ce:	441a      	add	r2, r3
 80122d0:	9201      	str	r2, [sp, #4]
 80122d2:	e788      	b.n	80121e6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d0f5      	beq.n	80122c4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80122d8:	f06f 0203 	mvn.w	r2, #3
 80122dc:	78a6      	ldrb	r6, [r4, #2]
 80122de:	fb18 f803 	smulbb	r8, r8, r3
 80122e2:	fb02 f905 	mul.w	r9, r2, r5
 80122e6:	9606      	str	r6, [sp, #24]
 80122e8:	eb00 0c09 	add.w	ip, r0, r9
 80122ec:	7866      	ldrb	r6, [r4, #1]
 80122ee:	f89c 7003 	ldrb.w	r7, [ip, #3]
 80122f2:	9607      	str	r6, [sp, #28]
 80122f4:	fb03 f607 	mul.w	r6, r3, r7
 80122f8:	9a07      	ldr	r2, [sp, #28]
 80122fa:	f106 0e01 	add.w	lr, r6, #1
 80122fe:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 8012302:	18fe      	adds	r6, r7, r3
 8012304:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8012308:	eba7 070e 	sub.w	r7, r7, lr
 801230c:	eba6 060e 	sub.w	r6, r6, lr
 8012310:	f810 e009 	ldrb.w	lr, [r0, r9]
 8012314:	b2f6      	uxtb	r6, r6
 8012316:	fb07 880e 	mla	r8, r7, lr, r8
 801231a:	fb98 f8f6 	sdiv	r8, r8, r6
 801231e:	f800 8009 	strb.w	r8, [r0, r9]
 8012322:	fb13 f902 	smulbb	r9, r3, r2
 8012326:	f89c e001 	ldrb.w	lr, [ip, #1]
 801232a:	9a06      	ldr	r2, [sp, #24]
 801232c:	fb07 990e 	mla	r9, r7, lr, r9
 8012330:	f89c e002 	ldrb.w	lr, [ip, #2]
 8012334:	fb13 f302 	smulbb	r3, r3, r2
 8012338:	f88c 6003 	strb.w	r6, [ip, #3]
 801233c:	fb07 330e 	mla	r3, r7, lr, r3
 8012340:	fb99 f9f6 	sdiv	r9, r9, r6
 8012344:	fb93 f3f6 	sdiv	r3, r3, r6
 8012348:	f88c 9001 	strb.w	r9, [ip, #1]
 801234c:	f88c 3002 	strb.w	r3, [ip, #2]
 8012350:	e7b8      	b.n	80122c4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8012352:	2b00      	cmp	r3, #0
 8012354:	f43f af3c 	beq.w	80121d0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8012358:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801235c:	fb1e fe03 	smulbb	lr, lr, r3
 8012360:	78a2      	ldrb	r2, [r4, #2]
 8012362:	fb03 fc09 	mul.w	ip, r3, r9
 8012366:	eb09 0603 	add.w	r6, r9, r3
 801236a:	9206      	str	r2, [sp, #24]
 801236c:	f10c 0701 	add.w	r7, ip, #1
 8012370:	7862      	ldrb	r2, [r4, #1]
 8012372:	eb07 272c 	add.w	r7, r7, ip, asr #8
 8012376:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801237a:	eba9 070c 	sub.w	r7, r9, ip
 801237e:	eba6 060c 	sub.w	r6, r6, ip
 8012382:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8012386:	fb13 f902 	smulbb	r9, r3, r2
 801238a:	9a06      	ldr	r2, [sp, #24]
 801238c:	b2f6      	uxtb	r6, r6
 801238e:	fb07 ee0c 	mla	lr, r7, ip, lr
 8012392:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 8012396:	fb13 f302 	smulbb	r3, r3, r2
 801239a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801239e:	fb07 990c 	mla	r9, r7, ip, r9
 80123a2:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 80123a6:	fb07 330c 	mla	r3, r7, ip, r3
 80123aa:	fb9e fef6 	sdiv	lr, lr, r6
 80123ae:	fb99 f9f6 	sdiv	r9, r9, r6
 80123b2:	fb93 f3f6 	sdiv	r3, r3, r6
 80123b6:	f805 ec04 	strb.w	lr, [r5, #-4]
 80123ba:	f805 9c03 	strb.w	r9, [r5, #-3]
 80123be:	f805 3c02 	strb.w	r3, [r5, #-2]
 80123c2:	e705      	b.n	80121d0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 80123c4:	b009      	add	sp, #36	; 0x24
 80123c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ca:	bf00      	nop
 80123cc:	2400fa2c 	.word	0x2400fa2c

080123d0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80123d0:	4770      	bx	lr

080123d2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80123d2:	4770      	bx	lr

080123d4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80123d4:	4770      	bx	lr

080123d6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80123d6:	4770      	bx	lr

080123d8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80123d8:	4770      	bx	lr

080123da <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80123da:	4770      	bx	lr

080123dc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80123dc:	4770      	bx	lr

080123de <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80123de:	4770      	bx	lr

080123e0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80123e0:	4770      	bx	lr

080123e2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80123e2:	4770      	bx	lr

080123e4 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 80123e4:	b508      	push	{r3, lr}
 80123e6:	4b06      	ldr	r3, [pc, #24]	; (8012400 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0x1c>)
 80123e8:	8818      	ldrh	r0, [r3, #0]
 80123ea:	b928      	cbnz	r0, 80123f8 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0x14>
 80123ec:	4b05      	ldr	r3, [pc, #20]	; (8012404 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0x20>)
 80123ee:	2150      	movs	r1, #80	; 0x50
 80123f0:	4a05      	ldr	r2, [pc, #20]	; (8012408 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0x24>)
 80123f2:	4806      	ldr	r0, [pc, #24]	; (801240c <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0x28>)
 80123f4:	f004 fe9a 	bl	801712c <__assert_func>
 80123f8:	0080      	lsls	r0, r0, #2
 80123fa:	b280      	uxth	r0, r0
 80123fc:	bd08      	pop	{r3, pc}
 80123fe:	bf00      	nop
 8012400:	2400fa16 	.word	0x2400fa16
 8012404:	0801b3bc 	.word	0x0801b3bc
 8012408:	0801b7db 	.word	0x0801b7db
 801240c:	0801b3fe 	.word	0x0801b3fe

08012410 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8012410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012414:	b091      	sub	sp, #68	; 0x44
 8012416:	460f      	mov	r7, r1
 8012418:	4614      	mov	r4, r2
 801241a:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 801241e:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 8012422:	f1b8 0f00 	cmp.w	r8, #0
 8012426:	d054      	beq.n	80124d2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8012428:	6810      	ldr	r0, [r2, #0]
 801242a:	ae0c      	add	r6, sp, #48	; 0x30
 801242c:	6851      	ldr	r1, [r2, #4]
 801242e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8012604 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 8012432:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8012608 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 8012436:	c603      	stmia	r6!, {r0, r1}
 8012438:	6818      	ldr	r0, [r3, #0]
 801243a:	ae0e      	add	r6, sp, #56	; 0x38
 801243c:	6859      	ldr	r1, [r3, #4]
 801243e:	c603      	stmia	r6!, {r0, r1}
 8012440:	a80c      	add	r0, sp, #48	; 0x30
 8012442:	f7fb fb47 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012446:	4621      	mov	r1, r4
 8012448:	a80e      	add	r0, sp, #56	; 0x38
 801244a:	f7fb fb6b 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801244e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012452:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012456:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801245a:	f8d9 0000 	ldr.w	r0, [r9]
 801245e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012462:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8012466:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 801246a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801246e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 8012472:	440a      	add	r2, r1
 8012474:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012478:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801247c:	4413      	add	r3, r2
 801247e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012482:	6803      	ldr	r3, [r0, #0]
 8012484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012486:	4798      	blx	r3
 8012488:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801248c:	d024      	beq.n	80124d8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 801248e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012492:	f8d9 0000 	ldr.w	r0, [r9]
 8012496:	d022      	beq.n	80124de <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 8012498:	2102      	movs	r1, #2
 801249a:	f04f 0e00 	mov.w	lr, #0
 801249e:	f8d0 c000 	ldr.w	ip, [r0]
 80124a2:	b2b6      	uxth	r6, r6
 80124a4:	9106      	str	r1, [sp, #24]
 80124a6:	b2bf      	uxth	r7, r7
 80124a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80124ac:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80124b0:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 80124b4:	f8ba 1000 	ldrh.w	r1, [sl]
 80124b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80124bc:	9601      	str	r6, [sp, #4]
 80124be:	9700      	str	r7, [sp, #0]
 80124c0:	e9cd 5104 	strd	r5, r1, [sp, #16]
 80124c4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80124c8:	9102      	str	r1, [sp, #8]
 80124ca:	4621      	mov	r1, r4
 80124cc:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80124d0:	47a8      	blx	r5
 80124d2:	b011      	add	sp, #68	; 0x44
 80124d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d8:	f010 0f20 	tst.w	r0, #32
 80124dc:	e7d9      	b.n	8012492 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 80124de:	6803      	ldr	r3, [r0, #0]
 80124e0:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80124e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124e6:	4798      	blx	r3
 80124e8:	f8ba c000 	ldrh.w	ip, [sl]
 80124ec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80124f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80124f4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80124f8:	fb0c f606 	mul.w	r6, ip, r6
 80124fc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8012500:	fb0c 2303 	mla	r3, ip, r3, r2
 8012504:	ebac 0c07 	sub.w	ip, ip, r7
 8012508:	eba9 0907 	sub.w	r9, r9, r7
 801250c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012510:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8012514:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8012518:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801251c:	d148      	bne.n	80125b0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801251e:	2d00      	cmp	r5, #0
 8012520:	d146      	bne.n	80125b0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8012522:	42b0      	cmp	r0, r6
 8012524:	d268      	bcs.n	80125f8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8012526:	eb00 020b 	add.w	r2, r0, fp
 801252a:	4290      	cmp	r0, r2
 801252c:	d204      	bcs.n	8012538 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801252e:	f854 3b04 	ldr.w	r3, [r4], #4
 8012532:	f840 3b04 	str.w	r3, [r0], #4
 8012536:	e7f8      	b.n	801252a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 8012538:	4460      	add	r0, ip
 801253a:	444c      	add	r4, r9
 801253c:	e7f1      	b.n	8012522 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 801253e:	fb04 f70a 	mul.w	r7, r4, sl
 8012542:	4454      	add	r4, sl
 8012544:	1c7a      	adds	r2, r7, #1
 8012546:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801254a:	1212      	asrs	r2, r2, #8
 801254c:	ebaa 0702 	sub.w	r7, sl, r2
 8012550:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 8012554:	1aa4      	subs	r4, r4, r2
 8012556:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801255a:	fb07 fa0a 	mul.w	sl, r7, sl
 801255e:	b2e4      	uxtb	r4, r4
 8012560:	fb05 a202 	mla	r2, r5, r2, sl
 8012564:	fa5f fa8e 	uxtb.w	sl, lr
 8012568:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801256c:	fb07 fa0a 	mul.w	sl, r7, sl
 8012570:	fb07 fe0e 	mul.w	lr, r7, lr
 8012574:	fbb2 f2f4 	udiv	r2, r2, r4
 8012578:	0412      	lsls	r2, r2, #16
 801257a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801257e:	4611      	mov	r1, r2
 8012580:	b2da      	uxtb	r2, r3
 8012582:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012586:	fb05 a202 	mla	r2, r5, r2, sl
 801258a:	fb05 e503 	mla	r5, r5, r3, lr
 801258e:	fbb2 f2f4 	udiv	r2, r2, r4
 8012592:	b2d2      	uxtb	r2, r2
 8012594:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8012598:	fbb5 f4f4 	udiv	r4, r5, r4
 801259c:	0224      	lsls	r4, r4, #8
 801259e:	430a      	orrs	r2, r1
 80125a0:	b2a4      	uxth	r4, r4
 80125a2:	4322      	orrs	r2, r4
 80125a4:	6002      	str	r2, [r0, #0]
 80125a6:	e025      	b.n	80125f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80125a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125aa:	4460      	add	r0, ip
 80125ac:	444b      	add	r3, r9
 80125ae:	461c      	mov	r4, r3
 80125b0:	42b0      	cmp	r0, r6
 80125b2:	d221      	bcs.n	80125f8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 80125b4:	eb00 030b 	add.w	r3, r0, fp
 80125b8:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
 80125bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125be:	4298      	cmp	r0, r3
 80125c0:	d2f2      	bcs.n	80125a8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 80125c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80125c8:	0e1d      	lsrs	r5, r3, #24
 80125ca:	920a      	str	r2, [sp, #40]	; 0x28
 80125cc:	fb05 f408 	mul.w	r4, r5, r8
 80125d0:	1c65      	adds	r5, r4, #1
 80125d2:	eb05 2524 	add.w	r5, r5, r4, asr #8
 80125d6:	122d      	asrs	r5, r5, #8
 80125d8:	d00c      	beq.n	80125f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80125da:	2dff      	cmp	r5, #255	; 0xff
 80125dc:	b2ec      	uxtb	r4, r5
 80125de:	d004      	beq.n	80125ea <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 80125e0:	f8d0 e000 	ldr.w	lr, [r0]
 80125e4:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 80125e8:	d1a9      	bne.n	801253e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 80125ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80125ee:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 80125f2:	6005      	str	r5, [r0, #0]
 80125f4:	3004      	adds	r0, #4
 80125f6:	e7e1      	b.n	80125bc <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 80125f8:	4b02      	ldr	r3, [pc, #8]	; (8012604 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 80125fa:	6818      	ldr	r0, [r3, #0]
 80125fc:	6803      	ldr	r3, [r0, #0]
 80125fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012600:	4798      	blx	r3
 8012602:	e766      	b.n	80124d2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8012604:	2400fa1c 	.word	0x2400fa1c
 8012608:	2400fa16 	.word	0x2400fa16

0801260c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801260c:	b510      	push	{r4, lr}
 801260e:	4604      	mov	r4, r0
 8012610:	2104      	movs	r1, #4
 8012612:	f003 ff7b 	bl	801650c <_ZdlPvj>
 8012616:	4620      	mov	r0, r4
 8012618:	bd10      	pop	{r4, pc}

0801261a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801261a:	b510      	push	{r4, lr}
 801261c:	4604      	mov	r4, r0
 801261e:	2104      	movs	r1, #4
 8012620:	f003 ff74 	bl	801650c <_ZdlPvj>
 8012624:	4620      	mov	r0, r4
 8012626:	bd10      	pop	{r4, pc}

08012628 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8012628:	b510      	push	{r4, lr}
 801262a:	4604      	mov	r4, r0
 801262c:	2104      	movs	r1, #4
 801262e:	f003 ff6d 	bl	801650c <_ZdlPvj>
 8012632:	4620      	mov	r0, r4
 8012634:	bd10      	pop	{r4, pc}

08012636 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8012636:	b510      	push	{r4, lr}
 8012638:	4604      	mov	r4, r0
 801263a:	2104      	movs	r1, #4
 801263c:	f003 ff66 	bl	801650c <_ZdlPvj>
 8012640:	4620      	mov	r0, r4
 8012642:	bd10      	pop	{r4, pc}

08012644 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8012644:	b510      	push	{r4, lr}
 8012646:	4604      	mov	r4, r0
 8012648:	2104      	movs	r1, #4
 801264a:	f003 ff5f 	bl	801650c <_ZdlPvj>
 801264e:	4620      	mov	r0, r4
 8012650:	bd10      	pop	{r4, pc}

08012652 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8012652:	b510      	push	{r4, lr}
 8012654:	4604      	mov	r4, r0
 8012656:	2104      	movs	r1, #4
 8012658:	f003 ff58 	bl	801650c <_ZdlPvj>
 801265c:	4620      	mov	r0, r4
 801265e:	bd10      	pop	{r4, pc}

08012660 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8012660:	b510      	push	{r4, lr}
 8012662:	4604      	mov	r4, r0
 8012664:	2104      	movs	r1, #4
 8012666:	f003 ff51 	bl	801650c <_ZdlPvj>
 801266a:	4620      	mov	r0, r4
 801266c:	bd10      	pop	{r4, pc}

0801266e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801266e:	b510      	push	{r4, lr}
 8012670:	4604      	mov	r4, r0
 8012672:	2104      	movs	r1, #4
 8012674:	f003 ff4a 	bl	801650c <_ZdlPvj>
 8012678:	4620      	mov	r0, r4
 801267a:	bd10      	pop	{r4, pc}

0801267c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801267c:	b510      	push	{r4, lr}
 801267e:	4604      	mov	r4, r0
 8012680:	2104      	movs	r1, #4
 8012682:	f003 ff43 	bl	801650c <_ZdlPvj>
 8012686:	4620      	mov	r0, r4
 8012688:	bd10      	pop	{r4, pc}

0801268a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801268a:	b510      	push	{r4, lr}
 801268c:	4604      	mov	r4, r0
 801268e:	2104      	movs	r1, #4
 8012690:	f003 ff3c 	bl	801650c <_ZdlPvj>
 8012694:	4620      	mov	r0, r4
 8012696:	bd10      	pop	{r4, pc}

08012698 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8012698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801269c:	4ca5      	ldr	r4, [pc, #660]	; (8012934 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801269e:	b08d      	sub	sp, #52	; 0x34
 80126a0:	4605      	mov	r5, r0
 80126a2:	4688      	mov	r8, r1
 80126a4:	9301      	str	r3, [sp, #4]
 80126a6:	4617      	mov	r7, r2
 80126a8:	6823      	ldr	r3, [r4, #0]
 80126aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80126ae:	2b02      	cmp	r3, #2
 80126b0:	d106      	bne.n	80126c0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28>
 80126b2:	4ba1      	ldr	r3, [pc, #644]	; (8012938 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 80126b4:	f240 218d 	movw	r1, #653	; 0x28d
 80126b8:	4aa0      	ldr	r2, [pc, #640]	; (801293c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 80126ba:	48a1      	ldr	r0, [pc, #644]	; (8012940 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a8>)
 80126bc:	f004 fd36 	bl	801712c <__assert_func>
 80126c0:	9b01      	ldr	r3, [sp, #4]
 80126c2:	ae0c      	add	r6, sp, #48	; 0x30
 80126c4:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 80126c8:	4630      	mov	r0, r6
 80126ca:	f7fe fe35 	bl	8011338 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80126ce:	682b      	ldr	r3, [r5, #0]
 80126d0:	4681      	mov	r9, r0
 80126d2:	4628      	mov	r0, r5
 80126d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126d6:	4798      	blx	r3
 80126d8:	4581      	cmp	r9, r0
 80126da:	d004      	beq.n	80126e6 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4e>
 80126dc:	4b99      	ldr	r3, [pc, #612]	; (8012944 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ac>)
 80126de:	f240 218f 	movw	r1, #655	; 0x28f
 80126e2:	4a96      	ldr	r2, [pc, #600]	; (801293c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 80126e4:	e7e9      	b.n	80126ba <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 80126e6:	4630      	mov	r0, r6
 80126e8:	f7fe fd9c 	bl	8011224 <_ZNK8touchgfx6Bitmap7getDataEv>
 80126ec:	4683      	mov	fp, r0
 80126ee:	b920      	cbnz	r0, 80126fa <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x62>
 80126f0:	4b95      	ldr	r3, [pc, #596]	; (8012948 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b0>)
 80126f2:	f240 2191 	movw	r1, #657	; 0x291
 80126f6:	4a91      	ldr	r2, [pc, #580]	; (801293c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 80126f8:	e7df      	b.n	80126ba <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 80126fa:	6838      	ldr	r0, [r7, #0]
 80126fc:	ab06      	add	r3, sp, #24
 80126fe:	6879      	ldr	r1, [r7, #4]
 8012700:	f9b7 9000 	ldrsh.w	r9, [r7]
 8012704:	c303      	stmia	r3!, {r0, r1}
 8012706:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801270a:	ab08      	add	r3, sp, #32
 801270c:	f8d8 0000 	ldr.w	r0, [r8]
 8012710:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 8012714:	c303      	stmia	r3!, {r0, r1}
 8012716:	4630      	mov	r0, r6
 8012718:	f7fe fc7c 	bl	8011014 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801271c:	4607      	mov	r7, r0
 801271e:	4630      	mov	r0, r6
 8012720:	f7fe fcb2 	bl	8011088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012724:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8012728:	a806      	add	r0, sp, #24
 801272a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801272e:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 8012732:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8012736:	f7fb f9cd 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801273a:	a808      	add	r0, sp, #32
 801273c:	f7fb f9ca 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012740:	a80a      	add	r0, sp, #40	; 0x28
 8012742:	f7fb f9c7 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012746:	4881      	ldr	r0, [pc, #516]	; (801294c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>)
 8012748:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801274c:	8806      	ldrh	r6, [r0, #0]
 801274e:	4682      	mov	sl, r0
 8012750:	4b7f      	ldr	r3, [pc, #508]	; (8012950 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b8>)
 8012752:	fa0f f986 	sxth.w	r9, r6
 8012756:	8819      	ldrh	r1, [r3, #0]
 8012758:	4591      	cmp	r9, r2
 801275a:	9302      	str	r3, [sp, #8]
 801275c:	dd72      	ble.n	8012844 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 801275e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8012762:	4417      	add	r7, r2
 8012764:	b2bf      	uxth	r7, r7
 8012766:	fa0f f887 	sxth.w	r8, r7
 801276a:	f1b8 0f00 	cmp.w	r8, #0
 801276e:	dd69      	ble.n	8012844 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 8012770:	fa0f fe81 	sxth.w	lr, r1
 8012774:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8012778:	459e      	cmp	lr, r3
 801277a:	dd63      	ble.n	8012844 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 801277c:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8012780:	4418      	add	r0, r3
 8012782:	b280      	uxth	r0, r0
 8012784:	fa0f fc80 	sxth.w	ip, r0
 8012788:	f1bc 0f00 	cmp.w	ip, #0
 801278c:	dd5a      	ble.n	8012844 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 801278e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012792:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012796:	45c1      	cmp	r9, r8
 8012798:	bfc8      	it	gt
 801279a:	463e      	movgt	r6, r7
 801279c:	45e6      	cmp	lr, ip
 801279e:	bfc8      	it	gt
 80127a0:	4601      	movgt	r1, r0
 80127a2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80127a6:	1ab6      	subs	r6, r6, r2
 80127a8:	1ac9      	subs	r1, r1, r3
 80127aa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80127ae:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80127b2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80127b6:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80127ba:	2f00      	cmp	r7, #0
 80127bc:	f340 80b6 	ble.w	801292c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>
 80127c0:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80127c4:	2e00      	cmp	r6, #0
 80127c6:	f340 80b1 	ble.w	801292c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>
 80127ca:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80127ce:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80127d2:	4288      	cmp	r0, r1
 80127d4:	db3a      	blt.n	801284c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b4>
 80127d6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80127da:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80127de:	429a      	cmp	r2, r3
 80127e0:	db34      	blt.n	801284c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b4>
 80127e2:	4438      	add	r0, r7
 80127e4:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80127e8:	4439      	add	r1, r7
 80127ea:	b200      	sxth	r0, r0
 80127ec:	b209      	sxth	r1, r1
 80127ee:	4288      	cmp	r0, r1
 80127f0:	dc2c      	bgt.n	801284c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b4>
 80127f2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80127f6:	4432      	add	r2, r6
 80127f8:	440b      	add	r3, r1
 80127fa:	b212      	sxth	r2, r2
 80127fc:	b21b      	sxth	r3, r3
 80127fe:	429a      	cmp	r2, r3
 8012800:	dc24      	bgt.n	801284c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b4>
 8012802:	682b      	ldr	r3, [r5, #0]
 8012804:	4628      	mov	r0, r5
 8012806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012808:	4798      	blx	r3
 801280a:	4681      	mov	r9, r0
 801280c:	6820      	ldr	r0, [r4, #0]
 801280e:	6803      	ldr	r3, [r0, #0]
 8012810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012812:	4798      	blx	r3
 8012814:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8012818:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801281c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8012820:	1a5b      	subs	r3, r3, r1
 8012822:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8012826:	b29b      	uxth	r3, r3
 8012828:	b21c      	sxth	r4, r3
 801282a:	2c00      	cmp	r4, #0
 801282c:	dc13      	bgt.n	8012856 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1be>
 801282e:	bf18      	it	ne
 8012830:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8012834:	465c      	mov	r4, fp
 8012836:	bf1e      	ittt	ne
 8012838:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801283c:	189b      	addne	r3, r3, r2
 801283e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8012842:	e00d      	b.n	8012860 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c8>
 8012844:	2300      	movs	r3, #0
 8012846:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801284a:	e7b4      	b.n	80127b6 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x11e>
 801284c:	4b41      	ldr	r3, [pc, #260]	; (8012954 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2bc>)
 801284e:	f240 219f 	movw	r1, #671	; 0x29f
 8012852:	4a3a      	ldr	r2, [pc, #232]	; (801293c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 8012854:	e731      	b.n	80126ba <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 8012856:	1ad3      	subs	r3, r2, r3
 8012858:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
 801285c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8012860:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8012864:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8012868:	1a9b      	subs	r3, r3, r2
 801286a:	b29b      	uxth	r3, r3
 801286c:	b219      	sxth	r1, r3
 801286e:	2900      	cmp	r1, #0
 8012870:	dd4b      	ble.n	801290a <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x272>
 8012872:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8012876:	fb08 4401 	mla	r4, r8, r1, r4
 801287a:	1ad3      	subs	r3, r2, r3
 801287c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012880:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8012884:	2b00      	cmp	r3, #0
 8012886:	dd51      	ble.n	801292c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>
 8012888:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 801288c:	2f00      	cmp	r7, #0
 801288e:	dd4d      	ble.n	801292c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>
 8012890:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8012894:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012898:	429d      	cmp	r5, r3
 801289a:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801289e:	bfa8      	it	ge
 80128a0:	461d      	movge	r5, r3
 80128a2:	f8ba 3000 	ldrh.w	r3, [sl]
 80128a6:	fb01 f609 	mul.w	r6, r1, r9
 80128aa:	f8df a088 	ldr.w	sl, [pc, #136]	; 8012934 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>
 80128ae:	1a9b      	subs	r3, r3, r2
 80128b0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80128b4:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 80128b8:	429d      	cmp	r5, r3
 80128ba:	4406      	add	r6, r0
 80128bc:	bfa8      	it	ge
 80128be:	461d      	movge	r5, r3
 80128c0:	9b02      	ldr	r3, [sp, #8]
 80128c2:	42ba      	cmp	r2, r7
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	bfa8      	it	ge
 80128c8:	463a      	movge	r2, r7
 80128ca:	2700      	movs	r7, #0
 80128cc:	1a5b      	subs	r3, r3, r1
 80128ce:	9500      	str	r5, [sp, #0]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	bfa8      	it	ge
 80128d4:	461a      	movge	r2, r3
 80128d6:	00ab      	lsls	r3, r5, #2
 80128d8:	9202      	str	r2, [sp, #8]
 80128da:	9303      	str	r3, [sp, #12]
 80128dc:	9b02      	ldr	r3, [sp, #8]
 80128de:	42bb      	cmp	r3, r7
 80128e0:	dd20      	ble.n	8012924 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>
 80128e2:	f8da 0000 	ldr.w	r0, [sl]
 80128e6:	4632      	mov	r2, r6
 80128e8:	4621      	mov	r1, r4
 80128ea:	6803      	ldr	r3, [r0, #0]
 80128ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ee:	461d      	mov	r5, r3
 80128f0:	9b03      	ldr	r3, [sp, #12]
 80128f2:	47a8      	blx	r5
 80128f4:	2300      	movs	r3, #0
 80128f6:	9a00      	ldr	r2, [sp, #0]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	dd0f      	ble.n	801291c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>
 80128fc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012900:	f04f 31ff 	mov.w	r1, #4294967295
 8012904:	3301      	adds	r3, #1
 8012906:	70d1      	strb	r1, [r2, #3]
 8012908:	e7f5      	b.n	80128f6 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801290a:	bf1f      	itttt	ne
 801290c:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8012910:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8012914:	189b      	addne	r3, r3, r2
 8012916:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801291a:	e7b1      	b.n	8012880 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e8>
 801291c:	444e      	add	r6, r9
 801291e:	4444      	add	r4, r8
 8012920:	3701      	adds	r7, #1
 8012922:	e7db      	b.n	80128dc <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x244>
 8012924:	a90a      	add	r1, sp, #40	; 0x28
 8012926:	9801      	ldr	r0, [sp, #4]
 8012928:	f7fe fa44 	bl	8010db4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801292c:	4658      	mov	r0, fp
 801292e:	b00d      	add	sp, #52	; 0x34
 8012930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012934:	2400fa1c 	.word	0x2400fa1c
 8012938:	0801b1b0 	.word	0x0801b1b0
 801293c:	0801b88b 	.word	0x0801b88b
 8012940:	0801b262 	.word	0x0801b262
 8012944:	0801b294 	.word	0x0801b294
 8012948:	0801b2e9 	.word	0x0801b2e9
 801294c:	2400fa16 	.word	0x2400fa16
 8012950:	2400fa18 	.word	0x2400fa18
 8012954:	0801b327 	.word	0x0801b327

08012958 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8012958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801295a:	4606      	mov	r6, r0
 801295c:	b087      	sub	sp, #28
 801295e:	4615      	mov	r5, r2
 8012960:	461f      	mov	r7, r3
 8012962:	b353      	cbz	r3, 80129ba <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012964:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012968:	2b00      	cmp	r3, #0
 801296a:	dd26      	ble.n	80129ba <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801296c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012970:	2b00      	cmp	r3, #0
 8012972:	dd22      	ble.n	80129ba <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012974:	6808      	ldr	r0, [r1, #0]
 8012976:	aa04      	add	r2, sp, #16
 8012978:	6849      	ldr	r1, [r1, #4]
 801297a:	4c1b      	ldr	r4, [pc, #108]	; (80129e8 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801297c:	c203      	stmia	r2!, {r0, r1}
 801297e:	a804      	add	r0, sp, #16
 8012980:	f7fb f8a8 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012984:	6820      	ldr	r0, [r4, #0]
 8012986:	6803      	ldr	r3, [r0, #0]
 8012988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801298a:	4798      	blx	r3
 801298c:	2fff      	cmp	r7, #255	; 0xff
 801298e:	d016      	beq.n	80129be <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8012990:	f010 0f08 	tst.w	r0, #8
 8012994:	6820      	ldr	r0, [r4, #0]
 8012996:	d015      	beq.n	80129c4 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8012998:	2400      	movs	r4, #0
 801299a:	6801      	ldr	r1, [r0, #0]
 801299c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80129a0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80129a4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80129a8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80129ac:	9401      	str	r4, [sp, #4]
 80129ae:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80129b2:	9400      	str	r4, [sp, #0]
 80129b4:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 80129b6:	4629      	mov	r1, r5
 80129b8:	47a0      	blx	r4
 80129ba:	b007      	add	sp, #28
 80129bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129be:	f010 0f02 	tst.w	r0, #2
 80129c2:	e7e7      	b.n	8012994 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80129c4:	6803      	ldr	r3, [r0, #0]
 80129c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129c8:	4798      	blx	r3
 80129ca:	4b08      	ldr	r3, [pc, #32]	; (80129ec <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80129cc:	4601      	mov	r1, r0
 80129ce:	4630      	mov	r0, r6
 80129d0:	881a      	ldrh	r2, [r3, #0]
 80129d2:	6833      	ldr	r3, [r6, #0]
 80129d4:	e9cd 5700 	strd	r5, r7, [sp]
 80129d8:	69dd      	ldr	r5, [r3, #28]
 80129da:	ab04      	add	r3, sp, #16
 80129dc:	47a8      	blx	r5
 80129de:	6820      	ldr	r0, [r4, #0]
 80129e0:	6803      	ldr	r3, [r0, #0]
 80129e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e4:	4798      	blx	r3
 80129e6:	e7e8      	b.n	80129ba <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80129e8:	2400fa1c 	.word	0x2400fa1c
 80129ec:	2400fa16 	.word	0x2400fa16

080129f0 <_ZN8touchgfx8LCD32bppC1Ev>:
 80129f0:	2200      	movs	r2, #0
 80129f2:	4910      	ldr	r1, [pc, #64]	; (8012a34 <_ZN8touchgfx8LCD32bppC1Ev+0x44>)
 80129f4:	6042      	str	r2, [r0, #4]
 80129f6:	6001      	str	r1, [r0, #0]
 80129f8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80129fc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8012a00:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012a04:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8012a08:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8012a0c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8012a10:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8012a14:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8012a18:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8012a1c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8012a20:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8012a24:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8012a28:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8012a2c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	0801b504 	.word	0x0801b504

08012a38 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 8012a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	b08f      	sub	sp, #60	; 0x3c
 8012a40:	460d      	mov	r5, r1
 8012a42:	461e      	mov	r6, r3
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d052      	beq.n	8012aee <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8012a48:	6808      	ldr	r0, [r1, #0]
 8012a4a:	ab0a      	add	r3, sp, #40	; 0x28
 8012a4c:	6849      	ldr	r1, [r1, #4]
 8012a4e:	4f70      	ldr	r7, [pc, #448]	; (8012c10 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8012a50:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8012c14 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 8012a54:	c303      	stmia	r3!, {r0, r1}
 8012a56:	6810      	ldr	r0, [r2, #0]
 8012a58:	ab0c      	add	r3, sp, #48	; 0x30
 8012a5a:	6851      	ldr	r1, [r2, #4]
 8012a5c:	c303      	stmia	r3!, {r0, r1}
 8012a5e:	a80a      	add	r0, sp, #40	; 0x28
 8012a60:	f7fb f838 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012a64:	4629      	mov	r1, r5
 8012a66:	a80c      	add	r0, sp, #48	; 0x30
 8012a68:	f7fb f85c 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012a6c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8012a70:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012a74:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012a78:	6838      	ldr	r0, [r7, #0]
 8012a7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012a7e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8012a82:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	; 0x36
 8012a86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012a8a:	440c      	add	r4, r1
 8012a8c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8012a90:	440a      	add	r2, r1
 8012a92:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8012a96:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8012a9a:	4413      	add	r3, r2
 8012a9c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012aa0:	6803      	ldr	r3, [r0, #0]
 8012aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aa4:	4798      	blx	r3
 8012aa6:	2eff      	cmp	r6, #255	; 0xff
 8012aa8:	d024      	beq.n	8012af4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 8012aaa:	f010 0f04 	tst.w	r0, #4
 8012aae:	6838      	ldr	r0, [r7, #0]
 8012ab0:	d023      	beq.n	8012afa <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	f04f 0c02 	mov.w	ip, #2
 8012ab8:	6807      	ldr	r7, [r0, #0]
 8012aba:	b2ad      	uxth	r5, r5
 8012abc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012ac0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8012ac4:	e9cd c107 	strd	ip, r1, [sp, #28]
 8012ac8:	f04f 0c01 	mov.w	ip, #1
 8012acc:	f8cd c018 	str.w	ip, [sp, #24]
 8012ad0:	f8b9 c000 	ldrh.w	ip, [r9]
 8012ad4:	9603      	str	r6, [sp, #12]
 8012ad6:	9501      	str	r5, [sp, #4]
 8012ad8:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8012adc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012ae0:	9102      	str	r1, [sp, #8]
 8012ae2:	fa1f f188 	uxth.w	r1, r8
 8012ae6:	9100      	str	r1, [sp, #0]
 8012ae8:	4621      	mov	r1, r4
 8012aea:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8012aec:	47a8      	blx	r5
 8012aee:	b00f      	add	sp, #60	; 0x3c
 8012af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af4:	f010 0f01 	tst.w	r0, #1
 8012af8:	e7d9      	b.n	8012aae <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 8012afa:	6803      	ldr	r3, [r0, #0]
 8012afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012afe:	4798      	blx	r3
 8012b00:	f8b9 3000 	ldrh.w	r3, [r9]
 8012b04:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8012b08:	2eff      	cmp	r6, #255	; 0xff
 8012b0a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8012b0e:	fb03 f505 	mul.w	r5, r3, r5
 8012b12:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 8012b16:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8012b1a:	fb03 1202 	mla	r2, r3, r2, r1
 8012b1e:	eba3 0308 	sub.w	r3, r3, r8
 8012b22:	eba7 0708 	sub.w	r7, r7, r8
 8012b26:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8012b2a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012b2e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012b32:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012b36:	d04c      	beq.n	8012bd2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 8012b38:	42a8      	cmp	r0, r5
 8012b3a:	d263      	bcs.n	8012c04 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8012b3c:	eb00 0e0c 	add.w	lr, r0, ip
 8012b40:	4621      	mov	r1, r4
 8012b42:	4570      	cmp	r0, lr
 8012b44:	460c      	mov	r4, r1
 8012b46:	f101 0103 	add.w	r1, r1, #3
 8012b4a:	d23d      	bcs.n	8012bc8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 8012b4c:	6802      	ldr	r2, [r0, #0]
 8012b4e:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8012b52:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8012b56:	fb1b fb06 	smulbb	fp, fp, r6
 8012b5a:	fa5f fa82 	uxtb.w	sl, r2
 8012b5e:	fb06 f809 	mul.w	r8, r6, r9
 8012b62:	f108 0401 	add.w	r4, r8, #1
 8012b66:	eb04 2428 	add.w	r4, r4, r8, asr #8
 8012b6a:	eb06 0809 	add.w	r8, r6, r9
 8012b6e:	1224      	asrs	r4, r4, #8
 8012b70:	eba9 0904 	sub.w	r9, r9, r4
 8012b74:	eba8 0804 	sub.w	r8, r8, r4
 8012b78:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8012b7c:	fb09 fa0a 	mul.w	sl, r9, sl
 8012b80:	fa5f f888 	uxtb.w	r8, r8
 8012b84:	fb04 a406 	mla	r4, r4, r6, sl
 8012b88:	fbb4 f4f8 	udiv	r4, r4, r8
 8012b8c:	b2e4      	uxtb	r4, r4
 8012b8e:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 8012b92:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012b96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8012b9a:	fb09 b404 	mla	r4, r9, r4, fp
 8012b9e:	fbb4 f4f8 	udiv	r4, r4, r8
 8012ba2:	0424      	lsls	r4, r4, #16
 8012ba4:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8012ba8:	ea4a 0404 	orr.w	r4, sl, r4
 8012bac:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 8012bb0:	fb1a fa06 	smulbb	sl, sl, r6
 8012bb4:	fb09 a202 	mla	r2, r9, r2, sl
 8012bb8:	fbb2 f2f8 	udiv	r2, r2, r8
 8012bbc:	0212      	lsls	r2, r2, #8
 8012bbe:	b292      	uxth	r2, r2
 8012bc0:	4322      	orrs	r2, r4
 8012bc2:	f840 2b04 	str.w	r2, [r0], #4
 8012bc6:	e7bc      	b.n	8012b42 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 8012bc8:	4418      	add	r0, r3
 8012bca:	443c      	add	r4, r7
 8012bcc:	e7b4      	b.n	8012b38 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 8012bce:	4418      	add	r0, r3
 8012bd0:	443c      	add	r4, r7
 8012bd2:	42a8      	cmp	r0, r5
 8012bd4:	d216      	bcs.n	8012c04 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8012bd6:	eb00 060c 	add.w	r6, r0, ip
 8012bda:	4621      	mov	r1, r4
 8012bdc:	42b0      	cmp	r0, r6
 8012bde:	460c      	mov	r4, r1
 8012be0:	f101 0103 	add.w	r1, r1, #3
 8012be4:	d2f3      	bcs.n	8012bce <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 8012be6:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8012bea:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8012bee:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8012bf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012bf6:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 8012bfa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8012bfe:	f840 2b04 	str.w	r2, [r0], #4
 8012c02:	e7eb      	b.n	8012bdc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 8012c04:	4b02      	ldr	r3, [pc, #8]	; (8012c10 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8012c06:	6818      	ldr	r0, [r3, #0]
 8012c08:	6803      	ldr	r3, [r0, #0]
 8012c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c0c:	4798      	blx	r3
 8012c0e:	e76e      	b.n	8012aee <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8012c10:	2400fa1c 	.word	0x2400fa1c
 8012c14:	2400fa16 	.word	0x2400fa16

08012c18 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8012c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1c:	4607      	mov	r7, r0
 8012c1e:	b091      	sub	sp, #68	; 0x44
 8012c20:	460c      	mov	r4, r1
 8012c22:	4698      	mov	r8, r3
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d04f      	beq.n	8012cc8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 8012c28:	6808      	ldr	r0, [r1, #0]
 8012c2a:	ab0c      	add	r3, sp, #48	; 0x30
 8012c2c:	6849      	ldr	r1, [r1, #4]
 8012c2e:	4e7e      	ldr	r6, [pc, #504]	; (8012e28 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8012c30:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8012e2c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 8012c34:	c303      	stmia	r3!, {r0, r1}
 8012c36:	6810      	ldr	r0, [r2, #0]
 8012c38:	ab0e      	add	r3, sp, #56	; 0x38
 8012c3a:	6851      	ldr	r1, [r2, #4]
 8012c3c:	c303      	stmia	r3!, {r0, r1}
 8012c3e:	a80c      	add	r0, sp, #48	; 0x30
 8012c40:	f7fa ff48 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012c44:	4621      	mov	r1, r4
 8012c46:	a80e      	add	r0, sp, #56	; 0x38
 8012c48:	f7fa ff6c 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012c4c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012c50:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012c54:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012c58:	6830      	ldr	r0, [r6, #0]
 8012c5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012c5e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8012c62:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8012c66:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 8012c6a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8012c6e:	440a      	add	r2, r1
 8012c70:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012c74:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012c78:	4413      	add	r3, r2
 8012c7a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012c7e:	6803      	ldr	r3, [r0, #0]
 8012c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c82:	4798      	blx	r3
 8012c84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012c88:	d021      	beq.n	8012cce <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8012c8a:	f010 0f04 	tst.w	r0, #4
 8012c8e:	6830      	ldr	r0, [r6, #0]
 8012c90:	d020      	beq.n	8012cd4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8012c92:	2100      	movs	r1, #0
 8012c94:	f04f 0c02 	mov.w	ip, #2
 8012c98:	6806      	ldr	r6, [r0, #0]
 8012c9a:	b2a4      	uxth	r4, r4
 8012c9c:	9106      	str	r1, [sp, #24]
 8012c9e:	b2ad      	uxth	r5, r5
 8012ca0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012ca4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8012ca8:	e9cd c107 	strd	ip, r1, [sp, #28]
 8012cac:	f8b9 c000 	ldrh.w	ip, [r9]
 8012cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cb4:	9501      	str	r5, [sp, #4]
 8012cb6:	9400      	str	r4, [sp, #0]
 8012cb8:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8012cbc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012cc0:	9102      	str	r1, [sp, #8]
 8012cc2:	4639      	mov	r1, r7
 8012cc4:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8012cc6:	47a0      	blx	r4
 8012cc8:	b011      	add	sp, #68	; 0x44
 8012cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cce:	f010 0f01 	tst.w	r0, #1
 8012cd2:	e7dc      	b.n	8012c8e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 8012cd4:	6803      	ldr	r3, [r0, #0]
 8012cd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cdc:	4798      	blx	r3
 8012cde:	f8b9 c000 	ldrh.w	ip, [r9]
 8012ce2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012ce6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012cea:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012cee:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8012cf2:	fb0c 2303 	mla	r3, ip, r3, r2
 8012cf6:	ebaa 0a04 	sub.w	sl, sl, r4
 8012cfa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012cfe:	fb0c f305 	mul.w	r3, ip, r5
 8012d02:	ebac 0c04 	sub.w	ip, ip, r4
 8012d06:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8012d0a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012d0e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8012d12:	d02d      	beq.n	8012d70 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 8012d14:	ea4f 6208 	mov.w	r2, r8, lsl #24
 8012d18:	920a      	str	r2, [sp, #40]	; 0x28
 8012d1a:	4298      	cmp	r0, r3
 8012d1c:	d27d      	bcs.n	8012e1a <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8012d1e:	eb00 020b 	add.w	r2, r0, fp
 8012d22:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d26:	4290      	cmp	r0, r2
 8012d28:	d274      	bcs.n	8012e14 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 8012d2a:	f837 eb02 	ldrh.w	lr, [r7], #2
 8012d2e:	f850 4b04 	ldr.w	r4, [r0], #4
 8012d32:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 8012d36:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8012d3a:	ea4f 262e 	mov.w	r6, lr, asr #8
 8012d3e:	b2ed      	uxtb	r5, r5
 8012d40:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8012d44:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012d48:	ea5f 6914 	movs.w	r9, r4, lsr #24
 8012d4c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8012d50:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8012d54:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8012d58:	d129      	bne.n	8012dae <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 8012d5a:	0212      	lsls	r2, r2, #8
 8012d5c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8012d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d62:	4335      	orrs	r5, r6
 8012d64:	4315      	orrs	r5, r2
 8012d66:	f840 5c04 	str.w	r5, [r0, #-4]
 8012d6a:	e7db      	b.n	8012d24 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8012d6c:	4460      	add	r0, ip
 8012d6e:	4457      	add	r7, sl
 8012d70:	4298      	cmp	r0, r3
 8012d72:	d252      	bcs.n	8012e1a <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8012d74:	eb00 040b 	add.w	r4, r0, fp
 8012d78:	42a0      	cmp	r0, r4
 8012d7a:	d2f7      	bcs.n	8012d6c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 8012d7c:	f837 5b02 	ldrh.w	r5, [r7], #2
 8012d80:	10e9      	asrs	r1, r5, #3
 8012d82:	122e      	asrs	r6, r5, #8
 8012d84:	f001 02fc 	and.w	r2, r1, #252	; 0xfc
 8012d88:	00ed      	lsls	r5, r5, #3
 8012d8a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012d8e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8012d92:	b2ed      	uxtb	r5, r5
 8012d94:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8012d98:	0212      	lsls	r2, r2, #8
 8012d9a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8012d9e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8012da2:	432a      	orrs	r2, r5
 8012da4:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8012da8:	f840 2b04 	str.w	r2, [r0], #4
 8012dac:	e7e4      	b.n	8012d78 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 8012dae:	fb18 f505 	smulbb	r5, r8, r5
 8012db2:	fb08 fe09 	mul.w	lr, r8, r9
 8012db6:	fb18 f606 	smulbb	r6, r8, r6
 8012dba:	fb18 f202 	smulbb	r2, r8, r2
 8012dbe:	f10e 0101 	add.w	r1, lr, #1
 8012dc2:	eb01 212e 	add.w	r1, r1, lr, asr #8
 8012dc6:	eb08 0e09 	add.w	lr, r8, r9
 8012dca:	1209      	asrs	r1, r1, #8
 8012dcc:	eba9 0901 	sub.w	r9, r9, r1
 8012dd0:	ebae 0e01 	sub.w	lr, lr, r1
 8012dd4:	b2e1      	uxtb	r1, r4
 8012dd6:	fa5f fe8e 	uxtb.w	lr, lr
 8012dda:	fb09 5101 	mla	r1, r9, r1, r5
 8012dde:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8012de2:	fb09 6605 	mla	r6, r9, r5, r6
 8012de6:	fbb1 f1fe 	udiv	r1, r1, lr
 8012dea:	fbb6 f6fe 	udiv	r6, r6, lr
 8012dee:	b2c9      	uxtb	r1, r1
 8012df0:	0436      	lsls	r6, r6, #16
 8012df2:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 8012df6:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8012dfa:	4331      	orrs	r1, r6
 8012dfc:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8012e00:	fb09 2606 	mla	r6, r9, r6, r2
 8012e04:	fbb6 f6fe 	udiv	r6, r6, lr
 8012e08:	0236      	lsls	r6, r6, #8
 8012e0a:	b2b6      	uxth	r6, r6
 8012e0c:	4331      	orrs	r1, r6
 8012e0e:	f840 1c04 	str.w	r1, [r0, #-4]
 8012e12:	e787      	b.n	8012d24 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8012e14:	4460      	add	r0, ip
 8012e16:	4457      	add	r7, sl
 8012e18:	e77f      	b.n	8012d1a <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 8012e1a:	4b03      	ldr	r3, [pc, #12]	; (8012e28 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8012e1c:	6818      	ldr	r0, [r3, #0]
 8012e1e:	6803      	ldr	r3, [r0, #0]
 8012e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e22:	4798      	blx	r3
 8012e24:	e750      	b.n	8012cc8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 8012e26:	bf00      	nop
 8012e28:	2400fa1c 	.word	0x2400fa1c
 8012e2c:	2400fa16 	.word	0x2400fa16

08012e30 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8012e30:	b570      	push	{r4, r5, r6, lr}
 8012e32:	9c04      	ldr	r4, [sp, #16]
 8012e34:	4605      	mov	r5, r0
 8012e36:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8012e3a:	4608      	mov	r0, r1
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012e42:	2a0d      	cmp	r2, #13
 8012e44:	d825      	bhi.n	8012e92 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8012e46:	e8df f002 	tbb	[pc, r2]
 8012e4a:	1807      	.short	0x1807
 8012e4c:	1d1d1d0c 	.word	0x1d1d1d0c
 8012e50:	1d1d1d1d 	.word	0x1d1d1d1d
 8012e54:	1d1d1d1d 	.word	0x1d1d1d1d
 8012e58:	4622      	mov	r2, r4
 8012e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e5e:	f7ff bedb 	b.w	8012c18 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8012e62:	682a      	ldr	r2, [r5, #0]
 8012e64:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8012e68:	68d6      	ldr	r6, [r2, #12]
 8012e6a:	4623      	mov	r3, r4
 8012e6c:	460a      	mov	r2, r1
 8012e6e:	4601      	mov	r1, r0
 8012e70:	46b4      	mov	ip, r6
 8012e72:	4628      	mov	r0, r5
 8012e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e78:	4760      	bx	ip
 8012e7a:	4622      	mov	r2, r4
 8012e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e80:	f7ff bdda 	b.w	8012a38 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 8012e84:	4b03      	ldr	r3, [pc, #12]	; (8012e94 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8012e86:	f240 2186 	movw	r1, #646	; 0x286
 8012e8a:	4a03      	ldr	r2, [pc, #12]	; (8012e98 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8012e8c:	4803      	ldr	r0, [pc, #12]	; (8012e9c <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8012e8e:	f004 f94d 	bl	801712c <__assert_func>
 8012e92:	bd70      	pop	{r4, r5, r6, pc}
 8012e94:	0801b387 	.word	0x0801b387
 8012e98:	0801b911 	.word	0x0801b911
 8012e9c:	0801b262 	.word	0x0801b262

08012ea0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8012ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea4:	b093      	sub	sp, #76	; 0x4c
 8012ea6:	880e      	ldrh	r6, [r1, #0]
 8012ea8:	4681      	mov	r9, r0
 8012eaa:	460f      	mov	r7, r1
 8012eac:	4615      	mov	r5, r2
 8012eae:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8012eb2:	b136      	cbz	r6, 8012ec2 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8012eb4:	4b70      	ldr	r3, [pc, #448]	; (8013078 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8012eb6:	f240 117f 	movw	r1, #383	; 0x17f
 8012eba:	4a70      	ldr	r2, [pc, #448]	; (801307c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8012ebc:	4870      	ldr	r0, [pc, #448]	; (8013080 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8012ebe:	f004 f935 	bl	801712c <__assert_func>
 8012ec2:	6810      	ldr	r0, [r2, #0]
 8012ec4:	ac0e      	add	r4, sp, #56	; 0x38
 8012ec6:	6851      	ldr	r1, [r2, #4]
 8012ec8:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 8013084 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 8012ecc:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8013088 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8012ed0:	c403      	stmia	r4!, {r0, r1}
 8012ed2:	6818      	ldr	r0, [r3, #0]
 8012ed4:	ac10      	add	r4, sp, #64	; 0x40
 8012ed6:	6859      	ldr	r1, [r3, #4]
 8012ed8:	c403      	stmia	r4!, {r0, r1}
 8012eda:	a80e      	add	r0, sp, #56	; 0x38
 8012edc:	f7fa fdfa 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012ee0:	4629      	mov	r1, r5
 8012ee2:	a810      	add	r0, sp, #64	; 0x40
 8012ee4:	f7fa fe1e 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012ee8:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8012eec:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8012ef0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8012ef4:	f8da 0000 	ldr.w	r0, [sl]
 8012ef8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012efc:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8012f00:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8012f04:	4489      	add	r9, r1
 8012f06:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8012f0a:	440a      	add	r2, r1
 8012f0c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8012f10:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012f14:	4413      	add	r3, r2
 8012f16:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8012f1a:	6803      	ldr	r3, [r0, #0]
 8012f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f1e:	4798      	blx	r3
 8012f20:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012f24:	f8da 0000 	ldr.w	r0, [sl]
 8012f28:	d01e      	beq.n	8012f68 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc8>
 8012f2a:	6802      	ldr	r2, [r0, #0]
 8012f2c:	210b      	movs	r1, #11
 8012f2e:	9609      	str	r6, [sp, #36]	; 0x24
 8012f30:	2602      	movs	r6, #2
 8012f32:	b2a4      	uxth	r4, r4
 8012f34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012f38:	b2ad      	uxth	r5, r5
 8012f3a:	e9cd 1607 	strd	r1, r6, [sp, #28]
 8012f3e:	f8bb 1000 	ldrh.w	r1, [fp]
 8012f42:	9502      	str	r5, [sp, #8]
 8012f44:	9106      	str	r1, [sp, #24]
 8012f46:	2101      	movs	r1, #1
 8012f48:	9401      	str	r4, [sp, #4]
 8012f4a:	e9cd 8104 	strd	r8, r1, [sp, #16]
 8012f4e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8012f52:	9103      	str	r1, [sp, #12]
 8012f54:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8012f58:	9100      	str	r1, [sp, #0]
 8012f5a:	4649      	mov	r1, r9
 8012f5c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8012f5e:	463a      	mov	r2, r7
 8012f60:	47a0      	blx	r4
 8012f62:	b013      	add	sp, #76	; 0x4c
 8012f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f68:	6803      	ldr	r3, [r0, #0]
 8012f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f6c:	4798      	blx	r3
 8012f6e:	f8bb 3000 	ldrh.w	r3, [fp]
 8012f72:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8012f76:	f04f 0e04 	mov.w	lr, #4
 8012f7a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8012f7e:	435d      	muls	r5, r3
 8012f80:	fb03 1202 	mla	r2, r3, r2, r1
 8012f84:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8012f88:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8012f8c:	920c      	str	r2, [sp, #48]	; 0x30
 8012f8e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8012f92:	1b12      	subs	r2, r2, r4
 8012f94:	920d      	str	r2, [sp, #52]	; 0x34
 8012f96:	00a2      	lsls	r2, r4, #2
 8012f98:	1b1c      	subs	r4, r3, r4
 8012f9a:	920a      	str	r2, [sp, #40]	; 0x28
 8012f9c:	00a3      	lsls	r3, r4, #2
 8012f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fa2:	4298      	cmp	r0, r3
 8012fa4:	d261      	bcs.n	801306a <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ca>
 8012fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fa8:	eb00 0a03 	add.w	sl, r0, r3
 8012fac:	4550      	cmp	r0, sl
 8012fae:	d257      	bcs.n	8013060 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8012fb0:	f819 2b01 	ldrb.w	r2, [r9], #1
 8012fb4:	fb1e e202 	smlabb	r2, lr, r2, lr
 8012fb8:	eb07 0c02 	add.w	ip, r7, r2
 8012fbc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8012fc0:	fb03 f308 	mul.w	r3, r3, r8
 8012fc4:	1c5c      	adds	r4, r3, #1
 8012fc6:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8012fca:	1224      	asrs	r4, r4, #8
 8012fcc:	2cff      	cmp	r4, #255	; 0xff
 8012fce:	d003      	beq.n	8012fd8 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8012fd0:	6803      	ldr	r3, [r0, #0]
 8012fd2:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 8012fd6:	d10d      	bne.n	8012ff4 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x154>
 8012fd8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8012fdc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8012fe0:	021b      	lsls	r3, r3, #8
 8012fe2:	5cba      	ldrb	r2, [r7, r2]
 8012fe4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 8012fee:	6004      	str	r4, [r0, #0]
 8012ff0:	3004      	adds	r0, #4
 8012ff2:	e7db      	b.n	8012fac <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x10c>
 8012ff4:	b2e5      	uxtb	r5, r4
 8012ff6:	2c00      	cmp	r4, #0
 8012ff8:	d0fa      	beq.n	8012ff0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x150>
 8012ffa:	fb05 f10b 	mul.w	r1, r5, fp
 8012ffe:	445d      	add	r5, fp
 8013000:	5cba      	ldrb	r2, [r7, r2]
 8013002:	1c4e      	adds	r6, r1, #1
 8013004:	eb06 2121 	add.w	r1, r6, r1, asr #8
 8013008:	f3c3 4607 	ubfx	r6, r3, #16, #8
 801300c:	1209      	asrs	r1, r1, #8
 801300e:	1a6d      	subs	r5, r5, r1
 8013010:	ebab 0101 	sub.w	r1, fp, r1
 8013014:	f89c b002 	ldrb.w	fp, [ip, #2]
 8013018:	b2ed      	uxtb	r5, r5
 801301a:	fb04 fb0b 	mul.w	fp, r4, fp
 801301e:	fb01 b606 	mla	r6, r1, r6, fp
 8013022:	fa5f fb83 	uxtb.w	fp, r3
 8013026:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801302a:	fb01 fb0b 	mul.w	fp, r1, fp
 801302e:	fb04 b202 	mla	r2, r4, r2, fp
 8013032:	fbb6 f6f5 	udiv	r6, r6, r5
 8013036:	fbb2 f2f5 	udiv	r2, r2, r5
 801303a:	0436      	lsls	r6, r6, #16
 801303c:	b2d2      	uxtb	r2, r2
 801303e:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8013042:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8013046:	4316      	orrs	r6, r2
 8013048:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801304c:	4354      	muls	r4, r2
 801304e:	fb01 4203 	mla	r2, r1, r3, r4
 8013052:	fbb2 f2f5 	udiv	r2, r2, r5
 8013056:	0212      	lsls	r2, r2, #8
 8013058:	b292      	uxth	r2, r2
 801305a:	4316      	orrs	r6, r2
 801305c:	6006      	str	r6, [r0, #0]
 801305e:	e7c7      	b.n	8012ff0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x150>
 8013060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013062:	4418      	add	r0, r3
 8013064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013066:	4499      	add	r9, r3
 8013068:	e79a      	b.n	8012fa0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801306a:	4b06      	ldr	r3, [pc, #24]	; (8013084 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801306c:	6818      	ldr	r0, [r3, #0]
 801306e:	6803      	ldr	r3, [r0, #0]
 8013070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013072:	4798      	blx	r3
 8013074:	e775      	b.n	8012f62 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc2>
 8013076:	bf00      	nop
 8013078:	0801b160 	.word	0x0801b160
 801307c:	0801b6e2 	.word	0x0801b6e2
 8013080:	0801b262 	.word	0x0801b262
 8013084:	2400fa1c 	.word	0x2400fa1c
 8013088:	2400fa16 	.word	0x2400fa16

0801308c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013090:	4615      	mov	r5, r2
 8013092:	880a      	ldrh	r2, [r1, #0]
 8013094:	b093      	sub	sp, #76	; 0x4c
 8013096:	4606      	mov	r6, r0
 8013098:	2a01      	cmp	r2, #1
 801309a:	4688      	mov	r8, r1
 801309c:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
 80130a0:	d006      	beq.n	80130b0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 80130a2:	4b7b      	ldr	r3, [pc, #492]	; (8013290 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x204>)
 80130a4:	f240 11c9 	movw	r1, #457	; 0x1c9
 80130a8:	4a7a      	ldr	r2, [pc, #488]	; (8013294 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 80130aa:	487b      	ldr	r0, [pc, #492]	; (8013298 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 80130ac:	f004 f83e 	bl	801712c <__assert_func>
 80130b0:	6828      	ldr	r0, [r5, #0]
 80130b2:	ac0e      	add	r4, sp, #56	; 0x38
 80130b4:	6869      	ldr	r1, [r5, #4]
 80130b6:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80132a0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>
 80130ba:	c403      	stmia	r4!, {r0, r1}
 80130bc:	6818      	ldr	r0, [r3, #0]
 80130be:	ac10      	add	r4, sp, #64	; 0x40
 80130c0:	6859      	ldr	r1, [r3, #4]
 80130c2:	c403      	stmia	r4!, {r0, r1}
 80130c4:	a80e      	add	r0, sp, #56	; 0x38
 80130c6:	f7fa fd05 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80130ca:	4629      	mov	r1, r5
 80130cc:	a810      	add	r0, sp, #64	; 0x40
 80130ce:	f7fa fd29 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80130d2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80130d6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80130da:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80130de:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80130e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80130e6:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	; 0x46
 80130ea:	1875      	adds	r5, r6, r1
 80130ec:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80130f0:	4e6a      	ldr	r6, [pc, #424]	; (801329c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 80130f2:	440a      	add	r2, r1
 80130f4:	6830      	ldr	r0, [r6, #0]
 80130f6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80130fa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80130fe:	4413      	add	r3, r2
 8013100:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8013104:	6803      	ldr	r3, [r0, #0]
 8013106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013108:	4798      	blx	r3
 801310a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801310e:	d020      	beq.n	8013152 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8013110:	6830      	ldr	r0, [r6, #0]
 8013112:	2200      	movs	r2, #0
 8013114:	2602      	movs	r6, #2
 8013116:	b2a4      	uxth	r4, r4
 8013118:	6801      	ldr	r1, [r0, #0]
 801311a:	b2bf      	uxth	r7, r7
 801311c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013120:	e9cd 6208 	strd	r6, r2, [sp, #32]
 8013124:	260b      	movs	r6, #11
 8013126:	9607      	str	r6, [sp, #28]
 8013128:	f8ba 6000 	ldrh.w	r6, [sl]
 801312c:	f8cd 9010 	str.w	r9, [sp, #16]
 8013130:	9702      	str	r7, [sp, #8]
 8013132:	9401      	str	r4, [sp, #4]
 8013134:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8013138:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801313c:	9203      	str	r2, [sp, #12]
 801313e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8013142:	9200      	str	r2, [sp, #0]
 8013144:	4642      	mov	r2, r8
 8013146:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8013148:	4629      	mov	r1, r5
 801314a:	47a0      	blx	r4
 801314c:	b013      	add	sp, #76	; 0x4c
 801314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013152:	6830      	ldr	r0, [r6, #0]
 8013154:	f108 0804 	add.w	r8, r8, #4
 8013158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801315c:	6803      	ldr	r3, [r0, #0]
 801315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013160:	4798      	blx	r3
 8013162:	f8ba c000 	ldrh.w	ip, [sl]
 8013166:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801316a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801316e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8013172:	fb0c f707 	mul.w	r7, ip, r7
 8013176:	fb0c 2303 	mla	r3, ip, r3, r2
 801317a:	ebac 0c04 	sub.w	ip, ip, r4
 801317e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013182:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8013186:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801318a:	eba3 0304 	sub.w	r3, r3, r4
 801318e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8013192:	930b      	str	r3, [sp, #44]	; 0x2c
 8013194:	d026      	beq.n	80131e4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x158>
 8013196:	ea4f 6309 	mov.w	r3, r9, lsl #24
 801319a:	930c      	str	r3, [sp, #48]	; 0x30
 801319c:	42b8      	cmp	r0, r7
 801319e:	d270      	bcs.n	8013282 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80131a0:	eb00 030b 	add.w	r3, r0, fp
 80131a4:	930d      	str	r3, [sp, #52]	; 0x34
 80131a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131a8:	4298      	cmp	r0, r3
 80131aa:	d266      	bcs.n	801327a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ee>
 80131ac:	f815 1b01 	ldrb.w	r1, [r5], #1
 80131b0:	f850 3b04 	ldr.w	r3, [r0], #4
 80131b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80131b8:	0e1c      	lsrs	r4, r3, #24
 80131ba:	eb08 0201 	add.w	r2, r8, r1
 80131be:	f818 6001 	ldrb.w	r6, [r8, r1]
 80131c2:	f892 e001 	ldrb.w	lr, [r2, #1]
 80131c6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80131ca:	d124      	bne.n	8013216 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80131cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131ce:	431e      	orrs	r6, r3
 80131d0:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80131d4:	ea46 260e 	orr.w	r6, r6, lr, lsl #8
 80131d8:	f840 6c04 	str.w	r6, [r0, #-4]
 80131dc:	e7e3      	b.n	80131a6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11a>
 80131de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131e0:	4460      	add	r0, ip
 80131e2:	441d      	add	r5, r3
 80131e4:	42b8      	cmp	r0, r7
 80131e6:	d24c      	bcs.n	8013282 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80131e8:	eb00 010b 	add.w	r1, r0, fp
 80131ec:	4288      	cmp	r0, r1
 80131ee:	d2f6      	bcs.n	80131de <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x152>
 80131f0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80131f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80131f8:	f818 3002 	ldrb.w	r3, [r8, r2]
 80131fc:	eb08 0402 	add.w	r4, r8, r2
 8013200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013204:	78a6      	ldrb	r6, [r4, #2]
 8013206:	7862      	ldrb	r2, [r4, #1]
 8013208:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801320c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013210:	f840 3b04 	str.w	r3, [r0], #4
 8013214:	e7ea      	b.n	80131ec <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x160>
 8013216:	fb19 f606 	smulbb	r6, r9, r6
 801321a:	fb09 f204 	mul.w	r2, r9, r4
 801321e:	fb19 fa0a 	smulbb	sl, r9, sl
 8013222:	fb19 fe0e 	smulbb	lr, r9, lr
 8013226:	1c51      	adds	r1, r2, #1
 8013228:	eb01 2122 	add.w	r1, r1, r2, asr #8
 801322c:	eb09 0204 	add.w	r2, r9, r4
 8013230:	1209      	asrs	r1, r1, #8
 8013232:	1a52      	subs	r2, r2, r1
 8013234:	1a61      	subs	r1, r4, r1
 8013236:	b2dc      	uxtb	r4, r3
 8013238:	b2d2      	uxtb	r2, r2
 801323a:	fb01 6604 	mla	r6, r1, r4, r6
 801323e:	f3c3 4407 	ubfx	r4, r3, #16, #8
 8013242:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013246:	fb01 aa04 	mla	sl, r1, r4, sl
 801324a:	fb01 e303 	mla	r3, r1, r3, lr
 801324e:	fbb6 f6f2 	udiv	r6, r6, r2
 8013252:	fbba faf2 	udiv	sl, sl, r2
 8013256:	b2f6      	uxtb	r6, r6
 8013258:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 801325c:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8013260:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8013264:	ea46 060a 	orr.w	r6, r6, sl
 8013268:	fbb3 faf2 	udiv	sl, r3, r2
 801326c:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8013270:	fa1f fa8a 	uxth.w	sl, sl
 8013274:	ea46 060a 	orr.w	r6, r6, sl
 8013278:	e7ae      	b.n	80131d8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14c>
 801327a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801327c:	4460      	add	r0, ip
 801327e:	441d      	add	r5, r3
 8013280:	e78c      	b.n	801319c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x110>
 8013282:	4b06      	ldr	r3, [pc, #24]	; (801329c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 8013284:	6818      	ldr	r0, [r3, #0]
 8013286:	6803      	ldr	r3, [r0, #0]
 8013288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801328a:	4798      	blx	r3
 801328c:	e75e      	b.n	801314c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801328e:	bf00      	nop
 8013290:	0801b112 	.word	0x0801b112
 8013294:	0801b5d5 	.word	0x0801b5d5
 8013298:	0801b262 	.word	0x0801b262
 801329c:	2400fa1c 	.word	0x2400fa1c
 80132a0:	2400fa16 	.word	0x2400fa16

080132a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80132a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a8:	4616      	mov	r6, r2
 80132aa:	880a      	ldrh	r2, [r1, #0]
 80132ac:	b089      	sub	sp, #36	; 0x24
 80132ae:	4605      	mov	r5, r0
 80132b0:	2a02      	cmp	r2, #2
 80132b2:	4689      	mov	r9, r1
 80132b4:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80132b8:	d006      	beq.n	80132c8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80132ba:	4b6f      	ldr	r3, [pc, #444]	; (8013478 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d4>)
 80132bc:	f240 2123 	movw	r1, #547	; 0x223
 80132c0:	4a6e      	ldr	r2, [pc, #440]	; (801347c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80132c2:	486f      	ldr	r0, [pc, #444]	; (8013480 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80132c4:	f003 ff32 	bl	801712c <__assert_func>
 80132c8:	6830      	ldr	r0, [r6, #0]
 80132ca:	ac04      	add	r4, sp, #16
 80132cc:	6871      	ldr	r1, [r6, #4]
 80132ce:	f109 0904 	add.w	r9, r9, #4
 80132d2:	c403      	stmia	r4!, {r0, r1}
 80132d4:	6818      	ldr	r0, [r3, #0]
 80132d6:	ac06      	add	r4, sp, #24
 80132d8:	6859      	ldr	r1, [r3, #4]
 80132da:	c403      	stmia	r4!, {r0, r1}
 80132dc:	a804      	add	r0, sp, #16
 80132de:	f7fa fbf9 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80132e2:	4631      	mov	r1, r6
 80132e4:	a806      	add	r0, sp, #24
 80132e6:	f7fa fc1d 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80132ea:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80132ee:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80132f2:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 80132f6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80132fa:	fb16 2103 	smlabb	r1, r6, r3, r2
 80132fe:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 8013302:	186e      	adds	r6, r5, r1
 8013304:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8013308:	440a      	add	r2, r1
 801330a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801330e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013312:	4413      	add	r3, r2
 8013314:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013318:	4b5a      	ldr	r3, [pc, #360]	; (8013484 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801331a:	6818      	ldr	r0, [r3, #0]
 801331c:	6803      	ldr	r3, [r0, #0]
 801331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013320:	4798      	blx	r3
 8013322:	4b59      	ldr	r3, [pc, #356]	; (8013488 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8013324:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8013328:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801332c:	f8b3 c000 	ldrh.w	ip, [r3]
 8013330:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013334:	fb0a fa0c 	mul.w	sl, sl, ip
 8013338:	fb0c 2303 	mla	r3, ip, r3, r2
 801333c:	ebac 0c0b 	sub.w	ip, ip, fp
 8013340:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013344:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013348:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801334c:	eba3 030b 	sub.w	r3, r3, fp
 8013350:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8013354:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8013358:	9301      	str	r3, [sp, #4]
 801335a:	d02e      	beq.n	80133ba <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x116>
 801335c:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8013360:	9302      	str	r3, [sp, #8]
 8013362:	4550      	cmp	r0, sl
 8013364:	d27f      	bcs.n	8013466 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c2>
 8013366:	eb00 030b 	add.w	r3, r0, fp
 801336a:	9303      	str	r3, [sp, #12]
 801336c:	9b03      	ldr	r3, [sp, #12]
 801336e:	4298      	cmp	r0, r3
 8013370:	d275      	bcs.n	801345e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 8013372:	f816 3b01 	ldrb.w	r3, [r6], #1
 8013376:	6802      	ldr	r2, [r0, #0]
 8013378:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 801337c:	0e17      	lsrs	r7, r2, #24
 801337e:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8013382:	ea4f 03e1 	mov.w	r3, r1, asr #3
 8013386:	ea4f 2521 	mov.w	r5, r1, asr #8
 801338a:	b2e4      	uxtb	r4, r4
 801338c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8013390:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8013394:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8013398:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801339c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80133a0:	d12c      	bne.n	80133fc <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x158>
 80133a2:	021b      	lsls	r3, r3, #8
 80133a4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80133a8:	9b02      	ldr	r3, [sp, #8]
 80133aa:	432c      	orrs	r4, r5
 80133ac:	431c      	orrs	r4, r3
 80133ae:	6004      	str	r4, [r0, #0]
 80133b0:	3004      	adds	r0, #4
 80133b2:	e7db      	b.n	801336c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc8>
 80133b4:	9b01      	ldr	r3, [sp, #4]
 80133b6:	4460      	add	r0, ip
 80133b8:	441e      	add	r6, r3
 80133ba:	4550      	cmp	r0, sl
 80133bc:	d253      	bcs.n	8013466 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c2>
 80133be:	eb00 020b 	add.w	r2, r0, fp
 80133c2:	4290      	cmp	r0, r2
 80133c4:	d2f6      	bcs.n	80133b4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x110>
 80133c6:	f816 3b01 	ldrb.w	r3, [r6], #1
 80133ca:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 80133ce:	10e9      	asrs	r1, r5, #3
 80133d0:	122c      	asrs	r4, r5, #8
 80133d2:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80133d6:	00e9      	lsls	r1, r5, #3
 80133d8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80133dc:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80133e0:	b2c9      	uxtb	r1, r1
 80133e2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80133e6:	021b      	lsls	r3, r3, #8
 80133e8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80133ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80133f0:	430b      	orrs	r3, r1
 80133f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80133f6:	f840 3b04 	str.w	r3, [r0], #4
 80133fa:	e7e2      	b.n	80133c2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x11e>
 80133fc:	fb18 f404 	smulbb	r4, r8, r4
 8013400:	fb08 fe07 	mul.w	lr, r8, r7
 8013404:	fb18 f505 	smulbb	r5, r8, r5
 8013408:	fb18 f303 	smulbb	r3, r8, r3
 801340c:	f10e 0101 	add.w	r1, lr, #1
 8013410:	eb01 212e 	add.w	r1, r1, lr, asr #8
 8013414:	eb08 0e07 	add.w	lr, r8, r7
 8013418:	1209      	asrs	r1, r1, #8
 801341a:	ebae 0e01 	sub.w	lr, lr, r1
 801341e:	1a79      	subs	r1, r7, r1
 8013420:	b2d7      	uxtb	r7, r2
 8013422:	fa5f fe8e 	uxtb.w	lr, lr
 8013426:	fb01 4707 	mla	r7, r1, r7, r4
 801342a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801342e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8013432:	fb01 5504 	mla	r5, r1, r4, r5
 8013436:	fb01 3202 	mla	r2, r1, r2, r3
 801343a:	fbb7 f7fe 	udiv	r7, r7, lr
 801343e:	fbb5 f5fe 	udiv	r5, r5, lr
 8013442:	b2ff      	uxtb	r7, r7
 8013444:	042d      	lsls	r5, r5, #16
 8013446:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 801344a:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 801344e:	432f      	orrs	r7, r5
 8013450:	fbb2 f5fe 	udiv	r5, r2, lr
 8013454:	022d      	lsls	r5, r5, #8
 8013456:	b2ad      	uxth	r5, r5
 8013458:	432f      	orrs	r7, r5
 801345a:	6007      	str	r7, [r0, #0]
 801345c:	e7a8      	b.n	80133b0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10c>
 801345e:	9b01      	ldr	r3, [sp, #4]
 8013460:	4460      	add	r0, ip
 8013462:	441e      	add	r6, r3
 8013464:	e77d      	b.n	8013362 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xbe>
 8013466:	4b07      	ldr	r3, [pc, #28]	; (8013484 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8013468:	6818      	ldr	r0, [r3, #0]
 801346a:	6803      	ldr	r3, [r0, #0]
 801346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801346e:	4798      	blx	r3
 8013470:	b009      	add	sp, #36	; 0x24
 8013472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013476:	bf00      	nop
 8013478:	0801b0c4 	.word	0x0801b0c4
 801347c:	0801b54c 	.word	0x0801b54c
 8013480:	0801b262 	.word	0x0801b262
 8013484:	2400fa1c 	.word	0x2400fa1c
 8013488:	2400fa16 	.word	0x2400fa16

0801348c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801348c:	b430      	push	{r4, r5}
 801348e:	780d      	ldrb	r5, [r1, #0]
 8013490:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013494:	2d01      	cmp	r5, #1
 8013496:	d00a      	beq.n	80134ae <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8013498:	d305      	bcc.n	80134a6 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801349a:	2d02      	cmp	r5, #2
 801349c:	d10b      	bne.n	80134b6 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801349e:	9402      	str	r4, [sp, #8]
 80134a0:	bc30      	pop	{r4, r5}
 80134a2:	f7ff beff 	b.w	80132a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80134a6:	9402      	str	r4, [sp, #8]
 80134a8:	bc30      	pop	{r4, r5}
 80134aa:	f7ff bcf9 	b.w	8012ea0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80134ae:	9402      	str	r4, [sp, #8]
 80134b0:	bc30      	pop	{r4, r5}
 80134b2:	f7ff bdeb 	b.w	801308c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80134b6:	bc30      	pop	{r4, r5}
 80134b8:	4770      	bx	lr
	...

080134bc <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80134bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134c0:	b085      	sub	sp, #20
 80134c2:	4606      	mov	r6, r0
 80134c4:	460c      	mov	r4, r1
 80134c6:	4691      	mov	r9, r2
 80134c8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80134cc:	4698      	mov	r8, r3
 80134ce:	b1d5      	cbz	r5, 8013506 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80134d0:	4608      	mov	r0, r1
 80134d2:	f7fd fd9f 	bl	8011014 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80134d6:	4607      	mov	r7, r0
 80134d8:	4620      	mov	r0, r4
 80134da:	f7fd fdd5 	bl	8011088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80134de:	f8ad 000e 	strh.w	r0, [sp, #14]
 80134e2:	4620      	mov	r0, r4
 80134e4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80134e8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80134ec:	f8ad 700c 	strh.w	r7, [sp, #12]
 80134f0:	f7fd ff22 	bl	8011338 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80134f4:	b950      	cbnz	r0, 801350c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 80134f6:	4620      	mov	r0, r4
 80134f8:	f7fd fe94 	bl	8011224 <_ZNK8touchgfx6Bitmap7getDataEv>
 80134fc:	462b      	mov	r3, r5
 80134fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013500:	a902      	add	r1, sp, #8
 8013502:	f7ff fb89 	bl	8012c18 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8013506:	b005      	add	sp, #20
 8013508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801350c:	2801      	cmp	r0, #1
 801350e:	d108      	bne.n	8013522 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 8013510:	4620      	mov	r0, r4
 8013512:	f7fd fe87 	bl	8011224 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013516:	462b      	mov	r3, r5
 8013518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801351a:	a902      	add	r1, sp, #8
 801351c:	f7ff fa8c 	bl	8012a38 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 8013520:	e7f1      	b.n	8013506 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8013522:	2802      	cmp	r0, #2
 8013524:	d110      	bne.n	8013548 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8013526:	6833      	ldr	r3, [r6, #0]
 8013528:	4620      	mov	r0, r4
 801352a:	68df      	ldr	r7, [r3, #12]
 801352c:	f7fd fe7a 	bl	8011224 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013530:	4680      	mov	r8, r0
 8013532:	4620      	mov	r0, r4
 8013534:	f7fd fe3c 	bl	80111b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8013538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801353a:	aa02      	add	r2, sp, #8
 801353c:	4641      	mov	r1, r8
 801353e:	e9cd 5000 	strd	r5, r0, [sp]
 8013542:	4630      	mov	r0, r6
 8013544:	47b8      	blx	r7
 8013546:	e7de      	b.n	8013506 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8013548:	280b      	cmp	r0, #11
 801354a:	d10e      	bne.n	801356a <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801354c:	4620      	mov	r0, r4
 801354e:	f7fd fe69 	bl	8011224 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013552:	4606      	mov	r6, r0
 8013554:	4620      	mov	r0, r4
 8013556:	f7fd fe97 	bl	8011288 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801355a:	9500      	str	r5, [sp, #0]
 801355c:	4601      	mov	r1, r0
 801355e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013560:	aa02      	add	r2, sp, #8
 8013562:	4630      	mov	r0, r6
 8013564:	f7ff ff92 	bl	801348c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8013568:	e7cd      	b.n	8013506 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 801356a:	4b03      	ldr	r3, [pc, #12]	; (8013578 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801356c:	2155      	movs	r1, #85	; 0x55
 801356e:	4a03      	ldr	r2, [pc, #12]	; (801357c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8013570:	4803      	ldr	r0, [pc, #12]	; (8013580 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8013572:	f003 fddb 	bl	801712c <__assert_func>
 8013576:	bf00      	nop
 8013578:	0801b387 	.word	0x0801b387
 801357c:	0801b65e 	.word	0x0801b65e
 8013580:	0801b262 	.word	0x0801b262

08013584 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 8013584:	b158      	cbz	r0, 801359e <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8013586:	2902      	cmp	r1, #2
 8013588:	d00f      	beq.n	80135aa <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x26>
 801358a:	2903      	cmp	r1, #3
 801358c:	d010      	beq.n	80135b0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801358e:	2901      	cmp	r1, #1
 8013590:	d101      	bne.n	8013596 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x12>
 8013592:	2001      	movs	r0, #1
 8013594:	4770      	bx	lr
 8013596:	4b08      	ldr	r3, [pc, #32]	; (80135b8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8013598:	8819      	ldrh	r1, [r3, #0]
 801359a:	4248      	negs	r0, r1
 801359c:	4770      	bx	lr
 801359e:	2902      	cmp	r1, #2
 80135a0:	d006      	beq.n	80135b0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80135a2:	2903      	cmp	r1, #3
 80135a4:	d0f7      	beq.n	8013596 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x12>
 80135a6:	2901      	cmp	r1, #1
 80135a8:	d1f3      	bne.n	8013592 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0xe>
 80135aa:	4b03      	ldr	r3, [pc, #12]	; (80135b8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80135ac:	8818      	ldrh	r0, [r3, #0]
 80135ae:	4770      	bx	lr
 80135b0:	f04f 30ff 	mov.w	r0, #4294967295
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	2400fa16 	.word	0x2400fa16

080135bc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 80135bc:	b170      	cbz	r0, 80135dc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x20>
 80135be:	2902      	cmp	r1, #2
 80135c0:	d012      	beq.n	80135e8 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x2c>
 80135c2:	2903      	cmp	r1, #3
 80135c4:	d006      	beq.n	80135d4 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x18>
 80135c6:	2901      	cmp	r1, #1
 80135c8:	d001      	beq.n	80135ce <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x12>
 80135ca:	2001      	movs	r0, #1
 80135cc:	4770      	bx	lr
 80135ce:	4b08      	ldr	r3, [pc, #32]	; (80135f0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x34>)
 80135d0:	8818      	ldrh	r0, [r3, #0]
 80135d2:	4770      	bx	lr
 80135d4:	4b06      	ldr	r3, [pc, #24]	; (80135f0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x34>)
 80135d6:	8818      	ldrh	r0, [r3, #0]
 80135d8:	4240      	negs	r0, r0
 80135da:	4770      	bx	lr
 80135dc:	2902      	cmp	r1, #2
 80135de:	d0f9      	beq.n	80135d4 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x18>
 80135e0:	2903      	cmp	r1, #3
 80135e2:	d0f2      	beq.n	80135ca <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0xe>
 80135e4:	2901      	cmp	r1, #1
 80135e6:	d1f2      	bne.n	80135ce <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x12>
 80135e8:	f04f 30ff 	mov.w	r0, #4294967295
 80135ec:	4770      	bx	lr
 80135ee:	bf00      	nop
 80135f0:	2400fa16 	.word	0x2400fa16

080135f4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80135f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f8:	b099      	sub	sp, #100	; 0x64
 80135fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80135fc:	a914      	add	r1, sp, #80	; 0x50
 80135fe:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8013602:	f8bd 7090 	ldrh.w	r7, [sp, #144]	; 0x90
 8013606:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 801360a:	f89d 90b4 	ldrb.w	r9, [sp, #180]	; 0xb4
 801360e:	e881 000c 	stmia.w	r1, {r2, r3}
 8013612:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8013616:	930a      	str	r3, [sp, #40]	; 0x28
 8013618:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801361c:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8013620:	9310      	str	r3, [sp, #64]	; 0x40
 8013622:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8013626:	9309      	str	r3, [sp, #36]	; 0x24
 8013628:	7b4b      	ldrb	r3, [r1, #13]
 801362a:	ea4f 1843 	mov.w	r8, r3, lsl #5
 801362e:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8013632:	f891 8006 	ldrb.w	r8, [r1, #6]
 8013636:	ea58 0800 	orrs.w	r8, r8, r0
 801363a:	f000 815c 	beq.w	80138f6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801363e:	011b      	lsls	r3, r3, #4
 8013640:	79c8      	ldrb	r0, [r1, #7]
 8013642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013646:	4303      	orrs	r3, r0
 8013648:	930d      	str	r3, [sp, #52]	; 0x34
 801364a:	f000 8154 	beq.w	80138f6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801364e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8013652:	b29b      	uxth	r3, r3
 8013654:	2f00      	cmp	r7, #0
 8013656:	f000 80f4 	beq.w	8013842 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24e>
 801365a:	1aff      	subs	r7, r7, r3
 801365c:	b2bf      	uxth	r7, r7
 801365e:	043d      	lsls	r5, r7, #16
 8013660:	d502      	bpl.n	8013668 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8013662:	1bf6      	subs	r6, r6, r7
 8013664:	2700      	movs	r7, #0
 8013666:	b236      	sxth	r6, r6
 8013668:	f9b2 1000 	ldrsh.w	r1, [r2]
 801366c:	fa1f f588 	uxth.w	r5, r8
 8013670:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8013674:	428e      	cmp	r6, r1
 8013676:	b28b      	uxth	r3, r1
 8013678:	bfbf      	itttt	lt
 801367a:	18ff      	addlt	r7, r7, r3
 801367c:	1bbe      	sublt	r6, r7, r6
 801367e:	b2b7      	uxthlt	r7, r6
 8013680:	460e      	movlt	r6, r1
 8013682:	8891      	ldrh	r1, [r2, #4]
 8013684:	440b      	add	r3, r1
 8013686:	4631      	mov	r1, r6
 8013688:	b21b      	sxth	r3, r3
 801368a:	930f      	str	r3, [sp, #60]	; 0x3c
 801368c:	88d3      	ldrh	r3, [r2, #6]
 801368e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013690:	449a      	add	sl, r3
 8013692:	fa0f f38a 	sxth.w	r3, sl
 8013696:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 801369a:	930e      	str	r3, [sp, #56]	; 0x38
 801369c:	4bb2      	ldr	r3, [pc, #712]	; (8013968 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801369e:	f893 b000 	ldrb.w	fp, [r3]
 80136a2:	f10b 30ff 	add.w	r0, fp, #4294967295
 80136a6:	4243      	negs	r3, r0
 80136a8:	4143      	adcs	r3, r0
 80136aa:	a814      	add	r0, sp, #80	; 0x50
 80136ac:	930c      	str	r3, [sp, #48]	; 0x30
 80136ae:	464b      	mov	r3, r9
 80136b0:	f7fa f894 	bl	800d7dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80136b4:	4631      	mov	r1, r6
 80136b6:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80136ba:	464b      	mov	r3, r9
 80136bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136be:	a814      	add	r0, sp, #80	; 0x50
 80136c0:	f7fa f8a4 	bl	800d80c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80136c4:	a918      	add	r1, sp, #96	; 0x60
 80136c6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80136ca:	a817      	add	r0, sp, #92	; 0x5c
 80136cc:	f7fa f9c0 	bl	800da50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80136d0:	f1b9 0f00 	cmp.w	r9, #0
 80136d4:	f040 80b8 	bne.w	8013848 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x254>
 80136d8:	f1bb 0f01 	cmp.w	fp, #1
 80136dc:	f040 80bc 	bne.w	8013858 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 80136e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80136e2:	b153      	cbz	r3, 80136fa <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 80136e4:	2508      	movs	r5, #8
 80136e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136e8:	fb95 f3f3 	sdiv	r3, r5, r3
 80136ec:	1e5d      	subs	r5, r3, #1
 80136ee:	4445      	add	r5, r8
 80136f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80136f4:	fb15 f503 	smulbb	r5, r5, r3
 80136f8:	b2ad      	uxth	r5, r5
 80136fa:	b907      	cbnz	r7, 80136fe <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80136fc:	b16c      	cbz	r4, 801371a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 80136fe:	fb04 7305 	mla	r3, r4, r5, r7
 8013702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013704:	ebaa 0a04 	sub.w	sl, sl, r4
 8013708:	4353      	muls	r3, r2
 801370a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801370c:	fa1f fa8a 	uxth.w	sl, sl
 8013710:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8013714:	f003 0407 	and.w	r4, r3, #7
 8013718:	9228      	str	r2, [sp, #160]	; 0xa0
 801371a:	4649      	mov	r1, r9
 801371c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801371e:	f7ff ff31 	bl	8013584 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 8013722:	4649      	mov	r1, r9
 8013724:	4683      	mov	fp, r0
 8013726:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013728:	f7ff ff48 	bl	80135bc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 801372c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801372e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013730:	4681      	mov	r9, r0
 8013732:	1a9b      	subs	r3, r3, r2
 8013734:	459a      	cmp	sl, r3
 8013736:	bfa8      	it	ge
 8013738:	469a      	movge	sl, r3
 801373a:	f1ba 0f00 	cmp.w	sl, #0
 801373e:	f340 80da 	ble.w	80138f6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8013742:	1bf6      	subs	r6, r6, r7
 8013744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013746:	1b9e      	subs	r6, r3, r6
 8013748:	4546      	cmp	r6, r8
 801374a:	bfd4      	ite	le
 801374c:	ebc7 0706 	rsble	r7, r7, r6
 8013750:	ebc7 0708 	rsbgt	r7, r7, r8
 8013754:	2f00      	cmp	r7, #0
 8013756:	f340 80ce 	ble.w	80138f6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801375a:	1bed      	subs	r5, r5, r7
 801375c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801375e:	436b      	muls	r3, r5
 8013760:	930e      	str	r3, [sp, #56]	; 0x38
 8013762:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013764:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8013768:	0c1d      	lsrs	r5, r3, #16
 801376a:	0a1e      	lsrs	r6, r3, #8
 801376c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013770:	930f      	str	r3, [sp, #60]	; 0x3c
 8013772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013774:	2b00      	cmp	r3, #0
 8013776:	f040 80c3 	bne.w	8013900 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 801377a:	4b7c      	ldr	r3, [pc, #496]	; (801396c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801377c:	6818      	ldr	r0, [r3, #0]
 801377e:	6803      	ldr	r3, [r0, #0]
 8013780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013782:	4798      	blx	r3
 8013784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013786:	2301      	movs	r3, #1
 8013788:	4093      	lsls	r3, r2
 801378a:	4a79      	ldr	r2, [pc, #484]	; (8013970 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801378c:	3b01      	subs	r3, #1
 801378e:	8811      	ldrh	r1, [r2, #0]
 8013790:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8013794:	b2db      	uxtb	r3, r3
 8013796:	930d      	str	r3, [sp, #52]	; 0x34
 8013798:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801379c:	fb01 2303 	mla	r3, r1, r3, r2
 80137a0:	22ff      	movs	r2, #255	; 0xff
 80137a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80137a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80137a8:	fb92 f2f1 	sdiv	r2, r2, r1
 80137ac:	fb02 f208 	mul.w	r2, r2, r8
 80137b0:	930a      	str	r3, [sp, #40]	; 0x28
 80137b2:	9210      	str	r2, [sp, #64]	; 0x40
 80137b4:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80137b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80137ba:	fb07 9b1b 	mls	fp, r7, fp, r9
 80137be:	920c      	str	r2, [sp, #48]	; 0x30
 80137c0:	fb02 f907 	mul.w	r9, r2, r7
 80137c4:	b2f2      	uxtb	r2, r6
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	9211      	str	r2, [sp, #68]	; 0x44
 80137ca:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 80137ce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80137d0:	4123      	asrs	r3, r4
 80137d2:	b2d2      	uxtb	r2, r2
 80137d4:	b2db      	uxtb	r3, r3
 80137d6:	9212      	str	r2, [sp, #72]	; 0x48
 80137d8:	b2ea      	uxtb	r2, r5
 80137da:	9213      	str	r2, [sp, #76]	; 0x4c
 80137dc:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80137e0:	f0c0 80d9 	bcc.w	8013996 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80137e4:	46b8      	mov	r8, r7
 80137e6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80137ea:	f118 38ff 	adds.w	r8, r8, #4294967295
 80137ee:	f0c0 80c1 	bcc.w	8013974 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80137f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137f4:	401a      	ands	r2, r3
 80137f6:	d013      	beq.n	8013820 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 80137f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80137fa:	fb12 f201 	smulbb	r2, r2, r1
 80137fe:	b292      	uxth	r2, r2
 8013800:	1c51      	adds	r1, r2, #1
 8013802:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8013806:	1209      	asrs	r1, r1, #8
 8013808:	b2ce      	uxtb	r6, r1
 801380a:	2eff      	cmp	r6, #255	; 0xff
 801380c:	d003      	beq.n	8013816 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 801380e:	f8dc 5000 	ldr.w	r5, [ip]
 8013812:	0e2a      	lsrs	r2, r5, #24
 8013814:	d176      	bne.n	8013904 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x310>
 8013816:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013818:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 801381c:	f8cc 1000 	str.w	r1, [ip]
 8013820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013822:	4414      	add	r4, r2
 8013824:	b2a4      	uxth	r4, r4
 8013826:	2c07      	cmp	r4, #7
 8013828:	bf89      	itett	hi
 801382a:	9a28      	ldrhi	r2, [sp, #160]	; 0xa0
 801382c:	4113      	asrls	r3, r2
 801382e:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8013830:	2400      	movhi	r4, #0
 8013832:	bf89      	itett	hi
 8013834:	3201      	addhi	r2, #1
 8013836:	b2db      	uxtbls	r3, r3
 8013838:	785b      	ldrbhi	r3, [r3, #1]
 801383a:	9228      	strhi	r2, [sp, #160]	; 0xa0
 801383c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801383e:	4494      	add	ip, r2
 8013840:	e7d3      	b.n	80137ea <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 8013842:	441e      	add	r6, r3
 8013844:	b236      	sxth	r6, r6
 8013846:	e70f      	b.n	8013668 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8013848:	f1b9 0f01 	cmp.w	r9, #1
 801384c:	f47f af48 	bne.w	80136e0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8013850:	f1bb 0f01 	cmp.w	fp, #1
 8013854:	f47f af44 	bne.w	80136e0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8013858:	f8df b110 	ldr.w	fp, [pc, #272]	; 801396c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801385c:	f8db 0000 	ldr.w	r0, [fp]
 8013860:	6803      	ldr	r3, [r0, #0]
 8013862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013864:	4798      	blx	r3
 8013866:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801386a:	465a      	mov	r2, fp
 801386c:	d006      	beq.n	801387c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x288>
 801386e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013870:	2b04      	cmp	r3, #4
 8013872:	d143      	bne.n	80138fc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 8013874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013876:	3300      	adds	r3, #0
 8013878:	bf18      	it	ne
 801387a:	2301      	movne	r3, #1
 801387c:	0581      	lsls	r1, r0, #22
 801387e:	f140 8093 	bpl.w	80139a8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8013882:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013884:	2908      	cmp	r1, #8
 8013886:	f040 808f 	bne.w	80139a8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801388a:	2b00      	cmp	r3, #0
 801388c:	bf0c      	ite	eq
 801388e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8013892:	f44f 7180 	movne.w	r1, #256	; 0x100
 8013896:	2f00      	cmp	r7, #0
 8013898:	f47f af22 	bne.w	80136e0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 801389c:	2c00      	cmp	r4, #0
 801389e:	f47f af1f 	bne.w	80136e0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80138a2:	eb08 0306 	add.w	r3, r8, r6
 80138a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80138a8:	4283      	cmp	r3, r0
 80138aa:	f73f af19 	bgt.w	80136e0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80138ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80138b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138b2:	4403      	add	r3, r0
 80138b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80138b6:	4283      	cmp	r3, r0
 80138b8:	f73f af12 	bgt.w	80136e0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80138bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138be:	2600      	movs	r6, #0
 80138c0:	6810      	ldr	r0, [r2, #0]
 80138c2:	2b08      	cmp	r3, #8
 80138c4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80138c8:	6804      	ldr	r4, [r0, #0]
 80138ca:	bf18      	it	ne
 80138cc:	3501      	addne	r5, #1
 80138ce:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 80138d2:	bf18      	it	ne
 80138d4:	f025 0501 	bicne.w	r5, r5, #1
 80138d8:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80138dc:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 80138e0:	bf18      	it	ne
 80138e2:	b2ad      	uxthne	r5, r5
 80138e4:	9104      	str	r1, [sp, #16]
 80138e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80138e8:	e9cd 5a00 	strd	r5, sl, [sp]
 80138ec:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80138f0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80138f2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80138f4:	47a0      	blx	r4
 80138f6:	b019      	add	sp, #100	; 0x64
 80138f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138fc:	2300      	movs	r3, #0
 80138fe:	e7bd      	b.n	801387c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x288>
 8013900:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013902:	e73f      	b.n	8013784 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x190>
 8013904:	2e00      	cmp	r6, #0
 8013906:	d08b      	beq.n	8013820 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8013908:	fb06 f102 	mul.w	r1, r6, r2
 801390c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801390e:	f101 0e01 	add.w	lr, r1, #1
 8013912:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 8013916:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801391a:	eba2 090e 	sub.w	r9, r2, lr
 801391e:	4432      	add	r2, r6
 8013920:	eba2 020e 	sub.w	r2, r2, lr
 8013924:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8013928:	b2d1      	uxtb	r1, r2
 801392a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801392c:	4372      	muls	r2, r6
 801392e:	fb09 2e0e 	mla	lr, r9, lr, r2
 8013932:	b2ea      	uxtb	r2, r5
 8013934:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8013938:	fb09 f202 	mul.w	r2, r9, r2
 801393c:	fb06 2200 	mla	r2, r6, r0, r2
 8013940:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013942:	fb92 f2f1 	sdiv	r2, r2, r1
 8013946:	4346      	muls	r6, r0
 8013948:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801394c:	fb9e fef1 	sdiv	lr, lr, r1
 8013950:	fb09 6505 	mla	r5, r9, r5, r6
 8013954:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8013958:	fb95 f5f1 	sdiv	r5, r5, r1
 801395c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8013960:	f8cc 5000 	str.w	r5, [ip]
 8013964:	e75c      	b.n	8013820 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8013966:	bf00      	nop
 8013968:	2400fa14 	.word	0x2400fa14
 801396c:	2400fa1c 	.word	0x2400fa1c
 8013970:	2400fa16 	.word	0x2400fa16
 8013974:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013976:	b152      	cbz	r2, 801398e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8013978:	4414      	add	r4, r2
 801397a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801397c:	b2a4      	uxth	r4, r4
 801397e:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8013982:	f004 0407 	and.w	r4, r4, #7
 8013986:	9328      	str	r3, [sp, #160]	; 0xa0
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	4123      	asrs	r3, r4
 801398c:	b2db      	uxtb	r3, r3
 801398e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013990:	445a      	add	r2, fp
 8013992:	920a      	str	r2, [sp, #40]	; 0x28
 8013994:	e722      	b.n	80137dc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 8013996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013998:	2b00      	cmp	r3, #0
 801399a:	d1ac      	bne.n	80138f6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801399c:	4b05      	ldr	r3, [pc, #20]	; (80139b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c0>)
 801399e:	6818      	ldr	r0, [r3, #0]
 80139a0:	6803      	ldr	r3, [r0, #0]
 80139a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a4:	4798      	blx	r3
 80139a6:	e7a6      	b.n	80138f6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f43f ae99 	beq.w	80136e0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80139ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80139b2:	e770      	b.n	8013896 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a2>
 80139b4:	2400fa1c 	.word	0x2400fa1c

080139b8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80139b8:	b538      	push	{r3, r4, r5, lr}
 80139ba:	4c15      	ldr	r4, [pc, #84]	; (8013a10 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80139bc:	4605      	mov	r5, r0
 80139be:	7823      	ldrb	r3, [r4, #0]
 80139c0:	f3bf 8f5b 	dmb	ish
 80139c4:	07da      	lsls	r2, r3, #31
 80139c6:	d40b      	bmi.n	80139e0 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80139c8:	4620      	mov	r0, r4
 80139ca:	f002 fda1 	bl	8016510 <__cxa_guard_acquire>
 80139ce:	b138      	cbz	r0, 80139e0 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80139d0:	4620      	mov	r0, r4
 80139d2:	f002 fda9 	bl	8016528 <__cxa_guard_release>
 80139d6:	4a0f      	ldr	r2, [pc, #60]	; (8013a14 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80139d8:	490f      	ldr	r1, [pc, #60]	; (8013a18 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80139da:	4810      	ldr	r0, [pc, #64]	; (8013a1c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80139dc:	f002 fd91 	bl	8016502 <__aeabi_atexit>
 80139e0:	4c0f      	ldr	r4, [pc, #60]	; (8013a20 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80139e2:	7823      	ldrb	r3, [r4, #0]
 80139e4:	f3bf 8f5b 	dmb	ish
 80139e8:	07db      	lsls	r3, r3, #31
 80139ea:	d40b      	bmi.n	8013a04 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80139ec:	4620      	mov	r0, r4
 80139ee:	f002 fd8f 	bl	8016510 <__cxa_guard_acquire>
 80139f2:	b138      	cbz	r0, 8013a04 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80139f4:	4620      	mov	r0, r4
 80139f6:	f002 fd97 	bl	8016528 <__cxa_guard_release>
 80139fa:	4a06      	ldr	r2, [pc, #24]	; (8013a14 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80139fc:	4909      	ldr	r1, [pc, #36]	; (8013a24 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80139fe:	480a      	ldr	r0, [pc, #40]	; (8013a28 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013a00:	f002 fd7f 	bl	8016502 <__aeabi_atexit>
 8013a04:	4b05      	ldr	r3, [pc, #20]	; (8013a1c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8013a06:	65ab      	str	r3, [r5, #88]	; 0x58
 8013a08:	4b07      	ldr	r3, [pc, #28]	; (8013a28 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013a0a:	65eb      	str	r3, [r5, #92]	; 0x5c
 8013a0c:	bd38      	pop	{r3, r4, r5, pc}
 8013a0e:	bf00      	nop
 8013a10:	2400facc 	.word	0x2400facc
 8013a14:	24000000 	.word	0x24000000
 8013a18:	080123df 	.word	0x080123df
 8013a1c:	24000050 	.word	0x24000050
 8013a20:	2400fad0 	.word	0x2400fad0
 8013a24:	080123dd 	.word	0x080123dd
 8013a28:	24000054 	.word	0x24000054

08013a2c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8013a2c:	b538      	push	{r3, r4, r5, lr}
 8013a2e:	4c15      	ldr	r4, [pc, #84]	; (8013a84 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8013a30:	4605      	mov	r5, r0
 8013a32:	7823      	ldrb	r3, [r4, #0]
 8013a34:	f3bf 8f5b 	dmb	ish
 8013a38:	07da      	lsls	r2, r3, #31
 8013a3a:	d40b      	bmi.n	8013a54 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	f002 fd67 	bl	8016510 <__cxa_guard_acquire>
 8013a42:	b138      	cbz	r0, 8013a54 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013a44:	4620      	mov	r0, r4
 8013a46:	f002 fd6f 	bl	8016528 <__cxa_guard_release>
 8013a4a:	4a0f      	ldr	r2, [pc, #60]	; (8013a88 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013a4c:	490f      	ldr	r1, [pc, #60]	; (8013a8c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8013a4e:	4810      	ldr	r0, [pc, #64]	; (8013a90 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013a50:	f002 fd57 	bl	8016502 <__aeabi_atexit>
 8013a54:	4c0f      	ldr	r4, [pc, #60]	; (8013a94 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8013a56:	7823      	ldrb	r3, [r4, #0]
 8013a58:	f3bf 8f5b 	dmb	ish
 8013a5c:	07db      	lsls	r3, r3, #31
 8013a5e:	d40b      	bmi.n	8013a78 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013a60:	4620      	mov	r0, r4
 8013a62:	f002 fd55 	bl	8016510 <__cxa_guard_acquire>
 8013a66:	b138      	cbz	r0, 8013a78 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013a68:	4620      	mov	r0, r4
 8013a6a:	f002 fd5d 	bl	8016528 <__cxa_guard_release>
 8013a6e:	4a06      	ldr	r2, [pc, #24]	; (8013a88 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013a70:	4909      	ldr	r1, [pc, #36]	; (8013a98 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8013a72:	480a      	ldr	r0, [pc, #40]	; (8013a9c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013a74:	f002 fd45 	bl	8016502 <__aeabi_atexit>
 8013a78:	4b05      	ldr	r3, [pc, #20]	; (8013a90 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013a7a:	652b      	str	r3, [r5, #80]	; 0x50
 8013a7c:	4b07      	ldr	r3, [pc, #28]	; (8013a9c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013a7e:	656b      	str	r3, [r5, #84]	; 0x54
 8013a80:	bd38      	pop	{r3, r4, r5, pc}
 8013a82:	bf00      	nop
 8013a84:	2400fab8 	.word	0x2400fab8
 8013a88:	24000000 	.word	0x24000000
 8013a8c:	080123e3 	.word	0x080123e3
 8013a90:	2400003c 	.word	0x2400003c
 8013a94:	2400fabc 	.word	0x2400fabc
 8013a98:	080123e1 	.word	0x080123e1
 8013a9c:	24000040 	.word	0x24000040

08013aa0 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 8013aa0:	b510      	push	{r4, lr}
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	f7ff ff88 	bl	80139b8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013aae:	f7ff bfbd 	b.w	8013a2c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08013ab4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8013ab4:	b538      	push	{r3, r4, r5, lr}
 8013ab6:	4c0b      	ldr	r4, [pc, #44]	; (8013ae4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 8013ab8:	4605      	mov	r5, r0
 8013aba:	7823      	ldrb	r3, [r4, #0]
 8013abc:	f3bf 8f5b 	dmb	ish
 8013ac0:	07db      	lsls	r3, r3, #31
 8013ac2:	d40b      	bmi.n	8013adc <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	f002 fd23 	bl	8016510 <__cxa_guard_acquire>
 8013aca:	b138      	cbz	r0, 8013adc <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013acc:	4620      	mov	r0, r4
 8013ace:	f002 fd2b 	bl	8016528 <__cxa_guard_release>
 8013ad2:	4a05      	ldr	r2, [pc, #20]	; (8013ae8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 8013ad4:	4905      	ldr	r1, [pc, #20]	; (8013aec <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 8013ad6:	4806      	ldr	r0, [pc, #24]	; (8013af0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 8013ad8:	f002 fd13 	bl	8016502 <__aeabi_atexit>
 8013adc:	4b04      	ldr	r3, [pc, #16]	; (8013af0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 8013ade:	666b      	str	r3, [r5, #100]	; 0x64
 8013ae0:	bd38      	pop	{r3, r4, r5, pc}
 8013ae2:	bf00      	nop
 8013ae4:	2400fad4 	.word	0x2400fad4
 8013ae8:	24000000 	.word	0x24000000
 8013aec:	080123d9 	.word	0x080123d9
 8013af0:	24000058 	.word	0x24000058

08013af4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8013af4:	b538      	push	{r3, r4, r5, lr}
 8013af6:	4c0b      	ldr	r4, [pc, #44]	; (8013b24 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 8013af8:	4605      	mov	r5, r0
 8013afa:	7823      	ldrb	r3, [r4, #0]
 8013afc:	f3bf 8f5b 	dmb	ish
 8013b00:	07db      	lsls	r3, r3, #31
 8013b02:	d40b      	bmi.n	8013b1c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8013b04:	4620      	mov	r0, r4
 8013b06:	f002 fd03 	bl	8016510 <__cxa_guard_acquire>
 8013b0a:	b138      	cbz	r0, 8013b1c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f002 fd0b 	bl	8016528 <__cxa_guard_release>
 8013b12:	4a05      	ldr	r2, [pc, #20]	; (8013b28 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 8013b14:	4905      	ldr	r1, [pc, #20]	; (8013b2c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 8013b16:	4806      	ldr	r0, [pc, #24]	; (8013b30 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 8013b18:	f002 fcf3 	bl	8016502 <__aeabi_atexit>
 8013b1c:	4b04      	ldr	r3, [pc, #16]	; (8013b30 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 8013b1e:	662b      	str	r3, [r5, #96]	; 0x60
 8013b20:	bd38      	pop	{r3, r4, r5, pc}
 8013b22:	bf00      	nop
 8013b24:	2400fac8 	.word	0x2400fac8
 8013b28:	24000000 	.word	0x24000000
 8013b2c:	080123db 	.word	0x080123db
 8013b30:	2400004c 	.word	0x2400004c

08013b34 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 8013b34:	b510      	push	{r4, lr}
 8013b36:	4604      	mov	r4, r0
 8013b38:	f7ff ffbc 	bl	8013ab4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b42:	f7ff bfd7 	b.w	8013af4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08013b48 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8013b48:	b538      	push	{r3, r4, r5, lr}
 8013b4a:	4c15      	ldr	r4, [pc, #84]	; (8013ba0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8013b4c:	4605      	mov	r5, r0
 8013b4e:	7823      	ldrb	r3, [r4, #0]
 8013b50:	f3bf 8f5b 	dmb	ish
 8013b54:	07da      	lsls	r2, r3, #31
 8013b56:	d40b      	bmi.n	8013b70 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f002 fcd9 	bl	8016510 <__cxa_guard_acquire>
 8013b5e:	b138      	cbz	r0, 8013b70 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013b60:	4620      	mov	r0, r4
 8013b62:	f002 fce1 	bl	8016528 <__cxa_guard_release>
 8013b66:	4a0f      	ldr	r2, [pc, #60]	; (8013ba4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013b68:	490f      	ldr	r1, [pc, #60]	; (8013ba8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8013b6a:	4810      	ldr	r0, [pc, #64]	; (8013bac <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013b6c:	f002 fcc9 	bl	8016502 <__aeabi_atexit>
 8013b70:	4c0f      	ldr	r4, [pc, #60]	; (8013bb0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8013b72:	7823      	ldrb	r3, [r4, #0]
 8013b74:	f3bf 8f5b 	dmb	ish
 8013b78:	07db      	lsls	r3, r3, #31
 8013b7a:	d40b      	bmi.n	8013b94 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	f002 fcc7 	bl	8016510 <__cxa_guard_acquire>
 8013b82:	b138      	cbz	r0, 8013b94 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013b84:	4620      	mov	r0, r4
 8013b86:	f002 fccf 	bl	8016528 <__cxa_guard_release>
 8013b8a:	4a06      	ldr	r2, [pc, #24]	; (8013ba4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013b8c:	4909      	ldr	r1, [pc, #36]	; (8013bb4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8013b8e:	480a      	ldr	r0, [pc, #40]	; (8013bb8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013b90:	f002 fcb7 	bl	8016502 <__aeabi_atexit>
 8013b94:	4b05      	ldr	r3, [pc, #20]	; (8013bac <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013b96:	672b      	str	r3, [r5, #112]	; 0x70
 8013b98:	4b07      	ldr	r3, [pc, #28]	; (8013bb8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013b9a:	676b      	str	r3, [r5, #116]	; 0x74
 8013b9c:	bd38      	pop	{r3, r4, r5, pc}
 8013b9e:	bf00      	nop
 8013ba0:	2400fac0 	.word	0x2400fac0
 8013ba4:	24000000 	.word	0x24000000
 8013ba8:	080123d3 	.word	0x080123d3
 8013bac:	24000044 	.word	0x24000044
 8013bb0:	2400fac4 	.word	0x2400fac4
 8013bb4:	080123d1 	.word	0x080123d1
 8013bb8:	24000048 	.word	0x24000048

08013bbc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 8013bbc:	b538      	push	{r3, r4, r5, lr}
 8013bbe:	4c15      	ldr	r4, [pc, #84]	; (8013c14 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	7823      	ldrb	r3, [r4, #0]
 8013bc4:	f3bf 8f5b 	dmb	ish
 8013bc8:	07da      	lsls	r2, r3, #31
 8013bca:	d40b      	bmi.n	8013be4 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013bcc:	4620      	mov	r0, r4
 8013bce:	f002 fc9f 	bl	8016510 <__cxa_guard_acquire>
 8013bd2:	b138      	cbz	r0, 8013be4 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	f002 fca7 	bl	8016528 <__cxa_guard_release>
 8013bda:	4a0f      	ldr	r2, [pc, #60]	; (8013c18 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013bdc:	490f      	ldr	r1, [pc, #60]	; (8013c1c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8013bde:	4810      	ldr	r0, [pc, #64]	; (8013c20 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013be0:	f002 fc8f 	bl	8016502 <__aeabi_atexit>
 8013be4:	4c0f      	ldr	r4, [pc, #60]	; (8013c24 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8013be6:	7823      	ldrb	r3, [r4, #0]
 8013be8:	f3bf 8f5b 	dmb	ish
 8013bec:	07db      	lsls	r3, r3, #31
 8013bee:	d40b      	bmi.n	8013c08 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f002 fc8d 	bl	8016510 <__cxa_guard_acquire>
 8013bf6:	b138      	cbz	r0, 8013c08 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	f002 fc95 	bl	8016528 <__cxa_guard_release>
 8013bfe:	4a06      	ldr	r2, [pc, #24]	; (8013c18 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013c00:	4909      	ldr	r1, [pc, #36]	; (8013c28 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8013c02:	480a      	ldr	r0, [pc, #40]	; (8013c2c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013c04:	f002 fc7d 	bl	8016502 <__aeabi_atexit>
 8013c08:	4b05      	ldr	r3, [pc, #20]	; (8013c20 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013c0a:	66ab      	str	r3, [r5, #104]	; 0x68
 8013c0c:	4b07      	ldr	r3, [pc, #28]	; (8013c2c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013c0e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8013c10:	bd38      	pop	{r3, r4, r5, pc}
 8013c12:	bf00      	nop
 8013c14:	2400fab0 	.word	0x2400fab0
 8013c18:	24000000 	.word	0x24000000
 8013c1c:	080123d7 	.word	0x080123d7
 8013c20:	24000034 	.word	0x24000034
 8013c24:	2400fab4 	.word	0x2400fab4
 8013c28:	080123d5 	.word	0x080123d5
 8013c2c:	24000038 	.word	0x24000038

08013c30 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 8013c30:	b510      	push	{r4, lr}
 8013c32:	4604      	mov	r4, r0
 8013c34:	f7ff ff88 	bl	8013b48 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8013c38:	4620      	mov	r0, r4
 8013c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c3e:	f7ff bfbd 	b.w	8013bbc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>
	...

08013c44 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 8013c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c48:	e9dd 090b 	ldrd	r0, r9, [sp, #44]	; 0x2c
 8013c4c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8013c50:	fb09 0c03 	mla	ip, r9, r3, r0
 8013c54:	f1b9 0f00 	cmp.w	r9, #0
 8013c58:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8013c5c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013c60:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 8013c64:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8013c68:	eb02 080c 	add.w	r8, r2, ip
 8013c6c:	680c      	ldr	r4, [r1, #0]
 8013c6e:	db59      	blt.n	8013d24 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xe0>
 8013c70:	45ca      	cmp	sl, r9
 8013c72:	dd57      	ble.n	8013d24 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xe0>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	db53      	blt.n	8013d20 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xdc>
 8013c78:	4283      	cmp	r3, r0
 8013c7a:	dd51      	ble.n	8013d20 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xdc>
 8013c7c:	f898 7002 	ldrb.w	r7, [r8, #2]
 8013c80:	f898 b001 	ldrb.w	fp, [r8, #1]
 8013c84:	043f      	lsls	r7, r7, #16
 8013c86:	f812 200c 	ldrb.w	r2, [r2, ip]
 8013c8a:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8013c8e:	4317      	orrs	r7, r2
 8013c90:	1c42      	adds	r2, r0, #1
 8013c92:	d448      	bmi.n	8013d26 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xe2>
 8013c94:	4293      	cmp	r3, r2
 8013c96:	dd46      	ble.n	8013d26 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xe2>
 8013c98:	2d00      	cmp	r5, #0
 8013c9a:	d044      	beq.n	8013d26 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xe2>
 8013c9c:	f898 c005 	ldrb.w	ip, [r8, #5]
 8013ca0:	f898 2004 	ldrb.w	r2, [r8, #4]
 8013ca4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8013ca8:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8013cac:	f898 2003 	ldrb.w	r2, [r8, #3]
 8013cb0:	ea4c 0c02 	orr.w	ip, ip, r2
 8013cb4:	f119 0901 	adds.w	r9, r9, #1
 8013cb8:	d439      	bmi.n	8013d2e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xea>
 8013cba:	45ca      	cmp	sl, r9
 8013cbc:	dd37      	ble.n	8013d2e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xea>
 8013cbe:	f1be 0f00 	cmp.w	lr, #0
 8013cc2:	d05d      	beq.n	8013d80 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x13c>
 8013cc4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8013cc8:	2800      	cmp	r0, #0
 8013cca:	eb08 090a 	add.w	r9, r8, sl
 8013cce:	db2c      	blt.n	8013d2a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xe6>
 8013cd0:	4283      	cmp	r3, r0
 8013cd2:	dd2a      	ble.n	8013d2a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xe6>
 8013cd4:	f899 2002 	ldrb.w	r2, [r9, #2]
 8013cd8:	f899 b001 	ldrb.w	fp, [r9, #1]
 8013cdc:	0412      	lsls	r2, r2, #16
 8013cde:	f818 800a 	ldrb.w	r8, [r8, sl]
 8013ce2:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 8013ce6:	ea42 0208 	orr.w	r2, r2, r8
 8013cea:	3001      	adds	r0, #1
 8013cec:	d40c      	bmi.n	8013d08 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xc4>
 8013cee:	4283      	cmp	r3, r0
 8013cf0:	dd0a      	ble.n	8013d08 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xc4>
 8013cf2:	b15d      	cbz	r5, 8013d0c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xc8>
 8013cf4:	f899 4005 	ldrb.w	r4, [r9, #5]
 8013cf8:	f899 3004 	ldrb.w	r3, [r9, #4]
 8013cfc:	0424      	lsls	r4, r4, #16
 8013cfe:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8013d02:	f899 3003 	ldrb.w	r3, [r9, #3]
 8013d06:	431c      	orrs	r4, r3
 8013d08:	2d0f      	cmp	r5, #15
 8013d0a:	d802      	bhi.n	8013d12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xce>
 8013d0c:	f1be 0f0f 	cmp.w	lr, #15
 8013d10:	d939      	bls.n	8013d86 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x142>
 8013d12:	4b42      	ldr	r3, [pc, #264]	; (8013e1c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x1d8>)
 8013d14:	f240 2146 	movw	r1, #582	; 0x246
 8013d18:	4a41      	ldr	r2, [pc, #260]	; (8013e20 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x1dc>)
 8013d1a:	4842      	ldr	r0, [pc, #264]	; (8013e24 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x1e0>)
 8013d1c:	f003 fa06 	bl	801712c <__assert_func>
 8013d20:	4627      	mov	r7, r4
 8013d22:	e7b5      	b.n	8013c90 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x4c>
 8013d24:	4627      	mov	r7, r4
 8013d26:	46a4      	mov	ip, r4
 8013d28:	e7c4      	b.n	8013cb4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x70>
 8013d2a:	4622      	mov	r2, r4
 8013d2c:	e7dd      	b.n	8013cea <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xa6>
 8013d2e:	4622      	mov	r2, r4
 8013d30:	e7ea      	b.n	8013d08 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xc4>
 8013d32:	2e00      	cmp	r6, #0
 8013d34:	d070      	beq.n	8013e18 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x1d4>
 8013d36:	78cd      	ldrb	r5, [r1, #3]
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	fb06 f205 	mul.w	r2, r6, r5
 8013d3e:	1c50      	adds	r0, r2, #1
 8013d40:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8013d44:	1972      	adds	r2, r6, r5
 8013d46:	1200      	asrs	r0, r0, #8
 8013d48:	1a2d      	subs	r5, r5, r0
 8013d4a:	1a12      	subs	r2, r2, r0
 8013d4c:	7808      	ldrb	r0, [r1, #0]
 8013d4e:	b2d2      	uxtb	r2, r2
 8013d50:	4368      	muls	r0, r5
 8013d52:	70ca      	strb	r2, [r1, #3]
 8013d54:	fb06 0303 	mla	r3, r6, r3, r0
 8013d58:	fb16 f007 	smulbb	r0, r6, r7
 8013d5c:	fb16 f604 	smulbb	r6, r6, r4
 8013d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d64:	700b      	strb	r3, [r1, #0]
 8013d66:	784b      	ldrb	r3, [r1, #1]
 8013d68:	fb05 0303 	mla	r3, r5, r3, r0
 8013d6c:	7888      	ldrb	r0, [r1, #2]
 8013d6e:	fb05 6000 	mla	r0, r5, r0, r6
 8013d72:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d76:	fb90 f0f2 	sdiv	r0, r0, r2
 8013d7a:	704b      	strb	r3, [r1, #1]
 8013d7c:	7088      	strb	r0, [r1, #2]
 8013d7e:	e04b      	b.n	8013e18 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x1d4>
 8013d80:	2d0f      	cmp	r5, #15
 8013d82:	d8c6      	bhi.n	8013d12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xce>
 8013d84:	4622      	mov	r2, r4
 8013d86:	b2ad      	uxth	r5, r5
 8013d88:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8013d8c:	fa1f fe8e 	uxth.w	lr, lr
 8013d90:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 8013d94:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8013d98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8013d9c:	fb05 f90e 	mul.w	r9, r5, lr
 8013da0:	012d      	lsls	r5, r5, #4
 8013da2:	2eff      	cmp	r6, #255	; 0xff
 8013da4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8013da8:	f5c5 7880 	rsb	r8, r5, #256	; 0x100
 8013dac:	eba5 0509 	sub.w	r5, r5, r9
 8013db0:	fa1f fe8e 	uxth.w	lr, lr
 8013db4:	b2ad      	uxth	r5, r5
 8013db6:	eba8 080e 	sub.w	r8, r8, lr
 8013dba:	fb05 f303 	mul.w	r3, r5, r3
 8013dbe:	fa1f f888 	uxth.w	r8, r8
 8013dc2:	fb05 f50c 	mul.w	r5, r5, ip
 8013dc6:	fb08 3000 	mla	r0, r8, r0, r3
 8013dca:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8013dce:	fb08 5507 	mla	r5, r8, r7, r5
 8013dd2:	fb09 0003 	mla	r0, r9, r3, r0
 8013dd6:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8013dda:	fb0e 0303 	mla	r3, lr, r3, r0
 8013dde:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8013de2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8013de6:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8013dea:	fb09 5903 	mla	r9, r9, r3, r5
 8013dee:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8013df2:	fb0e 9303 	mla	r3, lr, r3, r9
 8013df6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8013dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013dfe:	ea43 0300 	orr.w	r3, r3, r0
 8013e02:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013e06:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8013e0a:	b2d4      	uxtb	r4, r2
 8013e0c:	b2c7      	uxtb	r7, r0
 8013e0e:	d190      	bne.n	8013d32 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xee>
 8013e10:	700b      	strb	r3, [r1, #0]
 8013e12:	7048      	strb	r0, [r1, #1]
 8013e14:	708a      	strb	r2, [r1, #2]
 8013e16:	70ce      	strb	r6, [r1, #3]
 8013e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e1c:	0801b376 	.word	0x0801b376
 8013e20:	0801b816 	.word	0x0801b816
 8013e24:	0801b3fe 	.word	0x0801b3fe

08013e28 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2c:	ed2d 8b08 	vpush	{d8-d11}
 8013e30:	b09b      	sub	sp, #108	; 0x6c
 8013e32:	eeb0 aa40 	vmov.f32	s20, s0
 8013e36:	eef0 9a60 	vmov.f32	s19, s1
 8013e3a:	9019      	str	r0, [sp, #100]	; 0x64
 8013e3c:	eeb0 9a41 	vmov.f32	s18, s2
 8013e40:	9307      	str	r3, [sp, #28]
 8013e42:	eeb0 8a62 	vmov.f32	s16, s5
 8013e46:	eef0 8a43 	vmov.f32	s17, s6
 8013e4a:	f89d 40d4 	ldrb.w	r4, [sp, #212]	; 0xd4
 8013e4e:	eef0 ba44 	vmov.f32	s23, s8
 8013e52:	eeb0 ba64 	vmov.f32	s22, s9
 8013e56:	eef0 aa45 	vmov.f32	s21, s10
 8013e5a:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8013e5e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8013e60:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8013e64:	6850      	ldr	r0, [r2, #4]
 8013e66:	6812      	ldr	r2, [r2, #0]
 8013e68:	fb00 1303 	mla	r3, r0, r3, r1
 8013e6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013e70:	9308      	str	r3, [sp, #32]
 8013e72:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	9309      	str	r3, [sp, #36]	; 0x24
 8013e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	dc03      	bgt.n	8013e86 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8013e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	f340 8231 	ble.w	80142e8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8013e86:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8013e88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013e8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013e90:	1e48      	subs	r0, r1, #1
 8013e92:	1e55      	subs	r5, r2, #1
 8013e94:	9b07      	ldr	r3, [sp, #28]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	f340 80c3 	ble.w	8014022 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8013e9c:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8013e9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013ea0:	1436      	asrs	r6, r6, #16
 8013ea2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8013ea6:	d406      	bmi.n	8013eb6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8013ea8:	4286      	cmp	r6, r0
 8013eaa:	da04      	bge.n	8013eb6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	db02      	blt.n	8013eb6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8013eb0:	42ab      	cmp	r3, r5
 8013eb2:	f2c0 80b7 	blt.w	8014024 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8013eb6:	3601      	adds	r6, #1
 8013eb8:	f100 80a4 	bmi.w	8014004 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013ebc:	42b1      	cmp	r1, r6
 8013ebe:	f2c0 80a1 	blt.w	8014004 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	f100 809e 	bmi.w	8014004 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	f2c0 809b 	blt.w	8014004 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013ece:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8013ed2:	f1bb 0f00 	cmp.w	fp, #0
 8013ed6:	f340 80c5 	ble.w	8014064 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 8013eda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013edc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8013ede:	1418      	asrs	r0, r3, #16
 8013ee0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013ee2:	68cf      	ldr	r7, [r1, #12]
 8013ee4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8013ee8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8013eea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013eec:	1409      	asrs	r1, r1, #16
 8013eee:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8013ef2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8013ef4:	689b      	ldr	r3, [r3, #8]
 8013ef6:	f100 8127 	bmi.w	8014148 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8013efa:	f103 3cff 	add.w	ip, r3, #4294967295
 8013efe:	4561      	cmp	r1, ip
 8013f00:	f280 8122 	bge.w	8014148 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	f2c0 811f 	blt.w	8014148 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8013f0a:	f107 3cff 	add.w	ip, r7, #4294967295
 8013f0e:	4560      	cmp	r0, ip
 8013f10:	f280 811a 	bge.w	8014148 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8013f14:	b21b      	sxth	r3, r3
 8013f16:	fb00 1103 	mla	r1, r0, r3, r1
 8013f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013f20:	1847      	adds	r7, r0, r1
 8013f22:	5c40      	ldrb	r0, [r0, r1]
 8013f24:	7879      	ldrb	r1, [r7, #1]
 8013f26:	f897 e002 	ldrb.w	lr, [r7, #2]
 8013f2a:	910c      	str	r1, [sp, #48]	; 0x30
 8013f2c:	f897 9003 	ldrb.w	r9, [r7, #3]
 8013f30:	f897 8004 	ldrb.w	r8, [r7, #4]
 8013f34:	f897 a005 	ldrb.w	sl, [r7, #5]
 8013f38:	b1cd      	cbz	r5, 8013f6e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013f3a:	f04f 0c03 	mov.w	ip, #3
 8013f3e:	f06f 0104 	mvn.w	r1, #4
 8013f42:	3705      	adds	r7, #5
 8013f44:	fb13 130c 	smlabb	r3, r3, ip, r1
 8013f48:	eb07 0c03 	add.w	ip, r7, r3
 8013f4c:	5cfb      	ldrb	r3, [r7, r3]
 8013f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8013f50:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8013f54:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f56:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8013f5a:	9311      	str	r3, [sp, #68]	; 0x44
 8013f5c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8013f60:	930e      	str	r3, [sp, #56]	; 0x38
 8013f62:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8013f66:	9310      	str	r3, [sp, #64]	; 0x40
 8013f68:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8013f6c:	9312      	str	r3, [sp, #72]	; 0x48
 8013f6e:	b292      	uxth	r2, r2
 8013f70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013f72:	b2ad      	uxth	r5, r5
 8013f74:	2cff      	cmp	r4, #255	; 0xff
 8013f76:	fb02 f305 	mul.w	r3, r2, r5
 8013f7a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8013f7e:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 8013f82:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8013f86:	eba2 0203 	sub.w	r2, r2, r3
 8013f8a:	b2ad      	uxth	r5, r5
 8013f8c:	b292      	uxth	r2, r2
 8013f8e:	eba7 0705 	sub.w	r7, r7, r5
 8013f92:	fb02 f909 	mul.w	r9, r2, r9
 8013f96:	b2bf      	uxth	r7, r7
 8013f98:	fb02 f808 	mul.w	r8, r2, r8
 8013f9c:	fb02 fa0a 	mul.w	sl, r2, sl
 8013fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013fa2:	fb07 9900 	mla	r9, r7, r0, r9
 8013fa6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013fa8:	fb07 8801 	mla	r8, r7, r1, r8
 8013fac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013fae:	fb07 aa0e 	mla	sl, r7, lr, sl
 8013fb2:	fb05 9900 	mla	r9, r5, r0, r9
 8013fb6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013fb8:	fb05 8801 	mla	r8, r5, r1, r8
 8013fbc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013fbe:	fb05 a502 	mla	r5, r5, r2, sl
 8013fc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013fc4:	fb03 9900 	mla	r9, r3, r0, r9
 8013fc8:	fb03 8801 	mla	r8, r3, r1, r8
 8013fcc:	fb03 5302 	mla	r3, r3, r2, r5
 8013fd0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013fd4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013fd8:	ea4f 2323 	mov.w	r3, r3, asr #8
 8013fdc:	f040 8088 	bne.w	80140f0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8013fe0:	f886 9000 	strb.w	r9, [r6]
 8013fe4:	f886 8001 	strb.w	r8, [r6, #1]
 8013fe8:	70b3      	strb	r3, [r6, #2]
 8013fea:	70f4      	strb	r4, [r6, #3]
 8013fec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013fee:	3604      	adds	r6, #4
 8013ff0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8013ff2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013ff6:	4413      	add	r3, r2
 8013ff8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8013ffa:	932d      	str	r3, [sp, #180]	; 0xb4
 8013ffc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013ffe:	4413      	add	r3, r2
 8014000:	932e      	str	r3, [sp, #184]	; 0xb8
 8014002:	e766      	b.n	8013ed2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8014004:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014006:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8014008:	4433      	add	r3, r6
 801400a:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 801400c:	932d      	str	r3, [sp, #180]	; 0xb4
 801400e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014010:	4433      	add	r3, r6
 8014012:	932e      	str	r3, [sp, #184]	; 0xb8
 8014014:	9b07      	ldr	r3, [sp, #28]
 8014016:	3b01      	subs	r3, #1
 8014018:	9307      	str	r3, [sp, #28]
 801401a:	9b08      	ldr	r3, [sp, #32]
 801401c:	3304      	adds	r3, #4
 801401e:	9308      	str	r3, [sp, #32]
 8014020:	e738      	b.n	8013e94 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014022:	d026      	beq.n	8014072 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8014024:	9b07      	ldr	r3, [sp, #28]
 8014026:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8014028:	3b01      	subs	r3, #1
 801402a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801402c:	fb00 5003 	mla	r0, r0, r3, r5
 8014030:	1400      	asrs	r0, r0, #16
 8014032:	f53f af4c 	bmi.w	8013ece <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014036:	3901      	subs	r1, #1
 8014038:	4288      	cmp	r0, r1
 801403a:	f6bf af48 	bge.w	8013ece <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801403e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8014040:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8014042:	fb01 0303 	mla	r3, r1, r3, r0
 8014046:	141b      	asrs	r3, r3, #16
 8014048:	f53f af41 	bmi.w	8013ece <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801404c:	3a01      	subs	r2, #1
 801404e:	4293      	cmp	r3, r2
 8014050:	f6bf af3d 	bge.w	8013ece <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014054:	9b08      	ldr	r3, [sp, #32]
 8014056:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801405a:	1d18      	adds	r0, r3, #4
 801405c:	f1be 0f00 	cmp.w	lr, #0
 8014060:	f300 808e 	bgt.w	8014180 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8014064:	9b07      	ldr	r3, [sp, #28]
 8014066:	9a08      	ldr	r2, [sp, #32]
 8014068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801406c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014070:	9308      	str	r3, [sp, #32]
 8014072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014074:	2b00      	cmp	r3, #0
 8014076:	f340 8137 	ble.w	80142e8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801407a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801407e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014080:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8014084:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8014088:	eef0 6a48 	vmov.f32	s13, s16
 801408c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8014090:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8014094:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014098:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801409c:	eef0 6a68 	vmov.f32	s13, s17
 80140a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80140a4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80140a8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80140ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 80140b0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80140b4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80140b8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80140bc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80140c0:	ee18 2a10 	vmov	r2, s16
 80140c4:	eeb0 8a47 	vmov.f32	s16, s14
 80140c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80140cc:	ee18 2a90 	vmov	r2, s17
 80140d0:	932f      	str	r3, [sp, #188]	; 0xbc
 80140d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80140d4:	eef0 8a67 	vmov.f32	s17, s15
 80140d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80140dc:	9330      	str	r3, [sp, #192]	; 0xc0
 80140de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140e2:	3b01      	subs	r3, #1
 80140e4:	930a      	str	r3, [sp, #40]	; 0x28
 80140e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80140e8:	bf08      	it	eq
 80140ea:	4613      	moveq	r3, r2
 80140ec:	9307      	str	r3, [sp, #28]
 80140ee:	e6c3      	b.n	8013e78 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80140f0:	2c00      	cmp	r4, #0
 80140f2:	f43f af7b 	beq.w	8013fec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80140f6:	78f0      	ldrb	r0, [r6, #3]
 80140f8:	fa5f f989 	uxtb.w	r9, r9
 80140fc:	fa5f f888 	uxtb.w	r8, r8
 8014100:	fb04 f100 	mul.w	r1, r4, r0
 8014104:	1822      	adds	r2, r4, r0
 8014106:	b2db      	uxtb	r3, r3
 8014108:	1c4d      	adds	r5, r1, #1
 801410a:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801410e:	1229      	asrs	r1, r5, #8
 8014110:	1a45      	subs	r5, r0, r1
 8014112:	1a52      	subs	r2, r2, r1
 8014114:	7831      	ldrb	r1, [r6, #0]
 8014116:	b2d2      	uxtb	r2, r2
 8014118:	4369      	muls	r1, r5
 801411a:	70f2      	strb	r2, [r6, #3]
 801411c:	fb04 1909 	mla	r9, r4, r9, r1
 8014120:	7871      	ldrb	r1, [r6, #1]
 8014122:	4369      	muls	r1, r5
 8014124:	fb04 1808 	mla	r8, r4, r8, r1
 8014128:	78b1      	ldrb	r1, [r6, #2]
 801412a:	434d      	muls	r5, r1
 801412c:	fb04 5303 	mla	r3, r4, r3, r5
 8014130:	fb99 f9f2 	sdiv	r9, r9, r2
 8014134:	fb98 f8f2 	sdiv	r8, r8, r2
 8014138:	fb93 f3f2 	sdiv	r3, r3, r2
 801413c:	f886 9000 	strb.w	r9, [r6]
 8014140:	f886 8001 	strb.w	r8, [r6, #1]
 8014144:	70b3      	strb	r3, [r6, #2]
 8014146:	e751      	b.n	8013fec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8014148:	f111 0c01 	adds.w	ip, r1, #1
 801414c:	f53f af4e 	bmi.w	8013fec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8014150:	4563      	cmp	r3, ip
 8014152:	f6ff af4b 	blt.w	8013fec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8014156:	f110 0c01 	adds.w	ip, r0, #1
 801415a:	f53f af47 	bmi.w	8013fec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801415e:	4567      	cmp	r7, ip
 8014160:	f6ff af44 	blt.w	8013fec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8014164:	b23f      	sxth	r7, r7
 8014166:	9101      	str	r1, [sp, #4]
 8014168:	b21b      	sxth	r3, r3
 801416a:	4631      	mov	r1, r6
 801416c:	9700      	str	r7, [sp, #0]
 801416e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8014172:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8014176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014178:	9819      	ldr	r0, [sp, #100]	; 0x64
 801417a:	f7ff fd63 	bl	8013c44 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 801417e:	e735      	b.n	8013fec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8014180:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014182:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014184:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8014188:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801418a:	1412      	asrs	r2, r2, #16
 801418c:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8014190:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014192:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8014196:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014198:	141b      	asrs	r3, r3, #16
 801419a:	fb0c 2303 	mla	r3, ip, r3, r2
 801419e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80141a4:	18d6      	adds	r6, r2, r3
 80141a6:	5cd2      	ldrb	r2, [r2, r3]
 80141a8:	7873      	ldrb	r3, [r6, #1]
 80141aa:	f896 8002 	ldrb.w	r8, [r6, #2]
 80141ae:	930c      	str	r3, [sp, #48]	; 0x30
 80141b0:	f896 a003 	ldrb.w	sl, [r6, #3]
 80141b4:	f896 9004 	ldrb.w	r9, [r6, #4]
 80141b8:	f896 b005 	ldrb.w	fp, [r6, #5]
 80141bc:	b1a5      	cbz	r5, 80141e8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80141be:	2703      	movs	r7, #3
 80141c0:	f06f 0304 	mvn.w	r3, #4
 80141c4:	3605      	adds	r6, #5
 80141c6:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80141ca:	eb06 070c 	add.w	r7, r6, ip
 80141ce:	f816 600c 	ldrb.w	r6, [r6, ip]
 80141d2:	9613      	str	r6, [sp, #76]	; 0x4c
 80141d4:	787e      	ldrb	r6, [r7, #1]
 80141d6:	9615      	str	r6, [sp, #84]	; 0x54
 80141d8:	78be      	ldrb	r6, [r7, #2]
 80141da:	9617      	str	r6, [sp, #92]	; 0x5c
 80141dc:	78fe      	ldrb	r6, [r7, #3]
 80141de:	9614      	str	r6, [sp, #80]	; 0x50
 80141e0:	793e      	ldrb	r6, [r7, #4]
 80141e2:	9616      	str	r6, [sp, #88]	; 0x58
 80141e4:	797e      	ldrb	r6, [r7, #5]
 80141e6:	9618      	str	r6, [sp, #96]	; 0x60
 80141e8:	b289      	uxth	r1, r1
 80141ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141ec:	b2ad      	uxth	r5, r5
 80141ee:	2cff      	cmp	r4, #255	; 0xff
 80141f0:	fb01 f605 	mul.w	r6, r1, r5
 80141f4:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80141f8:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 80141fc:	f5c1 7780 	rsb	r7, r1, #256	; 0x100
 8014200:	eba1 0106 	sub.w	r1, r1, r6
 8014204:	b2ad      	uxth	r5, r5
 8014206:	b289      	uxth	r1, r1
 8014208:	eba7 0705 	sub.w	r7, r7, r5
 801420c:	fb01 f909 	mul.w	r9, r1, r9
 8014210:	b2bf      	uxth	r7, r7
 8014212:	fb01 fa0a 	mul.w	sl, r1, sl
 8014216:	fb01 fb0b 	mul.w	fp, r1, fp
 801421a:	fb07 9903 	mla	r9, r7, r3, r9
 801421e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014220:	fb07 aa02 	mla	sl, r7, r2, sl
 8014224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014226:	fb05 9903 	mla	r9, r5, r3, r9
 801422a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801422c:	fb07 bb08 	mla	fp, r7, r8, fp
 8014230:	fb06 9903 	mla	r9, r6, r3, r9
 8014234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014236:	fb05 aa02 	mla	sl, r5, r2, sl
 801423a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801423c:	fb05 bb03 	mla	fp, r5, r3, fp
 8014240:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014242:	fb06 aa02 	mla	sl, r6, r2, sl
 8014246:	ea4f 2929 	mov.w	r9, r9, asr #8
 801424a:	fb06 b603 	mla	r6, r6, r3, fp
 801424e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014252:	ea4f 2626 	mov.w	r6, r6, asr #8
 8014256:	d113      	bne.n	8014280 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8014258:	f800 ac04 	strb.w	sl, [r0, #-4]
 801425c:	f800 9c03 	strb.w	r9, [r0, #-3]
 8014260:	f800 6c02 	strb.w	r6, [r0, #-2]
 8014264:	f800 4c01 	strb.w	r4, [r0, #-1]
 8014268:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801426a:	3004      	adds	r0, #4
 801426c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801426e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014272:	4413      	add	r3, r2
 8014274:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8014276:	932d      	str	r3, [sp, #180]	; 0xb4
 8014278:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801427a:	4413      	add	r3, r2
 801427c:	932e      	str	r3, [sp, #184]	; 0xb8
 801427e:	e6ed      	b.n	801405c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8014280:	2c00      	cmp	r4, #0
 8014282:	d0f1      	beq.n	8014268 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8014284:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8014288:	fa5f fa8a 	uxtb.w	sl, sl
 801428c:	fa5f f989 	uxtb.w	r9, r9
 8014290:	fb04 f302 	mul.w	r3, r4, r2
 8014294:	eb04 0c02 	add.w	ip, r4, r2
 8014298:	b2f6      	uxtb	r6, r6
 801429a:	1c59      	adds	r1, r3, #1
 801429c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80142a0:	120b      	asrs	r3, r1, #8
 80142a2:	1ad1      	subs	r1, r2, r3
 80142a4:	ebac 0c03 	sub.w	ip, ip, r3
 80142a8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 80142ac:	fa5f fc8c 	uxtb.w	ip, ip
 80142b0:	434b      	muls	r3, r1
 80142b2:	f800 cc01 	strb.w	ip, [r0, #-1]
 80142b6:	fb04 3a0a 	mla	sl, r4, sl, r3
 80142ba:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 80142be:	434b      	muls	r3, r1
 80142c0:	fb04 3909 	mla	r9, r4, r9, r3
 80142c4:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 80142c8:	4359      	muls	r1, r3
 80142ca:	fb04 1606 	mla	r6, r4, r6, r1
 80142ce:	fb9a fafc 	sdiv	sl, sl, ip
 80142d2:	fb99 f9fc 	sdiv	r9, r9, ip
 80142d6:	fb96 f6fc 	sdiv	r6, r6, ip
 80142da:	f800 ac04 	strb.w	sl, [r0, #-4]
 80142de:	f800 9c03 	strb.w	r9, [r0, #-3]
 80142e2:	f800 6c02 	strb.w	r6, [r0, #-2]
 80142e6:	e7bf      	b.n	8014268 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80142e8:	b01b      	add	sp, #108	; 0x6c
 80142ea:	ecbd 8b08 	vpop	{d8-d11}
 80142ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080142f4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 80142f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142f8:	e9dd 5c09 	ldrd	r5, ip, [sp, #36]	; 0x24
 80142fc:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8014300:	fb0c 5703 	mla	r7, ip, r3, r5
 8014304:	f1bc 0f00 	cmp.w	ip, #0
 8014308:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 801430c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014310:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
 8014314:	6808      	ldr	r0, [r1, #0]
 8014316:	eb02 0807 	add.w	r8, r2, r7
 801431a:	db56      	blt.n	80143ca <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xd6>
 801431c:	45e1      	cmp	r9, ip
 801431e:	dd54      	ble.n	80143ca <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xd6>
 8014320:	2d00      	cmp	r5, #0
 8014322:	db50      	blt.n	80143c6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xd2>
 8014324:	42ab      	cmp	r3, r5
 8014326:	dd4e      	ble.n	80143c6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xd2>
 8014328:	f898 6002 	ldrb.w	r6, [r8, #2]
 801432c:	f898 a001 	ldrb.w	sl, [r8, #1]
 8014330:	0436      	lsls	r6, r6, #16
 8014332:	5dd2      	ldrb	r2, [r2, r7]
 8014334:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
 8014338:	4316      	orrs	r6, r2
 801433a:	1c6a      	adds	r2, r5, #1
 801433c:	d448      	bmi.n	80143d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xdc>
 801433e:	4293      	cmp	r3, r2
 8014340:	dd46      	ble.n	80143d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xdc>
 8014342:	2c00      	cmp	r4, #0
 8014344:	d044      	beq.n	80143d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xdc>
 8014346:	f898 7005 	ldrb.w	r7, [r8, #5]
 801434a:	f898 2004 	ldrb.w	r2, [r8, #4]
 801434e:	043f      	lsls	r7, r7, #16
 8014350:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8014354:	f898 2003 	ldrb.w	r2, [r8, #3]
 8014358:	4317      	orrs	r7, r2
 801435a:	f11c 0c01 	adds.w	ip, ip, #1
 801435e:	d43b      	bmi.n	80143d8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xe4>
 8014360:	45e1      	cmp	r9, ip
 8014362:	dd39      	ble.n	80143d8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xe4>
 8014364:	f1be 0f00 	cmp.w	lr, #0
 8014368:	d038      	beq.n	80143dc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xe8>
 801436a:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 801436e:	2d00      	cmp	r5, #0
 8014370:	eb08 0c09 	add.w	ip, r8, r9
 8014374:	db2e      	blt.n	80143d4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xe0>
 8014376:	42ab      	cmp	r3, r5
 8014378:	dd2c      	ble.n	80143d4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xe0>
 801437a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801437e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8014382:	0412      	lsls	r2, r2, #16
 8014384:	f818 8009 	ldrb.w	r8, [r8, r9]
 8014388:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 801438c:	ea42 0208 	orr.w	r2, r2, r8
 8014390:	3501      	adds	r5, #1
 8014392:	d40c      	bmi.n	80143ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xba>
 8014394:	42ab      	cmp	r3, r5
 8014396:	dd0a      	ble.n	80143ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xba>
 8014398:	b15c      	cbz	r4, 80143b2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xbe>
 801439a:	f89c 0005 	ldrb.w	r0, [ip, #5]
 801439e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80143a2:	0400      	lsls	r0, r0, #16
 80143a4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80143a8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80143ac:	4318      	orrs	r0, r3
 80143ae:	2c0f      	cmp	r4, #15
 80143b0:	d802      	bhi.n	80143b8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc4>
 80143b2:	f1be 0f0f 	cmp.w	lr, #15
 80143b6:	d914      	bls.n	80143e2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xee>
 80143b8:	4b28      	ldr	r3, [pc, #160]	; (801445c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x168>)
 80143ba:	f240 2146 	movw	r1, #582	; 0x246
 80143be:	4a28      	ldr	r2, [pc, #160]	; (8014460 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x16c>)
 80143c0:	4828      	ldr	r0, [pc, #160]	; (8014464 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x170>)
 80143c2:	f002 feb3 	bl	801712c <__assert_func>
 80143c6:	4606      	mov	r6, r0
 80143c8:	e7b7      	b.n	801433a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x46>
 80143ca:	4607      	mov	r7, r0
 80143cc:	4606      	mov	r6, r0
 80143ce:	e7c4      	b.n	801435a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x66>
 80143d0:	4607      	mov	r7, r0
 80143d2:	e7c2      	b.n	801435a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x66>
 80143d4:	4602      	mov	r2, r0
 80143d6:	e7db      	b.n	8014390 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x9c>
 80143d8:	4602      	mov	r2, r0
 80143da:	e7e8      	b.n	80143ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xba>
 80143dc:	2c0f      	cmp	r4, #15
 80143de:	d8eb      	bhi.n	80143b8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc4>
 80143e0:	4602      	mov	r2, r0
 80143e2:	b2a4      	uxth	r4, r4
 80143e4:	f007 15ff 	and.w	r5, r7, #16711935	; 0xff00ff
 80143e8:	fa1f fe8e 	uxth.w	lr, lr
 80143ec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80143f0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80143f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80143f8:	fb04 fc0e 	mul.w	ip, r4, lr
 80143fc:	0124      	lsls	r4, r4, #4
 80143fe:	ebcc 1e0e 	rsb	lr, ip, lr, lsl #4
 8014402:	fa1f f38e 	uxth.w	r3, lr
 8014406:	f5c4 7e80 	rsb	lr, r4, #256	; 0x100
 801440a:	eba4 040c 	sub.w	r4, r4, ip
 801440e:	ebae 0e03 	sub.w	lr, lr, r3
 8014412:	b2a4      	uxth	r4, r4
 8014414:	fa1f fe8e 	uxth.w	lr, lr
 8014418:	4365      	muls	r5, r4
 801441a:	437c      	muls	r4, r7
 801441c:	fb0e 5808 	mla	r8, lr, r8, r5
 8014420:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8014424:	fb0e 4406 	mla	r4, lr, r6, r4
 8014428:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801442c:	fb0c 8805 	mla	r8, ip, r5, r8
 8014430:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8014434:	fb0c 4c00 	mla	ip, ip, r0, r4
 8014438:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801443c:	fb03 8505 	mla	r5, r3, r5, r8
 8014440:	fb03 c202 	mla	r2, r3, r2, ip
 8014444:	0a2d      	lsrs	r5, r5, #8
 8014446:	0a12      	lsrs	r2, r2, #8
 8014448:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801444c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014450:	432a      	orrs	r2, r5
 8014452:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8014456:	600a      	str	r2, [r1, #0]
 8014458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801445c:	0801b376 	.word	0x0801b376
 8014460:	0801b816 	.word	0x0801b816
 8014464:	0801b3fe 	.word	0x0801b3fe

08014468 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801446c:	ed2d 8b08 	vpush	{d8-d11}
 8014470:	b09b      	sub	sp, #108	; 0x6c
 8014472:	eeb0 aa40 	vmov.f32	s20, s0
 8014476:	eef0 9a60 	vmov.f32	s19, s1
 801447a:	9019      	str	r0, [sp, #100]	; 0x64
 801447c:	eeb0 9a41 	vmov.f32	s18, s2
 8014480:	9306      	str	r3, [sp, #24]
 8014482:	eeb0 8a62 	vmov.f32	s16, s5
 8014486:	eef0 8a43 	vmov.f32	s17, s6
 801448a:	eef0 ba44 	vmov.f32	s23, s8
 801448e:	eeb0 ba64 	vmov.f32	s22, s9
 8014492:	eef0 aa45 	vmov.f32	s21, s10
 8014496:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801449a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801449c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80144a0:	6850      	ldr	r0, [r2, #4]
 80144a2:	6812      	ldr	r2, [r2, #0]
 80144a4:	fb00 1303 	mla	r3, r0, r3, r1
 80144a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80144ac:	9307      	str	r3, [sp, #28]
 80144ae:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80144b0:	e9dd 4a2d 	ldrd	r4, sl, [sp, #180]	; 0xb4
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	9308      	str	r3, [sp, #32]
 80144b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	dc03      	bgt.n	80144c6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80144be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	f340 81a6 	ble.w	8014812 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80144c6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80144c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80144cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80144d0:	1e48      	subs	r0, r1, #1
 80144d2:	1e55      	subs	r5, r2, #1
 80144d4:	9b06      	ldr	r3, [sp, #24]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f340 80b0 	ble.w	801463c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80144dc:	1426      	asrs	r6, r4, #16
 80144de:	ea4f 432a 	mov.w	r3, sl, asr #16
 80144e2:	d406      	bmi.n	80144f2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80144e4:	4286      	cmp	r6, r0
 80144e6:	da04      	bge.n	80144f2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	db02      	blt.n	80144f2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80144ec:	42ab      	cmp	r3, r5
 80144ee:	f2c0 80a6 	blt.w	801463e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80144f2:	3601      	adds	r6, #1
 80144f4:	f100 8097 	bmi.w	8014626 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80144f8:	42b1      	cmp	r1, r6
 80144fa:	f2c0 8094 	blt.w	8014626 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80144fe:	3301      	adds	r3, #1
 8014500:	f100 8091 	bmi.w	8014626 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8014504:	429a      	cmp	r2, r3
 8014506:	f2c0 808e 	blt.w	8014626 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801450a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801450e:	f1bb 0f00 	cmp.w	fp, #0
 8014512:	f340 80af 	ble.w	8014674 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8014516:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8014518:	ea4f 452a 	mov.w	r5, sl, asr #16
 801451c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801451e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8014522:	68c7      	ldr	r7, [r0, #12]
 8014524:	1420      	asrs	r0, r4, #16
 8014526:	f3ca 3103 	ubfx	r1, sl, #12, #4
 801452a:	689b      	ldr	r3, [r3, #8]
 801452c:	f100 80e8 	bmi.w	8014700 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8014530:	f103 3cff 	add.w	ip, r3, #4294967295
 8014534:	4560      	cmp	r0, ip
 8014536:	f280 80e3 	bge.w	8014700 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801453a:	2d00      	cmp	r5, #0
 801453c:	f2c0 80e0 	blt.w	8014700 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8014540:	f107 3cff 	add.w	ip, r7, #4294967295
 8014544:	4565      	cmp	r5, ip
 8014546:	f280 80db 	bge.w	8014700 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801454a:	b21b      	sxth	r3, r3
 801454c:	fb05 0003 	mla	r0, r5, r3, r0
 8014550:	9d08      	ldr	r5, [sp, #32]
 8014552:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014556:	182f      	adds	r7, r5, r0
 8014558:	5c28      	ldrb	r0, [r5, r0]
 801455a:	900b      	str	r0, [sp, #44]	; 0x2c
 801455c:	7978      	ldrb	r0, [r7, #5]
 801455e:	787d      	ldrb	r5, [r7, #1]
 8014560:	f897 e002 	ldrb.w	lr, [r7, #2]
 8014564:	f897 9003 	ldrb.w	r9, [r7, #3]
 8014568:	f897 8004 	ldrb.w	r8, [r7, #4]
 801456c:	900c      	str	r0, [sp, #48]	; 0x30
 801456e:	b1c1      	cbz	r1, 80145a2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014570:	f06f 0c04 	mvn.w	ip, #4
 8014574:	2003      	movs	r0, #3
 8014576:	3705      	adds	r7, #5
 8014578:	fb13 c300 	smlabb	r3, r3, r0, ip
 801457c:	eb07 0c03 	add.w	ip, r7, r3
 8014580:	5cfb      	ldrb	r3, [r7, r3]
 8014582:	930d      	str	r3, [sp, #52]	; 0x34
 8014584:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8014588:	930f      	str	r3, [sp, #60]	; 0x3c
 801458a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801458e:	9311      	str	r3, [sp, #68]	; 0x44
 8014590:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8014594:	930e      	str	r3, [sp, #56]	; 0x38
 8014596:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801459a:	9310      	str	r3, [sp, #64]	; 0x40
 801459c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80145a0:	9312      	str	r3, [sp, #72]	; 0x48
 80145a2:	b292      	uxth	r2, r2
 80145a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80145a6:	b289      	uxth	r1, r1
 80145a8:	fb02 f301 	mul.w	r3, r2, r1
 80145ac:	0112      	lsls	r2, r2, #4
 80145ae:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80145b2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80145b6:	1ad2      	subs	r2, r2, r3
 80145b8:	b289      	uxth	r1, r1
 80145ba:	b292      	uxth	r2, r2
 80145bc:	1a7f      	subs	r7, r7, r1
 80145be:	fb02 f909 	mul.w	r9, r2, r9
 80145c2:	b2bf      	uxth	r7, r7
 80145c4:	fb02 f808 	mul.w	r8, r2, r8
 80145c8:	fb07 9900 	mla	r9, r7, r0, r9
 80145cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80145ce:	fb07 8805 	mla	r8, r7, r5, r8
 80145d2:	fb01 9900 	mla	r9, r1, r0, r9
 80145d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80145d8:	fb03 9900 	mla	r9, r3, r0, r9
 80145dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80145de:	fb01 8800 	mla	r8, r1, r0, r8
 80145e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80145e4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80145e8:	fb03 8800 	mla	r8, r3, r0, r8
 80145ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80145ee:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80145f2:	4342      	muls	r2, r0
 80145f4:	ea49 0908 	orr.w	r9, r9, r8
 80145f8:	fb07 280e 	mla	r8, r7, lr, r2
 80145fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80145fe:	fb01 8802 	mla	r8, r1, r2, r8
 8014602:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014604:	fb03 8802 	mla	r8, r3, r2, r8
 8014608:	ea4f 2808 	mov.w	r8, r8, lsl #8
 801460c:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8014610:	ea49 0308 	orr.w	r3, r9, r8
 8014614:	6033      	str	r3, [r6, #0]
 8014616:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014618:	3604      	adds	r6, #4
 801461a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801461e:	441c      	add	r4, r3
 8014620:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014622:	449a      	add	sl, r3
 8014624:	e773      	b.n	801450e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014626:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014628:	441c      	add	r4, r3
 801462a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801462c:	449a      	add	sl, r3
 801462e:	9b06      	ldr	r3, [sp, #24]
 8014630:	3b01      	subs	r3, #1
 8014632:	9306      	str	r3, [sp, #24]
 8014634:	9b07      	ldr	r3, [sp, #28]
 8014636:	3304      	adds	r3, #4
 8014638:	9307      	str	r3, [sp, #28]
 801463a:	e74b      	b.n	80144d4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801463c:	d021      	beq.n	8014682 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801463e:	9b06      	ldr	r3, [sp, #24]
 8014640:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8014642:	3b01      	subs	r3, #1
 8014644:	fb00 4003 	mla	r0, r0, r3, r4
 8014648:	1400      	asrs	r0, r0, #16
 801464a:	f53f af5e 	bmi.w	801450a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801464e:	3901      	subs	r1, #1
 8014650:	4288      	cmp	r0, r1
 8014652:	f6bf af5a 	bge.w	801450a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8014656:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8014658:	fb01 a303 	mla	r3, r1, r3, sl
 801465c:	141b      	asrs	r3, r3, #16
 801465e:	f53f af54 	bmi.w	801450a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8014662:	3a01      	subs	r2, #1
 8014664:	4293      	cmp	r3, r2
 8014666:	f6bf af50 	bge.w	801450a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801466a:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801466e:	f1bc 0f00 	cmp.w	ip, #0
 8014672:	dc5c      	bgt.n	801472e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8014674:	9b06      	ldr	r3, [sp, #24]
 8014676:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801467a:	9b07      	ldr	r3, [sp, #28]
 801467c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014680:	9307      	str	r3, [sp, #28]
 8014682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014684:	2b00      	cmp	r3, #0
 8014686:	f340 80c4 	ble.w	8014812 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801468a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801468e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014690:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8014694:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8014698:	eef0 6a48 	vmov.f32	s13, s16
 801469c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80146a0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80146a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80146a8:	ee16 4a90 	vmov	r4, s13
 80146ac:	eef0 6a68 	vmov.f32	s13, s17
 80146b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80146b4:	ee16 aa90 	vmov	sl, s13
 80146b8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80146bc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80146c0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80146c4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80146c8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80146cc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80146d0:	ee18 2a10 	vmov	r2, s16
 80146d4:	eeb0 8a47 	vmov.f32	s16, s14
 80146d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80146dc:	ee18 2a90 	vmov	r2, s17
 80146e0:	932f      	str	r3, [sp, #188]	; 0xbc
 80146e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80146e4:	eef0 8a67 	vmov.f32	s17, s15
 80146e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80146ec:	9330      	str	r3, [sp, #192]	; 0xc0
 80146ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146f2:	3b01      	subs	r3, #1
 80146f4:	9309      	str	r3, [sp, #36]	; 0x24
 80146f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80146f8:	bf08      	it	eq
 80146fa:	4613      	moveq	r3, r2
 80146fc:	9306      	str	r3, [sp, #24]
 80146fe:	e6db      	b.n	80144b8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8014700:	f110 0c01 	adds.w	ip, r0, #1
 8014704:	d487      	bmi.n	8014616 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8014706:	4563      	cmp	r3, ip
 8014708:	db85      	blt.n	8014616 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801470a:	f115 0c01 	adds.w	ip, r5, #1
 801470e:	d482      	bmi.n	8014616 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8014710:	4567      	cmp	r7, ip
 8014712:	db80      	blt.n	8014616 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8014714:	b23f      	sxth	r7, r7
 8014716:	b21b      	sxth	r3, r3
 8014718:	9700      	str	r7, [sp, #0]
 801471a:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801471e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8014722:	9a08      	ldr	r2, [sp, #32]
 8014724:	4631      	mov	r1, r6
 8014726:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014728:	f7ff fde4 	bl	80142f4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 801472c:	e773      	b.n	8014616 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801472e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8014730:	1420      	asrs	r0, r4, #16
 8014732:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8014736:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801473a:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801473e:	ea4f 412a 	mov.w	r1, sl, asr #16
 8014742:	930b      	str	r3, [sp, #44]	; 0x2c
 8014744:	fb07 0101 	mla	r1, r7, r1, r0
 8014748:	9808      	ldr	r0, [sp, #32]
 801474a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801474e:	1845      	adds	r5, r0, r1
 8014750:	5c41      	ldrb	r1, [r0, r1]
 8014752:	78ae      	ldrb	r6, [r5, #2]
 8014754:	7868      	ldrb	r0, [r5, #1]
 8014756:	960c      	str	r6, [sp, #48]	; 0x30
 8014758:	f895 9003 	ldrb.w	r9, [r5, #3]
 801475c:	f895 8004 	ldrb.w	r8, [r5, #4]
 8014760:	f895 b005 	ldrb.w	fp, [r5, #5]
 8014764:	b192      	cbz	r2, 801478c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8014766:	2603      	movs	r6, #3
 8014768:	f06f 0304 	mvn.w	r3, #4
 801476c:	3505      	adds	r5, #5
 801476e:	fb17 3706 	smlabb	r7, r7, r6, r3
 8014772:	19ee      	adds	r6, r5, r7
 8014774:	5ded      	ldrb	r5, [r5, r7]
 8014776:	9513      	str	r5, [sp, #76]	; 0x4c
 8014778:	7875      	ldrb	r5, [r6, #1]
 801477a:	9515      	str	r5, [sp, #84]	; 0x54
 801477c:	78b5      	ldrb	r5, [r6, #2]
 801477e:	9517      	str	r5, [sp, #92]	; 0x5c
 8014780:	78f5      	ldrb	r5, [r6, #3]
 8014782:	9514      	str	r5, [sp, #80]	; 0x50
 8014784:	7935      	ldrb	r5, [r6, #4]
 8014786:	9516      	str	r5, [sp, #88]	; 0x58
 8014788:	7975      	ldrb	r5, [r6, #5]
 801478a:	9518      	str	r5, [sp, #96]	; 0x60
 801478c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8014790:	b292      	uxth	r2, r2
 8014792:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014796:	fb03 f502 	mul.w	r5, r3, r2
 801479a:	011b      	lsls	r3, r3, #4
 801479c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80147a0:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80147a4:	1b5b      	subs	r3, r3, r5
 80147a6:	b292      	uxth	r2, r2
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	1ab6      	subs	r6, r6, r2
 80147ac:	fb03 f909 	mul.w	r9, r3, r9
 80147b0:	b2b6      	uxth	r6, r6
 80147b2:	fb03 f808 	mul.w	r8, r3, r8
 80147b6:	fb03 fb0b 	mul.w	fp, r3, fp
 80147ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147bc:	fb06 9901 	mla	r9, r6, r1, r9
 80147c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80147c2:	fb06 8800 	mla	r8, r6, r0, r8
 80147c6:	fb02 9901 	mla	r9, r2, r1, r9
 80147ca:	9914      	ldr	r1, [sp, #80]	; 0x50
 80147cc:	fb06 bb03 	mla	fp, r6, r3, fp
 80147d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147d2:	fb05 9901 	mla	r9, r5, r1, r9
 80147d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80147d8:	fb02 bb03 	mla	fp, r2, r3, fp
 80147dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80147de:	fb02 8801 	mla	r8, r2, r1, r8
 80147e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80147e4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80147e8:	fb05 8801 	mla	r8, r5, r1, r8
 80147ec:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80147f0:	ea49 0908 	orr.w	r9, r9, r8
 80147f4:	fb05 b803 	mla	r8, r5, r3, fp
 80147f8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80147fa:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80147fe:	441c      	add	r4, r3
 8014800:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014802:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8014806:	449a      	add	sl, r3
 8014808:	ea49 0508 	orr.w	r5, r9, r8
 801480c:	f84e 5b04 	str.w	r5, [lr], #4
 8014810:	e72d      	b.n	801466e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8014812:	b01b      	add	sp, #108	; 0x6c
 8014814:	ecbd 8b08 	vpop	{d8-d11}
 8014818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801481c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 801481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	b085      	sub	sp, #20
 8014822:	6808      	ldr	r0, [r1, #0]
 8014824:	e9dd 640f 	ldrd	r6, r4, [sp, #60]	; 0x3c
 8014828:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801482c:	fb04 6503 	mla	r5, r4, r3, r6
 8014830:	2c00      	cmp	r4, #0
 8014832:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8014836:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
 801483a:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 801483e:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 8014842:	db39      	blt.n	80148b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x9c>
 8014844:	45a1      	cmp	r9, r4
 8014846:	dd37      	ble.n	80148b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x9c>
 8014848:	2e00      	cmp	r6, #0
 801484a:	db33      	blt.n	80148b4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x98>
 801484c:	42b3      	cmp	r3, r6
 801484e:	dd31      	ble.n	80148b4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x98>
 8014850:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014854:	1c75      	adds	r5, r6, #1
 8014856:	d430      	bmi.n	80148ba <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x9e>
 8014858:	42ab      	cmp	r3, r5
 801485a:	dd2e      	ble.n	80148ba <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x9e>
 801485c:	b36f      	cbz	r7, 80148ba <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x9e>
 801485e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014862:	3401      	adds	r4, #1
 8014864:	d42d      	bmi.n	80148c2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0xa6>
 8014866:	45a1      	cmp	r9, r4
 8014868:	dd2b      	ble.n	80148c2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0xa6>
 801486a:	f1be 0f00 	cmp.w	lr, #0
 801486e:	d028      	beq.n	80148c2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0xa6>
 8014870:	2e00      	cmp	r6, #0
 8014872:	db24      	blt.n	80148be <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0xa2>
 8014874:	42b3      	cmp	r3, r6
 8014876:	dd22      	ble.n	80148be <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0xa2>
 8014878:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
 801487c:	3601      	adds	r6, #1
 801487e:	d405      	bmi.n	801488c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x70>
 8014880:	42b3      	cmp	r3, r6
 8014882:	dd03      	ble.n	801488c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x70>
 8014884:	b117      	cbz	r7, 801488c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x70>
 8014886:	3301      	adds	r3, #1
 8014888:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 801488c:	2f0f      	cmp	r7, #15
 801488e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8014892:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8014896:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801489a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801489e:	d802      	bhi.n	80148a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x8a>
 80148a0:	f1be 0f0f 	cmp.w	lr, #15
 80148a4:	d90f      	bls.n	80148c6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0xaa>
 80148a6:	4b94      	ldr	r3, [pc, #592]	; (8014af8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x2dc>)
 80148a8:	f240 2131 	movw	r1, #561	; 0x231
 80148ac:	4a93      	ldr	r2, [pc, #588]	; (8014afc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x2e0>)
 80148ae:	4894      	ldr	r0, [pc, #592]	; (8014b00 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x2e4>)
 80148b0:	f002 fc3c 	bl	801712c <__assert_func>
 80148b4:	4602      	mov	r2, r0
 80148b6:	e7cd      	b.n	8014854 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x38>
 80148b8:	4602      	mov	r2, r0
 80148ba:	4605      	mov	r5, r0
 80148bc:	e7d1      	b.n	8014862 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x46>
 80148be:	4604      	mov	r4, r0
 80148c0:	e7dc      	b.n	801487c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x60>
 80148c2:	4604      	mov	r4, r0
 80148c4:	e7e2      	b.n	801488c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x70>
 80148c6:	b2bf      	uxth	r7, r7
 80148c8:	fa1f f68e 	uxth.w	r6, lr
 80148cc:	013b      	lsls	r3, r7, #4
 80148ce:	fb06 fe07 	mul.w	lr, r6, r7
 80148d2:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 80148d6:	eba3 070e 	sub.w	r7, r3, lr
 80148da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80148de:	b2b6      	uxth	r6, r6
 80148e0:	b2bf      	uxth	r7, r7
 80148e2:	1b9b      	subs	r3, r3, r6
 80148e4:	9701      	str	r7, [sp, #4]
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	9302      	str	r3, [sp, #8]
 80148ea:	fb07 f30a 	mul.w	r3, r7, sl
 80148ee:	461f      	mov	r7, r3
 80148f0:	9b02      	ldr	r3, [sp, #8]
 80148f2:	fb03 730b 	mla	r3, r3, fp, r7
 80148f6:	fb06 3309 	mla	r3, r6, r9, r3
 80148fa:	fb0e 3308 	mla	r3, lr, r8, r3
 80148fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8014902:	9303      	str	r3, [sp, #12]
 8014904:	2b00      	cmp	r3, #0
 8014906:	f000 80b6 	beq.w	8014a76 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x25a>
 801490a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801490e:	d018      	beq.n	8014942 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x126>
 8014910:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8014914:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014918:	fb0b f303 	mul.w	r3, fp, r3
 801491c:	fb0b fb02 	mul.w	fp, fp, r2
 8014920:	0a1a      	lsrs	r2, r3, #8
 8014922:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8014926:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801492a:	441a      	add	r2, r3
 801492c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8014930:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8014934:	0a12      	lsrs	r2, r2, #8
 8014936:	0a1b      	lsrs	r3, r3, #8
 8014938:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801493c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014940:	431a      	orrs	r2, r3
 8014942:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8014946:	d019      	beq.n	801497c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x160>
 8014948:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801494c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014950:	fb0a fb0b 	mul.w	fp, sl, fp
 8014954:	fb0a fa05 	mul.w	sl, sl, r5
 8014958:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801495c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014960:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8014964:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8014968:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801496c:	445d      	add	r5, fp
 801496e:	0a1b      	lsrs	r3, r3, #8
 8014970:	0a2d      	lsrs	r5, r5, #8
 8014972:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014976:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801497a:	431d      	orrs	r5, r3
 801497c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014980:	d01a      	beq.n	80149b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x19c>
 8014982:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8014986:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801498a:	fb09 f303 	mul.w	r3, r9, r3
 801498e:	fb09 f904 	mul.w	r9, r9, r4
 8014992:	0a1c      	lsrs	r4, r3, #8
 8014994:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8014998:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801499c:	441c      	add	r4, r3
 801499e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80149a2:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80149a6:	0a24      	lsrs	r4, r4, #8
 80149a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80149ac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80149b0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80149b4:	ea44 0409 	orr.w	r4, r4, r9
 80149b8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80149bc:	d01b      	beq.n	80149f6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x1da>
 80149be:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80149c2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80149c6:	fb08 f909 	mul.w	r9, r8, r9
 80149ca:	fb08 f300 	mul.w	r3, r8, r0
 80149ce:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80149d2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80149d6:	f503 7880 	add.w	r8, r3, #256	; 0x100
 80149da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80149de:	eb08 2813 	add.w	r8, r8, r3, lsr #8
 80149e2:	4448      	add	r0, r9
 80149e4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80149e8:	0a00      	lsrs	r0, r0, #8
 80149ea:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80149ee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80149f2:	ea40 0008 	orr.w	r0, r0, r8
 80149f6:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 80149fa:	9f01      	ldr	r7, [sp, #4]
 80149fc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014a00:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8014a04:	fb07 f903 	mul.w	r9, r7, r3
 8014a08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014a0c:	436f      	muls	r7, r5
 8014a0e:	9b02      	ldr	r3, [sp, #8]
 8014a10:	463d      	mov	r5, r7
 8014a12:	9f02      	ldr	r7, [sp, #8]
 8014a14:	fb03 9808 	mla	r8, r3, r8, r9
 8014a18:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8014a1c:	fb07 5202 	mla	r2, r7, r2, r5
 8014a20:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8014a24:	fb06 8803 	mla	r8, r6, r3, r8
 8014a28:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8014a2c:	fb06 2604 	mla	r6, r6, r4, r2
 8014a30:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8014a34:	fb0e 8303 	mla	r3, lr, r3, r8
 8014a38:	fb0e 6e00 	mla	lr, lr, r0, r6
 8014a3c:	0a1b      	lsrs	r3, r3, #8
 8014a3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014a42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014a46:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8014a4a:	ea43 0e0e 	orr.w	lr, r3, lr
 8014a4e:	9b03      	ldr	r3, [sp, #12]
 8014a50:	fb0c f203 	mul.w	r2, ip, r3
 8014a54:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8014a58:	1c53      	adds	r3, r2, #1
 8014a5a:	b2c6      	uxtb	r6, r0
 8014a5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014a60:	f3ce 4207 	ubfx	r2, lr, #16, #8
 8014a64:	121b      	asrs	r3, r3, #8
 8014a66:	b2d5      	uxtb	r5, r2
 8014a68:	2bff      	cmp	r3, #255	; 0xff
 8014a6a:	d107      	bne.n	8014a7c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x260>
 8014a6c:	f881 e000 	strb.w	lr, [r1]
 8014a70:	7048      	strb	r0, [r1, #1]
 8014a72:	708a      	strb	r2, [r1, #2]
 8014a74:	70cb      	strb	r3, [r1, #3]
 8014a76:	b005      	add	sp, #20
 8014a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a7c:	b2da      	uxtb	r2, r3
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d0f9      	beq.n	8014a76 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x25a>
 8014a82:	78c8      	ldrb	r0, [r1, #3]
 8014a84:	fb1c f606 	smulbb	r6, ip, r6
 8014a88:	fb02 f300 	mul.w	r3, r2, r0
 8014a8c:	4402      	add	r2, r0
 8014a8e:	1c5c      	adds	r4, r3, #1
 8014a90:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8014a94:	1223      	asrs	r3, r4, #8
 8014a96:	1ac4      	subs	r4, r0, r3
 8014a98:	1ad2      	subs	r2, r2, r3
 8014a9a:	fa5f f38e 	uxtb.w	r3, lr
 8014a9e:	f891 e000 	ldrb.w	lr, [r1]
 8014aa2:	b2d2      	uxtb	r2, r2
 8014aa4:	7848      	ldrb	r0, [r1, #1]
 8014aa6:	fb04 fe0e 	mul.w	lr, r4, lr
 8014aaa:	fb04 6000 	mla	r0, r4, r0, r6
 8014aae:	fb0c e303 	mla	r3, ip, r3, lr
 8014ab2:	fb1c fc05 	smulbb	ip, ip, r5
 8014ab6:	70ca      	strb	r2, [r1, #3]
 8014ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8014abc:	2bff      	cmp	r3, #255	; 0xff
 8014abe:	bfd6      	itet	le
 8014ac0:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8014ac4:	23ff      	movgt	r3, #255	; 0xff
 8014ac6:	b2db      	uxtble	r3, r3
 8014ac8:	fb90 f0f2 	sdiv	r0, r0, r2
 8014acc:	700b      	strb	r3, [r1, #0]
 8014ace:	28ff      	cmp	r0, #255	; 0xff
 8014ad0:	788b      	ldrb	r3, [r1, #2]
 8014ad2:	bfd4      	ite	le
 8014ad4:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8014ad8:	20ff      	movgt	r0, #255	; 0xff
 8014ada:	fb04 c303 	mla	r3, r4, r3, ip
 8014ade:	bfd8      	it	le
 8014ae0:	b2c0      	uxtble	r0, r0
 8014ae2:	fb93 f3f2 	sdiv	r3, r3, r2
 8014ae6:	2bff      	cmp	r3, #255	; 0xff
 8014ae8:	7048      	strb	r0, [r1, #1]
 8014aea:	bfd6      	itet	le
 8014aec:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8014af0:	23ff      	movgt	r3, #255	; 0xff
 8014af2:	b2db      	uxtble	r3, r3
 8014af4:	708b      	strb	r3, [r1, #2]
 8014af6:	e7be      	b.n	8014a76 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x25a>
 8014af8:	0801b376 	.word	0x0801b376
 8014afc:	0801b76d 	.word	0x0801b76d
 8014b00:	0801b3fe 	.word	0x0801b3fe

08014b04 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b08:	ed2d 8b08 	vpush	{d8-d11}
 8014b0c:	b09b      	sub	sp, #108	; 0x6c
 8014b0e:	eeb0 aa40 	vmov.f32	s20, s0
 8014b12:	eef0 9a60 	vmov.f32	s19, s1
 8014b16:	9218      	str	r2, [sp, #96]	; 0x60
 8014b18:	eeb0 9a41 	vmov.f32	s18, s2
 8014b1c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8014b1e:	eeb0 8a62 	vmov.f32	s16, s5
 8014b22:	9306      	str	r3, [sp, #24]
 8014b24:	eef0 8a43 	vmov.f32	s17, s6
 8014b28:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8014b2c:	eef0 ba44 	vmov.f32	s23, s8
 8014b30:	9019      	str	r0, [sp, #100]	; 0x64
 8014b32:	eeb0 ba64 	vmov.f32	s22, s9
 8014b36:	6850      	ldr	r0, [r2, #4]
 8014b38:	eef0 aa45 	vmov.f32	s21, s10
 8014b3c:	9116      	str	r1, [sp, #88]	; 0x58
 8014b3e:	9307      	str	r3, [sp, #28]
 8014b40:	6812      	ldr	r2, [r2, #0]
 8014b42:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8014b46:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8014b4a:	fb00 1303 	mla	r3, r0, r3, r1
 8014b4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014b52:	930a      	str	r3, [sp, #40]	; 0x28
 8014b54:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	dc03      	bgt.n	8014b68 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014b60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	f340 83b3 	ble.w	80152ce <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 8014b68:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014b6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014b6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014b72:	1e48      	subs	r0, r1, #1
 8014b74:	1e57      	subs	r7, r2, #1
 8014b76:	9b06      	ldr	r3, [sp, #24]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	f340 8167 	ble.w	8014e4c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8014b7e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8014b82:	ea4f 4326 	mov.w	r3, r6, asr #16
 8014b86:	d406      	bmi.n	8014b96 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014b88:	4584      	cmp	ip, r0
 8014b8a:	da04      	bge.n	8014b96 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	db02      	blt.n	8014b96 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014b90:	42bb      	cmp	r3, r7
 8014b92:	f2c0 815c 	blt.w	8014e4e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014b96:	f11c 0c01 	adds.w	ip, ip, #1
 8014b9a:	f100 814c 	bmi.w	8014e36 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8014b9e:	4561      	cmp	r1, ip
 8014ba0:	f2c0 8149 	blt.w	8014e36 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	f100 8146 	bmi.w	8014e36 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8014baa:	429a      	cmp	r2, r3
 8014bac:	f2c0 8143 	blt.w	8014e36 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8014bb0:	9b06      	ldr	r3, [sp, #24]
 8014bb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014bb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8014bb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	f340 8165 	ble.w	8014e88 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8014bbe:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8014bc0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8014bc4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014bc6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8014bca:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8014bce:	1422      	asrs	r2, r4, #16
 8014bd0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	f100 81e7 	bmi.w	8014fa8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8014bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8014bde:	4542      	cmp	r2, r8
 8014be0:	f280 81e2 	bge.w	8014fa8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8014be4:	f1bc 0f00 	cmp.w	ip, #0
 8014be8:	f2c0 81de 	blt.w	8014fa8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8014bec:	f10e 38ff 	add.w	r8, lr, #4294967295
 8014bf0:	45c4      	cmp	ip, r8
 8014bf2:	f280 81d9 	bge.w	8014fa8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8014bf6:	b21b      	sxth	r3, r3
 8014bf8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014bfa:	fb0c 2203 	mla	r2, ip, r3, r2
 8014bfe:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8014c02:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8014c06:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	f000 8182 	beq.w	8014f14 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8014c10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014c14:	950b      	str	r5, [sp, #44]	; 0x2c
 8014c16:	0e2d      	lsrs	r5, r5, #24
 8014c18:	9512      	str	r5, [sp, #72]	; 0x48
 8014c1a:	b181      	cbz	r1, 8014c3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014c1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014c20:	3b01      	subs	r3, #1
 8014c22:	009b      	lsls	r3, r3, #2
 8014c24:	3304      	adds	r3, #4
 8014c26:	eb08 0c03 	add.w	ip, r8, r3
 8014c2a:	f858 3003 	ldr.w	r3, [r8, r3]
 8014c2e:	9308      	str	r3, [sp, #32]
 8014c30:	0e1b      	lsrs	r3, r3, #24
 8014c32:	9310      	str	r3, [sp, #64]	; 0x40
 8014c34:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8014c38:	930c      	str	r3, [sp, #48]	; 0x30
 8014c3a:	0e1b      	lsrs	r3, r3, #24
 8014c3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c3e:	b280      	uxth	r0, r0
 8014c40:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014c42:	b289      	uxth	r1, r1
 8014c44:	fb00 f901 	mul.w	r9, r0, r1
 8014c48:	0100      	lsls	r0, r0, #4
 8014c4a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014c4e:	eba0 0809 	sub.w	r8, r0, r9
 8014c52:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8014c56:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014c58:	b289      	uxth	r1, r1
 8014c5a:	fa1f f888 	uxth.w	r8, r8
 8014c5e:	1a5b      	subs	r3, r3, r1
 8014c60:	fb08 f000 	mul.w	r0, r8, r0
 8014c64:	b29b      	uxth	r3, r3
 8014c66:	fb03 000e 	mla	r0, r3, lr, r0
 8014c6a:	fb01 0005 	mla	r0, r1, r5, r0
 8014c6e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014c70:	fb09 0005 	mla	r0, r9, r5, r0
 8014c74:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	f000 80d3 	beq.w	8014e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8014c7e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014c82:	d01b      	beq.n	8014cbc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8014c84:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8014c88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014c8c:	fb0e fa0a 	mul.w	sl, lr, sl
 8014c90:	fb0e fe02 	mul.w	lr, lr, r2
 8014c94:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8014c98:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014c9c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8014ca0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8014ca4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8014ca8:	4452      	add	r2, sl
 8014caa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014cae:	0a12      	lsrs	r2, r2, #8
 8014cb0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014cb4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8014cb8:	ea42 020c 	orr.w	r2, r2, ip
 8014cbc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014cbe:	2dff      	cmp	r5, #255	; 0xff
 8014cc0:	d021      	beq.n	8014d06 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8014cc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014cc4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014cc8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014cca:	fb05 fb0b 	mul.w	fp, r5, fp
 8014cce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014cd0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8014cd4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014cd6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014cda:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014cde:	fb05 fa0a 	mul.w	sl, r5, sl
 8014ce2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014ce6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014cea:	44de      	add	lr, fp
 8014cec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014cf0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014cf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014cf8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014cfc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d00:	ea4e 050a 	orr.w	r5, lr, sl
 8014d04:	950b      	str	r5, [sp, #44]	; 0x2c
 8014d06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014d08:	2dff      	cmp	r5, #255	; 0xff
 8014d0a:	d021      	beq.n	8014d50 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8014d0c:	9d08      	ldr	r5, [sp, #32]
 8014d0e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014d12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014d14:	fb05 fb0b 	mul.w	fp, r5, fp
 8014d18:	9d08      	ldr	r5, [sp, #32]
 8014d1a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8014d1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014d20:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014d24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014d28:	fb05 fa0a 	mul.w	sl, r5, sl
 8014d2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d30:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014d34:	44de      	add	lr, fp
 8014d36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014d3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014d3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d4a:	ea4e 050a 	orr.w	r5, lr, sl
 8014d4e:	9508      	str	r5, [sp, #32]
 8014d50:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014d52:	2dff      	cmp	r5, #255	; 0xff
 8014d54:	d021      	beq.n	8014d9a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8014d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014d58:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014d5c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014d5e:	fb05 fb0b 	mul.w	fp, r5, fp
 8014d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014d64:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8014d68:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014d6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014d6e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014d72:	fb05 fa0a 	mul.w	sl, r5, sl
 8014d76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d7a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014d7e:	44de      	add	lr, fp
 8014d80:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014d84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014d88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d94:	ea4e 050a 	orr.w	r5, lr, sl
 8014d98:	950c      	str	r5, [sp, #48]	; 0x30
 8014d9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014d9c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8014da0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014da4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8014da8:	9d08      	ldr	r5, [sp, #32]
 8014daa:	fb08 fc0c 	mul.w	ip, r8, ip
 8014dae:	fb03 cc0e 	mla	ip, r3, lr, ip
 8014db2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8014db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014db8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8014dbc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8014dc0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014dc2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8014dc6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8014dca:	fb08 f80e 	mul.w	r8, r8, lr
 8014dce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014dd2:	fb03 8202 	mla	r2, r3, r2, r8
 8014dd6:	9b08      	ldr	r3, [sp, #32]
 8014dd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014ddc:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8014de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014de2:	fb01 220a 	mla	r2, r1, sl, r2
 8014de6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8014dea:	9b07      	ldr	r3, [sp, #28]
 8014dec:	fb09 2901 	mla	r9, r9, r1, r2
 8014df0:	4358      	muls	r0, r3
 8014df2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014df6:	1c43      	adds	r3, r0, #1
 8014df8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8014dfc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8014e00:	ea4c 0c09 	orr.w	ip, ip, r9
 8014e04:	1200      	asrs	r0, r0, #8
 8014e06:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8014e0a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8014e0e:	28ff      	cmp	r0, #255	; 0xff
 8014e10:	b2d9      	uxtb	r1, r3
 8014e12:	fa5f fe82 	uxtb.w	lr, r2
 8014e16:	f040 8086 	bne.w	8014f26 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 8014e1a:	f887 c000 	strb.w	ip, [r7]
 8014e1e:	707a      	strb	r2, [r7, #1]
 8014e20:	70bb      	strb	r3, [r7, #2]
 8014e22:	70f8      	strb	r0, [r7, #3]
 8014e24:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014e26:	3704      	adds	r7, #4
 8014e28:	441c      	add	r4, r3
 8014e2a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014e2c:	441e      	add	r6, r3
 8014e2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e30:	3b01      	subs	r3, #1
 8014e32:	9317      	str	r3, [sp, #92]	; 0x5c
 8014e34:	e6bf      	b.n	8014bb6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8014e36:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014e38:	441c      	add	r4, r3
 8014e3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014e3c:	441e      	add	r6, r3
 8014e3e:	9b06      	ldr	r3, [sp, #24]
 8014e40:	3b01      	subs	r3, #1
 8014e42:	9306      	str	r3, [sp, #24]
 8014e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e46:	3304      	adds	r3, #4
 8014e48:	930a      	str	r3, [sp, #40]	; 0x28
 8014e4a:	e694      	b.n	8014b76 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014e4c:	d023      	beq.n	8014e96 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8014e4e:	9b06      	ldr	r3, [sp, #24]
 8014e50:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8014e52:	3b01      	subs	r3, #1
 8014e54:	fb00 4003 	mla	r0, r0, r3, r4
 8014e58:	1400      	asrs	r0, r0, #16
 8014e5a:	f53f aea9 	bmi.w	8014bb0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8014e5e:	3901      	subs	r1, #1
 8014e60:	4288      	cmp	r0, r1
 8014e62:	f6bf aea5 	bge.w	8014bb0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8014e66:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8014e68:	fb01 6303 	mla	r3, r1, r3, r6
 8014e6c:	141b      	asrs	r3, r3, #16
 8014e6e:	f53f ae9f 	bmi.w	8014bb0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8014e72:	3a01      	subs	r2, #1
 8014e74:	4293      	cmp	r3, r2
 8014e76:	f6bf ae9b 	bge.w	8014bb0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8014e7a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8014e7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014e80:	f1bb 0f00 	cmp.w	fp, #0
 8014e84:	f300 80ae 	bgt.w	8014fe4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8014e88:	9b06      	ldr	r3, [sp, #24]
 8014e8a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8014e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e90:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8014e94:	930a      	str	r3, [sp, #40]	; 0x28
 8014e96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	f340 8218 	ble.w	80152ce <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 8014e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014ea2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014ea4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8014ea8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8014eac:	eef0 6a48 	vmov.f32	s13, s16
 8014eb0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8014eb4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8014eb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014ebc:	ee16 4a90 	vmov	r4, s13
 8014ec0:	eef0 6a68 	vmov.f32	s13, s17
 8014ec4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014ec8:	ee16 6a90 	vmov	r6, s13
 8014ecc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8014ed0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014ed4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8014ed8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8014edc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8014ee0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8014ee4:	ee18 2a10 	vmov	r2, s16
 8014ee8:	eeb0 8a47 	vmov.f32	s16, s14
 8014eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8014ef0:	ee18 2a90 	vmov	r2, s17
 8014ef4:	932f      	str	r3, [sp, #188]	; 0xbc
 8014ef6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014ef8:	eef0 8a67 	vmov.f32	s17, s15
 8014efc:	fb92 f3f3 	sdiv	r3, r2, r3
 8014f00:	9330      	str	r3, [sp, #192]	; 0xc0
 8014f02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014f04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014f06:	3b01      	subs	r3, #1
 8014f08:	9316      	str	r3, [sp, #88]	; 0x58
 8014f0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014f0c:	bf08      	it	eq
 8014f0e:	4613      	moveq	r3, r2
 8014f10:	9306      	str	r3, [sp, #24]
 8014f12:	e622      	b.n	8014b5a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8014f14:	2900      	cmp	r1, #0
 8014f16:	f43f ae92 	beq.w	8014c3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014f1a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8014f1e:	9308      	str	r3, [sp, #32]
 8014f20:	0e1b      	lsrs	r3, r3, #24
 8014f22:	9310      	str	r3, [sp, #64]	; 0x40
 8014f24:	e68b      	b.n	8014c3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014f26:	b2c3      	uxtb	r3, r0
 8014f28:	2800      	cmp	r0, #0
 8014f2a:	f43f af7b 	beq.w	8014e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8014f2e:	78f8      	ldrb	r0, [r7, #3]
 8014f30:	fa5f fc8c 	uxtb.w	ip, ip
 8014f34:	9d07      	ldr	r5, [sp, #28]
 8014f36:	fb03 f800 	mul.w	r8, r3, r0
 8014f3a:	4403      	add	r3, r0
 8014f3c:	f108 0201 	add.w	r2, r8, #1
 8014f40:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8014f44:	1212      	asrs	r2, r2, #8
 8014f46:	1a80      	subs	r0, r0, r2
 8014f48:	1a9b      	subs	r3, r3, r2
 8014f4a:	783a      	ldrb	r2, [r7, #0]
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	4342      	muls	r2, r0
 8014f50:	70fb      	strb	r3, [r7, #3]
 8014f52:	fb05 220c 	mla	r2, r5, ip, r2
 8014f56:	9d07      	ldr	r5, [sp, #28]
 8014f58:	fb92 f2f3 	sdiv	r2, r2, r3
 8014f5c:	fb15 fe0e 	smulbb	lr, r5, lr
 8014f60:	2aff      	cmp	r2, #255	; 0xff
 8014f62:	9d07      	ldr	r5, [sp, #28]
 8014f64:	bfd4      	ite	le
 8014f66:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8014f6a:	22ff      	movgt	r2, #255	; 0xff
 8014f6c:	fb15 f101 	smulbb	r1, r5, r1
 8014f70:	bfd8      	it	le
 8014f72:	b2d2      	uxtble	r2, r2
 8014f74:	703a      	strb	r2, [r7, #0]
 8014f76:	787a      	ldrb	r2, [r7, #1]
 8014f78:	fb00 e202 	mla	r2, r0, r2, lr
 8014f7c:	fb92 f2f3 	sdiv	r2, r2, r3
 8014f80:	2aff      	cmp	r2, #255	; 0xff
 8014f82:	bfd6      	itet	le
 8014f84:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8014f88:	22ff      	movgt	r2, #255	; 0xff
 8014f8a:	b2d2      	uxtble	r2, r2
 8014f8c:	707a      	strb	r2, [r7, #1]
 8014f8e:	78ba      	ldrb	r2, [r7, #2]
 8014f90:	fb00 1202 	mla	r2, r0, r2, r1
 8014f94:	fb92 f2f3 	sdiv	r2, r2, r3
 8014f98:	2aff      	cmp	r2, #255	; 0xff
 8014f9a:	bfd6      	itet	le
 8014f9c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8014fa0:	22ff      	movgt	r2, #255	; 0xff
 8014fa2:	b2d2      	uxtble	r2, r2
 8014fa4:	70ba      	strb	r2, [r7, #2]
 8014fa6:	e73d      	b.n	8014e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8014fa8:	f112 0801 	adds.w	r8, r2, #1
 8014fac:	f53f af3a 	bmi.w	8014e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8014fb0:	4543      	cmp	r3, r8
 8014fb2:	f6ff af37 	blt.w	8014e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8014fb6:	f11c 0801 	adds.w	r8, ip, #1
 8014fba:	f53f af33 	bmi.w	8014e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8014fbe:	45c6      	cmp	lr, r8
 8014fc0:	f6ff af30 	blt.w	8014e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8014fc4:	9d07      	ldr	r5, [sp, #28]
 8014fc6:	b21b      	sxth	r3, r3
 8014fc8:	9201      	str	r2, [sp, #4]
 8014fca:	fa0f f28e 	sxth.w	r2, lr
 8014fce:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8014fd2:	e9cd c002 	strd	ip, r0, [sp, #8]
 8014fd6:	9200      	str	r2, [sp, #0]
 8014fd8:	4639      	mov	r1, r7
 8014fda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fdc:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014fde:	f7ff fc1d 	bl	801481c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 8014fe2:	e71f      	b.n	8014e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8014fe4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014fe6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8014fea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014fec:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8014ff0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8014ff4:	1433      	asrs	r3, r6, #16
 8014ff6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8014ffa:	fb00 c303 	mla	r3, r0, r3, ip
 8014ffe:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 8015002:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8015006:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801500a:	2a00      	cmp	r2, #0
 801500c:	f000 8111 	beq.w	8015232 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8015010:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015014:	950d      	str	r5, [sp, #52]	; 0x34
 8015016:	0e2d      	lsrs	r5, r5, #24
 8015018:	9514      	str	r5, [sp, #80]	; 0x50
 801501a:	b187      	cbz	r7, 801503e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 801501c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8015020:	3801      	subs	r0, #1
 8015022:	0080      	lsls	r0, r0, #2
 8015024:	3004      	adds	r0, #4
 8015026:	eb0c 0800 	add.w	r8, ip, r0
 801502a:	f85c 0000 	ldr.w	r0, [ip, r0]
 801502e:	9009      	str	r0, [sp, #36]	; 0x24
 8015030:	0e00      	lsrs	r0, r0, #24
 8015032:	9011      	str	r0, [sp, #68]	; 0x44
 8015034:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015038:	900e      	str	r0, [sp, #56]	; 0x38
 801503a:	0e00      	lsrs	r0, r0, #24
 801503c:	9015      	str	r0, [sp, #84]	; 0x54
 801503e:	b292      	uxth	r2, r2
 8015040:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015042:	b2bf      	uxth	r7, r7
 8015044:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015046:	fb02 f907 	mul.w	r9, r2, r7
 801504a:	0112      	lsls	r2, r2, #4
 801504c:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 8015050:	eba2 0809 	sub.w	r8, r2, r9
 8015054:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015058:	b2bf      	uxth	r7, r7
 801505a:	fa1f f888 	uxth.w	r8, r8
 801505e:	1bd2      	subs	r2, r2, r7
 8015060:	fb08 f000 	mul.w	r0, r8, r0
 8015064:	b292      	uxth	r2, r2
 8015066:	fb02 000e 	mla	r0, r2, lr, r0
 801506a:	fb07 0005 	mla	r0, r7, r5, r0
 801506e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015070:	fb09 0005 	mla	r0, r9, r5, r0
 8015074:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015078:	2800      	cmp	r0, #0
 801507a:	f000 80d2 	beq.w	8015222 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801507e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015082:	d01b      	beq.n	80150bc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b8>
 8015084:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015088:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801508c:	fb0e fa0a 	mul.w	sl, lr, sl
 8015090:	fb0e fe03 	mul.w	lr, lr, r3
 8015094:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015098:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801509c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80150a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80150a4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80150a8:	4453      	add	r3, sl
 80150aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80150ae:	0a1b      	lsrs	r3, r3, #8
 80150b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80150b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80150b8:	ea43 030c 	orr.w	r3, r3, ip
 80150bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80150be:	2dff      	cmp	r5, #255	; 0xff
 80150c0:	d021      	beq.n	8015106 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x602>
 80150c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80150c4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80150c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80150ca:	fb05 fc0c 	mul.w	ip, r5, ip
 80150ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80150d0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80150d4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80150d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80150da:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80150de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80150e2:	fb05 fa0a 	mul.w	sl, r5, sl
 80150e6:	44e6      	add	lr, ip
 80150e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80150ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80150f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80150f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80150f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80150fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015100:	ea4e 050a 	orr.w	r5, lr, sl
 8015104:	950d      	str	r5, [sp, #52]	; 0x34
 8015106:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015108:	2dff      	cmp	r5, #255	; 0xff
 801510a:	d021      	beq.n	8015150 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801510c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801510e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8015112:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015114:	fb05 fc0c 	mul.w	ip, r5, ip
 8015118:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801511a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801511e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8015122:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015124:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015128:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801512c:	fb05 fa0a 	mul.w	sl, r5, sl
 8015130:	44e6      	add	lr, ip
 8015132:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015136:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801513a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801513e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015142:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015146:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801514a:	ea4e 050a 	orr.w	r5, lr, sl
 801514e:	9509      	str	r5, [sp, #36]	; 0x24
 8015150:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015152:	2dff      	cmp	r5, #255	; 0xff
 8015154:	d021      	beq.n	801519a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x696>
 8015156:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015158:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801515c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801515e:	fb05 fc0c 	mul.w	ip, r5, ip
 8015162:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015164:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8015168:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801516c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801516e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015172:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015176:	fb05 fa0a 	mul.w	sl, r5, sl
 801517a:	44e6      	add	lr, ip
 801517c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015180:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015184:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015188:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801518c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015190:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015194:	ea4e 050a 	orr.w	r5, lr, sl
 8015198:	950e      	str	r5, [sp, #56]	; 0x38
 801519a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801519c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80151a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80151a4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80151a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80151aa:	fb08 fc0c 	mul.w	ip, r8, ip
 80151ae:	fb02 cc0e 	mla	ip, r2, lr, ip
 80151b2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80151b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80151b8:	fb07 cc0e 	mla	ip, r7, lr, ip
 80151bc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80151c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80151c2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80151c6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80151ca:	fb08 f80e 	mul.w	r8, r8, lr
 80151ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80151d2:	fb02 8303 	mla	r3, r2, r3, r8
 80151d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80151dc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80151e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80151e2:	fb07 330a 	mla	r3, r7, sl, r3
 80151e6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80151ea:	fb09 3e0e 	mla	lr, r9, lr, r3
 80151ee:	9b07      	ldr	r3, [sp, #28]
 80151f0:	4358      	muls	r0, r3
 80151f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80151f6:	1c43      	adds	r3, r0, #1
 80151f8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80151fc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8015200:	ea4c 0c0e 	orr.w	ip, ip, lr
 8015204:	1200      	asrs	r0, r0, #8
 8015206:	f3cc 4307 	ubfx	r3, ip, #16, #8
 801520a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801520e:	28ff      	cmp	r0, #255	; 0xff
 8015210:	b2df      	uxtb	r7, r3
 8015212:	fa5f fe82 	uxtb.w	lr, r2
 8015216:	d115      	bne.n	8015244 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8015218:	f881 c000 	strb.w	ip, [r1]
 801521c:	704a      	strb	r2, [r1, #1]
 801521e:	708b      	strb	r3, [r1, #2]
 8015220:	70c8      	strb	r0, [r1, #3]
 8015222:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015224:	3104      	adds	r1, #4
 8015226:	f10b 3bff 	add.w	fp, fp, #4294967295
 801522a:	441c      	add	r4, r3
 801522c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801522e:	441e      	add	r6, r3
 8015230:	e626      	b.n	8014e80 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8015232:	2f00      	cmp	r7, #0
 8015234:	f43f af03 	beq.w	801503e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8015238:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 801523c:	9009      	str	r0, [sp, #36]	; 0x24
 801523e:	0e00      	lsrs	r0, r0, #24
 8015240:	9011      	str	r0, [sp, #68]	; 0x44
 8015242:	e6fc      	b.n	801503e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8015244:	b2c3      	uxtb	r3, r0
 8015246:	2800      	cmp	r0, #0
 8015248:	d0eb      	beq.n	8015222 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801524a:	78c8      	ldrb	r0, [r1, #3]
 801524c:	fa5f fc8c 	uxtb.w	ip, ip
 8015250:	9d07      	ldr	r5, [sp, #28]
 8015252:	fb03 f800 	mul.w	r8, r3, r0
 8015256:	4403      	add	r3, r0
 8015258:	f108 0201 	add.w	r2, r8, #1
 801525c:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8015260:	1212      	asrs	r2, r2, #8
 8015262:	1a9b      	subs	r3, r3, r2
 8015264:	1a82      	subs	r2, r0, r2
 8015266:	7808      	ldrb	r0, [r1, #0]
 8015268:	b2db      	uxtb	r3, r3
 801526a:	4350      	muls	r0, r2
 801526c:	70cb      	strb	r3, [r1, #3]
 801526e:	fb05 0c0c 	mla	ip, r5, ip, r0
 8015272:	9d07      	ldr	r5, [sp, #28]
 8015274:	7848      	ldrb	r0, [r1, #1]
 8015276:	fb15 fe0e 	smulbb	lr, r5, lr
 801527a:	9d07      	ldr	r5, [sp, #28]
 801527c:	fb9c fcf3 	sdiv	ip, ip, r3
 8015280:	fb02 e000 	mla	r0, r2, r0, lr
 8015284:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8015288:	fb15 f707 	smulbb	r7, r5, r7
 801528c:	bfd4      	ite	le
 801528e:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8015292:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 8015296:	fb90 f0f3 	sdiv	r0, r0, r3
 801529a:	bfd8      	it	le
 801529c:	fa5f fc8c 	uxtble.w	ip, ip
 80152a0:	28ff      	cmp	r0, #255	; 0xff
 80152a2:	bfd4      	ite	le
 80152a4:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80152a8:	20ff      	movgt	r0, #255	; 0xff
 80152aa:	f881 c000 	strb.w	ip, [r1]
 80152ae:	bfd8      	it	le
 80152b0:	b2c0      	uxtble	r0, r0
 80152b2:	7048      	strb	r0, [r1, #1]
 80152b4:	7888      	ldrb	r0, [r1, #2]
 80152b6:	fb02 7200 	mla	r2, r2, r0, r7
 80152ba:	fb92 f2f3 	sdiv	r2, r2, r3
 80152be:	2aff      	cmp	r2, #255	; 0xff
 80152c0:	bfd6      	itet	le
 80152c2:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80152c6:	22ff      	movgt	r2, #255	; 0xff
 80152c8:	b2d2      	uxtble	r2, r2
 80152ca:	708a      	strb	r2, [r1, #2]
 80152cc:	e7a9      	b.n	8015222 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80152ce:	b01b      	add	sp, #108	; 0x6c
 80152d0:	ecbd 8b08 	vpop	{d8-d11}
 80152d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152d8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 80152d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152dc:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80152e0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80152e4:	2800      	cmp	r0, #0
 80152e6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80152ea:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80152ee:	fb0c 0e03 	mla	lr, ip, r3, r0
 80152f2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80152f6:	db6b      	blt.n	80153d0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xf8>
 80152f8:	4580      	cmp	r8, r0
 80152fa:	dd69      	ble.n	80153d0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xf8>
 80152fc:	f1bc 0f00 	cmp.w	ip, #0
 8015300:	db66      	blt.n	80153d0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xf8>
 8015302:	45e1      	cmp	r9, ip
 8015304:	dd64      	ble.n	80153d0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xf8>
 8015306:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801530a:	f01e 0f01 	tst.w	lr, #1
 801530e:	5d16      	ldrb	r6, [r2, r4]
 8015310:	bf0c      	ite	eq
 8015312:	f006 060f 	andeq.w	r6, r6, #15
 8015316:	1136      	asrne	r6, r6, #4
 8015318:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801531c:	b2f6      	uxtb	r6, r6
 801531e:	f110 0a01 	adds.w	sl, r0, #1
 8015322:	d457      	bmi.n	80153d4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xfc>
 8015324:	45d0      	cmp	r8, sl
 8015326:	dd55      	ble.n	80153d4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xfc>
 8015328:	f1bc 0f00 	cmp.w	ip, #0
 801532c:	db52      	blt.n	80153d4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xfc>
 801532e:	45e1      	cmp	r9, ip
 8015330:	dd50      	ble.n	80153d4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xfc>
 8015332:	2f00      	cmp	r7, #0
 8015334:	f000 80b0 	beq.w	8015498 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1c0>
 8015338:	f10e 0b01 	add.w	fp, lr, #1
 801533c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8015340:	f01b 0f01 	tst.w	fp, #1
 8015344:	5d14      	ldrb	r4, [r2, r4]
 8015346:	bf0c      	ite	eq
 8015348:	f004 040f 	andeq.w	r4, r4, #15
 801534c:	1124      	asrne	r4, r4, #4
 801534e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8015352:	b2e4      	uxtb	r4, r4
 8015354:	2d00      	cmp	r5, #0
 8015356:	f000 809a 	beq.w	801548e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1b6>
 801535a:	2800      	cmp	r0, #0
 801535c:	f10c 0c01 	add.w	ip, ip, #1
 8015360:	db3c      	blt.n	80153dc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x104>
 8015362:	4580      	cmp	r8, r0
 8015364:	dd3a      	ble.n	80153dc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x104>
 8015366:	f1bc 0f00 	cmp.w	ip, #0
 801536a:	db37      	blt.n	80153dc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x104>
 801536c:	45e1      	cmp	r9, ip
 801536e:	dd35      	ble.n	80153dc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x104>
 8015370:	eb03 0b0e 	add.w	fp, r3, lr
 8015374:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8015378:	f01b 0f01 	tst.w	fp, #1
 801537c:	5c10      	ldrb	r0, [r2, r0]
 801537e:	bf0c      	ite	eq
 8015380:	f000 000f 	andeq.w	r0, r0, #15
 8015384:	1100      	asrne	r0, r0, #4
 8015386:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801538a:	b2c0      	uxtb	r0, r0
 801538c:	f1ba 0f00 	cmp.w	sl, #0
 8015390:	db26      	blt.n	80153e0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x108>
 8015392:	45d0      	cmp	r8, sl
 8015394:	dd24      	ble.n	80153e0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x108>
 8015396:	f1bc 0f00 	cmp.w	ip, #0
 801539a:	db21      	blt.n	80153e0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x108>
 801539c:	45e1      	cmp	r9, ip
 801539e:	dd1f      	ble.n	80153e0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x108>
 80153a0:	b307      	cbz	r7, 80153e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x10c>
 80153a2:	3301      	adds	r3, #1
 80153a4:	449e      	add	lr, r3
 80153a6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80153aa:	f01e 0f01 	tst.w	lr, #1
 80153ae:	5cd3      	ldrb	r3, [r2, r3]
 80153b0:	bf0c      	ite	eq
 80153b2:	f003 030f 	andeq.w	r3, r3, #15
 80153b6:	111b      	asrne	r3, r3, #4
 80153b8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	2f0f      	cmp	r7, #15
 80153c0:	d911      	bls.n	80153e6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x10e>
 80153c2:	4b37      	ldr	r3, [pc, #220]	; (80154a0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1c8>)
 80153c4:	f240 2131 	movw	r1, #561	; 0x231
 80153c8:	4a36      	ldr	r2, [pc, #216]	; (80154a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1cc>)
 80153ca:	4837      	ldr	r0, [pc, #220]	; (80154a8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1d0>)
 80153cc:	f001 feae 	bl	801712c <__assert_func>
 80153d0:	2600      	movs	r6, #0
 80153d2:	e7a4      	b.n	801531e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x46>
 80153d4:	2400      	movs	r4, #0
 80153d6:	e7bd      	b.n	8015354 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7c>
 80153d8:	463c      	mov	r4, r7
 80153da:	e7be      	b.n	801535a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x82>
 80153dc:	2000      	movs	r0, #0
 80153de:	e7d5      	b.n	801538c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 80153e0:	2300      	movs	r3, #0
 80153e2:	e7ec      	b.n	80153be <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80153e4:	463b      	mov	r3, r7
 80153e6:	2d0f      	cmp	r5, #15
 80153e8:	d8eb      	bhi.n	80153c2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xea>
 80153ea:	b2bf      	uxth	r7, r7
 80153ec:	b2ad      	uxth	r5, r5
 80153ee:	fb07 f205 	mul.w	r2, r7, r5
 80153f2:	013f      	lsls	r7, r7, #4
 80153f4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80153f8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80153fc:	1abf      	subs	r7, r7, r2
 80153fe:	b2ad      	uxth	r5, r5
 8015400:	b2bf      	uxth	r7, r7
 8015402:	ebac 0c05 	sub.w	ip, ip, r5
 8015406:	437c      	muls	r4, r7
 8015408:	fa1f fc8c 	uxth.w	ip, ip
 801540c:	fb06 440c 	mla	r4, r6, ip, r4
 8015410:	fb05 4400 	mla	r4, r5, r0, r4
 8015414:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8015418:	fb02 4303 	mla	r3, r2, r3, r4
 801541c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015420:	4343      	muls	r3, r0
 8015422:	1c5a      	adds	r2, r3, #1
 8015424:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015428:	4a20      	ldr	r2, [pc, #128]	; (80154ac <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1d4>)
 801542a:	121b      	asrs	r3, r3, #8
 801542c:	7895      	ldrb	r5, [r2, #2]
 801542e:	7857      	ldrb	r7, [r2, #1]
 8015430:	2bff      	cmp	r3, #255	; 0xff
 8015432:	7814      	ldrb	r4, [r2, #0]
 8015434:	d105      	bne.n	8015442 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x16a>
 8015436:	700c      	strb	r4, [r1, #0]
 8015438:	704f      	strb	r7, [r1, #1]
 801543a:	708d      	strb	r5, [r1, #2]
 801543c:	70cb      	strb	r3, [r1, #3]
 801543e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015442:	b2da      	uxtb	r2, r3
 8015444:	2b00      	cmp	r3, #0
 8015446:	d0fa      	beq.n	801543e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x166>
 8015448:	78ce      	ldrb	r6, [r1, #3]
 801544a:	435c      	muls	r4, r3
 801544c:	435f      	muls	r7, r3
 801544e:	fb02 fc06 	mul.w	ip, r2, r6
 8015452:	4432      	add	r2, r6
 8015454:	436b      	muls	r3, r5
 8015456:	f10c 0001 	add.w	r0, ip, #1
 801545a:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 801545e:	1200      	asrs	r0, r0, #8
 8015460:	1a12      	subs	r2, r2, r0
 8015462:	1a30      	subs	r0, r6, r0
 8015464:	780e      	ldrb	r6, [r1, #0]
 8015466:	b2d2      	uxtb	r2, r2
 8015468:	fb00 4606 	mla	r6, r0, r6, r4
 801546c:	784c      	ldrb	r4, [r1, #1]
 801546e:	70ca      	strb	r2, [r1, #3]
 8015470:	fb00 7404 	mla	r4, r0, r4, r7
 8015474:	fb94 f4f2 	sdiv	r4, r4, r2
 8015478:	704c      	strb	r4, [r1, #1]
 801547a:	788c      	ldrb	r4, [r1, #2]
 801547c:	fb00 3304 	mla	r3, r0, r4, r3
 8015480:	fb96 f6f2 	sdiv	r6, r6, r2
 8015484:	fb93 f3f2 	sdiv	r3, r3, r2
 8015488:	700e      	strb	r6, [r1, #0]
 801548a:	708b      	strb	r3, [r1, #2]
 801548c:	e7d7      	b.n	801543e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x166>
 801548e:	2f0f      	cmp	r7, #15
 8015490:	d897      	bhi.n	80153c2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xea>
 8015492:	462b      	mov	r3, r5
 8015494:	4628      	mov	r0, r5
 8015496:	e7a8      	b.n	80153ea <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x112>
 8015498:	2d00      	cmp	r5, #0
 801549a:	d19d      	bne.n	80153d8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x100>
 801549c:	462c      	mov	r4, r5
 801549e:	e7f8      	b.n	8015492 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ba>
 80154a0:	0801b376 	.word	0x0801b376
 80154a4:	0801b76d 	.word	0x0801b76d
 80154a8:	0801b3fe 	.word	0x0801b3fe
 80154ac:	2400fa2c 	.word	0x2400fa2c

080154b0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80154b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b4:	ed2d 8b08 	vpush	{d8-d11}
 80154b8:	b097      	sub	sp, #92	; 0x5c
 80154ba:	eeb0 aa40 	vmov.f32	s20, s0
 80154be:	eef0 9a60 	vmov.f32	s19, s1
 80154c2:	9214      	str	r2, [sp, #80]	; 0x50
 80154c4:	eeb0 9a41 	vmov.f32	s18, s2
 80154c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80154ca:	eeb0 8a62 	vmov.f32	s16, s5
 80154ce:	9309      	str	r3, [sp, #36]	; 0x24
 80154d0:	eef0 8a43 	vmov.f32	s17, s6
 80154d4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80154d8:	eef0 ba44 	vmov.f32	s23, s8
 80154dc:	9015      	str	r0, [sp, #84]	; 0x54
 80154de:	eeb0 ba64 	vmov.f32	s22, s9
 80154e2:	6850      	ldr	r0, [r2, #4]
 80154e4:	eef0 aa45 	vmov.f32	s21, s10
 80154e8:	910d      	str	r1, [sp, #52]	; 0x34
 80154ea:	930e      	str	r3, [sp, #56]	; 0x38
 80154ec:	6812      	ldr	r2, [r2, #0]
 80154ee:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80154f2:	e9dd a529 	ldrd	sl, r5, [sp, #164]	; 0xa4
 80154f6:	fb00 1303 	mla	r3, r0, r3, r1
 80154fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80154fe:	930a      	str	r3, [sp, #40]	; 0x28
 8015500:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015502:	689b      	ldr	r3, [r3, #8]
 8015504:	3301      	adds	r3, #1
 8015506:	f023 0301 	bic.w	r3, r3, #1
 801550a:	930f      	str	r3, [sp, #60]	; 0x3c
 801550c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801550e:	681e      	ldr	r6, [r3, #0]
 8015510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015512:	2b00      	cmp	r3, #0
 8015514:	dc03      	bgt.n	801551e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015518:	2b00      	cmp	r3, #0
 801551a:	f340 8255 	ble.w	80159c8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801551e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015520:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015524:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015528:	1e48      	subs	r0, r1, #1
 801552a:	1e57      	subs	r7, r2, #1
 801552c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801552e:	2b00      	cmp	r3, #0
 8015530:	f340 80bb 	ble.w	80156aa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8015534:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8015538:	ea4f 4325 	mov.w	r3, r5, asr #16
 801553c:	d406      	bmi.n	801554c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801553e:	4584      	cmp	ip, r0
 8015540:	da04      	bge.n	801554c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8015542:	2b00      	cmp	r3, #0
 8015544:	db02      	blt.n	801554c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8015546:	42bb      	cmp	r3, r7
 8015548:	f2c0 80b0 	blt.w	80156ac <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801554c:	f11c 0c01 	adds.w	ip, ip, #1
 8015550:	f100 80a0 	bmi.w	8015694 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8015554:	4561      	cmp	r1, ip
 8015556:	f2c0 809d 	blt.w	8015694 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801555a:	3301      	adds	r3, #1
 801555c:	f100 809a 	bmi.w	8015694 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8015560:	429a      	cmp	r2, r3
 8015562:	f2c0 8097 	blt.w	8015694 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8015566:	e9dd b709 	ldrd	fp, r7, [sp, #36]	; 0x24
 801556a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801556e:	f1bb 0f00 	cmp.w	fp, #0
 8015572:	f340 80bb 	ble.w	80156ec <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 8015576:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015578:	1428      	asrs	r0, r5, #16
 801557a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801557e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015582:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8015586:	ea5f 432a 	movs.w	r3, sl, asr #16
 801558a:	f100 8134 	bmi.w	80157f6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801558e:	f10c 39ff 	add.w	r9, ip, #4294967295
 8015592:	454b      	cmp	r3, r9
 8015594:	f280 812f 	bge.w	80157f6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8015598:	2800      	cmp	r0, #0
 801559a:	f2c0 812c 	blt.w	80157f6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801559e:	f10e 39ff 	add.w	r9, lr, #4294967295
 80155a2:	4548      	cmp	r0, r9
 80155a4:	f280 8127 	bge.w	80157f6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80155a8:	fb00 3308 	mla	r3, r0, r8, r3
 80155ac:	0858      	lsrs	r0, r3, #1
 80155ae:	07dc      	lsls	r4, r3, #31
 80155b0:	f816 c000 	ldrb.w	ip, [r6, r0]
 80155b4:	bf54      	ite	pl
 80155b6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80155ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80155be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80155c2:	fa5f fc8c 	uxtb.w	ip, ip
 80155c6:	2a00      	cmp	r2, #0
 80155c8:	f000 80d6 	beq.w	8015778 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80155cc:	1c58      	adds	r0, r3, #1
 80155ce:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80155d2:	07c0      	lsls	r0, r0, #31
 80155d4:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80155d8:	bf54      	ite	pl
 80155da:	f00e 0e0f 	andpl.w	lr, lr, #15
 80155de:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80155e2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80155e6:	fa5f f08e 	uxtb.w	r0, lr
 80155ea:	9010      	str	r0, [sp, #64]	; 0x40
 80155ec:	b1d9      	cbz	r1, 8015626 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80155ee:	4443      	add	r3, r8
 80155f0:	0858      	lsrs	r0, r3, #1
 80155f2:	07dc      	lsls	r4, r3, #31
 80155f4:	f103 0301 	add.w	r3, r3, #1
 80155f8:	5c30      	ldrb	r0, [r6, r0]
 80155fa:	bf54      	ite	pl
 80155fc:	f000 000f 	andpl.w	r0, r0, #15
 8015600:	1100      	asrmi	r0, r0, #4
 8015602:	07dc      	lsls	r4, r3, #31
 8015604:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015608:	b2c0      	uxtb	r0, r0
 801560a:	900b      	str	r0, [sp, #44]	; 0x2c
 801560c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015610:	f816 e000 	ldrb.w	lr, [r6, r0]
 8015614:	bf54      	ite	pl
 8015616:	f00e 030f 	andpl.w	r3, lr, #15
 801561a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801561e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015622:	b2db      	uxtb	r3, r3
 8015624:	9311      	str	r3, [sp, #68]	; 0x44
 8015626:	b292      	uxth	r2, r2
 8015628:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801562a:	b289      	uxth	r1, r1
 801562c:	fb02 f301 	mul.w	r3, r2, r1
 8015630:	0112      	lsls	r2, r2, #4
 8015632:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8015636:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801563a:	1ad2      	subs	r2, r2, r3
 801563c:	b289      	uxth	r1, r1
 801563e:	b292      	uxth	r2, r2
 8015640:	1a40      	subs	r0, r0, r1
 8015642:	4362      	muls	r2, r4
 8015644:	b280      	uxth	r0, r0
 8015646:	fb0c 2c00 	mla	ip, ip, r0, r2
 801564a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801564c:	fb01 c102 	mla	r1, r1, r2, ip
 8015650:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015652:	fb03 1302 	mla	r3, r3, r2, r1
 8015656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015658:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801565c:	4353      	muls	r3, r2
 801565e:	1c5a      	adds	r2, r3, #1
 8015660:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015664:	4abf      	ldr	r2, [pc, #764]	; (8015964 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8015666:	121b      	asrs	r3, r3, #8
 8015668:	f892 9002 	ldrb.w	r9, [r2, #2]
 801566c:	7850      	ldrb	r0, [r2, #1]
 801566e:	2bff      	cmp	r3, #255	; 0xff
 8015670:	f892 c000 	ldrb.w	ip, [r2]
 8015674:	f040 8091 	bne.w	801579a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8015678:	f887 c000 	strb.w	ip, [r7]
 801567c:	7078      	strb	r0, [r7, #1]
 801567e:	f887 9002 	strb.w	r9, [r7, #2]
 8015682:	70fb      	strb	r3, [r7, #3]
 8015684:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015686:	3704      	adds	r7, #4
 8015688:	f10b 3bff 	add.w	fp, fp, #4294967295
 801568c:	449a      	add	sl, r3
 801568e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015690:	441d      	add	r5, r3
 8015692:	e76c      	b.n	801556e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8015694:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015696:	449a      	add	sl, r3
 8015698:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801569a:	441d      	add	r5, r3
 801569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801569e:	3b01      	subs	r3, #1
 80156a0:	9309      	str	r3, [sp, #36]	; 0x24
 80156a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156a4:	3304      	adds	r3, #4
 80156a6:	930a      	str	r3, [sp, #40]	; 0x28
 80156a8:	e740      	b.n	801552c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80156aa:	d026      	beq.n	80156fa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80156ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ae:	982b      	ldr	r0, [sp, #172]	; 0xac
 80156b0:	3b01      	subs	r3, #1
 80156b2:	fb00 a003 	mla	r0, r0, r3, sl
 80156b6:	1400      	asrs	r0, r0, #16
 80156b8:	f53f af55 	bmi.w	8015566 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80156bc:	3901      	subs	r1, #1
 80156be:	4288      	cmp	r0, r1
 80156c0:	f6bf af51 	bge.w	8015566 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80156c4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80156c6:	fb01 5303 	mla	r3, r1, r3, r5
 80156ca:	141b      	asrs	r3, r3, #16
 80156cc:	f53f af4b 	bmi.w	8015566 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80156d0:	3a01      	subs	r2, #1
 80156d2:	4293      	cmp	r3, r2
 80156d4:	f6bf af47 	bge.w	8015566 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80156d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156da:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80156de:	3304      	adds	r3, #4
 80156e0:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80156e4:	f1be 0f00 	cmp.w	lr, #0
 80156e8:	f300 80a6 	bgt.w	8015838 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80156ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80156f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80156f8:	930a      	str	r3, [sp, #40]	; 0x28
 80156fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	f340 8163 	ble.w	80159c8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8015702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015706:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015708:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801570c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8015710:	eef0 6a48 	vmov.f32	s13, s16
 8015714:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8015718:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801571c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015720:	ee16 aa90 	vmov	sl, s13
 8015724:	eef0 6a68 	vmov.f32	s13, s17
 8015728:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801572c:	ee16 5a90 	vmov	r5, s13
 8015730:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8015734:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015738:	ee37 8a48 	vsub.f32	s16, s14, s16
 801573c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8015740:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8015744:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8015748:	ee18 2a10 	vmov	r2, s16
 801574c:	eeb0 8a47 	vmov.f32	s16, s14
 8015750:	fb92 f3f3 	sdiv	r3, r2, r3
 8015754:	ee18 2a90 	vmov	r2, s17
 8015758:	932b      	str	r3, [sp, #172]	; 0xac
 801575a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801575c:	eef0 8a67 	vmov.f32	s17, s15
 8015760:	fb92 f3f3 	sdiv	r3, r2, r3
 8015764:	932c      	str	r3, [sp, #176]	; 0xb0
 8015766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015768:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801576a:	3b01      	subs	r3, #1
 801576c:	930d      	str	r3, [sp, #52]	; 0x34
 801576e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015770:	bf08      	it	eq
 8015772:	4613      	moveq	r3, r2
 8015774:	9309      	str	r3, [sp, #36]	; 0x24
 8015776:	e6cb      	b.n	8015510 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8015778:	2900      	cmp	r1, #0
 801577a:	f43f af54 	beq.w	8015626 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801577e:	eb08 0003 	add.w	r0, r8, r3
 8015782:	0843      	lsrs	r3, r0, #1
 8015784:	07c0      	lsls	r0, r0, #31
 8015786:	5cf3      	ldrb	r3, [r6, r3]
 8015788:	bf54      	ite	pl
 801578a:	f003 030f 	andpl.w	r3, r3, #15
 801578e:	111b      	asrmi	r3, r3, #4
 8015790:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015794:	b2db      	uxtb	r3, r3
 8015796:	930b      	str	r3, [sp, #44]	; 0x2c
 8015798:	e745      	b.n	8015626 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801579a:	b2da      	uxtb	r2, r3
 801579c:	2b00      	cmp	r3, #0
 801579e:	f43f af71 	beq.w	8015684 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80157a2:	f897 e003 	ldrb.w	lr, [r7, #3]
 80157a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80157aa:	4358      	muls	r0, r3
 80157ac:	fb02 f10e 	mul.w	r1, r2, lr
 80157b0:	4472      	add	r2, lr
 80157b2:	fb03 f309 	mul.w	r3, r3, r9
 80157b6:	1c4c      	adds	r4, r1, #1
 80157b8:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80157bc:	1209      	asrs	r1, r1, #8
 80157be:	1a52      	subs	r2, r2, r1
 80157c0:	ebae 0101 	sub.w	r1, lr, r1
 80157c4:	f897 e000 	ldrb.w	lr, [r7]
 80157c8:	b2d2      	uxtb	r2, r2
 80157ca:	fb01 cc0e 	mla	ip, r1, lr, ip
 80157ce:	f897 e002 	ldrb.w	lr, [r7, #2]
 80157d2:	70fa      	strb	r2, [r7, #3]
 80157d4:	fb9c fcf2 	sdiv	ip, ip, r2
 80157d8:	f887 c000 	strb.w	ip, [r7]
 80157dc:	f897 c001 	ldrb.w	ip, [r7, #1]
 80157e0:	fb01 000c 	mla	r0, r1, ip, r0
 80157e4:	fb01 310e 	mla	r1, r1, lr, r3
 80157e8:	fb90 f0f2 	sdiv	r0, r0, r2
 80157ec:	fb91 f1f2 	sdiv	r1, r1, r2
 80157f0:	7078      	strb	r0, [r7, #1]
 80157f2:	70b9      	strb	r1, [r7, #2]
 80157f4:	e746      	b.n	8015684 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80157f6:	f113 0901 	adds.w	r9, r3, #1
 80157fa:	f53f af43 	bmi.w	8015684 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80157fe:	45cc      	cmp	ip, r9
 8015800:	f6ff af40 	blt.w	8015684 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015804:	f110 0901 	adds.w	r9, r0, #1
 8015808:	f53f af3c 	bmi.w	8015684 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801580c:	45ce      	cmp	lr, r9
 801580e:	f6ff af39 	blt.w	8015684 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015812:	9302      	str	r3, [sp, #8]
 8015814:	fa0f f38e 	sxth.w	r3, lr
 8015818:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801581a:	9301      	str	r3, [sp, #4]
 801581c:	fa0f f38c 	sxth.w	r3, ip
 8015820:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8015824:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	4632      	mov	r2, r6
 801582c:	4643      	mov	r3, r8
 801582e:	4639      	mov	r1, r7
 8015830:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015832:	f7ff fd51 	bl	80152d8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 8015836:	e725      	b.n	8015684 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015838:	ea4f 412a 	mov.w	r1, sl, asr #16
 801583c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8015840:	142a      	asrs	r2, r5, #16
 8015842:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8015846:	fb08 1202 	mla	r2, r8, r2, r1
 801584a:	0851      	lsrs	r1, r2, #1
 801584c:	07d4      	lsls	r4, r2, #31
 801584e:	5c71      	ldrb	r1, [r6, r1]
 8015850:	bf54      	ite	pl
 8015852:	f001 010f 	andpl.w	r1, r1, #15
 8015856:	1109      	asrmi	r1, r1, #4
 8015858:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801585c:	b2c9      	uxtb	r1, r1
 801585e:	2800      	cmp	r0, #0
 8015860:	d06d      	beq.n	801593e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8015862:	f102 0901 	add.w	r9, r2, #1
 8015866:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 801586a:	f019 0f01 	tst.w	r9, #1
 801586e:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8015872:	bf0c      	ite	eq
 8015874:	f00c 0c0f 	andeq.w	ip, ip, #15
 8015878:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801587c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8015880:	fa5f f48c 	uxtb.w	r4, ip
 8015884:	9412      	str	r4, [sp, #72]	; 0x48
 8015886:	b307      	cbz	r7, 80158ca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8015888:	4442      	add	r2, r8
 801588a:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 801588e:	07d4      	lsls	r4, r2, #31
 8015890:	f102 0201 	add.w	r2, r2, #1
 8015894:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8015898:	bf54      	ite	pl
 801589a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801589e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80158a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80158a6:	fa5f f48c 	uxtb.w	r4, ip
 80158aa:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 80158ae:	940c      	str	r4, [sp, #48]	; 0x30
 80158b0:	07d4      	lsls	r4, r2, #31
 80158b2:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80158b6:	bf54      	ite	pl
 80158b8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80158bc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80158c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80158c4:	fa5f f28c 	uxtb.w	r2, ip
 80158c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80158ca:	b280      	uxth	r0, r0
 80158cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80158ce:	b2bf      	uxth	r7, r7
 80158d0:	fb00 f207 	mul.w	r2, r0, r7
 80158d4:	0100      	lsls	r0, r0, #4
 80158d6:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 80158da:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80158de:	1a80      	subs	r0, r0, r2
 80158e0:	b2bf      	uxth	r7, r7
 80158e2:	b280      	uxth	r0, r0
 80158e4:	ebac 0c07 	sub.w	ip, ip, r7
 80158e8:	4360      	muls	r0, r4
 80158ea:	fa1f fc8c 	uxth.w	ip, ip
 80158ee:	fb01 010c 	mla	r1, r1, ip, r0
 80158f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80158f4:	fb07 1700 	mla	r7, r7, r0, r1
 80158f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80158fa:	fb02 7201 	mla	r2, r2, r1, r7
 80158fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015900:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015904:	434a      	muls	r2, r1
 8015906:	1c51      	adds	r1, r2, #1
 8015908:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801590c:	4915      	ldr	r1, [pc, #84]	; (8015964 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 801590e:	1212      	asrs	r2, r2, #8
 8015910:	7888      	ldrb	r0, [r1, #2]
 8015912:	784f      	ldrb	r7, [r1, #1]
 8015914:	2aff      	cmp	r2, #255	; 0xff
 8015916:	4604      	mov	r4, r0
 8015918:	f891 c000 	ldrb.w	ip, [r1]
 801591c:	d124      	bne.n	8015968 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801591e:	f803 cc04 	strb.w	ip, [r3, #-4]
 8015922:	f803 7c03 	strb.w	r7, [r3, #-3]
 8015926:	f803 0c02 	strb.w	r0, [r3, #-2]
 801592a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801592e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015930:	3304      	adds	r3, #4
 8015932:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015936:	4492      	add	sl, r2
 8015938:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801593a:	4415      	add	r5, r2
 801593c:	e6d2      	b.n	80156e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801593e:	2f00      	cmp	r7, #0
 8015940:	d0c3      	beq.n	80158ca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8015942:	4442      	add	r2, r8
 8015944:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8015948:	07d2      	lsls	r2, r2, #31
 801594a:	f816 c00c 	ldrb.w	ip, [r6, ip]
 801594e:	bf54      	ite	pl
 8015950:	f00c 0c0f 	andpl.w	ip, ip, #15
 8015954:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8015958:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801595c:	fa5f f28c 	uxtb.w	r2, ip
 8015960:	920c      	str	r2, [sp, #48]	; 0x30
 8015962:	e7b2      	b.n	80158ca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8015964:	2400fa2c 	.word	0x2400fa2c
 8015968:	b2d1      	uxtb	r1, r2
 801596a:	2a00      	cmp	r2, #0
 801596c:	d0df      	beq.n	801592e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 801596e:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 8015972:	fb02 fc0c 	mul.w	ip, r2, ip
 8015976:	4357      	muls	r7, r2
 8015978:	fb01 fb09 	mul.w	fp, r1, r9
 801597c:	4449      	add	r1, r9
 801597e:	4362      	muls	r2, r4
 8015980:	f10b 0001 	add.w	r0, fp, #1
 8015984:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8015988:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 801598c:	1200      	asrs	r0, r0, #8
 801598e:	1a09      	subs	r1, r1, r0
 8015990:	eba9 0000 	sub.w	r0, r9, r0
 8015994:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 8015998:	b2c9      	uxtb	r1, r1
 801599a:	fb00 cc0b 	mla	ip, r0, fp, ip
 801599e:	fb9c fcf1 	sdiv	ip, ip, r1
 80159a2:	f803 cc04 	strb.w	ip, [r3, #-4]
 80159a6:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 80159aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80159ae:	fb00 770c 	mla	r7, r0, ip, r7
 80159b2:	fb00 2009 	mla	r0, r0, r9, r2
 80159b6:	fb97 f7f1 	sdiv	r7, r7, r1
 80159ba:	fb90 f0f1 	sdiv	r0, r0, r1
 80159be:	f803 7c03 	strb.w	r7, [r3, #-3]
 80159c2:	f803 0c02 	strb.w	r0, [r3, #-2]
 80159c6:	e7b2      	b.n	801592e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 80159c8:	b017      	add	sp, #92	; 0x5c
 80159ca:	ecbd 8b08 	vpop	{d8-d11}
 80159ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d2:	bf00      	nop

080159d4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 80159d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80159dc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80159e0:	2800      	cmp	r0, #0
 80159e2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80159e6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80159ea:	fb0c 0e03 	mla	lr, ip, r3, r0
 80159ee:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80159f2:	db6b      	blt.n	8015acc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xf8>
 80159f4:	4580      	cmp	r8, r0
 80159f6:	dd69      	ble.n	8015acc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xf8>
 80159f8:	f1bc 0f00 	cmp.w	ip, #0
 80159fc:	db66      	blt.n	8015acc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xf8>
 80159fe:	45e1      	cmp	r9, ip
 8015a00:	dd64      	ble.n	8015acc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xf8>
 8015a02:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8015a06:	f01e 0f01 	tst.w	lr, #1
 8015a0a:	5d16      	ldrb	r6, [r2, r4]
 8015a0c:	bf0c      	ite	eq
 8015a0e:	f006 060f 	andeq.w	r6, r6, #15
 8015a12:	1136      	asrne	r6, r6, #4
 8015a14:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8015a18:	b2f6      	uxtb	r6, r6
 8015a1a:	f110 0a01 	adds.w	sl, r0, #1
 8015a1e:	d457      	bmi.n	8015ad0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xfc>
 8015a20:	45d0      	cmp	r8, sl
 8015a22:	dd55      	ble.n	8015ad0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xfc>
 8015a24:	f1bc 0f00 	cmp.w	ip, #0
 8015a28:	db52      	blt.n	8015ad0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xfc>
 8015a2a:	45e1      	cmp	r9, ip
 8015a2c:	dd50      	ble.n	8015ad0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xfc>
 8015a2e:	2f00      	cmp	r7, #0
 8015a30:	f000 80aa 	beq.w	8015b88 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1b4>
 8015a34:	f10e 0b01 	add.w	fp, lr, #1
 8015a38:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8015a3c:	f01b 0f01 	tst.w	fp, #1
 8015a40:	5d14      	ldrb	r4, [r2, r4]
 8015a42:	bf0c      	ite	eq
 8015a44:	f004 040f 	andeq.w	r4, r4, #15
 8015a48:	1124      	asrne	r4, r4, #4
 8015a4a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8015a4e:	b2e4      	uxtb	r4, r4
 8015a50:	2d00      	cmp	r5, #0
 8015a52:	f000 8094 	beq.w	8015b7e <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1aa>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	f10c 0c01 	add.w	ip, ip, #1
 8015a5c:	db3c      	blt.n	8015ad8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x104>
 8015a5e:	4580      	cmp	r8, r0
 8015a60:	dd3a      	ble.n	8015ad8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x104>
 8015a62:	f1bc 0f00 	cmp.w	ip, #0
 8015a66:	db37      	blt.n	8015ad8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x104>
 8015a68:	45e1      	cmp	r9, ip
 8015a6a:	dd35      	ble.n	8015ad8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x104>
 8015a6c:	eb03 0b0e 	add.w	fp, r3, lr
 8015a70:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8015a74:	f01b 0f01 	tst.w	fp, #1
 8015a78:	5c10      	ldrb	r0, [r2, r0]
 8015a7a:	bf0c      	ite	eq
 8015a7c:	f000 000f 	andeq.w	r0, r0, #15
 8015a80:	1100      	asrne	r0, r0, #4
 8015a82:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015a86:	b2c0      	uxtb	r0, r0
 8015a88:	f1ba 0f00 	cmp.w	sl, #0
 8015a8c:	db26      	blt.n	8015adc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x108>
 8015a8e:	45d0      	cmp	r8, sl
 8015a90:	dd24      	ble.n	8015adc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x108>
 8015a92:	f1bc 0f00 	cmp.w	ip, #0
 8015a96:	db21      	blt.n	8015adc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x108>
 8015a98:	45e1      	cmp	r9, ip
 8015a9a:	dd1f      	ble.n	8015adc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x108>
 8015a9c:	b307      	cbz	r7, 8015ae0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x10c>
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	449e      	add	lr, r3
 8015aa2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8015aa6:	f01e 0f01 	tst.w	lr, #1
 8015aaa:	5cd3      	ldrb	r3, [r2, r3]
 8015aac:	bf0c      	ite	eq
 8015aae:	f003 030f 	andeq.w	r3, r3, #15
 8015ab2:	111b      	asrne	r3, r3, #4
 8015ab4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015ab8:	b2db      	uxtb	r3, r3
 8015aba:	2f0f      	cmp	r7, #15
 8015abc:	d911      	bls.n	8015ae2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x10e>
 8015abe:	4b34      	ldr	r3, [pc, #208]	; (8015b90 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1bc>)
 8015ac0:	f240 2131 	movw	r1, #561	; 0x231
 8015ac4:	4a33      	ldr	r2, [pc, #204]	; (8015b94 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1c0>)
 8015ac6:	4834      	ldr	r0, [pc, #208]	; (8015b98 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1c4>)
 8015ac8:	f001 fb30 	bl	801712c <__assert_func>
 8015acc:	2600      	movs	r6, #0
 8015ace:	e7a4      	b.n	8015a1a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x46>
 8015ad0:	2400      	movs	r4, #0
 8015ad2:	e7bd      	b.n	8015a50 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x7c>
 8015ad4:	463c      	mov	r4, r7
 8015ad6:	e7be      	b.n	8015a56 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x82>
 8015ad8:	2000      	movs	r0, #0
 8015ada:	e7d5      	b.n	8015a88 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb4>
 8015adc:	2300      	movs	r3, #0
 8015ade:	e7ec      	b.n	8015aba <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xe6>
 8015ae0:	463b      	mov	r3, r7
 8015ae2:	2d0f      	cmp	r5, #15
 8015ae4:	d8eb      	bhi.n	8015abe <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8015ae6:	b2bf      	uxth	r7, r7
 8015ae8:	b2ad      	uxth	r5, r5
 8015aea:	fb07 f205 	mul.w	r2, r7, r5
 8015aee:	013f      	lsls	r7, r7, #4
 8015af0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8015af4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8015af8:	1abf      	subs	r7, r7, r2
 8015afa:	b2ad      	uxth	r5, r5
 8015afc:	b2bf      	uxth	r7, r7
 8015afe:	ebac 0c05 	sub.w	ip, ip, r5
 8015b02:	437c      	muls	r4, r7
 8015b04:	fa1f fc8c 	uxth.w	ip, ip
 8015b08:	fb06 440c 	mla	r4, r6, ip, r4
 8015b0c:	fb05 4400 	mla	r4, r5, r0, r4
 8015b10:	fb02 4303 	mla	r3, r2, r3, r4
 8015b14:	4a21      	ldr	r2, [pc, #132]	; (8015b9c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1c8>)
 8015b16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015b1a:	7817      	ldrb	r7, [r2, #0]
 8015b1c:	2bff      	cmp	r3, #255	; 0xff
 8015b1e:	d106      	bne.n	8015b2e <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x15a>
 8015b20:	700f      	strb	r7, [r1, #0]
 8015b22:	7853      	ldrb	r3, [r2, #1]
 8015b24:	704b      	strb	r3, [r1, #1]
 8015b26:	7893      	ldrb	r3, [r2, #2]
 8015b28:	708b      	strb	r3, [r1, #2]
 8015b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d0fb      	beq.n	8015b2a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x156>
 8015b32:	78cc      	ldrb	r4, [r1, #3]
 8015b34:	435f      	muls	r7, r3
 8015b36:	7896      	ldrb	r6, [r2, #2]
 8015b38:	f892 c001 	ldrb.w	ip, [r2, #1]
 8015b3c:	fb03 f204 	mul.w	r2, r3, r4
 8015b40:	780d      	ldrb	r5, [r1, #0]
 8015b42:	1c50      	adds	r0, r2, #1
 8015b44:	fb03 fc0c 	mul.w	ip, r3, ip
 8015b48:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8015b4c:	191a      	adds	r2, r3, r4
 8015b4e:	4373      	muls	r3, r6
 8015b50:	1200      	asrs	r0, r0, #8
 8015b52:	1a12      	subs	r2, r2, r0
 8015b54:	1a20      	subs	r0, r4, r0
 8015b56:	784c      	ldrb	r4, [r1, #1]
 8015b58:	b2d2      	uxtb	r2, r2
 8015b5a:	fb00 7505 	mla	r5, r0, r5, r7
 8015b5e:	fb00 c404 	mla	r4, r0, r4, ip
 8015b62:	70ca      	strb	r2, [r1, #3]
 8015b64:	fb94 f4f2 	sdiv	r4, r4, r2
 8015b68:	704c      	strb	r4, [r1, #1]
 8015b6a:	788c      	ldrb	r4, [r1, #2]
 8015b6c:	fb00 3304 	mla	r3, r0, r4, r3
 8015b70:	fb95 f5f2 	sdiv	r5, r5, r2
 8015b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8015b78:	700d      	strb	r5, [r1, #0]
 8015b7a:	708b      	strb	r3, [r1, #2]
 8015b7c:	e7d5      	b.n	8015b2a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x156>
 8015b7e:	2f0f      	cmp	r7, #15
 8015b80:	d89d      	bhi.n	8015abe <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8015b82:	462b      	mov	r3, r5
 8015b84:	4628      	mov	r0, r5
 8015b86:	e7ae      	b.n	8015ae6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x112>
 8015b88:	2d00      	cmp	r5, #0
 8015b8a:	d1a3      	bne.n	8015ad4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x100>
 8015b8c:	462c      	mov	r4, r5
 8015b8e:	e7f8      	b.n	8015b82 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1ae>
 8015b90:	0801b376 	.word	0x0801b376
 8015b94:	0801b76d 	.word	0x0801b76d
 8015b98:	0801b3fe 	.word	0x0801b3fe
 8015b9c:	2400fa2c 	.word	0x2400fa2c

08015ba0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ba4:	ed2d 8b08 	vpush	{d8-d11}
 8015ba8:	b095      	sub	sp, #84	; 0x54
 8015baa:	461c      	mov	r4, r3
 8015bac:	eeb0 aa40 	vmov.f32	s20, s0
 8015bb0:	4fcb      	ldr	r7, [pc, #812]	; (8015ee0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>)
 8015bb2:	920d      	str	r2, [sp, #52]	; 0x34
 8015bb4:	eef0 9a60 	vmov.f32	s19, s1
 8015bb8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015bba:	eeb0 9a41 	vmov.f32	s18, s2
 8015bbe:	9013      	str	r0, [sp, #76]	; 0x4c
 8015bc0:	eeb0 8a62 	vmov.f32	s16, s5
 8015bc4:	6850      	ldr	r0, [r2, #4]
 8015bc6:	eef0 8a43 	vmov.f32	s17, s6
 8015bca:	9108      	str	r1, [sp, #32]
 8015bcc:	eef0 ba44 	vmov.f32	s23, s8
 8015bd0:	6812      	ldr	r2, [r2, #0]
 8015bd2:	eeb0 ba64 	vmov.f32	s22, s9
 8015bd6:	eef0 aa45 	vmov.f32	s21, s10
 8015bda:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8015bde:	e9dd b527 	ldrd	fp, r5, [sp, #156]	; 0x9c
 8015be2:	fb00 1303 	mla	r3, r0, r3, r1
 8015be6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015bea:	9307      	str	r3, [sp, #28]
 8015bec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015bee:	689b      	ldr	r3, [r3, #8]
 8015bf0:	3301      	adds	r3, #1
 8015bf2:	f023 0301 	bic.w	r3, r3, #1
 8015bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8015bf8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015bfa:	681e      	ldr	r6, [r3, #0]
 8015bfc:	9b08      	ldr	r3, [sp, #32]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	dc03      	bgt.n	8015c0a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	f340 824e 	ble.w	80160a6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8015c0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015c10:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015c14:	1e48      	subs	r0, r1, #1
 8015c16:	f102 3cff 	add.w	ip, r2, #4294967295
 8015c1a:	2c00      	cmp	r4, #0
 8015c1c:	f340 80b3 	ble.w	8015d86 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8015c20:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 8015c24:	ea4f 4325 	mov.w	r3, r5, asr #16
 8015c28:	d406      	bmi.n	8015c38 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8015c2a:	4586      	cmp	lr, r0
 8015c2c:	da04      	bge.n	8015c38 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	db02      	blt.n	8015c38 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8015c32:	4563      	cmp	r3, ip
 8015c34:	f2c0 80a8 	blt.w	8015d88 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015c38:	f11e 0e01 	adds.w	lr, lr, #1
 8015c3c:	f100 809a 	bmi.w	8015d74 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015c40:	4571      	cmp	r1, lr
 8015c42:	f2c0 8097 	blt.w	8015d74 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015c46:	3301      	adds	r3, #1
 8015c48:	f100 8094 	bmi.w	8015d74 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	f2c0 8091 	blt.w	8015d74 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015c52:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015c56:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8015c5a:	9409      	str	r4, [sp, #36]	; 0x24
 8015c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f340 80b0 	ble.w	8015dc4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8015c64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c66:	1428      	asrs	r0, r5, #16
 8015c68:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8015c6c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015c70:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8015c74:	ea5f 432b 	movs.w	r3, fp, asr #16
 8015c78:	f100 8134 	bmi.w	8015ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015c7c:	f10c 3aff 	add.w	sl, ip, #4294967295
 8015c80:	4553      	cmp	r3, sl
 8015c82:	f280 812f 	bge.w	8015ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015c86:	2800      	cmp	r0, #0
 8015c88:	f2c0 812c 	blt.w	8015ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015c8c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8015c90:	4550      	cmp	r0, sl
 8015c92:	f280 8127 	bge.w	8015ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015c96:	fb00 3309 	mla	r3, r0, r9, r3
 8015c9a:	0858      	lsrs	r0, r3, #1
 8015c9c:	f816 c000 	ldrb.w	ip, [r6, r0]
 8015ca0:	07d8      	lsls	r0, r3, #31
 8015ca2:	bf54      	ite	pl
 8015ca4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8015ca8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8015cac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8015cb0:	fa5f fc8c 	uxtb.w	ip, ip
 8015cb4:	2a00      	cmp	r2, #0
 8015cb6:	f000 80cb 	beq.w	8015e50 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015cba:	1c58      	adds	r0, r3, #1
 8015cbc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8015cc0:	07c0      	lsls	r0, r0, #31
 8015cc2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8015cc6:	bf54      	ite	pl
 8015cc8:	f00e 0e0f 	andpl.w	lr, lr, #15
 8015ccc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8015cd0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8015cd4:	fa5f fe8e 	uxtb.w	lr, lr
 8015cd8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8015cdc:	b1c1      	cbz	r1, 8015d10 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8015cde:	444b      	add	r3, r9
 8015ce0:	0858      	lsrs	r0, r3, #1
 8015ce2:	f013 0f01 	tst.w	r3, #1
 8015ce6:	5c30      	ldrb	r0, [r6, r0]
 8015ce8:	bf0c      	ite	eq
 8015cea:	f000 000f 	andeq.w	r0, r0, #15
 8015cee:	1100      	asrne	r0, r0, #4
 8015cf0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015cf4:	b2c0      	uxtb	r0, r0
 8015cf6:	900b      	str	r0, [sp, #44]	; 0x2c
 8015cf8:	1c58      	adds	r0, r3, #1
 8015cfa:	0843      	lsrs	r3, r0, #1
 8015cfc:	07c0      	lsls	r0, r0, #31
 8015cfe:	5cf3      	ldrb	r3, [r6, r3]
 8015d00:	bf54      	ite	pl
 8015d02:	f003 030f 	andpl.w	r3, r3, #15
 8015d06:	111b      	asrmi	r3, r3, #4
 8015d08:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d10:	b292      	uxth	r2, r2
 8015d12:	b289      	uxth	r1, r1
 8015d14:	fb02 f301 	mul.w	r3, r2, r1
 8015d18:	0112      	lsls	r2, r2, #4
 8015d1a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8015d1e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8015d22:	1ad2      	subs	r2, r2, r3
 8015d24:	b289      	uxth	r1, r1
 8015d26:	b292      	uxth	r2, r2
 8015d28:	1a40      	subs	r0, r0, r1
 8015d2a:	fa1f fe80 	uxth.w	lr, r0
 8015d2e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015d30:	4342      	muls	r2, r0
 8015d32:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8015d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d38:	fb01 c102 	mla	r1, r1, r2, ip
 8015d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d3e:	f897 c000 	ldrb.w	ip, [r7]
 8015d42:	fb03 1302 	mla	r3, r3, r2, r1
 8015d46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015d4a:	2bff      	cmp	r3, #255	; 0xff
 8015d4c:	f040 8091 	bne.w	8015e72 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8015d50:	f888 c000 	strb.w	ip, [r8]
 8015d54:	787b      	ldrb	r3, [r7, #1]
 8015d56:	f888 3001 	strb.w	r3, [r8, #1]
 8015d5a:	78bb      	ldrb	r3, [r7, #2]
 8015d5c:	f888 3002 	strb.w	r3, [r8, #2]
 8015d60:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015d62:	f108 0804 	add.w	r8, r8, #4
 8015d66:	449b      	add	fp, r3
 8015d68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015d6a:	441d      	add	r5, r3
 8015d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d6e:	3b01      	subs	r3, #1
 8015d70:	9309      	str	r3, [sp, #36]	; 0x24
 8015d72:	e773      	b.n	8015c5c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8015d74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015d76:	3c01      	subs	r4, #1
 8015d78:	449b      	add	fp, r3
 8015d7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015d7c:	441d      	add	r5, r3
 8015d7e:	9b07      	ldr	r3, [sp, #28]
 8015d80:	3304      	adds	r3, #4
 8015d82:	9307      	str	r3, [sp, #28]
 8015d84:	e749      	b.n	8015c1a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8015d86:	d023      	beq.n	8015dd0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8015d88:	1e63      	subs	r3, r4, #1
 8015d8a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8015d8c:	fb00 b003 	mla	r0, r0, r3, fp
 8015d90:	1400      	asrs	r0, r0, #16
 8015d92:	f53f af5e 	bmi.w	8015c52 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8015d96:	3901      	subs	r1, #1
 8015d98:	4288      	cmp	r0, r1
 8015d9a:	f6bf af5a 	bge.w	8015c52 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8015d9e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015da0:	fb01 5303 	mla	r3, r1, r3, r5
 8015da4:	141b      	asrs	r3, r3, #16
 8015da6:	f53f af54 	bmi.w	8015c52 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8015daa:	3a01      	subs	r2, #1
 8015dac:	4293      	cmp	r3, r2
 8015dae:	f6bf af50 	bge.w	8015c52 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8015db2:	9b07      	ldr	r3, [sp, #28]
 8015db4:	46a0      	mov	r8, r4
 8015db6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8015dba:	1d1a      	adds	r2, r3, #4
 8015dbc:	f1b8 0f00 	cmp.w	r8, #0
 8015dc0:	f300 80af 	bgt.w	8015f22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8015dc4:	9b07      	ldr	r3, [sp, #28]
 8015dc6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8015dca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015dce:	9307      	str	r3, [sp, #28]
 8015dd0:	9b08      	ldr	r3, [sp, #32]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	f340 8167 	ble.w	80160a6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8015dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015ddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015dde:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8015de2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8015de6:	eef0 6a48 	vmov.f32	s13, s16
 8015dea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8015dee:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8015df2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015df6:	ee16 ba90 	vmov	fp, s13
 8015dfa:	eef0 6a68 	vmov.f32	s13, s17
 8015dfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015e02:	ee16 5a90 	vmov	r5, s13
 8015e06:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8015e0a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015e0e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8015e12:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8015e16:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8015e1a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8015e1e:	ee18 2a10 	vmov	r2, s16
 8015e22:	eeb0 8a47 	vmov.f32	s16, s14
 8015e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e2a:	ee18 2a90 	vmov	r2, s17
 8015e2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8015e30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e32:	eef0 8a67 	vmov.f32	s17, s15
 8015e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e3a:	932a      	str	r3, [sp, #168]	; 0xa8
 8015e3c:	9b08      	ldr	r3, [sp, #32]
 8015e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e40:	3b01      	subs	r3, #1
 8015e42:	9308      	str	r3, [sp, #32]
 8015e44:	bf08      	it	eq
 8015e46:	4614      	moveq	r4, r2
 8015e48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e4a:	bf18      	it	ne
 8015e4c:	461c      	movne	r4, r3
 8015e4e:	e6d5      	b.n	8015bfc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015e50:	2900      	cmp	r1, #0
 8015e52:	f43f af5d 	beq.w	8015d10 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8015e56:	eb09 0003 	add.w	r0, r9, r3
 8015e5a:	0843      	lsrs	r3, r0, #1
 8015e5c:	07c0      	lsls	r0, r0, #31
 8015e5e:	5cf3      	ldrb	r3, [r6, r3]
 8015e60:	bf54      	ite	pl
 8015e62:	f003 030f 	andpl.w	r3, r3, #15
 8015e66:	111b      	asrmi	r3, r3, #4
 8015e68:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e70:	e74e      	b.n	8015d10 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	f43f af74 	beq.w	8015d60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015e78:	f898 a003 	ldrb.w	sl, [r8, #3]
 8015e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8015e80:	78ba      	ldrb	r2, [r7, #2]
 8015e82:	fb03 f00a 	mul.w	r0, r3, sl
 8015e86:	f897 e001 	ldrb.w	lr, [r7, #1]
 8015e8a:	9210      	str	r2, [sp, #64]	; 0x40
 8015e8c:	eb03 020a 	add.w	r2, r3, sl
 8015e90:	1c41      	adds	r1, r0, #1
 8015e92:	fb03 fe0e 	mul.w	lr, r3, lr
 8015e96:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8015e9a:	1208      	asrs	r0, r1, #8
 8015e9c:	ebaa 0100 	sub.w	r1, sl, r0
 8015ea0:	1a12      	subs	r2, r2, r0
 8015ea2:	f898 0000 	ldrb.w	r0, [r8]
 8015ea6:	b2d2      	uxtb	r2, r2
 8015ea8:	fb01 cc00 	mla	ip, r1, r0, ip
 8015eac:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015eb0:	f888 2003 	strb.w	r2, [r8, #3]
 8015eb4:	fb01 ee00 	mla	lr, r1, r0, lr
 8015eb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015eba:	fb9c fcf2 	sdiv	ip, ip, r2
 8015ebe:	4343      	muls	r3, r0
 8015ec0:	f888 c000 	strb.w	ip, [r8]
 8015ec4:	f898 c002 	ldrb.w	ip, [r8, #2]
 8015ec8:	fb01 330c 	mla	r3, r1, ip, r3
 8015ecc:	fb9e fef2 	sdiv	lr, lr, r2
 8015ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ed4:	f888 e001 	strb.w	lr, [r8, #1]
 8015ed8:	f888 3002 	strb.w	r3, [r8, #2]
 8015edc:	e740      	b.n	8015d60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015ede:	bf00      	nop
 8015ee0:	2400fa2c 	.word	0x2400fa2c
 8015ee4:	f113 0a01 	adds.w	sl, r3, #1
 8015ee8:	f53f af3a 	bmi.w	8015d60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015eec:	45d4      	cmp	ip, sl
 8015eee:	f6ff af37 	blt.w	8015d60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015ef2:	f110 0a01 	adds.w	sl, r0, #1
 8015ef6:	f53f af33 	bmi.w	8015d60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015efa:	45d6      	cmp	lr, sl
 8015efc:	f6ff af30 	blt.w	8015d60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015f00:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8015f04:	fa0f f38e 	sxth.w	r3, lr
 8015f08:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015f0a:	9301      	str	r3, [sp, #4]
 8015f0c:	fa0f f38c 	sxth.w	r3, ip
 8015f10:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015f14:	9300      	str	r3, [sp, #0]
 8015f16:	4632      	mov	r2, r6
 8015f18:	464b      	mov	r3, r9
 8015f1a:	4641      	mov	r1, r8
 8015f1c:	f7ff fd5a 	bl	80159d4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 8015f20:	e71e      	b.n	8015d60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015f22:	ea4f 412b 	mov.w	r1, fp, asr #16
 8015f26:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 8015f2a:	142b      	asrs	r3, r5, #16
 8015f2c:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 8015f30:	fb09 1303 	mla	r3, r9, r3, r1
 8015f34:	0859      	lsrs	r1, r3, #1
 8015f36:	07d8      	lsls	r0, r3, #31
 8015f38:	5c71      	ldrb	r1, [r6, r1]
 8015f3a:	bf54      	ite	pl
 8015f3c:	f001 010f 	andpl.w	r1, r1, #15
 8015f40:	1109      	asrmi	r1, r1, #4
 8015f42:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8015f46:	b2c9      	uxtb	r1, r1
 8015f48:	f1bc 0f00 	cmp.w	ip, #0
 8015f4c:	d062      	beq.n	8016014 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8015f4e:	f103 0a01 	add.w	sl, r3, #1
 8015f52:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8015f56:	f01a 0f01 	tst.w	sl, #1
 8015f5a:	5c30      	ldrb	r0, [r6, r0]
 8015f5c:	bf0c      	ite	eq
 8015f5e:	f000 000f 	andeq.w	r0, r0, #15
 8015f62:	1100      	asrne	r0, r0, #4
 8015f64:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015f68:	b2c0      	uxtb	r0, r0
 8015f6a:	9011      	str	r0, [sp, #68]	; 0x44
 8015f6c:	f1be 0f00 	cmp.w	lr, #0
 8015f70:	d019      	beq.n	8015fa6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8015f72:	444b      	add	r3, r9
 8015f74:	0858      	lsrs	r0, r3, #1
 8015f76:	f013 0f01 	tst.w	r3, #1
 8015f7a:	f103 0301 	add.w	r3, r3, #1
 8015f7e:	5c30      	ldrb	r0, [r6, r0]
 8015f80:	bf0c      	ite	eq
 8015f82:	f000 000f 	andeq.w	r0, r0, #15
 8015f86:	1100      	asrne	r0, r0, #4
 8015f88:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015f8c:	b2c0      	uxtb	r0, r0
 8015f8e:	900c      	str	r0, [sp, #48]	; 0x30
 8015f90:	0858      	lsrs	r0, r3, #1
 8015f92:	07db      	lsls	r3, r3, #31
 8015f94:	5c30      	ldrb	r0, [r6, r0]
 8015f96:	bf54      	ite	pl
 8015f98:	f000 000f 	andpl.w	r0, r0, #15
 8015f9c:	1100      	asrmi	r0, r0, #4
 8015f9e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015fa2:	b2c0      	uxtb	r0, r0
 8015fa4:	9012      	str	r0, [sp, #72]	; 0x48
 8015fa6:	fa1f fc8c 	uxth.w	ip, ip
 8015faa:	fa1f fe8e 	uxth.w	lr, lr
 8015fae:	fb0c f30e 	mul.w	r3, ip, lr
 8015fb2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8015fb6:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 8015fba:	f5cc 7080 	rsb	r0, ip, #256	; 0x100
 8015fbe:	ebac 0c03 	sub.w	ip, ip, r3
 8015fc2:	fa1f fe8e 	uxth.w	lr, lr
 8015fc6:	fa1f fc8c 	uxth.w	ip, ip
 8015fca:	eba0 000e 	sub.w	r0, r0, lr
 8015fce:	fa1f fa80 	uxth.w	sl, r0
 8015fd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015fd4:	fb00 fc0c 	mul.w	ip, r0, ip
 8015fd8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015fda:	fb01 c10a 	mla	r1, r1, sl, ip
 8015fde:	fb0e 1e00 	mla	lr, lr, r0, r1
 8015fe2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015fe4:	fb03 e301 	mla	r3, r3, r1, lr
 8015fe8:	f897 e000 	ldrb.w	lr, [r7]
 8015fec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015ff0:	2bff      	cmp	r3, #255	; 0xff
 8015ff2:	d11f      	bne.n	8016034 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8015ff4:	f802 ec04 	strb.w	lr, [r2, #-4]
 8015ff8:	787b      	ldrb	r3, [r7, #1]
 8015ffa:	f802 3c03 	strb.w	r3, [r2, #-3]
 8015ffe:	78bb      	ldrb	r3, [r7, #2]
 8016000:	f802 3c02 	strb.w	r3, [r2, #-2]
 8016004:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016006:	3204      	adds	r2, #4
 8016008:	f108 38ff 	add.w	r8, r8, #4294967295
 801600c:	449b      	add	fp, r3
 801600e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016010:	441d      	add	r5, r3
 8016012:	e6d3      	b.n	8015dbc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8016014:	f1be 0f00 	cmp.w	lr, #0
 8016018:	d0c5      	beq.n	8015fa6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 801601a:	444b      	add	r3, r9
 801601c:	0858      	lsrs	r0, r3, #1
 801601e:	07db      	lsls	r3, r3, #31
 8016020:	5c30      	ldrb	r0, [r6, r0]
 8016022:	bf54      	ite	pl
 8016024:	f000 000f 	andpl.w	r0, r0, #15
 8016028:	1100      	asrmi	r0, r0, #4
 801602a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801602e:	b2c0      	uxtb	r0, r0
 8016030:	900c      	str	r0, [sp, #48]	; 0x30
 8016032:	e7b8      	b.n	8015fa6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8016034:	2b00      	cmp	r3, #0
 8016036:	d0e5      	beq.n	8016004 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8016038:	78b9      	ldrb	r1, [r7, #2]
 801603a:	fb03 fe0e 	mul.w	lr, r3, lr
 801603e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8016042:	9110      	str	r1, [sp, #64]	; 0x40
 8016044:	fb03 f100 	mul.w	r1, r3, r0
 8016048:	f897 a001 	ldrb.w	sl, [r7, #1]
 801604c:	f101 0c01 	add.w	ip, r1, #1
 8016050:	fb03 fa0a 	mul.w	sl, r3, sl
 8016054:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8016058:	1819      	adds	r1, r3, r0
 801605a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801605e:	eba0 000c 	sub.w	r0, r0, ip
 8016062:	eba1 010c 	sub.w	r1, r1, ip
 8016066:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 801606a:	9009      	str	r0, [sp, #36]	; 0x24
 801606c:	b2c9      	uxtb	r1, r1
 801606e:	fb00 ee0c 	mla	lr, r0, ip, lr
 8016072:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8016076:	f802 1c01 	strb.w	r1, [r2, #-1]
 801607a:	fb00 aa0c 	mla	sl, r0, ip, sl
 801607e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016080:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8016084:	4343      	muls	r3, r0
 8016086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016088:	fb00 330c 	mla	r3, r0, ip, r3
 801608c:	fb9e fef1 	sdiv	lr, lr, r1
 8016090:	fb9a faf1 	sdiv	sl, sl, r1
 8016094:	fb93 f3f1 	sdiv	r3, r3, r1
 8016098:	f802 ec04 	strb.w	lr, [r2, #-4]
 801609c:	f802 ac03 	strb.w	sl, [r2, #-3]
 80160a0:	f802 3c02 	strb.w	r3, [r2, #-2]
 80160a4:	e7ae      	b.n	8016004 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 80160a6:	b015      	add	sp, #84	; 0x54
 80160a8:	ecbd 8b08 	vpop	{d8-d11}
 80160ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160b0 <CRC_Lock>:
 80160b0:	4a20      	ldr	r2, [pc, #128]	; (8016134 <CRC_Lock+0x84>)
 80160b2:	b530      	push	{r4, r5, lr}
 80160b4:	6813      	ldr	r3, [r2, #0]
 80160b6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80160ba:	f24c 2540 	movw	r5, #49728	; 0xc240
 80160be:	f023 0301 	bic.w	r3, r3, #1
 80160c2:	6013      	str	r3, [r2, #0]
 80160c4:	4b1c      	ldr	r3, [pc, #112]	; (8016138 <CRC_Lock+0x88>)
 80160c6:	681a      	ldr	r2, [r3, #0]
 80160c8:	4022      	ands	r2, r4
 80160ca:	42aa      	cmp	r2, r5
 80160cc:	d005      	beq.n	80160da <CRC_Lock+0x2a>
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80160d4:	4023      	ands	r3, r4
 80160d6:	4293      	cmp	r3, r2
 80160d8:	d124      	bne.n	8016124 <CRC_Lock+0x74>
 80160da:	4b18      	ldr	r3, [pc, #96]	; (801613c <CRC_Lock+0x8c>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	bb0b      	cbnz	r3, 8016124 <CRC_Lock+0x74>
 80160e0:	4b17      	ldr	r3, [pc, #92]	; (8016140 <CRC_Lock+0x90>)
 80160e2:	681a      	ldr	r2, [r3, #0]
 80160e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80160e8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80160ec:	d00d      	beq.n	801610a <CRC_Lock+0x5a>
 80160ee:	681a      	ldr	r2, [r3, #0]
 80160f0:	f240 4483 	movw	r4, #1155	; 0x483
 80160f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80160f8:	42a2      	cmp	r2, r4
 80160fa:	d006      	beq.n	801610a <CRC_Lock+0x5a>
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f240 4285 	movw	r2, #1157	; 0x485
 8016102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016106:	4293      	cmp	r3, r2
 8016108:	d10c      	bne.n	8016124 <CRC_Lock+0x74>
 801610a:	4b0e      	ldr	r3, [pc, #56]	; (8016144 <CRC_Lock+0x94>)
 801610c:	2201      	movs	r2, #1
 801610e:	601a      	str	r2, [r3, #0]
 8016110:	681a      	ldr	r2, [r3, #0]
 8016112:	2a00      	cmp	r2, #0
 8016114:	d1fc      	bne.n	8016110 <CRC_Lock+0x60>
 8016116:	4b0c      	ldr	r3, [pc, #48]	; (8016148 <CRC_Lock+0x98>)
 8016118:	6018      	str	r0, [r3, #0]
 801611a:	6818      	ldr	r0, [r3, #0]
 801611c:	1a43      	subs	r3, r0, r1
 801611e:	4258      	negs	r0, r3
 8016120:	4158      	adcs	r0, r3
 8016122:	bd30      	pop	{r4, r5, pc}
 8016124:	4b09      	ldr	r3, [pc, #36]	; (801614c <CRC_Lock+0x9c>)
 8016126:	2201      	movs	r2, #1
 8016128:	601a      	str	r2, [r3, #0]
 801612a:	681a      	ldr	r2, [r3, #0]
 801612c:	2a00      	cmp	r2, #0
 801612e:	d1fc      	bne.n	801612a <CRC_Lock+0x7a>
 8016130:	4b07      	ldr	r3, [pc, #28]	; (8016150 <CRC_Lock+0xa0>)
 8016132:	e7f1      	b.n	8016118 <CRC_Lock+0x68>
 8016134:	e0002000 	.word	0xe0002000
 8016138:	e000ed00 	.word	0xe000ed00
 801613c:	e0042000 	.word	0xe0042000
 8016140:	5c001000 	.word	0x5c001000
 8016144:	58024c08 	.word	0x58024c08
 8016148:	58024c00 	.word	0x58024c00
 801614c:	40023008 	.word	0x40023008
 8016150:	40023000 	.word	0x40023000

08016154 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8016154:	6101      	str	r1, [r0, #16]
 8016156:	4770      	bx	lr

08016158 <_ZN8touchgfx8Gestures4tickEv>:
 8016158:	7b83      	ldrb	r3, [r0, #14]
 801615a:	b14b      	cbz	r3, 8016170 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801615c:	8903      	ldrh	r3, [r0, #8]
 801615e:	3301      	adds	r3, #1
 8016160:	b29b      	uxth	r3, r3
 8016162:	2b07      	cmp	r3, #7
 8016164:	8103      	strh	r3, [r0, #8]
 8016166:	bf81      	itttt	hi
 8016168:	2300      	movhi	r3, #0
 801616a:	8143      	strhhi	r3, [r0, #10]
 801616c:	8183      	strhhi	r3, [r0, #12]
 801616e:	7383      	strbhi	r3, [r0, #14]
 8016170:	4770      	bx	lr
	...

08016174 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8016174:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016178:	4604      	mov	r4, r0
 801617a:	4698      	mov	r8, r3
 801617c:	8880      	ldrh	r0, [r0, #4]
 801617e:	4617      	mov	r7, r2
 8016180:	4b1d      	ldr	r3, [pc, #116]	; (80161f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8016182:	460e      	mov	r6, r1
 8016184:	f8ad 0006 	strh.w	r0, [sp, #6]
 8016188:	eba8 0000 	sub.w	r0, r8, r0
 801618c:	9300      	str	r3, [sp, #0]
 801618e:	2300      	movs	r3, #0
 8016190:	b280      	uxth	r0, r0
 8016192:	8aa2      	ldrh	r2, [r4, #20]
 8016194:	f88d 3004 	strb.w	r3, [sp, #4]
 8016198:	b203      	sxth	r3, r0
 801619a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801619e:	88e1      	ldrh	r1, [r4, #6]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80161a6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80161aa:	bfb8      	it	lt
 80161ac:	4240      	neglt	r0, r0
 80161ae:	f8ad 500c 	strh.w	r5, [sp, #12]
 80161b2:	bfb8      	it	lt
 80161b4:	b203      	sxthlt	r3, r0
 80161b6:	4293      	cmp	r3, r2
 80161b8:	dc08      	bgt.n	80161cc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80161ba:	1a69      	subs	r1, r5, r1
 80161bc:	b289      	uxth	r1, r1
 80161be:	b20b      	sxth	r3, r1
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	bfbc      	itt	lt
 80161c4:	4249      	neglt	r1, r1
 80161c6:	b20b      	sxthlt	r3, r1
 80161c8:	429a      	cmp	r2, r3
 80161ca:	da13      	bge.n	80161f4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80161cc:	6920      	ldr	r0, [r4, #16]
 80161ce:	4669      	mov	r1, sp
 80161d0:	eba8 0606 	sub.w	r6, r8, r6
 80161d4:	1bef      	subs	r7, r5, r7
 80161d6:	6803      	ldr	r3, [r0, #0]
 80161d8:	685b      	ldr	r3, [r3, #4]
 80161da:	4798      	blx	r3
 80161dc:	2300      	movs	r3, #0
 80161de:	2001      	movs	r0, #1
 80161e0:	8166      	strh	r6, [r4, #10]
 80161e2:	8123      	strh	r3, [r4, #8]
 80161e4:	81a7      	strh	r7, [r4, #12]
 80161e6:	f8a4 8004 	strh.w	r8, [r4, #4]
 80161ea:	80e5      	strh	r5, [r4, #6]
 80161ec:	73a0      	strb	r0, [r4, #14]
 80161ee:	b004      	add	sp, #16
 80161f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f4:	2000      	movs	r0, #0
 80161f6:	e7fa      	b.n	80161ee <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80161f8:	0801a868 	.word	0x0801a868

080161fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80161fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161fe:	461e      	mov	r6, r3
 8016200:	1e4b      	subs	r3, r1, #1
 8016202:	b085      	sub	sp, #20
 8016204:	4604      	mov	r4, r0
 8016206:	2b01      	cmp	r3, #1
 8016208:	460d      	mov	r5, r1
 801620a:	4617      	mov	r7, r2
 801620c:	d84b      	bhi.n	80162a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801620e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016212:	1cd3      	adds	r3, r2, #3
 8016214:	b29b      	uxth	r3, r3
 8016216:	2b06      	cmp	r3, #6
 8016218:	d916      	bls.n	8016248 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801621a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80162bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801621e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016222:	f8cd c004 	str.w	ip, [sp, #4]
 8016226:	f04f 0c00 	mov.w	ip, #0
 801622a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801622e:	6900      	ldr	r0, [r0, #16]
 8016230:	f8ad 100c 	strh.w	r1, [sp, #12]
 8016234:	a901      	add	r1, sp, #4
 8016236:	f88d c008 	strb.w	ip, [sp, #8]
 801623a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801623e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016242:	6803      	ldr	r3, [r0, #0]
 8016244:	689b      	ldr	r3, [r3, #8]
 8016246:	4798      	blx	r3
 8016248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801624c:	1cd3      	adds	r3, r2, #3
 801624e:	b29b      	uxth	r3, r3
 8016250:	2b06      	cmp	r3, #6
 8016252:	d916      	bls.n	8016282 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8016254:	f8df c064 	ldr.w	ip, [pc, #100]	; 80162bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8016258:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801625c:	f8cd c004 	str.w	ip, [sp, #4]
 8016260:	f04f 0c01 	mov.w	ip, #1
 8016264:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016268:	6920      	ldr	r0, [r4, #16]
 801626a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801626e:	a901      	add	r1, sp, #4
 8016270:	f88d c008 	strb.w	ip, [sp, #8]
 8016274:	f8ad 200a 	strh.w	r2, [sp, #10]
 8016278:	f8ad 300e 	strh.w	r3, [sp, #14]
 801627c:	6803      	ldr	r3, [r0, #0]
 801627e:	689b      	ldr	r3, [r3, #8]
 8016280:	4798      	blx	r3
 8016282:	4b0d      	ldr	r3, [pc, #52]	; (80162b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8016284:	a901      	add	r1, sp, #4
 8016286:	6920      	ldr	r0, [r4, #16]
 8016288:	9301      	str	r3, [sp, #4]
 801628a:	2300      	movs	r3, #0
 801628c:	f88d 5008 	strb.w	r5, [sp, #8]
 8016290:	f8ad 700a 	strh.w	r7, [sp, #10]
 8016294:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016298:	f8ad 300e 	strh.w	r3, [sp, #14]
 801629c:	6803      	ldr	r3, [r0, #0]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	4798      	blx	r3
 80162a2:	b005      	add	sp, #20
 80162a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162a6:	2900      	cmp	r1, #0
 80162a8:	d1eb      	bne.n	8016282 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80162aa:	80a2      	strh	r2, [r4, #4]
 80162ac:	80c6      	strh	r6, [r0, #6]
 80162ae:	60a1      	str	r1, [r4, #8]
 80162b0:	81a1      	strh	r1, [r4, #12]
 80162b2:	73a1      	strb	r1, [r4, #14]
 80162b4:	e7e5      	b.n	8016282 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80162b6:	bf00      	nop
 80162b8:	0801a854 	.word	0x0801a854
 80162bc:	0801a87c 	.word	0x0801a87c

080162c0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80162c0:	6281      	str	r1, [r0, #40]	; 0x28
 80162c2:	4770      	bx	lr

080162c4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80162c4:	b510      	push	{r4, lr}
 80162c6:	2200      	movs	r2, #0
 80162c8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80162cc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80162d0:	8002      	strh	r2, [r0, #0]
 80162d2:	8042      	strh	r2, [r0, #2]
 80162d4:	8084      	strh	r4, [r0, #4]
 80162d6:	80c1      	strh	r1, [r0, #6]
 80162d8:	bd10      	pop	{r4, pc}

080162da <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80162da:	2200      	movs	r2, #0
 80162dc:	8002      	strh	r2, [r0, #0]
 80162de:	8042      	strh	r2, [r0, #2]
 80162e0:	8082      	strh	r2, [r0, #4]
 80162e2:	80c2      	strh	r2, [r0, #6]
 80162e4:	4770      	bx	lr
	...

080162e8 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80162e8:	b508      	push	{r3, lr}
 80162ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80162ec:	b928      	cbnz	r0, 80162fa <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80162ee:	4b03      	ldr	r3, [pc, #12]	; (80162fc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80162f0:	2126      	movs	r1, #38	; 0x26
 80162f2:	4a03      	ldr	r2, [pc, #12]	; (8016300 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80162f4:	4803      	ldr	r0, [pc, #12]	; (8016304 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80162f6:	f000 ff19 	bl	801712c <__assert_func>
 80162fa:	bd08      	pop	{r3, pc}
 80162fc:	0801b9a8 	.word	0x0801b9a8
 8016300:	0801ba88 	.word	0x0801ba88
 8016304:	0801b9cf 	.word	0x0801b9cf

08016308 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801630c:	b08b      	sub	sp, #44	; 0x2c
 801630e:	4604      	mov	r4, r0
 8016310:	6808      	ldr	r0, [r1, #0]
 8016312:	f04f 0a00 	mov.w	sl, #0
 8016316:	6849      	ldr	r1, [r1, #4]
 8016318:	ab04      	add	r3, sp, #16
 801631a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 801631e:	c303      	stmia	r3!, {r0, r1}
 8016320:	4b35      	ldr	r3, [pc, #212]	; (80163f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8016322:	4621      	mov	r1, r4
 8016324:	a806      	add	r0, sp, #24
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	2b01      	cmp	r3, #1
 801632a:	6823      	ldr	r3, [r4, #0]
 801632c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801632e:	bf1f      	itttt	ne
 8016330:	f10d 090e 	addne.w	r9, sp, #14
 8016334:	ae05      	addne	r6, sp, #20
 8016336:	f10d 0516 	addne.w	r5, sp, #22
 801633a:	f10d 0812 	addne.w	r8, sp, #18
 801633e:	bf01      	itttt	eq
 8016340:	f10d 0916 	addeq.w	r9, sp, #22
 8016344:	f10d 060e 	addeq.w	r6, sp, #14
 8016348:	ad05      	addeq	r5, sp, #20
 801634a:	f10d 0810 	addeq.w	r8, sp, #16
 801634e:	4798      	blx	r3
 8016350:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016354:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016358:	2b00      	cmp	r3, #0
 801635a:	d042      	beq.n	80163e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 801635c:	4293      	cmp	r3, r2
 801635e:	bfa8      	it	ge
 8016360:	4613      	movge	r3, r2
 8016362:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016366:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801636a:	2f00      	cmp	r7, #0
 801636c:	dd21      	ble.n	80163b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 801636e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016372:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8016376:	f9b6 2000 	ldrsh.w	r2, [r6]
 801637a:	f9b9 3000 	ldrsh.w	r3, [r9]
 801637e:	f8ad 0020 	strh.w	r0, [sp, #32]
 8016382:	a808      	add	r0, sp, #32
 8016384:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8016388:	a906      	add	r1, sp, #24
 801638a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801638e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016392:	f7f7 fcdf 	bl	800dd54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016396:	9001      	str	r0, [sp, #4]
 8016398:	b1d0      	cbz	r0, 80163d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801639a:	6822      	ldr	r2, [r4, #0]
 801639c:	a908      	add	r1, sp, #32
 801639e:	4620      	mov	r0, r4
 80163a0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80163a2:	4790      	blx	r2
 80163a4:	b9a0      	cbnz	r0, 80163d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80163a6:	107f      	asrs	r7, r7, #1
 80163a8:	9b01      	ldr	r3, [sp, #4]
 80163aa:	f8ad 700e 	strh.w	r7, [sp, #14]
 80163ae:	469a      	mov	sl, r3
 80163b0:	e7d9      	b.n	8016366 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80163b2:	d10d      	bne.n	80163d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80163b4:	2301      	movs	r3, #1
 80163b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80163ba:	f8b8 2000 	ldrh.w	r2, [r8]
 80163be:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80163c2:	440a      	add	r2, r1
 80163c4:	f8a8 2000 	strh.w	r2, [r8]
 80163c8:	882b      	ldrh	r3, [r5, #0]
 80163ca:	1a5b      	subs	r3, r3, r1
 80163cc:	802b      	strh	r3, [r5, #0]
 80163ce:	e7bf      	b.n	8016350 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80163d0:	f1ba 0f00 	cmp.w	sl, #0
 80163d4:	d0f1      	beq.n	80163ba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 80163d6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80163da:	455b      	cmp	r3, fp
 80163dc:	bf08      	it	eq
 80163de:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 80163e0:	e7eb      	b.n	80163ba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 80163e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80163e6:	429a      	cmp	r2, r3
 80163e8:	bf04      	itt	eq
 80163ea:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80163ee:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80163f0:	b00b      	add	sp, #44	; 0x2c
 80163f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f6:	bf00      	nop
 80163f8:	2400fa14 	.word	0x2400fa14

080163fc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80163fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163fe:	b085      	sub	sp, #20
 8016400:	6803      	ldr	r3, [r0, #0]
 8016402:	4604      	mov	r4, r0
 8016404:	4601      	mov	r1, r0
 8016406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016408:	4668      	mov	r0, sp
 801640a:	4798      	blx	r3
 801640c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8016410:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8016414:	2300      	movs	r3, #0
 8016416:	a902      	add	r1, sp, #8
 8016418:	4668      	mov	r0, sp
 801641a:	9302      	str	r3, [sp, #8]
 801641c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016420:	f8ad 500e 	strh.w	r5, [sp, #14]
 8016424:	f7f7 fc96 	bl	800dd54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016428:	b340      	cbz	r0, 801647c <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 801642a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801642e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8016432:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8016436:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801643a:	443a      	add	r2, r7
 801643c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8016440:	f8ad 0000 	strh.w	r0, [sp]
 8016444:	b292      	uxth	r2, r2
 8016446:	f8ad 1002 	strh.w	r1, [sp, #2]
 801644a:	b217      	sxth	r7, r2
 801644c:	42be      	cmp	r6, r7
 801644e:	bfd8      	it	le
 8016450:	b2b2      	uxthle	r2, r6
 8016452:	1a12      	subs	r2, r2, r0
 8016454:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016458:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801645c:	4413      	add	r3, r2
 801645e:	b29b      	uxth	r3, r3
 8016460:	b21a      	sxth	r2, r3
 8016462:	4295      	cmp	r5, r2
 8016464:	bfd8      	it	le
 8016466:	b2ab      	uxthle	r3, r5
 8016468:	1a5b      	subs	r3, r3, r1
 801646a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801646e:	6823      	ldr	r3, [r4, #0]
 8016470:	4669      	mov	r1, sp
 8016472:	4620      	mov	r0, r4
 8016474:	691b      	ldr	r3, [r3, #16]
 8016476:	4798      	blx	r3
 8016478:	b005      	add	sp, #20
 801647a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801647c:	e9cd 0000 	strd	r0, r0, [sp]
 8016480:	e7f5      	b.n	801646e <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08016484 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016484:	2200      	movs	r2, #0
 8016486:	2101      	movs	r1, #1
 8016488:	8082      	strh	r2, [r0, #4]
 801648a:	80c2      	strh	r2, [r0, #6]
 801648c:	8102      	strh	r2, [r0, #8]
 801648e:	8142      	strh	r2, [r0, #10]
 8016490:	8182      	strh	r2, [r0, #12]
 8016492:	81c2      	strh	r2, [r0, #14]
 8016494:	8202      	strh	r2, [r0, #16]
 8016496:	8242      	strh	r2, [r0, #18]
 8016498:	61c2      	str	r2, [r0, #28]
 801649a:	8402      	strh	r2, [r0, #32]
 801649c:	8442      	strh	r2, [r0, #34]	; 0x22
 801649e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80164a2:	6282      	str	r2, [r0, #40]	; 0x28
 80164a4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80164a8:	4905      	ldr	r1, [pc, #20]	; (80164c0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 80164aa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80164ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80164b2:	6001      	str	r1, [r0, #0]
 80164b4:	8582      	strh	r2, [r0, #44]	; 0x2c
 80164b6:	22ff      	movs	r2, #255	; 0xff
 80164b8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop
 80164c0:	0801ba14 	.word	0x0801ba14

080164c4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80164c4:	790b      	ldrb	r3, [r1, #4]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	bf0c      	ite	eq
 80164ca:	2301      	moveq	r3, #1
 80164cc:	2300      	movne	r3, #0
 80164ce:	b570      	push	{r4, r5, r6, lr}
 80164d0:	4604      	mov	r4, r0
 80164d2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80164d6:	460e      	mov	r6, r1
 80164d8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80164dc:	d109      	bne.n	80164f2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80164de:	b14d      	cbz	r5, 80164f4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80164e0:	7933      	ldrb	r3, [r6, #4]
 80164e2:	2b01      	cmp	r3, #1
 80164e4:	d10c      	bne.n	8016500 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80164e6:	6823      	ldr	r3, [r4, #0]
 80164e8:	4620      	mov	r0, r4
 80164ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80164ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164f0:	4718      	bx	r3
 80164f2:	b12d      	cbz	r5, 8016500 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80164f4:	6823      	ldr	r3, [r4, #0]
 80164f6:	4620      	mov	r0, r4
 80164f8:	695b      	ldr	r3, [r3, #20]
 80164fa:	4798      	blx	r3
 80164fc:	2d00      	cmp	r5, #0
 80164fe:	d1ef      	bne.n	80164e0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8016500:	bd70      	pop	{r4, r5, r6, pc}

08016502 <__aeabi_atexit>:
 8016502:	460b      	mov	r3, r1
 8016504:	4601      	mov	r1, r0
 8016506:	4618      	mov	r0, r3
 8016508:	f000 be2e 	b.w	8017168 <__cxa_atexit>

0801650c <_ZdlPvj>:
 801650c:	f000 b812 	b.w	8016534 <_ZdlPv>

08016510 <__cxa_guard_acquire>:
 8016510:	6803      	ldr	r3, [r0, #0]
 8016512:	07db      	lsls	r3, r3, #31
 8016514:	d406      	bmi.n	8016524 <__cxa_guard_acquire+0x14>
 8016516:	7843      	ldrb	r3, [r0, #1]
 8016518:	b103      	cbz	r3, 801651c <__cxa_guard_acquire+0xc>
 801651a:	deff      	udf	#255	; 0xff
 801651c:	2301      	movs	r3, #1
 801651e:	7043      	strb	r3, [r0, #1]
 8016520:	4618      	mov	r0, r3
 8016522:	4770      	bx	lr
 8016524:	2000      	movs	r0, #0
 8016526:	4770      	bx	lr

08016528 <__cxa_guard_release>:
 8016528:	2301      	movs	r3, #1
 801652a:	6003      	str	r3, [r0, #0]
 801652c:	4770      	bx	lr

0801652e <__cxa_pure_virtual>:
 801652e:	b508      	push	{r3, lr}
 8016530:	f000 f80e 	bl	8016550 <_ZSt9terminatev>

08016534 <_ZdlPv>:
 8016534:	f000 bf5c 	b.w	80173f0 <free>

08016538 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8016538:	b508      	push	{r3, lr}
 801653a:	4780      	blx	r0
 801653c:	f000 fdee 	bl	801711c <abort>

08016540 <_ZSt13get_terminatev>:
 8016540:	4b02      	ldr	r3, [pc, #8]	; (801654c <_ZSt13get_terminatev+0xc>)
 8016542:	6818      	ldr	r0, [r3, #0]
 8016544:	f3bf 8f5b 	dmb	ish
 8016548:	4770      	bx	lr
 801654a:	bf00      	nop
 801654c:	2400005c 	.word	0x2400005c

08016550 <_ZSt9terminatev>:
 8016550:	b508      	push	{r3, lr}
 8016552:	f7ff fff5 	bl	8016540 <_ZSt13get_terminatev>
 8016556:	f7ff ffef 	bl	8016538 <_ZN10__cxxabiv111__terminateEPFvvE>
 801655a:	0000      	movs	r0, r0
 801655c:	0000      	movs	r0, r0
	...

08016560 <sin>:
 8016560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016562:	eeb0 7b40 	vmov.f64	d7, d0
 8016566:	ee17 3a90 	vmov	r3, s15
 801656a:	4a1f      	ldr	r2, [pc, #124]	; (80165e8 <sin+0x88>)
 801656c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016570:	4293      	cmp	r3, r2
 8016572:	dc05      	bgt.n	8016580 <sin+0x20>
 8016574:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80165e0 <sin+0x80>
 8016578:	2000      	movs	r0, #0
 801657a:	f000 fc65 	bl	8016e48 <__kernel_sin>
 801657e:	e004      	b.n	801658a <sin+0x2a>
 8016580:	4a1a      	ldr	r2, [pc, #104]	; (80165ec <sin+0x8c>)
 8016582:	4293      	cmp	r3, r2
 8016584:	dd04      	ble.n	8016590 <sin+0x30>
 8016586:	ee30 0b40 	vsub.f64	d0, d0, d0
 801658a:	b005      	add	sp, #20
 801658c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016590:	4668      	mov	r0, sp
 8016592:	f000 f82d 	bl	80165f0 <__ieee754_rem_pio2>
 8016596:	f000 0003 	and.w	r0, r0, #3
 801659a:	2801      	cmp	r0, #1
 801659c:	d008      	beq.n	80165b0 <sin+0x50>
 801659e:	2802      	cmp	r0, #2
 80165a0:	d00d      	beq.n	80165be <sin+0x5e>
 80165a2:	b9b0      	cbnz	r0, 80165d2 <sin+0x72>
 80165a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165a8:	ed9d 0b00 	vldr	d0, [sp]
 80165ac:	2001      	movs	r0, #1
 80165ae:	e7e4      	b.n	801657a <sin+0x1a>
 80165b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165b4:	ed9d 0b00 	vldr	d0, [sp]
 80165b8:	f000 f95a 	bl	8016870 <__kernel_cos>
 80165bc:	e7e5      	b.n	801658a <sin+0x2a>
 80165be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165c2:	ed9d 0b00 	vldr	d0, [sp]
 80165c6:	2001      	movs	r0, #1
 80165c8:	f000 fc3e 	bl	8016e48 <__kernel_sin>
 80165cc:	eeb1 0b40 	vneg.f64	d0, d0
 80165d0:	e7db      	b.n	801658a <sin+0x2a>
 80165d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165d6:	ed9d 0b00 	vldr	d0, [sp]
 80165da:	f000 f949 	bl	8016870 <__kernel_cos>
 80165de:	e7f5      	b.n	80165cc <sin+0x6c>
	...
 80165e8:	3fe921fb 	.word	0x3fe921fb
 80165ec:	7fefffff 	.word	0x7fefffff

080165f0 <__ieee754_rem_pio2>:
 80165f0:	b570      	push	{r4, r5, r6, lr}
 80165f2:	eeb0 7b40 	vmov.f64	d7, d0
 80165f6:	ee17 5a90 	vmov	r5, s15
 80165fa:	4b97      	ldr	r3, [pc, #604]	; (8016858 <__ieee754_rem_pio2+0x268>)
 80165fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016600:	429e      	cmp	r6, r3
 8016602:	b088      	sub	sp, #32
 8016604:	4604      	mov	r4, r0
 8016606:	dc07      	bgt.n	8016618 <__ieee754_rem_pio2+0x28>
 8016608:	2200      	movs	r2, #0
 801660a:	2300      	movs	r3, #0
 801660c:	ed84 0b00 	vstr	d0, [r4]
 8016610:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016614:	2000      	movs	r0, #0
 8016616:	e01b      	b.n	8016650 <__ieee754_rem_pio2+0x60>
 8016618:	4b90      	ldr	r3, [pc, #576]	; (801685c <__ieee754_rem_pio2+0x26c>)
 801661a:	429e      	cmp	r6, r3
 801661c:	dc3b      	bgt.n	8016696 <__ieee754_rem_pio2+0xa6>
 801661e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8016622:	2d00      	cmp	r5, #0
 8016624:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8016818 <__ieee754_rem_pio2+0x228>
 8016628:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801662c:	dd19      	ble.n	8016662 <__ieee754_rem_pio2+0x72>
 801662e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8016632:	429e      	cmp	r6, r3
 8016634:	d00e      	beq.n	8016654 <__ieee754_rem_pio2+0x64>
 8016636:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8016820 <__ieee754_rem_pio2+0x230>
 801663a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801663e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016642:	ed84 5b00 	vstr	d5, [r4]
 8016646:	ee37 7b46 	vsub.f64	d7, d7, d6
 801664a:	ed84 7b02 	vstr	d7, [r4, #8]
 801664e:	2001      	movs	r0, #1
 8016650:	b008      	add	sp, #32
 8016652:	bd70      	pop	{r4, r5, r6, pc}
 8016654:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8016828 <__ieee754_rem_pio2+0x238>
 8016658:	ee37 7b46 	vsub.f64	d7, d7, d6
 801665c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8016830 <__ieee754_rem_pio2+0x240>
 8016660:	e7eb      	b.n	801663a <__ieee754_rem_pio2+0x4a>
 8016662:	429e      	cmp	r6, r3
 8016664:	ee30 7b06 	vadd.f64	d7, d0, d6
 8016668:	d00e      	beq.n	8016688 <__ieee754_rem_pio2+0x98>
 801666a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8016820 <__ieee754_rem_pio2+0x230>
 801666e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8016672:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016676:	ed84 5b00 	vstr	d5, [r4]
 801667a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801667e:	f04f 30ff 	mov.w	r0, #4294967295
 8016682:	ed84 7b02 	vstr	d7, [r4, #8]
 8016686:	e7e3      	b.n	8016650 <__ieee754_rem_pio2+0x60>
 8016688:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8016828 <__ieee754_rem_pio2+0x238>
 801668c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016690:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8016830 <__ieee754_rem_pio2+0x240>
 8016694:	e7eb      	b.n	801666e <__ieee754_rem_pio2+0x7e>
 8016696:	4b72      	ldr	r3, [pc, #456]	; (8016860 <__ieee754_rem_pio2+0x270>)
 8016698:	429e      	cmp	r6, r3
 801669a:	dc6e      	bgt.n	801677a <__ieee754_rem_pio2+0x18a>
 801669c:	f000 fc2c 	bl	8016ef8 <fabs>
 80166a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80166a4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8016838 <__ieee754_rem_pio2+0x248>
 80166a8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80166ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80166b0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80166b4:	ee17 0a90 	vmov	r0, s15
 80166b8:	eeb1 4b45 	vneg.f64	d4, d5
 80166bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8016818 <__ieee754_rem_pio2+0x228>
 80166c0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80166c4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8016820 <__ieee754_rem_pio2+0x230>
 80166c8:	281f      	cmp	r0, #31
 80166ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80166ce:	ee30 6b47 	vsub.f64	d6, d0, d7
 80166d2:	dc08      	bgt.n	80166e6 <__ieee754_rem_pio2+0xf6>
 80166d4:	4b63      	ldr	r3, [pc, #396]	; (8016864 <__ieee754_rem_pio2+0x274>)
 80166d6:	1e42      	subs	r2, r0, #1
 80166d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166dc:	42b3      	cmp	r3, r6
 80166de:	d002      	beq.n	80166e6 <__ieee754_rem_pio2+0xf6>
 80166e0:	ed84 6b00 	vstr	d6, [r4]
 80166e4:	e024      	b.n	8016730 <__ieee754_rem_pio2+0x140>
 80166e6:	ee16 3a90 	vmov	r3, s13
 80166ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80166ee:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80166f2:	2b10      	cmp	r3, #16
 80166f4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80166f8:	ddf2      	ble.n	80166e0 <__ieee754_rem_pio2+0xf0>
 80166fa:	eeb0 6b40 	vmov.f64	d6, d0
 80166fe:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8016828 <__ieee754_rem_pio2+0x238>
 8016702:	eea4 6b03 	vfma.f64	d6, d4, d3
 8016706:	ee30 7b46 	vsub.f64	d7, d0, d6
 801670a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801670e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8016830 <__ieee754_rem_pio2+0x240>
 8016712:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8016716:	ee36 3b47 	vsub.f64	d3, d6, d7
 801671a:	ee13 3a90 	vmov	r3, s7
 801671e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8016722:	1ad3      	subs	r3, r2, r3
 8016724:	2b31      	cmp	r3, #49	; 0x31
 8016726:	dc17      	bgt.n	8016758 <__ieee754_rem_pio2+0x168>
 8016728:	eeb0 0b46 	vmov.f64	d0, d6
 801672c:	ed84 3b00 	vstr	d3, [r4]
 8016730:	ed94 6b00 	vldr	d6, [r4]
 8016734:	2d00      	cmp	r5, #0
 8016736:	ee30 0b46 	vsub.f64	d0, d0, d6
 801673a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801673e:	ed84 7b02 	vstr	d7, [r4, #8]
 8016742:	da85      	bge.n	8016650 <__ieee754_rem_pio2+0x60>
 8016744:	eeb1 6b46 	vneg.f64	d6, d6
 8016748:	ed84 6b00 	vstr	d6, [r4]
 801674c:	eeb1 7b47 	vneg.f64	d7, d7
 8016750:	4240      	negs	r0, r0
 8016752:	ed84 7b02 	vstr	d7, [r4, #8]
 8016756:	e77b      	b.n	8016650 <__ieee754_rem_pio2+0x60>
 8016758:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8016840 <__ieee754_rem_pio2+0x250>
 801675c:	eeb0 0b46 	vmov.f64	d0, d6
 8016760:	eea4 0b03 	vfma.f64	d0, d4, d3
 8016764:	ee36 7b40 	vsub.f64	d7, d6, d0
 8016768:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8016848 <__ieee754_rem_pio2+0x258>
 801676c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8016770:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8016774:	ee30 6b47 	vsub.f64	d6, d0, d7
 8016778:	e7b2      	b.n	80166e0 <__ieee754_rem_pio2+0xf0>
 801677a:	4b3b      	ldr	r3, [pc, #236]	; (8016868 <__ieee754_rem_pio2+0x278>)
 801677c:	429e      	cmp	r6, r3
 801677e:	dd06      	ble.n	801678e <__ieee754_rem_pio2+0x19e>
 8016780:	ee30 7b40 	vsub.f64	d7, d0, d0
 8016784:	ed80 7b02 	vstr	d7, [r0, #8]
 8016788:	ed80 7b00 	vstr	d7, [r0]
 801678c:	e742      	b.n	8016614 <__ieee754_rem_pio2+0x24>
 801678e:	1532      	asrs	r2, r6, #20
 8016790:	ee10 0a10 	vmov	r0, s0
 8016794:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8016798:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801679c:	ec41 0b17 	vmov	d7, r0, r1
 80167a0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80167a4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8016850 <__ieee754_rem_pio2+0x260>
 80167a8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80167ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80167b0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80167b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80167b8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80167bc:	a902      	add	r1, sp, #8
 80167be:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80167c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80167c6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80167ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 80167ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80167d2:	2603      	movs	r6, #3
 80167d4:	4608      	mov	r0, r1
 80167d6:	ed91 7b04 	vldr	d7, [r1, #16]
 80167da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80167de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e2:	4633      	mov	r3, r6
 80167e4:	f1a1 0108 	sub.w	r1, r1, #8
 80167e8:	f106 36ff 	add.w	r6, r6, #4294967295
 80167ec:	d0f3      	beq.n	80167d6 <__ieee754_rem_pio2+0x1e6>
 80167ee:	491f      	ldr	r1, [pc, #124]	; (801686c <__ieee754_rem_pio2+0x27c>)
 80167f0:	9101      	str	r1, [sp, #4]
 80167f2:	2102      	movs	r1, #2
 80167f4:	9100      	str	r1, [sp, #0]
 80167f6:	4621      	mov	r1, r4
 80167f8:	f000 f8a6 	bl	8016948 <__kernel_rem_pio2>
 80167fc:	2d00      	cmp	r5, #0
 80167fe:	f6bf af27 	bge.w	8016650 <__ieee754_rem_pio2+0x60>
 8016802:	ed94 7b00 	vldr	d7, [r4]
 8016806:	eeb1 7b47 	vneg.f64	d7, d7
 801680a:	ed84 7b00 	vstr	d7, [r4]
 801680e:	ed94 7b02 	vldr	d7, [r4, #8]
 8016812:	e79b      	b.n	801674c <__ieee754_rem_pio2+0x15c>
 8016814:	f3af 8000 	nop.w
 8016818:	54400000 	.word	0x54400000
 801681c:	3ff921fb 	.word	0x3ff921fb
 8016820:	1a626331 	.word	0x1a626331
 8016824:	3dd0b461 	.word	0x3dd0b461
 8016828:	1a600000 	.word	0x1a600000
 801682c:	3dd0b461 	.word	0x3dd0b461
 8016830:	2e037073 	.word	0x2e037073
 8016834:	3ba3198a 	.word	0x3ba3198a
 8016838:	6dc9c883 	.word	0x6dc9c883
 801683c:	3fe45f30 	.word	0x3fe45f30
 8016840:	2e000000 	.word	0x2e000000
 8016844:	3ba3198a 	.word	0x3ba3198a
 8016848:	252049c1 	.word	0x252049c1
 801684c:	397b839a 	.word	0x397b839a
 8016850:	00000000 	.word	0x00000000
 8016854:	41700000 	.word	0x41700000
 8016858:	3fe921fb 	.word	0x3fe921fb
 801685c:	4002d97b 	.word	0x4002d97b
 8016860:	413921fb 	.word	0x413921fb
 8016864:	0801bad8 	.word	0x0801bad8
 8016868:	7fefffff 	.word	0x7fefffff
 801686c:	0801bb58 	.word	0x0801bb58

08016870 <__kernel_cos>:
 8016870:	ee10 1a90 	vmov	r1, s1
 8016874:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8016878:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801687c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8016880:	da05      	bge.n	801688e <__kernel_cos+0x1e>
 8016882:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8016886:	ee17 3a90 	vmov	r3, s15
 801688a:	2b00      	cmp	r3, #0
 801688c:	d03d      	beq.n	801690a <__kernel_cos+0x9a>
 801688e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8016892:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8016910 <__kernel_cos+0xa0>
 8016896:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016918 <__kernel_cos+0xa8>
 801689a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801689e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016920 <__kernel_cos+0xb0>
 80168a2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80168a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016928 <__kernel_cos+0xb8>
 80168aa:	eea7 6b03 	vfma.f64	d6, d7, d3
 80168ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016930 <__kernel_cos+0xc0>
 80168b2:	4b23      	ldr	r3, [pc, #140]	; (8016940 <__kernel_cos+0xd0>)
 80168b4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80168b8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8016938 <__kernel_cos+0xc8>
 80168bc:	4299      	cmp	r1, r3
 80168be:	eea7 6b03 	vfma.f64	d6, d7, d3
 80168c2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80168c6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80168ca:	ee23 7b07 	vmul.f64	d7, d3, d7
 80168ce:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80168d2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80168d6:	dc04      	bgt.n	80168e2 <__kernel_cos+0x72>
 80168d8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80168dc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80168e0:	4770      	bx	lr
 80168e2:	4b18      	ldr	r3, [pc, #96]	; (8016944 <__kernel_cos+0xd4>)
 80168e4:	4299      	cmp	r1, r3
 80168e6:	dc0d      	bgt.n	8016904 <__kernel_cos+0x94>
 80168e8:	2200      	movs	r2, #0
 80168ea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80168ee:	ec43 2b15 	vmov	d5, r2, r3
 80168f2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80168f6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80168fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80168fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8016902:	4770      	bx	lr
 8016904:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8016908:	e7f3      	b.n	80168f2 <__kernel_cos+0x82>
 801690a:	eeb0 0b44 	vmov.f64	d0, d4
 801690e:	4770      	bx	lr
 8016910:	be8838d4 	.word	0xbe8838d4
 8016914:	bda8fae9 	.word	0xbda8fae9
 8016918:	bdb4b1c4 	.word	0xbdb4b1c4
 801691c:	3e21ee9e 	.word	0x3e21ee9e
 8016920:	809c52ad 	.word	0x809c52ad
 8016924:	be927e4f 	.word	0xbe927e4f
 8016928:	19cb1590 	.word	0x19cb1590
 801692c:	3efa01a0 	.word	0x3efa01a0
 8016930:	16c15177 	.word	0x16c15177
 8016934:	bf56c16c 	.word	0xbf56c16c
 8016938:	5555554c 	.word	0x5555554c
 801693c:	3fa55555 	.word	0x3fa55555
 8016940:	3fd33332 	.word	0x3fd33332
 8016944:	3fe90000 	.word	0x3fe90000

08016948 <__kernel_rem_pio2>:
 8016948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801694c:	ed2d 8b06 	vpush	{d8-d10}
 8016950:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8016954:	469b      	mov	fp, r3
 8016956:	460f      	mov	r7, r1
 8016958:	4bcf      	ldr	r3, [pc, #828]	; (8016c98 <__kernel_rem_pio2+0x350>)
 801695a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 801695c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8016960:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8016964:	9000      	str	r0, [sp, #0]
 8016966:	f112 0f14 	cmn.w	r2, #20
 801696a:	bfa8      	it	ge
 801696c:	2318      	movge	r3, #24
 801696e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8016972:	bfb8      	it	lt
 8016974:	2300      	movlt	r3, #0
 8016976:	f06f 0417 	mvn.w	r4, #23
 801697a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8016c80 <__kernel_rem_pio2+0x338>
 801697e:	bfa4      	itt	ge
 8016980:	f1a2 0a03 	subge.w	sl, r2, #3
 8016984:	fb9a f3f3 	sdivge	r3, sl, r3
 8016988:	fb03 4404 	mla	r4, r3, r4, r4
 801698c:	1a5d      	subs	r5, r3, r1
 801698e:	4414      	add	r4, r2
 8016990:	eb09 0601 	add.w	r6, r9, r1
 8016994:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8016998:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 801699c:	2200      	movs	r2, #0
 801699e:	42b2      	cmp	r2, r6
 80169a0:	dd12      	ble.n	80169c8 <__kernel_rem_pio2+0x80>
 80169a2:	aa18      	add	r2, sp, #96	; 0x60
 80169a4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80169a8:	460e      	mov	r6, r1
 80169aa:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80169ae:	f1cb 0a01 	rsb	sl, fp, #1
 80169b2:	eb0a 0006 	add.w	r0, sl, r6
 80169b6:	4581      	cmp	r9, r0
 80169b8:	db25      	blt.n	8016a06 <__kernel_rem_pio2+0xbe>
 80169ba:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8016c80 <__kernel_rem_pio2+0x338>
 80169be:	f8dd e000 	ldr.w	lr, [sp]
 80169c2:	4615      	mov	r5, r2
 80169c4:	2000      	movs	r0, #0
 80169c6:	e015      	b.n	80169f4 <__kernel_rem_pio2+0xac>
 80169c8:	42d5      	cmn	r5, r2
 80169ca:	d409      	bmi.n	80169e0 <__kernel_rem_pio2+0x98>
 80169cc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80169d0:	ee07 0a90 	vmov	s15, r0
 80169d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80169d8:	eca8 7b02 	vstmia	r8!, {d7}
 80169dc:	3201      	adds	r2, #1
 80169de:	e7de      	b.n	801699e <__kernel_rem_pio2+0x56>
 80169e0:	eeb0 7b46 	vmov.f64	d7, d6
 80169e4:	e7f8      	b.n	80169d8 <__kernel_rem_pio2+0x90>
 80169e6:	ecbe 5b02 	vldmia	lr!, {d5}
 80169ea:	ed95 6b00 	vldr	d6, [r5]
 80169ee:	3001      	adds	r0, #1
 80169f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80169f4:	4288      	cmp	r0, r1
 80169f6:	f1a5 0508 	sub.w	r5, r5, #8
 80169fa:	ddf4      	ble.n	80169e6 <__kernel_rem_pio2+0x9e>
 80169fc:	eca8 7b02 	vstmia	r8!, {d7}
 8016a00:	3208      	adds	r2, #8
 8016a02:	3601      	adds	r6, #1
 8016a04:	e7d5      	b.n	80169b2 <__kernel_rem_pio2+0x6a>
 8016a06:	aa04      	add	r2, sp, #16
 8016a08:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8016c88 <__kernel_rem_pio2+0x340>
 8016a0c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8016c90 <__kernel_rem_pio2+0x348>
 8016a10:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8016a14:	9201      	str	r2, [sp, #4]
 8016a16:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8016a1a:	464e      	mov	r6, r9
 8016a1c:	ab90      	add	r3, sp, #576	; 0x240
 8016a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016a22:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8016a26:	ab04      	add	r3, sp, #16
 8016a28:	4618      	mov	r0, r3
 8016a2a:	4632      	mov	r2, r6
 8016a2c:	2a00      	cmp	r2, #0
 8016a2e:	dc4e      	bgt.n	8016ace <__kernel_rem_pio2+0x186>
 8016a30:	4620      	mov	r0, r4
 8016a32:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8016a36:	f000 fadf 	bl	8016ff8 <scalbn>
 8016a3a:	eeb0 8b40 	vmov.f64	d8, d0
 8016a3e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8016a42:	ee28 0b00 	vmul.f64	d0, d8, d0
 8016a46:	f000 fa63 	bl	8016f10 <floor>
 8016a4a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8016a4e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8016a52:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8016a56:	2c00      	cmp	r4, #0
 8016a58:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8016a5c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8016a60:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016a64:	ee17 8a90 	vmov	r8, s15
 8016a68:	dd46      	ble.n	8016af8 <__kernel_rem_pio2+0x1b0>
 8016a6a:	1e70      	subs	r0, r6, #1
 8016a6c:	aa04      	add	r2, sp, #16
 8016a6e:	f1c4 0c18 	rsb	ip, r4, #24
 8016a72:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8016a76:	fa45 f20c 	asr.w	r2, r5, ip
 8016a7a:	4490      	add	r8, r2
 8016a7c:	fa02 f20c 	lsl.w	r2, r2, ip
 8016a80:	1aad      	subs	r5, r5, r2
 8016a82:	aa04      	add	r2, sp, #16
 8016a84:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8016a88:	f1c4 0217 	rsb	r2, r4, #23
 8016a8c:	4115      	asrs	r5, r2
 8016a8e:	2d00      	cmp	r5, #0
 8016a90:	dd41      	ble.n	8016b16 <__kernel_rem_pio2+0x1ce>
 8016a92:	f04f 0c00 	mov.w	ip, #0
 8016a96:	f108 0801 	add.w	r8, r8, #1
 8016a9a:	4660      	mov	r0, ip
 8016a9c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8016aa0:	4566      	cmp	r6, ip
 8016aa2:	dc69      	bgt.n	8016b78 <__kernel_rem_pio2+0x230>
 8016aa4:	2c00      	cmp	r4, #0
 8016aa6:	dd03      	ble.n	8016ab0 <__kernel_rem_pio2+0x168>
 8016aa8:	2c01      	cmp	r4, #1
 8016aaa:	d076      	beq.n	8016b9a <__kernel_rem_pio2+0x252>
 8016aac:	2c02      	cmp	r4, #2
 8016aae:	d07f      	beq.n	8016bb0 <__kernel_rem_pio2+0x268>
 8016ab0:	2d02      	cmp	r5, #2
 8016ab2:	d130      	bne.n	8016b16 <__kernel_rem_pio2+0x1ce>
 8016ab4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016ab8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016abc:	b358      	cbz	r0, 8016b16 <__kernel_rem_pio2+0x1ce>
 8016abe:	4620      	mov	r0, r4
 8016ac0:	9102      	str	r1, [sp, #8]
 8016ac2:	f000 fa99 	bl	8016ff8 <scalbn>
 8016ac6:	9902      	ldr	r1, [sp, #8]
 8016ac8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016acc:	e023      	b.n	8016b16 <__kernel_rem_pio2+0x1ce>
 8016ace:	ee20 7b09 	vmul.f64	d7, d0, d9
 8016ad2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8016ad6:	3a01      	subs	r2, #1
 8016ad8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016adc:	ad68      	add	r5, sp, #416	; 0x1a0
 8016ade:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8016ae2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016ae6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8016aea:	eca0 0a01 	vstmia	r0!, {s0}
 8016aee:	ed95 0b00 	vldr	d0, [r5]
 8016af2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8016af6:	e799      	b.n	8016a2c <__kernel_rem_pio2+0xe4>
 8016af8:	d105      	bne.n	8016b06 <__kernel_rem_pio2+0x1be>
 8016afa:	1e72      	subs	r2, r6, #1
 8016afc:	a804      	add	r0, sp, #16
 8016afe:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8016b02:	15ed      	asrs	r5, r5, #23
 8016b04:	e7c3      	b.n	8016a8e <__kernel_rem_pio2+0x146>
 8016b06:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8016b0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b12:	da2f      	bge.n	8016b74 <__kernel_rem_pio2+0x22c>
 8016b14:	2500      	movs	r5, #0
 8016b16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b1e:	f040 8087 	bne.w	8016c30 <__kernel_rem_pio2+0x2e8>
 8016b22:	1e73      	subs	r3, r6, #1
 8016b24:	4618      	mov	r0, r3
 8016b26:	f04f 0c00 	mov.w	ip, #0
 8016b2a:	4548      	cmp	r0, r9
 8016b2c:	da47      	bge.n	8016bbe <__kernel_rem_pio2+0x276>
 8016b2e:	f1bc 0f00 	cmp.w	ip, #0
 8016b32:	d070      	beq.n	8016c16 <__kernel_rem_pio2+0x2ce>
 8016b34:	aa04      	add	r2, sp, #16
 8016b36:	3c18      	subs	r4, #24
 8016b38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016b3c:	2a00      	cmp	r2, #0
 8016b3e:	d075      	beq.n	8016c2c <__kernel_rem_pio2+0x2e4>
 8016b40:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016b44:	4620      	mov	r0, r4
 8016b46:	9300      	str	r3, [sp, #0]
 8016b48:	f000 fa56 	bl	8016ff8 <scalbn>
 8016b4c:	9b00      	ldr	r3, [sp, #0]
 8016b4e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8016c88 <__kernel_rem_pio2+0x340>
 8016b52:	461a      	mov	r2, r3
 8016b54:	2a00      	cmp	r2, #0
 8016b56:	f280 80ac 	bge.w	8016cb2 <__kernel_rem_pio2+0x36a>
 8016b5a:	4619      	mov	r1, r3
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	2900      	cmp	r1, #0
 8016b60:	f2c0 80cd 	blt.w	8016cfe <__kernel_rem_pio2+0x3b6>
 8016b64:	aa68      	add	r2, sp, #416	; 0x1a0
 8016b66:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8016b6a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8016c80 <__kernel_rem_pio2+0x338>
 8016b6e:	4e4b      	ldr	r6, [pc, #300]	; (8016c9c <__kernel_rem_pio2+0x354>)
 8016b70:	2200      	movs	r2, #0
 8016b72:	e0b8      	b.n	8016ce6 <__kernel_rem_pio2+0x39e>
 8016b74:	2502      	movs	r5, #2
 8016b76:	e78c      	b.n	8016a92 <__kernel_rem_pio2+0x14a>
 8016b78:	681a      	ldr	r2, [r3, #0]
 8016b7a:	b948      	cbnz	r0, 8016b90 <__kernel_rem_pio2+0x248>
 8016b7c:	b11a      	cbz	r2, 8016b86 <__kernel_rem_pio2+0x23e>
 8016b7e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8016b82:	601a      	str	r2, [r3, #0]
 8016b84:	2201      	movs	r2, #1
 8016b86:	f10c 0c01 	add.w	ip, ip, #1
 8016b8a:	3304      	adds	r3, #4
 8016b8c:	4610      	mov	r0, r2
 8016b8e:	e787      	b.n	8016aa0 <__kernel_rem_pio2+0x158>
 8016b90:	ebae 0202 	sub.w	r2, lr, r2
 8016b94:	601a      	str	r2, [r3, #0]
 8016b96:	4602      	mov	r2, r0
 8016b98:	e7f5      	b.n	8016b86 <__kernel_rem_pio2+0x23e>
 8016b9a:	1e72      	subs	r2, r6, #1
 8016b9c:	ab04      	add	r3, sp, #16
 8016b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ba2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016ba6:	f10d 0c10 	add.w	ip, sp, #16
 8016baa:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8016bae:	e77f      	b.n	8016ab0 <__kernel_rem_pio2+0x168>
 8016bb0:	1e72      	subs	r2, r6, #1
 8016bb2:	ab04      	add	r3, sp, #16
 8016bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016bbc:	e7f3      	b.n	8016ba6 <__kernel_rem_pio2+0x25e>
 8016bbe:	aa04      	add	r2, sp, #16
 8016bc0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8016bc4:	3801      	subs	r0, #1
 8016bc6:	ea4c 0c02 	orr.w	ip, ip, r2
 8016bca:	e7ae      	b.n	8016b2a <__kernel_rem_pio2+0x1e2>
 8016bcc:	3001      	adds	r0, #1
 8016bce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016bd2:	2a00      	cmp	r2, #0
 8016bd4:	d0fa      	beq.n	8016bcc <__kernel_rem_pio2+0x284>
 8016bd6:	eb06 020b 	add.w	r2, r6, fp
 8016bda:	ad18      	add	r5, sp, #96	; 0x60
 8016bdc:	1c73      	adds	r3, r6, #1
 8016bde:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8016be2:	4406      	add	r6, r0
 8016be4:	429e      	cmp	r6, r3
 8016be6:	f6ff af19 	blt.w	8016a1c <__kernel_rem_pio2+0xd4>
 8016bea:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8016bee:	9d00      	ldr	r5, [sp, #0]
 8016bf0:	ee07 0a90 	vmov	s15, r0
 8016bf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016bf8:	2000      	movs	r0, #0
 8016bfa:	eca2 7b02 	vstmia	r2!, {d7}
 8016bfe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016c80 <__kernel_rem_pio2+0x338>
 8016c02:	4694      	mov	ip, r2
 8016c04:	4288      	cmp	r0, r1
 8016c06:	dd09      	ble.n	8016c1c <__kernel_rem_pio2+0x2d4>
 8016c08:	a868      	add	r0, sp, #416	; 0x1a0
 8016c0a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8016c0e:	ed80 7b00 	vstr	d7, [r0]
 8016c12:	3301      	adds	r3, #1
 8016c14:	e7e6      	b.n	8016be4 <__kernel_rem_pio2+0x29c>
 8016c16:	9b01      	ldr	r3, [sp, #4]
 8016c18:	2001      	movs	r0, #1
 8016c1a:	e7d8      	b.n	8016bce <__kernel_rem_pio2+0x286>
 8016c1c:	ecb5 5b02 	vldmia	r5!, {d5}
 8016c20:	ed3c 6b02 	vldmdb	ip!, {d6}
 8016c24:	3001      	adds	r0, #1
 8016c26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016c2a:	e7eb      	b.n	8016c04 <__kernel_rem_pio2+0x2bc>
 8016c2c:	3b01      	subs	r3, #1
 8016c2e:	e781      	b.n	8016b34 <__kernel_rem_pio2+0x1ec>
 8016c30:	4260      	negs	r0, r4
 8016c32:	eeb0 0b48 	vmov.f64	d0, d8
 8016c36:	f000 f9df 	bl	8016ff8 <scalbn>
 8016c3a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8016c90 <__kernel_rem_pio2+0x348>
 8016c3e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8016c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c46:	db2b      	blt.n	8016ca0 <__kernel_rem_pio2+0x358>
 8016c48:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8016c88 <__kernel_rem_pio2+0x340>
 8016c4c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016c50:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8016c54:	aa04      	add	r2, sp, #16
 8016c56:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8016c5a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8016c5e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016c62:	a904      	add	r1, sp, #16
 8016c64:	ee10 3a10 	vmov	r3, s0
 8016c68:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8016c6c:	ee17 2a10 	vmov	r2, s14
 8016c70:	1c73      	adds	r3, r6, #1
 8016c72:	3418      	adds	r4, #24
 8016c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016c78:	e762      	b.n	8016b40 <__kernel_rem_pio2+0x1f8>
 8016c7a:	bf00      	nop
 8016c7c:	f3af 8000 	nop.w
	...
 8016c8c:	3e700000 	.word	0x3e700000
 8016c90:	00000000 	.word	0x00000000
 8016c94:	41700000 	.word	0x41700000
 8016c98:	0801bca0 	.word	0x0801bca0
 8016c9c:	0801bc60 	.word	0x0801bc60
 8016ca0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016ca4:	aa04      	add	r2, sp, #16
 8016ca6:	ee10 3a10 	vmov	r3, s0
 8016caa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8016cae:	4633      	mov	r3, r6
 8016cb0:	e746      	b.n	8016b40 <__kernel_rem_pio2+0x1f8>
 8016cb2:	a804      	add	r0, sp, #16
 8016cb4:	a968      	add	r1, sp, #416	; 0x1a0
 8016cb6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8016cba:	9000      	str	r0, [sp, #0]
 8016cbc:	ee07 0a90 	vmov	s15, r0
 8016cc0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016cc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016cc8:	3a01      	subs	r2, #1
 8016cca:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016cce:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016cd2:	ed81 7b00 	vstr	d7, [r1]
 8016cd6:	e73d      	b.n	8016b54 <__kernel_rem_pio2+0x20c>
 8016cd8:	ecb6 5b02 	vldmia	r6!, {d5}
 8016cdc:	ecb4 6b02 	vldmia	r4!, {d6}
 8016ce0:	3201      	adds	r2, #1
 8016ce2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016ce6:	454a      	cmp	r2, r9
 8016ce8:	dc01      	bgt.n	8016cee <__kernel_rem_pio2+0x3a6>
 8016cea:	4290      	cmp	r0, r2
 8016cec:	daf4      	bge.n	8016cd8 <__kernel_rem_pio2+0x390>
 8016cee:	aa40      	add	r2, sp, #256	; 0x100
 8016cf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016cf4:	ed82 7b00 	vstr	d7, [r2]
 8016cf8:	3901      	subs	r1, #1
 8016cfa:	3001      	adds	r0, #1
 8016cfc:	e72f      	b.n	8016b5e <__kernel_rem_pio2+0x216>
 8016cfe:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8016d00:	2a02      	cmp	r2, #2
 8016d02:	dc0a      	bgt.n	8016d1a <__kernel_rem_pio2+0x3d2>
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	dc5a      	bgt.n	8016dbe <__kernel_rem_pio2+0x476>
 8016d08:	d039      	beq.n	8016d7e <__kernel_rem_pio2+0x436>
 8016d0a:	f008 0007 	and.w	r0, r8, #7
 8016d0e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8016d12:	ecbd 8b06 	vpop	{d8-d10}
 8016d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d1a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8016d1c:	2a03      	cmp	r2, #3
 8016d1e:	d1f4      	bne.n	8016d0a <__kernel_rem_pio2+0x3c2>
 8016d20:	aa40      	add	r2, sp, #256	; 0x100
 8016d22:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016d26:	4611      	mov	r1, r2
 8016d28:	4618      	mov	r0, r3
 8016d2a:	2800      	cmp	r0, #0
 8016d2c:	f1a1 0108 	sub.w	r1, r1, #8
 8016d30:	dc52      	bgt.n	8016dd8 <__kernel_rem_pio2+0x490>
 8016d32:	4619      	mov	r1, r3
 8016d34:	2901      	cmp	r1, #1
 8016d36:	f1a2 0208 	sub.w	r2, r2, #8
 8016d3a:	dc5d      	bgt.n	8016df8 <__kernel_rem_pio2+0x4b0>
 8016d3c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8016e40 <__kernel_rem_pio2+0x4f8>
 8016d40:	2b01      	cmp	r3, #1
 8016d42:	dc69      	bgt.n	8016e18 <__kernel_rem_pio2+0x4d0>
 8016d44:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8016d48:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8016d4c:	2d00      	cmp	r5, #0
 8016d4e:	d16c      	bne.n	8016e2a <__kernel_rem_pio2+0x4e2>
 8016d50:	ed87 5b00 	vstr	d5, [r7]
 8016d54:	ed87 6b02 	vstr	d6, [r7, #8]
 8016d58:	ed87 7b04 	vstr	d7, [r7, #16]
 8016d5c:	e7d5      	b.n	8016d0a <__kernel_rem_pio2+0x3c2>
 8016d5e:	aa40      	add	r2, sp, #256	; 0x100
 8016d60:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016d64:	ed92 6b00 	vldr	d6, [r2]
 8016d68:	3b01      	subs	r3, #1
 8016d6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	daf5      	bge.n	8016d5e <__kernel_rem_pio2+0x416>
 8016d72:	b10d      	cbz	r5, 8016d78 <__kernel_rem_pio2+0x430>
 8016d74:	eeb1 7b47 	vneg.f64	d7, d7
 8016d78:	ed87 7b00 	vstr	d7, [r7]
 8016d7c:	e7c5      	b.n	8016d0a <__kernel_rem_pio2+0x3c2>
 8016d7e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8016e40 <__kernel_rem_pio2+0x4f8>
 8016d82:	e7f4      	b.n	8016d6e <__kernel_rem_pio2+0x426>
 8016d84:	a940      	add	r1, sp, #256	; 0x100
 8016d86:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d8a:	ed91 7b00 	vldr	d7, [r1]
 8016d8e:	3a01      	subs	r2, #1
 8016d90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016d94:	2a00      	cmp	r2, #0
 8016d96:	daf5      	bge.n	8016d84 <__kernel_rem_pio2+0x43c>
 8016d98:	b1ad      	cbz	r5, 8016dc6 <__kernel_rem_pio2+0x47e>
 8016d9a:	eeb1 7b46 	vneg.f64	d7, d6
 8016d9e:	ed87 7b00 	vstr	d7, [r7]
 8016da2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8016da6:	a942      	add	r1, sp, #264	; 0x108
 8016da8:	2201      	movs	r2, #1
 8016daa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016dae:	4293      	cmp	r3, r2
 8016db0:	da0c      	bge.n	8016dcc <__kernel_rem_pio2+0x484>
 8016db2:	b10d      	cbz	r5, 8016db8 <__kernel_rem_pio2+0x470>
 8016db4:	eeb1 7b47 	vneg.f64	d7, d7
 8016db8:	ed87 7b02 	vstr	d7, [r7, #8]
 8016dbc:	e7a5      	b.n	8016d0a <__kernel_rem_pio2+0x3c2>
 8016dbe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016e40 <__kernel_rem_pio2+0x4f8>
 8016dc2:	461a      	mov	r2, r3
 8016dc4:	e7e6      	b.n	8016d94 <__kernel_rem_pio2+0x44c>
 8016dc6:	eeb0 7b46 	vmov.f64	d7, d6
 8016dca:	e7e8      	b.n	8016d9e <__kernel_rem_pio2+0x456>
 8016dcc:	ecb1 6b02 	vldmia	r1!, {d6}
 8016dd0:	3201      	adds	r2, #1
 8016dd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016dd6:	e7ea      	b.n	8016dae <__kernel_rem_pio2+0x466>
 8016dd8:	ed91 7b00 	vldr	d7, [r1]
 8016ddc:	ed91 5b02 	vldr	d5, [r1, #8]
 8016de0:	3801      	subs	r0, #1
 8016de2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016dea:	ed81 6b00 	vstr	d6, [r1]
 8016dee:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016df2:	ed81 7b02 	vstr	d7, [r1, #8]
 8016df6:	e798      	b.n	8016d2a <__kernel_rem_pio2+0x3e2>
 8016df8:	ed92 7b00 	vldr	d7, [r2]
 8016dfc:	ed92 5b02 	vldr	d5, [r2, #8]
 8016e00:	3901      	subs	r1, #1
 8016e02:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016e06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016e0a:	ed82 6b00 	vstr	d6, [r2]
 8016e0e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016e12:	ed82 7b02 	vstr	d7, [r2, #8]
 8016e16:	e78d      	b.n	8016d34 <__kernel_rem_pio2+0x3ec>
 8016e18:	aa40      	add	r2, sp, #256	; 0x100
 8016e1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016e1e:	ed92 6b00 	vldr	d6, [r2]
 8016e22:	3b01      	subs	r3, #1
 8016e24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016e28:	e78a      	b.n	8016d40 <__kernel_rem_pio2+0x3f8>
 8016e2a:	eeb1 5b45 	vneg.f64	d5, d5
 8016e2e:	eeb1 6b46 	vneg.f64	d6, d6
 8016e32:	ed87 5b00 	vstr	d5, [r7]
 8016e36:	eeb1 7b47 	vneg.f64	d7, d7
 8016e3a:	ed87 6b02 	vstr	d6, [r7, #8]
 8016e3e:	e78b      	b.n	8016d58 <__kernel_rem_pio2+0x410>
	...

08016e48 <__kernel_sin>:
 8016e48:	ee10 3a90 	vmov	r3, s1
 8016e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016e50:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8016e54:	da04      	bge.n	8016e60 <__kernel_sin+0x18>
 8016e56:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8016e5a:	ee17 3a90 	vmov	r3, s15
 8016e5e:	b35b      	cbz	r3, 8016eb8 <__kernel_sin+0x70>
 8016e60:	ee20 6b00 	vmul.f64	d6, d0, d0
 8016e64:	ee20 5b06 	vmul.f64	d5, d0, d6
 8016e68:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8016ec0 <__kernel_sin+0x78>
 8016e6c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016ec8 <__kernel_sin+0x80>
 8016e70:	eea6 4b07 	vfma.f64	d4, d6, d7
 8016e74:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8016ed0 <__kernel_sin+0x88>
 8016e78:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016e7c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016ed8 <__kernel_sin+0x90>
 8016e80:	eea7 4b06 	vfma.f64	d4, d7, d6
 8016e84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8016ee0 <__kernel_sin+0x98>
 8016e88:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016e8c:	b930      	cbnz	r0, 8016e9c <__kernel_sin+0x54>
 8016e8e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016ee8 <__kernel_sin+0xa0>
 8016e92:	eea6 4b07 	vfma.f64	d4, d6, d7
 8016e96:	eea4 0b05 	vfma.f64	d0, d4, d5
 8016e9a:	4770      	bx	lr
 8016e9c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8016ea0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8016ea4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8016ea8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8016eac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8016ef0 <__kernel_sin+0xa8>
 8016eb0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8016eb4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8016eb8:	4770      	bx	lr
 8016eba:	bf00      	nop
 8016ebc:	f3af 8000 	nop.w
 8016ec0:	5acfd57c 	.word	0x5acfd57c
 8016ec4:	3de5d93a 	.word	0x3de5d93a
 8016ec8:	8a2b9ceb 	.word	0x8a2b9ceb
 8016ecc:	be5ae5e6 	.word	0xbe5ae5e6
 8016ed0:	57b1fe7d 	.word	0x57b1fe7d
 8016ed4:	3ec71de3 	.word	0x3ec71de3
 8016ed8:	19c161d5 	.word	0x19c161d5
 8016edc:	bf2a01a0 	.word	0xbf2a01a0
 8016ee0:	1110f8a6 	.word	0x1110f8a6
 8016ee4:	3f811111 	.word	0x3f811111
 8016ee8:	55555549 	.word	0x55555549
 8016eec:	bfc55555 	.word	0xbfc55555
 8016ef0:	55555549 	.word	0x55555549
 8016ef4:	3fc55555 	.word	0x3fc55555

08016ef8 <fabs>:
 8016ef8:	ec51 0b10 	vmov	r0, r1, d0
 8016efc:	ee10 2a10 	vmov	r2, s0
 8016f00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016f04:	ec43 2b10 	vmov	d0, r2, r3
 8016f08:	4770      	bx	lr
 8016f0a:	0000      	movs	r0, r0
 8016f0c:	0000      	movs	r0, r0
	...

08016f10 <floor>:
 8016f10:	ee10 1a90 	vmov	r1, s1
 8016f14:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016f18:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8016f1c:	2b13      	cmp	r3, #19
 8016f1e:	b530      	push	{r4, r5, lr}
 8016f20:	ee10 0a10 	vmov	r0, s0
 8016f24:	ee10 5a10 	vmov	r5, s0
 8016f28:	dc31      	bgt.n	8016f8e <floor+0x7e>
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	da15      	bge.n	8016f5a <floor+0x4a>
 8016f2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016fe8 <floor+0xd8>
 8016f32:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016f36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f3e:	dd07      	ble.n	8016f50 <floor+0x40>
 8016f40:	2900      	cmp	r1, #0
 8016f42:	da4e      	bge.n	8016fe2 <floor+0xd2>
 8016f44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016f48:	4318      	orrs	r0, r3
 8016f4a:	d001      	beq.n	8016f50 <floor+0x40>
 8016f4c:	4928      	ldr	r1, [pc, #160]	; (8016ff0 <floor+0xe0>)
 8016f4e:	2000      	movs	r0, #0
 8016f50:	460b      	mov	r3, r1
 8016f52:	4602      	mov	r2, r0
 8016f54:	ec43 2b10 	vmov	d0, r2, r3
 8016f58:	e020      	b.n	8016f9c <floor+0x8c>
 8016f5a:	4a26      	ldr	r2, [pc, #152]	; (8016ff4 <floor+0xe4>)
 8016f5c:	411a      	asrs	r2, r3
 8016f5e:	ea01 0402 	and.w	r4, r1, r2
 8016f62:	4304      	orrs	r4, r0
 8016f64:	d01a      	beq.n	8016f9c <floor+0x8c>
 8016f66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016fe8 <floor+0xd8>
 8016f6a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016f6e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f76:	ddeb      	ble.n	8016f50 <floor+0x40>
 8016f78:	2900      	cmp	r1, #0
 8016f7a:	bfbe      	ittt	lt
 8016f7c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8016f80:	fa40 f303 	asrlt.w	r3, r0, r3
 8016f84:	18c9      	addlt	r1, r1, r3
 8016f86:	ea21 0102 	bic.w	r1, r1, r2
 8016f8a:	2000      	movs	r0, #0
 8016f8c:	e7e0      	b.n	8016f50 <floor+0x40>
 8016f8e:	2b33      	cmp	r3, #51	; 0x33
 8016f90:	dd05      	ble.n	8016f9e <floor+0x8e>
 8016f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f96:	d101      	bne.n	8016f9c <floor+0x8c>
 8016f98:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016f9c:	bd30      	pop	{r4, r5, pc}
 8016f9e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8016fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8016fa6:	40e2      	lsrs	r2, r4
 8016fa8:	4202      	tst	r2, r0
 8016faa:	d0f7      	beq.n	8016f9c <floor+0x8c>
 8016fac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8016fe8 <floor+0xd8>
 8016fb0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016fb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fbc:	ddc8      	ble.n	8016f50 <floor+0x40>
 8016fbe:	2900      	cmp	r1, #0
 8016fc0:	da02      	bge.n	8016fc8 <floor+0xb8>
 8016fc2:	2b14      	cmp	r3, #20
 8016fc4:	d103      	bne.n	8016fce <floor+0xbe>
 8016fc6:	3101      	adds	r1, #1
 8016fc8:	ea20 0002 	bic.w	r0, r0, r2
 8016fcc:	e7c0      	b.n	8016f50 <floor+0x40>
 8016fce:	2401      	movs	r4, #1
 8016fd0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016fd4:	fa04 f303 	lsl.w	r3, r4, r3
 8016fd8:	4418      	add	r0, r3
 8016fda:	42a8      	cmp	r0, r5
 8016fdc:	bf38      	it	cc
 8016fde:	1909      	addcc	r1, r1, r4
 8016fe0:	e7f2      	b.n	8016fc8 <floor+0xb8>
 8016fe2:	2000      	movs	r0, #0
 8016fe4:	4601      	mov	r1, r0
 8016fe6:	e7b3      	b.n	8016f50 <floor+0x40>
 8016fe8:	8800759c 	.word	0x8800759c
 8016fec:	7e37e43c 	.word	0x7e37e43c
 8016ff0:	bff00000 	.word	0xbff00000
 8016ff4:	000fffff 	.word	0x000fffff

08016ff8 <scalbn>:
 8016ff8:	b082      	sub	sp, #8
 8016ffa:	ed8d 0b00 	vstr	d0, [sp]
 8016ffe:	9b01      	ldr	r3, [sp, #4]
 8017000:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017004:	b9a2      	cbnz	r2, 8017030 <scalbn+0x38>
 8017006:	9a00      	ldr	r2, [sp, #0]
 8017008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801700c:	4313      	orrs	r3, r2
 801700e:	d03a      	beq.n	8017086 <scalbn+0x8e>
 8017010:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80170e8 <scalbn+0xf0>
 8017014:	4b40      	ldr	r3, [pc, #256]	; (8017118 <scalbn+0x120>)
 8017016:	ee20 7b07 	vmul.f64	d7, d0, d7
 801701a:	4298      	cmp	r0, r3
 801701c:	ed8d 7b00 	vstr	d7, [sp]
 8017020:	da11      	bge.n	8017046 <scalbn+0x4e>
 8017022:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80170f0 <scalbn+0xf8>
 8017026:	ed9d 6b00 	vldr	d6, [sp]
 801702a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801702e:	e007      	b.n	8017040 <scalbn+0x48>
 8017030:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017034:	428a      	cmp	r2, r1
 8017036:	d10a      	bne.n	801704e <scalbn+0x56>
 8017038:	ed9d 7b00 	vldr	d7, [sp]
 801703c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017040:	ed8d 7b00 	vstr	d7, [sp]
 8017044:	e01f      	b.n	8017086 <scalbn+0x8e>
 8017046:	9b01      	ldr	r3, [sp, #4]
 8017048:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801704c:	3a36      	subs	r2, #54	; 0x36
 801704e:	4402      	add	r2, r0
 8017050:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017054:	428a      	cmp	r2, r1
 8017056:	dd0a      	ble.n	801706e <scalbn+0x76>
 8017058:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80170f8 <scalbn+0x100>
 801705c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8017100 <scalbn+0x108>
 8017060:	eeb0 6b47 	vmov.f64	d6, d7
 8017064:	9b01      	ldr	r3, [sp, #4]
 8017066:	2b00      	cmp	r3, #0
 8017068:	fe27 7b05 	vselge.f64	d7, d7, d5
 801706c:	e7dd      	b.n	801702a <scalbn+0x32>
 801706e:	2a00      	cmp	r2, #0
 8017070:	dd0d      	ble.n	801708e <scalbn+0x96>
 8017072:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801707a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801707e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017082:	e9cd 0100 	strd	r0, r1, [sp]
 8017086:	ed9d 0b00 	vldr	d0, [sp]
 801708a:	b002      	add	sp, #8
 801708c:	4770      	bx	lr
 801708e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017092:	da18      	bge.n	80170c6 <scalbn+0xce>
 8017094:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017098:	4298      	cmp	r0, r3
 801709a:	9b01      	ldr	r3, [sp, #4]
 801709c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80170a0:	dd09      	ble.n	80170b6 <scalbn+0xbe>
 80170a2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80170f8 <scalbn+0x100>
 80170a6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8017100 <scalbn+0x108>
 80170aa:	eeb0 6b47 	vmov.f64	d6, d7
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80170b4:	e7b9      	b.n	801702a <scalbn+0x32>
 80170b6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80170f0 <scalbn+0xf8>
 80170ba:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8017108 <scalbn+0x110>
 80170be:	eeb0 6b47 	vmov.f64	d6, d7
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	e7f4      	b.n	80170b0 <scalbn+0xb8>
 80170c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80170ce:	3236      	adds	r2, #54	; 0x36
 80170d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80170d4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80170d8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8017110 <scalbn+0x118>
 80170dc:	ec41 0b17 	vmov	d7, r0, r1
 80170e0:	e7a3      	b.n	801702a <scalbn+0x32>
 80170e2:	bf00      	nop
 80170e4:	f3af 8000 	nop.w
 80170e8:	00000000 	.word	0x00000000
 80170ec:	43500000 	.word	0x43500000
 80170f0:	c2f8f359 	.word	0xc2f8f359
 80170f4:	01a56e1f 	.word	0x01a56e1f
 80170f8:	8800759c 	.word	0x8800759c
 80170fc:	7e37e43c 	.word	0x7e37e43c
 8017100:	8800759c 	.word	0x8800759c
 8017104:	fe37e43c 	.word	0xfe37e43c
 8017108:	c2f8f359 	.word	0xc2f8f359
 801710c:	81a56e1f 	.word	0x81a56e1f
 8017110:	00000000 	.word	0x00000000
 8017114:	3c900000 	.word	0x3c900000
 8017118:	ffff3cb0 	.word	0xffff3cb0

0801711c <abort>:
 801711c:	b508      	push	{r3, lr}
 801711e:	2006      	movs	r0, #6
 8017120:	f000 fdbe 	bl	8017ca0 <raise>
 8017124:	2001      	movs	r0, #1
 8017126:	f7ea f981 	bl	800142c <_exit>
	...

0801712c <__assert_func>:
 801712c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801712e:	4614      	mov	r4, r2
 8017130:	461a      	mov	r2, r3
 8017132:	4b09      	ldr	r3, [pc, #36]	; (8017158 <__assert_func+0x2c>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	4605      	mov	r5, r0
 8017138:	68d8      	ldr	r0, [r3, #12]
 801713a:	b14c      	cbz	r4, 8017150 <__assert_func+0x24>
 801713c:	4b07      	ldr	r3, [pc, #28]	; (801715c <__assert_func+0x30>)
 801713e:	9100      	str	r1, [sp, #0]
 8017140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017144:	4906      	ldr	r1, [pc, #24]	; (8017160 <__assert_func+0x34>)
 8017146:	462b      	mov	r3, r5
 8017148:	f000 f8f8 	bl	801733c <fiprintf>
 801714c:	f7ff ffe6 	bl	801711c <abort>
 8017150:	4b04      	ldr	r3, [pc, #16]	; (8017164 <__assert_func+0x38>)
 8017152:	461c      	mov	r4, r3
 8017154:	e7f3      	b.n	801713e <__assert_func+0x12>
 8017156:	bf00      	nop
 8017158:	24000060 	.word	0x24000060
 801715c:	0801bcb0 	.word	0x0801bcb0
 8017160:	0801bcbd 	.word	0x0801bcbd
 8017164:	0801bceb 	.word	0x0801bceb

08017168 <__cxa_atexit>:
 8017168:	b510      	push	{r4, lr}
 801716a:	4c05      	ldr	r4, [pc, #20]	; (8017180 <__cxa_atexit+0x18>)
 801716c:	4613      	mov	r3, r2
 801716e:	b12c      	cbz	r4, 801717c <__cxa_atexit+0x14>
 8017170:	460a      	mov	r2, r1
 8017172:	4601      	mov	r1, r0
 8017174:	2002      	movs	r0, #2
 8017176:	f3af 8000 	nop.w
 801717a:	bd10      	pop	{r4, pc}
 801717c:	4620      	mov	r0, r4
 801717e:	e7fc      	b.n	801717a <__cxa_atexit+0x12>
 8017180:	00000000 	.word	0x00000000

08017184 <__errno>:
 8017184:	4b01      	ldr	r3, [pc, #4]	; (801718c <__errno+0x8>)
 8017186:	6818      	ldr	r0, [r3, #0]
 8017188:	4770      	bx	lr
 801718a:	bf00      	nop
 801718c:	24000060 	.word	0x24000060

08017190 <std>:
 8017190:	2300      	movs	r3, #0
 8017192:	b510      	push	{r4, lr}
 8017194:	4604      	mov	r4, r0
 8017196:	e9c0 3300 	strd	r3, r3, [r0]
 801719a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801719e:	6083      	str	r3, [r0, #8]
 80171a0:	8181      	strh	r1, [r0, #12]
 80171a2:	6643      	str	r3, [r0, #100]	; 0x64
 80171a4:	81c2      	strh	r2, [r0, #14]
 80171a6:	6183      	str	r3, [r0, #24]
 80171a8:	4619      	mov	r1, r3
 80171aa:	2208      	movs	r2, #8
 80171ac:	305c      	adds	r0, #92	; 0x5c
 80171ae:	f000 f935 	bl	801741c <memset>
 80171b2:	4b05      	ldr	r3, [pc, #20]	; (80171c8 <std+0x38>)
 80171b4:	6263      	str	r3, [r4, #36]	; 0x24
 80171b6:	4b05      	ldr	r3, [pc, #20]	; (80171cc <std+0x3c>)
 80171b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80171ba:	4b05      	ldr	r3, [pc, #20]	; (80171d0 <std+0x40>)
 80171bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80171be:	4b05      	ldr	r3, [pc, #20]	; (80171d4 <std+0x44>)
 80171c0:	6224      	str	r4, [r4, #32]
 80171c2:	6323      	str	r3, [r4, #48]	; 0x30
 80171c4:	bd10      	pop	{r4, pc}
 80171c6:	bf00      	nop
 80171c8:	08017cd9 	.word	0x08017cd9
 80171cc:	08017cfb 	.word	0x08017cfb
 80171d0:	08017d33 	.word	0x08017d33
 80171d4:	08017d57 	.word	0x08017d57

080171d8 <_cleanup_r>:
 80171d8:	4901      	ldr	r1, [pc, #4]	; (80171e0 <_cleanup_r+0x8>)
 80171da:	f000 b8c1 	b.w	8017360 <_fwalk_reent>
 80171de:	bf00      	nop
 80171e0:	08018031 	.word	0x08018031

080171e4 <__sfmoreglue>:
 80171e4:	b570      	push	{r4, r5, r6, lr}
 80171e6:	1e4a      	subs	r2, r1, #1
 80171e8:	2568      	movs	r5, #104	; 0x68
 80171ea:	4355      	muls	r5, r2
 80171ec:	460e      	mov	r6, r1
 80171ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80171f2:	f000 f96b 	bl	80174cc <_malloc_r>
 80171f6:	4604      	mov	r4, r0
 80171f8:	b140      	cbz	r0, 801720c <__sfmoreglue+0x28>
 80171fa:	2100      	movs	r1, #0
 80171fc:	e9c0 1600 	strd	r1, r6, [r0]
 8017200:	300c      	adds	r0, #12
 8017202:	60a0      	str	r0, [r4, #8]
 8017204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017208:	f000 f908 	bl	801741c <memset>
 801720c:	4620      	mov	r0, r4
 801720e:	bd70      	pop	{r4, r5, r6, pc}

08017210 <__sfp_lock_acquire>:
 8017210:	4801      	ldr	r0, [pc, #4]	; (8017218 <__sfp_lock_acquire+0x8>)
 8017212:	f000 b8ea 	b.w	80173ea <__retarget_lock_acquire_recursive>
 8017216:	bf00      	nop
 8017218:	2400fdc0 	.word	0x2400fdc0

0801721c <__sfp_lock_release>:
 801721c:	4801      	ldr	r0, [pc, #4]	; (8017224 <__sfp_lock_release+0x8>)
 801721e:	f000 b8e5 	b.w	80173ec <__retarget_lock_release_recursive>
 8017222:	bf00      	nop
 8017224:	2400fdc0 	.word	0x2400fdc0

08017228 <__sinit_lock_acquire>:
 8017228:	4801      	ldr	r0, [pc, #4]	; (8017230 <__sinit_lock_acquire+0x8>)
 801722a:	f000 b8de 	b.w	80173ea <__retarget_lock_acquire_recursive>
 801722e:	bf00      	nop
 8017230:	2400fdbb 	.word	0x2400fdbb

08017234 <__sinit_lock_release>:
 8017234:	4801      	ldr	r0, [pc, #4]	; (801723c <__sinit_lock_release+0x8>)
 8017236:	f000 b8d9 	b.w	80173ec <__retarget_lock_release_recursive>
 801723a:	bf00      	nop
 801723c:	2400fdbb 	.word	0x2400fdbb

08017240 <__sinit>:
 8017240:	b510      	push	{r4, lr}
 8017242:	4604      	mov	r4, r0
 8017244:	f7ff fff0 	bl	8017228 <__sinit_lock_acquire>
 8017248:	69a3      	ldr	r3, [r4, #24]
 801724a:	b11b      	cbz	r3, 8017254 <__sinit+0x14>
 801724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017250:	f7ff bff0 	b.w	8017234 <__sinit_lock_release>
 8017254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017258:	6523      	str	r3, [r4, #80]	; 0x50
 801725a:	4b13      	ldr	r3, [pc, #76]	; (80172a8 <__sinit+0x68>)
 801725c:	4a13      	ldr	r2, [pc, #76]	; (80172ac <__sinit+0x6c>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	62a2      	str	r2, [r4, #40]	; 0x28
 8017262:	42a3      	cmp	r3, r4
 8017264:	bf04      	itt	eq
 8017266:	2301      	moveq	r3, #1
 8017268:	61a3      	streq	r3, [r4, #24]
 801726a:	4620      	mov	r0, r4
 801726c:	f000 f820 	bl	80172b0 <__sfp>
 8017270:	6060      	str	r0, [r4, #4]
 8017272:	4620      	mov	r0, r4
 8017274:	f000 f81c 	bl	80172b0 <__sfp>
 8017278:	60a0      	str	r0, [r4, #8]
 801727a:	4620      	mov	r0, r4
 801727c:	f000 f818 	bl	80172b0 <__sfp>
 8017280:	2200      	movs	r2, #0
 8017282:	60e0      	str	r0, [r4, #12]
 8017284:	2104      	movs	r1, #4
 8017286:	6860      	ldr	r0, [r4, #4]
 8017288:	f7ff ff82 	bl	8017190 <std>
 801728c:	68a0      	ldr	r0, [r4, #8]
 801728e:	2201      	movs	r2, #1
 8017290:	2109      	movs	r1, #9
 8017292:	f7ff ff7d 	bl	8017190 <std>
 8017296:	68e0      	ldr	r0, [r4, #12]
 8017298:	2202      	movs	r2, #2
 801729a:	2112      	movs	r1, #18
 801729c:	f7ff ff78 	bl	8017190 <std>
 80172a0:	2301      	movs	r3, #1
 80172a2:	61a3      	str	r3, [r4, #24]
 80172a4:	e7d2      	b.n	801724c <__sinit+0xc>
 80172a6:	bf00      	nop
 80172a8:	0801bd4c 	.word	0x0801bd4c
 80172ac:	080171d9 	.word	0x080171d9

080172b0 <__sfp>:
 80172b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172b2:	4607      	mov	r7, r0
 80172b4:	f7ff ffac 	bl	8017210 <__sfp_lock_acquire>
 80172b8:	4b1e      	ldr	r3, [pc, #120]	; (8017334 <__sfp+0x84>)
 80172ba:	681e      	ldr	r6, [r3, #0]
 80172bc:	69b3      	ldr	r3, [r6, #24]
 80172be:	b913      	cbnz	r3, 80172c6 <__sfp+0x16>
 80172c0:	4630      	mov	r0, r6
 80172c2:	f7ff ffbd 	bl	8017240 <__sinit>
 80172c6:	3648      	adds	r6, #72	; 0x48
 80172c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80172cc:	3b01      	subs	r3, #1
 80172ce:	d503      	bpl.n	80172d8 <__sfp+0x28>
 80172d0:	6833      	ldr	r3, [r6, #0]
 80172d2:	b30b      	cbz	r3, 8017318 <__sfp+0x68>
 80172d4:	6836      	ldr	r6, [r6, #0]
 80172d6:	e7f7      	b.n	80172c8 <__sfp+0x18>
 80172d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80172dc:	b9d5      	cbnz	r5, 8017314 <__sfp+0x64>
 80172de:	4b16      	ldr	r3, [pc, #88]	; (8017338 <__sfp+0x88>)
 80172e0:	60e3      	str	r3, [r4, #12]
 80172e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80172e6:	6665      	str	r5, [r4, #100]	; 0x64
 80172e8:	f000 f87e 	bl	80173e8 <__retarget_lock_init_recursive>
 80172ec:	f7ff ff96 	bl	801721c <__sfp_lock_release>
 80172f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80172f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80172f8:	6025      	str	r5, [r4, #0]
 80172fa:	61a5      	str	r5, [r4, #24]
 80172fc:	2208      	movs	r2, #8
 80172fe:	4629      	mov	r1, r5
 8017300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017304:	f000 f88a 	bl	801741c <memset>
 8017308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801730c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017310:	4620      	mov	r0, r4
 8017312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017314:	3468      	adds	r4, #104	; 0x68
 8017316:	e7d9      	b.n	80172cc <__sfp+0x1c>
 8017318:	2104      	movs	r1, #4
 801731a:	4638      	mov	r0, r7
 801731c:	f7ff ff62 	bl	80171e4 <__sfmoreglue>
 8017320:	4604      	mov	r4, r0
 8017322:	6030      	str	r0, [r6, #0]
 8017324:	2800      	cmp	r0, #0
 8017326:	d1d5      	bne.n	80172d4 <__sfp+0x24>
 8017328:	f7ff ff78 	bl	801721c <__sfp_lock_release>
 801732c:	230c      	movs	r3, #12
 801732e:	603b      	str	r3, [r7, #0]
 8017330:	e7ee      	b.n	8017310 <__sfp+0x60>
 8017332:	bf00      	nop
 8017334:	0801bd4c 	.word	0x0801bd4c
 8017338:	ffff0001 	.word	0xffff0001

0801733c <fiprintf>:
 801733c:	b40e      	push	{r1, r2, r3}
 801733e:	b503      	push	{r0, r1, lr}
 8017340:	4601      	mov	r1, r0
 8017342:	ab03      	add	r3, sp, #12
 8017344:	4805      	ldr	r0, [pc, #20]	; (801735c <fiprintf+0x20>)
 8017346:	f853 2b04 	ldr.w	r2, [r3], #4
 801734a:	6800      	ldr	r0, [r0, #0]
 801734c:	9301      	str	r3, [sp, #4]
 801734e:	f000 f941 	bl	80175d4 <_vfiprintf_r>
 8017352:	b002      	add	sp, #8
 8017354:	f85d eb04 	ldr.w	lr, [sp], #4
 8017358:	b003      	add	sp, #12
 801735a:	4770      	bx	lr
 801735c:	24000060 	.word	0x24000060

08017360 <_fwalk_reent>:
 8017360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017364:	4606      	mov	r6, r0
 8017366:	4688      	mov	r8, r1
 8017368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801736c:	2700      	movs	r7, #0
 801736e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017372:	f1b9 0901 	subs.w	r9, r9, #1
 8017376:	d505      	bpl.n	8017384 <_fwalk_reent+0x24>
 8017378:	6824      	ldr	r4, [r4, #0]
 801737a:	2c00      	cmp	r4, #0
 801737c:	d1f7      	bne.n	801736e <_fwalk_reent+0xe>
 801737e:	4638      	mov	r0, r7
 8017380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017384:	89ab      	ldrh	r3, [r5, #12]
 8017386:	2b01      	cmp	r3, #1
 8017388:	d907      	bls.n	801739a <_fwalk_reent+0x3a>
 801738a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801738e:	3301      	adds	r3, #1
 8017390:	d003      	beq.n	801739a <_fwalk_reent+0x3a>
 8017392:	4629      	mov	r1, r5
 8017394:	4630      	mov	r0, r6
 8017396:	47c0      	blx	r8
 8017398:	4307      	orrs	r7, r0
 801739a:	3568      	adds	r5, #104	; 0x68
 801739c:	e7e9      	b.n	8017372 <_fwalk_reent+0x12>
	...

080173a0 <__libc_init_array>:
 80173a0:	b570      	push	{r4, r5, r6, lr}
 80173a2:	4d0d      	ldr	r5, [pc, #52]	; (80173d8 <__libc_init_array+0x38>)
 80173a4:	4c0d      	ldr	r4, [pc, #52]	; (80173dc <__libc_init_array+0x3c>)
 80173a6:	1b64      	subs	r4, r4, r5
 80173a8:	10a4      	asrs	r4, r4, #2
 80173aa:	2600      	movs	r6, #0
 80173ac:	42a6      	cmp	r6, r4
 80173ae:	d109      	bne.n	80173c4 <__libc_init_array+0x24>
 80173b0:	4d0b      	ldr	r5, [pc, #44]	; (80173e0 <__libc_init_array+0x40>)
 80173b2:	4c0c      	ldr	r4, [pc, #48]	; (80173e4 <__libc_init_array+0x44>)
 80173b4:	f000 ff2e 	bl	8018214 <_init>
 80173b8:	1b64      	subs	r4, r4, r5
 80173ba:	10a4      	asrs	r4, r4, #2
 80173bc:	2600      	movs	r6, #0
 80173be:	42a6      	cmp	r6, r4
 80173c0:	d105      	bne.n	80173ce <__libc_init_array+0x2e>
 80173c2:	bd70      	pop	{r4, r5, r6, pc}
 80173c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80173c8:	4798      	blx	r3
 80173ca:	3601      	adds	r6, #1
 80173cc:	e7ee      	b.n	80173ac <__libc_init_array+0xc>
 80173ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80173d2:	4798      	blx	r3
 80173d4:	3601      	adds	r6, #1
 80173d6:	e7f2      	b.n	80173be <__libc_init_array+0x1e>
 80173d8:	0801bd8c 	.word	0x0801bd8c
 80173dc:	0801bd8c 	.word	0x0801bd8c
 80173e0:	0801bd8c 	.word	0x0801bd8c
 80173e4:	0801bda0 	.word	0x0801bda0

080173e8 <__retarget_lock_init_recursive>:
 80173e8:	4770      	bx	lr

080173ea <__retarget_lock_acquire_recursive>:
 80173ea:	4770      	bx	lr

080173ec <__retarget_lock_release_recursive>:
 80173ec:	4770      	bx	lr
	...

080173f0 <free>:
 80173f0:	4b02      	ldr	r3, [pc, #8]	; (80173fc <free+0xc>)
 80173f2:	4601      	mov	r1, r0
 80173f4:	6818      	ldr	r0, [r3, #0]
 80173f6:	f000 b819 	b.w	801742c <_free_r>
 80173fa:	bf00      	nop
 80173fc:	24000060 	.word	0x24000060

08017400 <memcpy>:
 8017400:	440a      	add	r2, r1
 8017402:	4291      	cmp	r1, r2
 8017404:	f100 33ff 	add.w	r3, r0, #4294967295
 8017408:	d100      	bne.n	801740c <memcpy+0xc>
 801740a:	4770      	bx	lr
 801740c:	b510      	push	{r4, lr}
 801740e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017416:	4291      	cmp	r1, r2
 8017418:	d1f9      	bne.n	801740e <memcpy+0xe>
 801741a:	bd10      	pop	{r4, pc}

0801741c <memset>:
 801741c:	4402      	add	r2, r0
 801741e:	4603      	mov	r3, r0
 8017420:	4293      	cmp	r3, r2
 8017422:	d100      	bne.n	8017426 <memset+0xa>
 8017424:	4770      	bx	lr
 8017426:	f803 1b01 	strb.w	r1, [r3], #1
 801742a:	e7f9      	b.n	8017420 <memset+0x4>

0801742c <_free_r>:
 801742c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801742e:	2900      	cmp	r1, #0
 8017430:	d048      	beq.n	80174c4 <_free_r+0x98>
 8017432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017436:	9001      	str	r0, [sp, #4]
 8017438:	2b00      	cmp	r3, #0
 801743a:	f1a1 0404 	sub.w	r4, r1, #4
 801743e:	bfb8      	it	lt
 8017440:	18e4      	addlt	r4, r4, r3
 8017442:	f000 fea7 	bl	8018194 <__malloc_lock>
 8017446:	4a20      	ldr	r2, [pc, #128]	; (80174c8 <_free_r+0x9c>)
 8017448:	9801      	ldr	r0, [sp, #4]
 801744a:	6813      	ldr	r3, [r2, #0]
 801744c:	4615      	mov	r5, r2
 801744e:	b933      	cbnz	r3, 801745e <_free_r+0x32>
 8017450:	6063      	str	r3, [r4, #4]
 8017452:	6014      	str	r4, [r2, #0]
 8017454:	b003      	add	sp, #12
 8017456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801745a:	f000 bea1 	b.w	80181a0 <__malloc_unlock>
 801745e:	42a3      	cmp	r3, r4
 8017460:	d90b      	bls.n	801747a <_free_r+0x4e>
 8017462:	6821      	ldr	r1, [r4, #0]
 8017464:	1862      	adds	r2, r4, r1
 8017466:	4293      	cmp	r3, r2
 8017468:	bf04      	itt	eq
 801746a:	681a      	ldreq	r2, [r3, #0]
 801746c:	685b      	ldreq	r3, [r3, #4]
 801746e:	6063      	str	r3, [r4, #4]
 8017470:	bf04      	itt	eq
 8017472:	1852      	addeq	r2, r2, r1
 8017474:	6022      	streq	r2, [r4, #0]
 8017476:	602c      	str	r4, [r5, #0]
 8017478:	e7ec      	b.n	8017454 <_free_r+0x28>
 801747a:	461a      	mov	r2, r3
 801747c:	685b      	ldr	r3, [r3, #4]
 801747e:	b10b      	cbz	r3, 8017484 <_free_r+0x58>
 8017480:	42a3      	cmp	r3, r4
 8017482:	d9fa      	bls.n	801747a <_free_r+0x4e>
 8017484:	6811      	ldr	r1, [r2, #0]
 8017486:	1855      	adds	r5, r2, r1
 8017488:	42a5      	cmp	r5, r4
 801748a:	d10b      	bne.n	80174a4 <_free_r+0x78>
 801748c:	6824      	ldr	r4, [r4, #0]
 801748e:	4421      	add	r1, r4
 8017490:	1854      	adds	r4, r2, r1
 8017492:	42a3      	cmp	r3, r4
 8017494:	6011      	str	r1, [r2, #0]
 8017496:	d1dd      	bne.n	8017454 <_free_r+0x28>
 8017498:	681c      	ldr	r4, [r3, #0]
 801749a:	685b      	ldr	r3, [r3, #4]
 801749c:	6053      	str	r3, [r2, #4]
 801749e:	4421      	add	r1, r4
 80174a0:	6011      	str	r1, [r2, #0]
 80174a2:	e7d7      	b.n	8017454 <_free_r+0x28>
 80174a4:	d902      	bls.n	80174ac <_free_r+0x80>
 80174a6:	230c      	movs	r3, #12
 80174a8:	6003      	str	r3, [r0, #0]
 80174aa:	e7d3      	b.n	8017454 <_free_r+0x28>
 80174ac:	6825      	ldr	r5, [r4, #0]
 80174ae:	1961      	adds	r1, r4, r5
 80174b0:	428b      	cmp	r3, r1
 80174b2:	bf04      	itt	eq
 80174b4:	6819      	ldreq	r1, [r3, #0]
 80174b6:	685b      	ldreq	r3, [r3, #4]
 80174b8:	6063      	str	r3, [r4, #4]
 80174ba:	bf04      	itt	eq
 80174bc:	1949      	addeq	r1, r1, r5
 80174be:	6021      	streq	r1, [r4, #0]
 80174c0:	6054      	str	r4, [r2, #4]
 80174c2:	e7c7      	b.n	8017454 <_free_r+0x28>
 80174c4:	b003      	add	sp, #12
 80174c6:	bd30      	pop	{r4, r5, pc}
 80174c8:	2400fad8 	.word	0x2400fad8

080174cc <_malloc_r>:
 80174cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ce:	1ccd      	adds	r5, r1, #3
 80174d0:	f025 0503 	bic.w	r5, r5, #3
 80174d4:	3508      	adds	r5, #8
 80174d6:	2d0c      	cmp	r5, #12
 80174d8:	bf38      	it	cc
 80174da:	250c      	movcc	r5, #12
 80174dc:	2d00      	cmp	r5, #0
 80174de:	4606      	mov	r6, r0
 80174e0:	db01      	blt.n	80174e6 <_malloc_r+0x1a>
 80174e2:	42a9      	cmp	r1, r5
 80174e4:	d903      	bls.n	80174ee <_malloc_r+0x22>
 80174e6:	230c      	movs	r3, #12
 80174e8:	6033      	str	r3, [r6, #0]
 80174ea:	2000      	movs	r0, #0
 80174ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174ee:	f000 fe51 	bl	8018194 <__malloc_lock>
 80174f2:	4921      	ldr	r1, [pc, #132]	; (8017578 <_malloc_r+0xac>)
 80174f4:	680a      	ldr	r2, [r1, #0]
 80174f6:	4614      	mov	r4, r2
 80174f8:	b99c      	cbnz	r4, 8017522 <_malloc_r+0x56>
 80174fa:	4f20      	ldr	r7, [pc, #128]	; (801757c <_malloc_r+0xb0>)
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	b923      	cbnz	r3, 801750a <_malloc_r+0x3e>
 8017500:	4621      	mov	r1, r4
 8017502:	4630      	mov	r0, r6
 8017504:	f000 fb94 	bl	8017c30 <_sbrk_r>
 8017508:	6038      	str	r0, [r7, #0]
 801750a:	4629      	mov	r1, r5
 801750c:	4630      	mov	r0, r6
 801750e:	f000 fb8f 	bl	8017c30 <_sbrk_r>
 8017512:	1c43      	adds	r3, r0, #1
 8017514:	d123      	bne.n	801755e <_malloc_r+0x92>
 8017516:	230c      	movs	r3, #12
 8017518:	6033      	str	r3, [r6, #0]
 801751a:	4630      	mov	r0, r6
 801751c:	f000 fe40 	bl	80181a0 <__malloc_unlock>
 8017520:	e7e3      	b.n	80174ea <_malloc_r+0x1e>
 8017522:	6823      	ldr	r3, [r4, #0]
 8017524:	1b5b      	subs	r3, r3, r5
 8017526:	d417      	bmi.n	8017558 <_malloc_r+0x8c>
 8017528:	2b0b      	cmp	r3, #11
 801752a:	d903      	bls.n	8017534 <_malloc_r+0x68>
 801752c:	6023      	str	r3, [r4, #0]
 801752e:	441c      	add	r4, r3
 8017530:	6025      	str	r5, [r4, #0]
 8017532:	e004      	b.n	801753e <_malloc_r+0x72>
 8017534:	6863      	ldr	r3, [r4, #4]
 8017536:	42a2      	cmp	r2, r4
 8017538:	bf0c      	ite	eq
 801753a:	600b      	streq	r3, [r1, #0]
 801753c:	6053      	strne	r3, [r2, #4]
 801753e:	4630      	mov	r0, r6
 8017540:	f000 fe2e 	bl	80181a0 <__malloc_unlock>
 8017544:	f104 000b 	add.w	r0, r4, #11
 8017548:	1d23      	adds	r3, r4, #4
 801754a:	f020 0007 	bic.w	r0, r0, #7
 801754e:	1ac2      	subs	r2, r0, r3
 8017550:	d0cc      	beq.n	80174ec <_malloc_r+0x20>
 8017552:	1a1b      	subs	r3, r3, r0
 8017554:	50a3      	str	r3, [r4, r2]
 8017556:	e7c9      	b.n	80174ec <_malloc_r+0x20>
 8017558:	4622      	mov	r2, r4
 801755a:	6864      	ldr	r4, [r4, #4]
 801755c:	e7cc      	b.n	80174f8 <_malloc_r+0x2c>
 801755e:	1cc4      	adds	r4, r0, #3
 8017560:	f024 0403 	bic.w	r4, r4, #3
 8017564:	42a0      	cmp	r0, r4
 8017566:	d0e3      	beq.n	8017530 <_malloc_r+0x64>
 8017568:	1a21      	subs	r1, r4, r0
 801756a:	4630      	mov	r0, r6
 801756c:	f000 fb60 	bl	8017c30 <_sbrk_r>
 8017570:	3001      	adds	r0, #1
 8017572:	d1dd      	bne.n	8017530 <_malloc_r+0x64>
 8017574:	e7cf      	b.n	8017516 <_malloc_r+0x4a>
 8017576:	bf00      	nop
 8017578:	2400fad8 	.word	0x2400fad8
 801757c:	2400fadc 	.word	0x2400fadc

08017580 <__sfputc_r>:
 8017580:	6893      	ldr	r3, [r2, #8]
 8017582:	3b01      	subs	r3, #1
 8017584:	2b00      	cmp	r3, #0
 8017586:	b410      	push	{r4}
 8017588:	6093      	str	r3, [r2, #8]
 801758a:	da08      	bge.n	801759e <__sfputc_r+0x1e>
 801758c:	6994      	ldr	r4, [r2, #24]
 801758e:	42a3      	cmp	r3, r4
 8017590:	db01      	blt.n	8017596 <__sfputc_r+0x16>
 8017592:	290a      	cmp	r1, #10
 8017594:	d103      	bne.n	801759e <__sfputc_r+0x1e>
 8017596:	f85d 4b04 	ldr.w	r4, [sp], #4
 801759a:	f000 bbe1 	b.w	8017d60 <__swbuf_r>
 801759e:	6813      	ldr	r3, [r2, #0]
 80175a0:	1c58      	adds	r0, r3, #1
 80175a2:	6010      	str	r0, [r2, #0]
 80175a4:	7019      	strb	r1, [r3, #0]
 80175a6:	4608      	mov	r0, r1
 80175a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175ac:	4770      	bx	lr

080175ae <__sfputs_r>:
 80175ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175b0:	4606      	mov	r6, r0
 80175b2:	460f      	mov	r7, r1
 80175b4:	4614      	mov	r4, r2
 80175b6:	18d5      	adds	r5, r2, r3
 80175b8:	42ac      	cmp	r4, r5
 80175ba:	d101      	bne.n	80175c0 <__sfputs_r+0x12>
 80175bc:	2000      	movs	r0, #0
 80175be:	e007      	b.n	80175d0 <__sfputs_r+0x22>
 80175c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175c4:	463a      	mov	r2, r7
 80175c6:	4630      	mov	r0, r6
 80175c8:	f7ff ffda 	bl	8017580 <__sfputc_r>
 80175cc:	1c43      	adds	r3, r0, #1
 80175ce:	d1f3      	bne.n	80175b8 <__sfputs_r+0xa>
 80175d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080175d4 <_vfiprintf_r>:
 80175d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175d8:	460d      	mov	r5, r1
 80175da:	b09d      	sub	sp, #116	; 0x74
 80175dc:	4614      	mov	r4, r2
 80175de:	4698      	mov	r8, r3
 80175e0:	4606      	mov	r6, r0
 80175e2:	b118      	cbz	r0, 80175ec <_vfiprintf_r+0x18>
 80175e4:	6983      	ldr	r3, [r0, #24]
 80175e6:	b90b      	cbnz	r3, 80175ec <_vfiprintf_r+0x18>
 80175e8:	f7ff fe2a 	bl	8017240 <__sinit>
 80175ec:	4b89      	ldr	r3, [pc, #548]	; (8017814 <_vfiprintf_r+0x240>)
 80175ee:	429d      	cmp	r5, r3
 80175f0:	d11b      	bne.n	801762a <_vfiprintf_r+0x56>
 80175f2:	6875      	ldr	r5, [r6, #4]
 80175f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175f6:	07d9      	lsls	r1, r3, #31
 80175f8:	d405      	bmi.n	8017606 <_vfiprintf_r+0x32>
 80175fa:	89ab      	ldrh	r3, [r5, #12]
 80175fc:	059a      	lsls	r2, r3, #22
 80175fe:	d402      	bmi.n	8017606 <_vfiprintf_r+0x32>
 8017600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017602:	f7ff fef2 	bl	80173ea <__retarget_lock_acquire_recursive>
 8017606:	89ab      	ldrh	r3, [r5, #12]
 8017608:	071b      	lsls	r3, r3, #28
 801760a:	d501      	bpl.n	8017610 <_vfiprintf_r+0x3c>
 801760c:	692b      	ldr	r3, [r5, #16]
 801760e:	b9eb      	cbnz	r3, 801764c <_vfiprintf_r+0x78>
 8017610:	4629      	mov	r1, r5
 8017612:	4630      	mov	r0, r6
 8017614:	f000 fc08 	bl	8017e28 <__swsetup_r>
 8017618:	b1c0      	cbz	r0, 801764c <_vfiprintf_r+0x78>
 801761a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801761c:	07dc      	lsls	r4, r3, #31
 801761e:	d50e      	bpl.n	801763e <_vfiprintf_r+0x6a>
 8017620:	f04f 30ff 	mov.w	r0, #4294967295
 8017624:	b01d      	add	sp, #116	; 0x74
 8017626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801762a:	4b7b      	ldr	r3, [pc, #492]	; (8017818 <_vfiprintf_r+0x244>)
 801762c:	429d      	cmp	r5, r3
 801762e:	d101      	bne.n	8017634 <_vfiprintf_r+0x60>
 8017630:	68b5      	ldr	r5, [r6, #8]
 8017632:	e7df      	b.n	80175f4 <_vfiprintf_r+0x20>
 8017634:	4b79      	ldr	r3, [pc, #484]	; (801781c <_vfiprintf_r+0x248>)
 8017636:	429d      	cmp	r5, r3
 8017638:	bf08      	it	eq
 801763a:	68f5      	ldreq	r5, [r6, #12]
 801763c:	e7da      	b.n	80175f4 <_vfiprintf_r+0x20>
 801763e:	89ab      	ldrh	r3, [r5, #12]
 8017640:	0598      	lsls	r0, r3, #22
 8017642:	d4ed      	bmi.n	8017620 <_vfiprintf_r+0x4c>
 8017644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017646:	f7ff fed1 	bl	80173ec <__retarget_lock_release_recursive>
 801764a:	e7e9      	b.n	8017620 <_vfiprintf_r+0x4c>
 801764c:	2300      	movs	r3, #0
 801764e:	9309      	str	r3, [sp, #36]	; 0x24
 8017650:	2320      	movs	r3, #32
 8017652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017656:	f8cd 800c 	str.w	r8, [sp, #12]
 801765a:	2330      	movs	r3, #48	; 0x30
 801765c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017820 <_vfiprintf_r+0x24c>
 8017660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017664:	f04f 0901 	mov.w	r9, #1
 8017668:	4623      	mov	r3, r4
 801766a:	469a      	mov	sl, r3
 801766c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017670:	b10a      	cbz	r2, 8017676 <_vfiprintf_r+0xa2>
 8017672:	2a25      	cmp	r2, #37	; 0x25
 8017674:	d1f9      	bne.n	801766a <_vfiprintf_r+0x96>
 8017676:	ebba 0b04 	subs.w	fp, sl, r4
 801767a:	d00b      	beq.n	8017694 <_vfiprintf_r+0xc0>
 801767c:	465b      	mov	r3, fp
 801767e:	4622      	mov	r2, r4
 8017680:	4629      	mov	r1, r5
 8017682:	4630      	mov	r0, r6
 8017684:	f7ff ff93 	bl	80175ae <__sfputs_r>
 8017688:	3001      	adds	r0, #1
 801768a:	f000 80aa 	beq.w	80177e2 <_vfiprintf_r+0x20e>
 801768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017690:	445a      	add	r2, fp
 8017692:	9209      	str	r2, [sp, #36]	; 0x24
 8017694:	f89a 3000 	ldrb.w	r3, [sl]
 8017698:	2b00      	cmp	r3, #0
 801769a:	f000 80a2 	beq.w	80177e2 <_vfiprintf_r+0x20e>
 801769e:	2300      	movs	r3, #0
 80176a0:	f04f 32ff 	mov.w	r2, #4294967295
 80176a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176a8:	f10a 0a01 	add.w	sl, sl, #1
 80176ac:	9304      	str	r3, [sp, #16]
 80176ae:	9307      	str	r3, [sp, #28]
 80176b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80176b4:	931a      	str	r3, [sp, #104]	; 0x68
 80176b6:	4654      	mov	r4, sl
 80176b8:	2205      	movs	r2, #5
 80176ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176be:	4858      	ldr	r0, [pc, #352]	; (8017820 <_vfiprintf_r+0x24c>)
 80176c0:	f7e8 fe0e 	bl	80002e0 <memchr>
 80176c4:	9a04      	ldr	r2, [sp, #16]
 80176c6:	b9d8      	cbnz	r0, 8017700 <_vfiprintf_r+0x12c>
 80176c8:	06d1      	lsls	r1, r2, #27
 80176ca:	bf44      	itt	mi
 80176cc:	2320      	movmi	r3, #32
 80176ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176d2:	0713      	lsls	r3, r2, #28
 80176d4:	bf44      	itt	mi
 80176d6:	232b      	movmi	r3, #43	; 0x2b
 80176d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176dc:	f89a 3000 	ldrb.w	r3, [sl]
 80176e0:	2b2a      	cmp	r3, #42	; 0x2a
 80176e2:	d015      	beq.n	8017710 <_vfiprintf_r+0x13c>
 80176e4:	9a07      	ldr	r2, [sp, #28]
 80176e6:	4654      	mov	r4, sl
 80176e8:	2000      	movs	r0, #0
 80176ea:	f04f 0c0a 	mov.w	ip, #10
 80176ee:	4621      	mov	r1, r4
 80176f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176f4:	3b30      	subs	r3, #48	; 0x30
 80176f6:	2b09      	cmp	r3, #9
 80176f8:	d94e      	bls.n	8017798 <_vfiprintf_r+0x1c4>
 80176fa:	b1b0      	cbz	r0, 801772a <_vfiprintf_r+0x156>
 80176fc:	9207      	str	r2, [sp, #28]
 80176fe:	e014      	b.n	801772a <_vfiprintf_r+0x156>
 8017700:	eba0 0308 	sub.w	r3, r0, r8
 8017704:	fa09 f303 	lsl.w	r3, r9, r3
 8017708:	4313      	orrs	r3, r2
 801770a:	9304      	str	r3, [sp, #16]
 801770c:	46a2      	mov	sl, r4
 801770e:	e7d2      	b.n	80176b6 <_vfiprintf_r+0xe2>
 8017710:	9b03      	ldr	r3, [sp, #12]
 8017712:	1d19      	adds	r1, r3, #4
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	9103      	str	r1, [sp, #12]
 8017718:	2b00      	cmp	r3, #0
 801771a:	bfbb      	ittet	lt
 801771c:	425b      	neglt	r3, r3
 801771e:	f042 0202 	orrlt.w	r2, r2, #2
 8017722:	9307      	strge	r3, [sp, #28]
 8017724:	9307      	strlt	r3, [sp, #28]
 8017726:	bfb8      	it	lt
 8017728:	9204      	strlt	r2, [sp, #16]
 801772a:	7823      	ldrb	r3, [r4, #0]
 801772c:	2b2e      	cmp	r3, #46	; 0x2e
 801772e:	d10c      	bne.n	801774a <_vfiprintf_r+0x176>
 8017730:	7863      	ldrb	r3, [r4, #1]
 8017732:	2b2a      	cmp	r3, #42	; 0x2a
 8017734:	d135      	bne.n	80177a2 <_vfiprintf_r+0x1ce>
 8017736:	9b03      	ldr	r3, [sp, #12]
 8017738:	1d1a      	adds	r2, r3, #4
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	9203      	str	r2, [sp, #12]
 801773e:	2b00      	cmp	r3, #0
 8017740:	bfb8      	it	lt
 8017742:	f04f 33ff 	movlt.w	r3, #4294967295
 8017746:	3402      	adds	r4, #2
 8017748:	9305      	str	r3, [sp, #20]
 801774a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017830 <_vfiprintf_r+0x25c>
 801774e:	7821      	ldrb	r1, [r4, #0]
 8017750:	2203      	movs	r2, #3
 8017752:	4650      	mov	r0, sl
 8017754:	f7e8 fdc4 	bl	80002e0 <memchr>
 8017758:	b140      	cbz	r0, 801776c <_vfiprintf_r+0x198>
 801775a:	2340      	movs	r3, #64	; 0x40
 801775c:	eba0 000a 	sub.w	r0, r0, sl
 8017760:	fa03 f000 	lsl.w	r0, r3, r0
 8017764:	9b04      	ldr	r3, [sp, #16]
 8017766:	4303      	orrs	r3, r0
 8017768:	3401      	adds	r4, #1
 801776a:	9304      	str	r3, [sp, #16]
 801776c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017770:	482c      	ldr	r0, [pc, #176]	; (8017824 <_vfiprintf_r+0x250>)
 8017772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017776:	2206      	movs	r2, #6
 8017778:	f7e8 fdb2 	bl	80002e0 <memchr>
 801777c:	2800      	cmp	r0, #0
 801777e:	d03f      	beq.n	8017800 <_vfiprintf_r+0x22c>
 8017780:	4b29      	ldr	r3, [pc, #164]	; (8017828 <_vfiprintf_r+0x254>)
 8017782:	bb1b      	cbnz	r3, 80177cc <_vfiprintf_r+0x1f8>
 8017784:	9b03      	ldr	r3, [sp, #12]
 8017786:	3307      	adds	r3, #7
 8017788:	f023 0307 	bic.w	r3, r3, #7
 801778c:	3308      	adds	r3, #8
 801778e:	9303      	str	r3, [sp, #12]
 8017790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017792:	443b      	add	r3, r7
 8017794:	9309      	str	r3, [sp, #36]	; 0x24
 8017796:	e767      	b.n	8017668 <_vfiprintf_r+0x94>
 8017798:	fb0c 3202 	mla	r2, ip, r2, r3
 801779c:	460c      	mov	r4, r1
 801779e:	2001      	movs	r0, #1
 80177a0:	e7a5      	b.n	80176ee <_vfiprintf_r+0x11a>
 80177a2:	2300      	movs	r3, #0
 80177a4:	3401      	adds	r4, #1
 80177a6:	9305      	str	r3, [sp, #20]
 80177a8:	4619      	mov	r1, r3
 80177aa:	f04f 0c0a 	mov.w	ip, #10
 80177ae:	4620      	mov	r0, r4
 80177b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177b4:	3a30      	subs	r2, #48	; 0x30
 80177b6:	2a09      	cmp	r2, #9
 80177b8:	d903      	bls.n	80177c2 <_vfiprintf_r+0x1ee>
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d0c5      	beq.n	801774a <_vfiprintf_r+0x176>
 80177be:	9105      	str	r1, [sp, #20]
 80177c0:	e7c3      	b.n	801774a <_vfiprintf_r+0x176>
 80177c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80177c6:	4604      	mov	r4, r0
 80177c8:	2301      	movs	r3, #1
 80177ca:	e7f0      	b.n	80177ae <_vfiprintf_r+0x1da>
 80177cc:	ab03      	add	r3, sp, #12
 80177ce:	9300      	str	r3, [sp, #0]
 80177d0:	462a      	mov	r2, r5
 80177d2:	4b16      	ldr	r3, [pc, #88]	; (801782c <_vfiprintf_r+0x258>)
 80177d4:	a904      	add	r1, sp, #16
 80177d6:	4630      	mov	r0, r6
 80177d8:	f3af 8000 	nop.w
 80177dc:	4607      	mov	r7, r0
 80177de:	1c78      	adds	r0, r7, #1
 80177e0:	d1d6      	bne.n	8017790 <_vfiprintf_r+0x1bc>
 80177e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80177e4:	07d9      	lsls	r1, r3, #31
 80177e6:	d405      	bmi.n	80177f4 <_vfiprintf_r+0x220>
 80177e8:	89ab      	ldrh	r3, [r5, #12]
 80177ea:	059a      	lsls	r2, r3, #22
 80177ec:	d402      	bmi.n	80177f4 <_vfiprintf_r+0x220>
 80177ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80177f0:	f7ff fdfc 	bl	80173ec <__retarget_lock_release_recursive>
 80177f4:	89ab      	ldrh	r3, [r5, #12]
 80177f6:	065b      	lsls	r3, r3, #25
 80177f8:	f53f af12 	bmi.w	8017620 <_vfiprintf_r+0x4c>
 80177fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177fe:	e711      	b.n	8017624 <_vfiprintf_r+0x50>
 8017800:	ab03      	add	r3, sp, #12
 8017802:	9300      	str	r3, [sp, #0]
 8017804:	462a      	mov	r2, r5
 8017806:	4b09      	ldr	r3, [pc, #36]	; (801782c <_vfiprintf_r+0x258>)
 8017808:	a904      	add	r1, sp, #16
 801780a:	4630      	mov	r0, r6
 801780c:	f000 f880 	bl	8017910 <_printf_i>
 8017810:	e7e4      	b.n	80177dc <_vfiprintf_r+0x208>
 8017812:	bf00      	nop
 8017814:	0801bd0c 	.word	0x0801bd0c
 8017818:	0801bd2c 	.word	0x0801bd2c
 801781c:	0801bcec 	.word	0x0801bcec
 8017820:	0801bd50 	.word	0x0801bd50
 8017824:	0801bd5a 	.word	0x0801bd5a
 8017828:	00000000 	.word	0x00000000
 801782c:	080175af 	.word	0x080175af
 8017830:	0801bd56 	.word	0x0801bd56

08017834 <_printf_common>:
 8017834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017838:	4616      	mov	r6, r2
 801783a:	4699      	mov	r9, r3
 801783c:	688a      	ldr	r2, [r1, #8]
 801783e:	690b      	ldr	r3, [r1, #16]
 8017840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017844:	4293      	cmp	r3, r2
 8017846:	bfb8      	it	lt
 8017848:	4613      	movlt	r3, r2
 801784a:	6033      	str	r3, [r6, #0]
 801784c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017850:	4607      	mov	r7, r0
 8017852:	460c      	mov	r4, r1
 8017854:	b10a      	cbz	r2, 801785a <_printf_common+0x26>
 8017856:	3301      	adds	r3, #1
 8017858:	6033      	str	r3, [r6, #0]
 801785a:	6823      	ldr	r3, [r4, #0]
 801785c:	0699      	lsls	r1, r3, #26
 801785e:	bf42      	ittt	mi
 8017860:	6833      	ldrmi	r3, [r6, #0]
 8017862:	3302      	addmi	r3, #2
 8017864:	6033      	strmi	r3, [r6, #0]
 8017866:	6825      	ldr	r5, [r4, #0]
 8017868:	f015 0506 	ands.w	r5, r5, #6
 801786c:	d106      	bne.n	801787c <_printf_common+0x48>
 801786e:	f104 0a19 	add.w	sl, r4, #25
 8017872:	68e3      	ldr	r3, [r4, #12]
 8017874:	6832      	ldr	r2, [r6, #0]
 8017876:	1a9b      	subs	r3, r3, r2
 8017878:	42ab      	cmp	r3, r5
 801787a:	dc26      	bgt.n	80178ca <_printf_common+0x96>
 801787c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017880:	1e13      	subs	r3, r2, #0
 8017882:	6822      	ldr	r2, [r4, #0]
 8017884:	bf18      	it	ne
 8017886:	2301      	movne	r3, #1
 8017888:	0692      	lsls	r2, r2, #26
 801788a:	d42b      	bmi.n	80178e4 <_printf_common+0xb0>
 801788c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017890:	4649      	mov	r1, r9
 8017892:	4638      	mov	r0, r7
 8017894:	47c0      	blx	r8
 8017896:	3001      	adds	r0, #1
 8017898:	d01e      	beq.n	80178d8 <_printf_common+0xa4>
 801789a:	6823      	ldr	r3, [r4, #0]
 801789c:	68e5      	ldr	r5, [r4, #12]
 801789e:	6832      	ldr	r2, [r6, #0]
 80178a0:	f003 0306 	and.w	r3, r3, #6
 80178a4:	2b04      	cmp	r3, #4
 80178a6:	bf08      	it	eq
 80178a8:	1aad      	subeq	r5, r5, r2
 80178aa:	68a3      	ldr	r3, [r4, #8]
 80178ac:	6922      	ldr	r2, [r4, #16]
 80178ae:	bf0c      	ite	eq
 80178b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178b4:	2500      	movne	r5, #0
 80178b6:	4293      	cmp	r3, r2
 80178b8:	bfc4      	itt	gt
 80178ba:	1a9b      	subgt	r3, r3, r2
 80178bc:	18ed      	addgt	r5, r5, r3
 80178be:	2600      	movs	r6, #0
 80178c0:	341a      	adds	r4, #26
 80178c2:	42b5      	cmp	r5, r6
 80178c4:	d11a      	bne.n	80178fc <_printf_common+0xc8>
 80178c6:	2000      	movs	r0, #0
 80178c8:	e008      	b.n	80178dc <_printf_common+0xa8>
 80178ca:	2301      	movs	r3, #1
 80178cc:	4652      	mov	r2, sl
 80178ce:	4649      	mov	r1, r9
 80178d0:	4638      	mov	r0, r7
 80178d2:	47c0      	blx	r8
 80178d4:	3001      	adds	r0, #1
 80178d6:	d103      	bne.n	80178e0 <_printf_common+0xac>
 80178d8:	f04f 30ff 	mov.w	r0, #4294967295
 80178dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178e0:	3501      	adds	r5, #1
 80178e2:	e7c6      	b.n	8017872 <_printf_common+0x3e>
 80178e4:	18e1      	adds	r1, r4, r3
 80178e6:	1c5a      	adds	r2, r3, #1
 80178e8:	2030      	movs	r0, #48	; 0x30
 80178ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80178ee:	4422      	add	r2, r4
 80178f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80178f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80178f8:	3302      	adds	r3, #2
 80178fa:	e7c7      	b.n	801788c <_printf_common+0x58>
 80178fc:	2301      	movs	r3, #1
 80178fe:	4622      	mov	r2, r4
 8017900:	4649      	mov	r1, r9
 8017902:	4638      	mov	r0, r7
 8017904:	47c0      	blx	r8
 8017906:	3001      	adds	r0, #1
 8017908:	d0e6      	beq.n	80178d8 <_printf_common+0xa4>
 801790a:	3601      	adds	r6, #1
 801790c:	e7d9      	b.n	80178c2 <_printf_common+0x8e>
	...

08017910 <_printf_i>:
 8017910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017914:	460c      	mov	r4, r1
 8017916:	4691      	mov	r9, r2
 8017918:	7e27      	ldrb	r7, [r4, #24]
 801791a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801791c:	2f78      	cmp	r7, #120	; 0x78
 801791e:	4680      	mov	r8, r0
 8017920:	469a      	mov	sl, r3
 8017922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017926:	d807      	bhi.n	8017938 <_printf_i+0x28>
 8017928:	2f62      	cmp	r7, #98	; 0x62
 801792a:	d80a      	bhi.n	8017942 <_printf_i+0x32>
 801792c:	2f00      	cmp	r7, #0
 801792e:	f000 80d8 	beq.w	8017ae2 <_printf_i+0x1d2>
 8017932:	2f58      	cmp	r7, #88	; 0x58
 8017934:	f000 80a3 	beq.w	8017a7e <_printf_i+0x16e>
 8017938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801793c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017940:	e03a      	b.n	80179b8 <_printf_i+0xa8>
 8017942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017946:	2b15      	cmp	r3, #21
 8017948:	d8f6      	bhi.n	8017938 <_printf_i+0x28>
 801794a:	a001      	add	r0, pc, #4	; (adr r0, 8017950 <_printf_i+0x40>)
 801794c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017950:	080179a9 	.word	0x080179a9
 8017954:	080179bd 	.word	0x080179bd
 8017958:	08017939 	.word	0x08017939
 801795c:	08017939 	.word	0x08017939
 8017960:	08017939 	.word	0x08017939
 8017964:	08017939 	.word	0x08017939
 8017968:	080179bd 	.word	0x080179bd
 801796c:	08017939 	.word	0x08017939
 8017970:	08017939 	.word	0x08017939
 8017974:	08017939 	.word	0x08017939
 8017978:	08017939 	.word	0x08017939
 801797c:	08017ac9 	.word	0x08017ac9
 8017980:	080179ed 	.word	0x080179ed
 8017984:	08017aab 	.word	0x08017aab
 8017988:	08017939 	.word	0x08017939
 801798c:	08017939 	.word	0x08017939
 8017990:	08017aeb 	.word	0x08017aeb
 8017994:	08017939 	.word	0x08017939
 8017998:	080179ed 	.word	0x080179ed
 801799c:	08017939 	.word	0x08017939
 80179a0:	08017939 	.word	0x08017939
 80179a4:	08017ab3 	.word	0x08017ab3
 80179a8:	680b      	ldr	r3, [r1, #0]
 80179aa:	1d1a      	adds	r2, r3, #4
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	600a      	str	r2, [r1, #0]
 80179b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80179b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80179b8:	2301      	movs	r3, #1
 80179ba:	e0a3      	b.n	8017b04 <_printf_i+0x1f4>
 80179bc:	6825      	ldr	r5, [r4, #0]
 80179be:	6808      	ldr	r0, [r1, #0]
 80179c0:	062e      	lsls	r6, r5, #24
 80179c2:	f100 0304 	add.w	r3, r0, #4
 80179c6:	d50a      	bpl.n	80179de <_printf_i+0xce>
 80179c8:	6805      	ldr	r5, [r0, #0]
 80179ca:	600b      	str	r3, [r1, #0]
 80179cc:	2d00      	cmp	r5, #0
 80179ce:	da03      	bge.n	80179d8 <_printf_i+0xc8>
 80179d0:	232d      	movs	r3, #45	; 0x2d
 80179d2:	426d      	negs	r5, r5
 80179d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179d8:	485e      	ldr	r0, [pc, #376]	; (8017b54 <_printf_i+0x244>)
 80179da:	230a      	movs	r3, #10
 80179dc:	e019      	b.n	8017a12 <_printf_i+0x102>
 80179de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80179e2:	6805      	ldr	r5, [r0, #0]
 80179e4:	600b      	str	r3, [r1, #0]
 80179e6:	bf18      	it	ne
 80179e8:	b22d      	sxthne	r5, r5
 80179ea:	e7ef      	b.n	80179cc <_printf_i+0xbc>
 80179ec:	680b      	ldr	r3, [r1, #0]
 80179ee:	6825      	ldr	r5, [r4, #0]
 80179f0:	1d18      	adds	r0, r3, #4
 80179f2:	6008      	str	r0, [r1, #0]
 80179f4:	0628      	lsls	r0, r5, #24
 80179f6:	d501      	bpl.n	80179fc <_printf_i+0xec>
 80179f8:	681d      	ldr	r5, [r3, #0]
 80179fa:	e002      	b.n	8017a02 <_printf_i+0xf2>
 80179fc:	0669      	lsls	r1, r5, #25
 80179fe:	d5fb      	bpl.n	80179f8 <_printf_i+0xe8>
 8017a00:	881d      	ldrh	r5, [r3, #0]
 8017a02:	4854      	ldr	r0, [pc, #336]	; (8017b54 <_printf_i+0x244>)
 8017a04:	2f6f      	cmp	r7, #111	; 0x6f
 8017a06:	bf0c      	ite	eq
 8017a08:	2308      	moveq	r3, #8
 8017a0a:	230a      	movne	r3, #10
 8017a0c:	2100      	movs	r1, #0
 8017a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a12:	6866      	ldr	r6, [r4, #4]
 8017a14:	60a6      	str	r6, [r4, #8]
 8017a16:	2e00      	cmp	r6, #0
 8017a18:	bfa2      	ittt	ge
 8017a1a:	6821      	ldrge	r1, [r4, #0]
 8017a1c:	f021 0104 	bicge.w	r1, r1, #4
 8017a20:	6021      	strge	r1, [r4, #0]
 8017a22:	b90d      	cbnz	r5, 8017a28 <_printf_i+0x118>
 8017a24:	2e00      	cmp	r6, #0
 8017a26:	d04d      	beq.n	8017ac4 <_printf_i+0x1b4>
 8017a28:	4616      	mov	r6, r2
 8017a2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8017a2e:	fb03 5711 	mls	r7, r3, r1, r5
 8017a32:	5dc7      	ldrb	r7, [r0, r7]
 8017a34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017a38:	462f      	mov	r7, r5
 8017a3a:	42bb      	cmp	r3, r7
 8017a3c:	460d      	mov	r5, r1
 8017a3e:	d9f4      	bls.n	8017a2a <_printf_i+0x11a>
 8017a40:	2b08      	cmp	r3, #8
 8017a42:	d10b      	bne.n	8017a5c <_printf_i+0x14c>
 8017a44:	6823      	ldr	r3, [r4, #0]
 8017a46:	07df      	lsls	r7, r3, #31
 8017a48:	d508      	bpl.n	8017a5c <_printf_i+0x14c>
 8017a4a:	6923      	ldr	r3, [r4, #16]
 8017a4c:	6861      	ldr	r1, [r4, #4]
 8017a4e:	4299      	cmp	r1, r3
 8017a50:	bfde      	ittt	le
 8017a52:	2330      	movle	r3, #48	; 0x30
 8017a54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017a58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017a5c:	1b92      	subs	r2, r2, r6
 8017a5e:	6122      	str	r2, [r4, #16]
 8017a60:	f8cd a000 	str.w	sl, [sp]
 8017a64:	464b      	mov	r3, r9
 8017a66:	aa03      	add	r2, sp, #12
 8017a68:	4621      	mov	r1, r4
 8017a6a:	4640      	mov	r0, r8
 8017a6c:	f7ff fee2 	bl	8017834 <_printf_common>
 8017a70:	3001      	adds	r0, #1
 8017a72:	d14c      	bne.n	8017b0e <_printf_i+0x1fe>
 8017a74:	f04f 30ff 	mov.w	r0, #4294967295
 8017a78:	b004      	add	sp, #16
 8017a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a7e:	4835      	ldr	r0, [pc, #212]	; (8017b54 <_printf_i+0x244>)
 8017a80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017a84:	6823      	ldr	r3, [r4, #0]
 8017a86:	680e      	ldr	r6, [r1, #0]
 8017a88:	061f      	lsls	r7, r3, #24
 8017a8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8017a8e:	600e      	str	r6, [r1, #0]
 8017a90:	d514      	bpl.n	8017abc <_printf_i+0x1ac>
 8017a92:	07d9      	lsls	r1, r3, #31
 8017a94:	bf44      	itt	mi
 8017a96:	f043 0320 	orrmi.w	r3, r3, #32
 8017a9a:	6023      	strmi	r3, [r4, #0]
 8017a9c:	b91d      	cbnz	r5, 8017aa6 <_printf_i+0x196>
 8017a9e:	6823      	ldr	r3, [r4, #0]
 8017aa0:	f023 0320 	bic.w	r3, r3, #32
 8017aa4:	6023      	str	r3, [r4, #0]
 8017aa6:	2310      	movs	r3, #16
 8017aa8:	e7b0      	b.n	8017a0c <_printf_i+0xfc>
 8017aaa:	6823      	ldr	r3, [r4, #0]
 8017aac:	f043 0320 	orr.w	r3, r3, #32
 8017ab0:	6023      	str	r3, [r4, #0]
 8017ab2:	2378      	movs	r3, #120	; 0x78
 8017ab4:	4828      	ldr	r0, [pc, #160]	; (8017b58 <_printf_i+0x248>)
 8017ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017aba:	e7e3      	b.n	8017a84 <_printf_i+0x174>
 8017abc:	065e      	lsls	r6, r3, #25
 8017abe:	bf48      	it	mi
 8017ac0:	b2ad      	uxthmi	r5, r5
 8017ac2:	e7e6      	b.n	8017a92 <_printf_i+0x182>
 8017ac4:	4616      	mov	r6, r2
 8017ac6:	e7bb      	b.n	8017a40 <_printf_i+0x130>
 8017ac8:	680b      	ldr	r3, [r1, #0]
 8017aca:	6826      	ldr	r6, [r4, #0]
 8017acc:	6960      	ldr	r0, [r4, #20]
 8017ace:	1d1d      	adds	r5, r3, #4
 8017ad0:	600d      	str	r5, [r1, #0]
 8017ad2:	0635      	lsls	r5, r6, #24
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	d501      	bpl.n	8017adc <_printf_i+0x1cc>
 8017ad8:	6018      	str	r0, [r3, #0]
 8017ada:	e002      	b.n	8017ae2 <_printf_i+0x1d2>
 8017adc:	0671      	lsls	r1, r6, #25
 8017ade:	d5fb      	bpl.n	8017ad8 <_printf_i+0x1c8>
 8017ae0:	8018      	strh	r0, [r3, #0]
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	6123      	str	r3, [r4, #16]
 8017ae6:	4616      	mov	r6, r2
 8017ae8:	e7ba      	b.n	8017a60 <_printf_i+0x150>
 8017aea:	680b      	ldr	r3, [r1, #0]
 8017aec:	1d1a      	adds	r2, r3, #4
 8017aee:	600a      	str	r2, [r1, #0]
 8017af0:	681e      	ldr	r6, [r3, #0]
 8017af2:	6862      	ldr	r2, [r4, #4]
 8017af4:	2100      	movs	r1, #0
 8017af6:	4630      	mov	r0, r6
 8017af8:	f7e8 fbf2 	bl	80002e0 <memchr>
 8017afc:	b108      	cbz	r0, 8017b02 <_printf_i+0x1f2>
 8017afe:	1b80      	subs	r0, r0, r6
 8017b00:	6060      	str	r0, [r4, #4]
 8017b02:	6863      	ldr	r3, [r4, #4]
 8017b04:	6123      	str	r3, [r4, #16]
 8017b06:	2300      	movs	r3, #0
 8017b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b0c:	e7a8      	b.n	8017a60 <_printf_i+0x150>
 8017b0e:	6923      	ldr	r3, [r4, #16]
 8017b10:	4632      	mov	r2, r6
 8017b12:	4649      	mov	r1, r9
 8017b14:	4640      	mov	r0, r8
 8017b16:	47d0      	blx	sl
 8017b18:	3001      	adds	r0, #1
 8017b1a:	d0ab      	beq.n	8017a74 <_printf_i+0x164>
 8017b1c:	6823      	ldr	r3, [r4, #0]
 8017b1e:	079b      	lsls	r3, r3, #30
 8017b20:	d413      	bmi.n	8017b4a <_printf_i+0x23a>
 8017b22:	68e0      	ldr	r0, [r4, #12]
 8017b24:	9b03      	ldr	r3, [sp, #12]
 8017b26:	4298      	cmp	r0, r3
 8017b28:	bfb8      	it	lt
 8017b2a:	4618      	movlt	r0, r3
 8017b2c:	e7a4      	b.n	8017a78 <_printf_i+0x168>
 8017b2e:	2301      	movs	r3, #1
 8017b30:	4632      	mov	r2, r6
 8017b32:	4649      	mov	r1, r9
 8017b34:	4640      	mov	r0, r8
 8017b36:	47d0      	blx	sl
 8017b38:	3001      	adds	r0, #1
 8017b3a:	d09b      	beq.n	8017a74 <_printf_i+0x164>
 8017b3c:	3501      	adds	r5, #1
 8017b3e:	68e3      	ldr	r3, [r4, #12]
 8017b40:	9903      	ldr	r1, [sp, #12]
 8017b42:	1a5b      	subs	r3, r3, r1
 8017b44:	42ab      	cmp	r3, r5
 8017b46:	dcf2      	bgt.n	8017b2e <_printf_i+0x21e>
 8017b48:	e7eb      	b.n	8017b22 <_printf_i+0x212>
 8017b4a:	2500      	movs	r5, #0
 8017b4c:	f104 0619 	add.w	r6, r4, #25
 8017b50:	e7f5      	b.n	8017b3e <_printf_i+0x22e>
 8017b52:	bf00      	nop
 8017b54:	0801bd61 	.word	0x0801bd61
 8017b58:	0801bd72 	.word	0x0801bd72

08017b5c <cleanup_glue>:
 8017b5c:	b538      	push	{r3, r4, r5, lr}
 8017b5e:	460c      	mov	r4, r1
 8017b60:	6809      	ldr	r1, [r1, #0]
 8017b62:	4605      	mov	r5, r0
 8017b64:	b109      	cbz	r1, 8017b6a <cleanup_glue+0xe>
 8017b66:	f7ff fff9 	bl	8017b5c <cleanup_glue>
 8017b6a:	4621      	mov	r1, r4
 8017b6c:	4628      	mov	r0, r5
 8017b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b72:	f7ff bc5b 	b.w	801742c <_free_r>
	...

08017b78 <_reclaim_reent>:
 8017b78:	4b2c      	ldr	r3, [pc, #176]	; (8017c2c <_reclaim_reent+0xb4>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	4283      	cmp	r3, r0
 8017b7e:	b570      	push	{r4, r5, r6, lr}
 8017b80:	4604      	mov	r4, r0
 8017b82:	d051      	beq.n	8017c28 <_reclaim_reent+0xb0>
 8017b84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017b86:	b143      	cbz	r3, 8017b9a <_reclaim_reent+0x22>
 8017b88:	68db      	ldr	r3, [r3, #12]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d14a      	bne.n	8017c24 <_reclaim_reent+0xac>
 8017b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b90:	6819      	ldr	r1, [r3, #0]
 8017b92:	b111      	cbz	r1, 8017b9a <_reclaim_reent+0x22>
 8017b94:	4620      	mov	r0, r4
 8017b96:	f7ff fc49 	bl	801742c <_free_r>
 8017b9a:	6961      	ldr	r1, [r4, #20]
 8017b9c:	b111      	cbz	r1, 8017ba4 <_reclaim_reent+0x2c>
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	f7ff fc44 	bl	801742c <_free_r>
 8017ba4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017ba6:	b111      	cbz	r1, 8017bae <_reclaim_reent+0x36>
 8017ba8:	4620      	mov	r0, r4
 8017baa:	f7ff fc3f 	bl	801742c <_free_r>
 8017bae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017bb0:	b111      	cbz	r1, 8017bb8 <_reclaim_reent+0x40>
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f7ff fc3a 	bl	801742c <_free_r>
 8017bb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017bba:	b111      	cbz	r1, 8017bc2 <_reclaim_reent+0x4a>
 8017bbc:	4620      	mov	r0, r4
 8017bbe:	f7ff fc35 	bl	801742c <_free_r>
 8017bc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017bc4:	b111      	cbz	r1, 8017bcc <_reclaim_reent+0x54>
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	f7ff fc30 	bl	801742c <_free_r>
 8017bcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017bce:	b111      	cbz	r1, 8017bd6 <_reclaim_reent+0x5e>
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	f7ff fc2b 	bl	801742c <_free_r>
 8017bd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017bd8:	b111      	cbz	r1, 8017be0 <_reclaim_reent+0x68>
 8017bda:	4620      	mov	r0, r4
 8017bdc:	f7ff fc26 	bl	801742c <_free_r>
 8017be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017be2:	b111      	cbz	r1, 8017bea <_reclaim_reent+0x72>
 8017be4:	4620      	mov	r0, r4
 8017be6:	f7ff fc21 	bl	801742c <_free_r>
 8017bea:	69a3      	ldr	r3, [r4, #24]
 8017bec:	b1e3      	cbz	r3, 8017c28 <_reclaim_reent+0xb0>
 8017bee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017bf0:	4620      	mov	r0, r4
 8017bf2:	4798      	blx	r3
 8017bf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017bf6:	b1b9      	cbz	r1, 8017c28 <_reclaim_reent+0xb0>
 8017bf8:	4620      	mov	r0, r4
 8017bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bfe:	f7ff bfad 	b.w	8017b5c <cleanup_glue>
 8017c02:	5949      	ldr	r1, [r1, r5]
 8017c04:	b941      	cbnz	r1, 8017c18 <_reclaim_reent+0xa0>
 8017c06:	3504      	adds	r5, #4
 8017c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c0a:	2d80      	cmp	r5, #128	; 0x80
 8017c0c:	68d9      	ldr	r1, [r3, #12]
 8017c0e:	d1f8      	bne.n	8017c02 <_reclaim_reent+0x8a>
 8017c10:	4620      	mov	r0, r4
 8017c12:	f7ff fc0b 	bl	801742c <_free_r>
 8017c16:	e7ba      	b.n	8017b8e <_reclaim_reent+0x16>
 8017c18:	680e      	ldr	r6, [r1, #0]
 8017c1a:	4620      	mov	r0, r4
 8017c1c:	f7ff fc06 	bl	801742c <_free_r>
 8017c20:	4631      	mov	r1, r6
 8017c22:	e7ef      	b.n	8017c04 <_reclaim_reent+0x8c>
 8017c24:	2500      	movs	r5, #0
 8017c26:	e7ef      	b.n	8017c08 <_reclaim_reent+0x90>
 8017c28:	bd70      	pop	{r4, r5, r6, pc}
 8017c2a:	bf00      	nop
 8017c2c:	24000060 	.word	0x24000060

08017c30 <_sbrk_r>:
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	4d06      	ldr	r5, [pc, #24]	; (8017c4c <_sbrk_r+0x1c>)
 8017c34:	2300      	movs	r3, #0
 8017c36:	4604      	mov	r4, r0
 8017c38:	4608      	mov	r0, r1
 8017c3a:	602b      	str	r3, [r5, #0]
 8017c3c:	f7e9 fc22 	bl	8001484 <_sbrk>
 8017c40:	1c43      	adds	r3, r0, #1
 8017c42:	d102      	bne.n	8017c4a <_sbrk_r+0x1a>
 8017c44:	682b      	ldr	r3, [r5, #0]
 8017c46:	b103      	cbz	r3, 8017c4a <_sbrk_r+0x1a>
 8017c48:	6023      	str	r3, [r4, #0]
 8017c4a:	bd38      	pop	{r3, r4, r5, pc}
 8017c4c:	2400fdc4 	.word	0x2400fdc4

08017c50 <_raise_r>:
 8017c50:	291f      	cmp	r1, #31
 8017c52:	b538      	push	{r3, r4, r5, lr}
 8017c54:	4604      	mov	r4, r0
 8017c56:	460d      	mov	r5, r1
 8017c58:	d904      	bls.n	8017c64 <_raise_r+0x14>
 8017c5a:	2316      	movs	r3, #22
 8017c5c:	6003      	str	r3, [r0, #0]
 8017c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c62:	bd38      	pop	{r3, r4, r5, pc}
 8017c64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017c66:	b112      	cbz	r2, 8017c6e <_raise_r+0x1e>
 8017c68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c6c:	b94b      	cbnz	r3, 8017c82 <_raise_r+0x32>
 8017c6e:	4620      	mov	r0, r4
 8017c70:	f000 f830 	bl	8017cd4 <_getpid_r>
 8017c74:	462a      	mov	r2, r5
 8017c76:	4601      	mov	r1, r0
 8017c78:	4620      	mov	r0, r4
 8017c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c7e:	f000 b817 	b.w	8017cb0 <_kill_r>
 8017c82:	2b01      	cmp	r3, #1
 8017c84:	d00a      	beq.n	8017c9c <_raise_r+0x4c>
 8017c86:	1c59      	adds	r1, r3, #1
 8017c88:	d103      	bne.n	8017c92 <_raise_r+0x42>
 8017c8a:	2316      	movs	r3, #22
 8017c8c:	6003      	str	r3, [r0, #0]
 8017c8e:	2001      	movs	r0, #1
 8017c90:	e7e7      	b.n	8017c62 <_raise_r+0x12>
 8017c92:	2400      	movs	r4, #0
 8017c94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017c98:	4628      	mov	r0, r5
 8017c9a:	4798      	blx	r3
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	e7e0      	b.n	8017c62 <_raise_r+0x12>

08017ca0 <raise>:
 8017ca0:	4b02      	ldr	r3, [pc, #8]	; (8017cac <raise+0xc>)
 8017ca2:	4601      	mov	r1, r0
 8017ca4:	6818      	ldr	r0, [r3, #0]
 8017ca6:	f7ff bfd3 	b.w	8017c50 <_raise_r>
 8017caa:	bf00      	nop
 8017cac:	24000060 	.word	0x24000060

08017cb0 <_kill_r>:
 8017cb0:	b538      	push	{r3, r4, r5, lr}
 8017cb2:	4d07      	ldr	r5, [pc, #28]	; (8017cd0 <_kill_r+0x20>)
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	4608      	mov	r0, r1
 8017cba:	4611      	mov	r1, r2
 8017cbc:	602b      	str	r3, [r5, #0]
 8017cbe:	f7e9 fbad 	bl	800141c <_kill>
 8017cc2:	1c43      	adds	r3, r0, #1
 8017cc4:	d102      	bne.n	8017ccc <_kill_r+0x1c>
 8017cc6:	682b      	ldr	r3, [r5, #0]
 8017cc8:	b103      	cbz	r3, 8017ccc <_kill_r+0x1c>
 8017cca:	6023      	str	r3, [r4, #0]
 8017ccc:	bd38      	pop	{r3, r4, r5, pc}
 8017cce:	bf00      	nop
 8017cd0:	2400fdc4 	.word	0x2400fdc4

08017cd4 <_getpid_r>:
 8017cd4:	f7e9 bba0 	b.w	8001418 <_getpid>

08017cd8 <__sread>:
 8017cd8:	b510      	push	{r4, lr}
 8017cda:	460c      	mov	r4, r1
 8017cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ce0:	f000 fa64 	bl	80181ac <_read_r>
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	bfab      	itete	ge
 8017ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017cea:	89a3      	ldrhlt	r3, [r4, #12]
 8017cec:	181b      	addge	r3, r3, r0
 8017cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017cf2:	bfac      	ite	ge
 8017cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8017cf6:	81a3      	strhlt	r3, [r4, #12]
 8017cf8:	bd10      	pop	{r4, pc}

08017cfa <__swrite>:
 8017cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cfe:	461f      	mov	r7, r3
 8017d00:	898b      	ldrh	r3, [r1, #12]
 8017d02:	05db      	lsls	r3, r3, #23
 8017d04:	4605      	mov	r5, r0
 8017d06:	460c      	mov	r4, r1
 8017d08:	4616      	mov	r6, r2
 8017d0a:	d505      	bpl.n	8017d18 <__swrite+0x1e>
 8017d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d10:	2302      	movs	r3, #2
 8017d12:	2200      	movs	r2, #0
 8017d14:	f000 f9c8 	bl	80180a8 <_lseek_r>
 8017d18:	89a3      	ldrh	r3, [r4, #12]
 8017d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d22:	81a3      	strh	r3, [r4, #12]
 8017d24:	4632      	mov	r2, r6
 8017d26:	463b      	mov	r3, r7
 8017d28:	4628      	mov	r0, r5
 8017d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d2e:	f000 b869 	b.w	8017e04 <_write_r>

08017d32 <__sseek>:
 8017d32:	b510      	push	{r4, lr}
 8017d34:	460c      	mov	r4, r1
 8017d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d3a:	f000 f9b5 	bl	80180a8 <_lseek_r>
 8017d3e:	1c43      	adds	r3, r0, #1
 8017d40:	89a3      	ldrh	r3, [r4, #12]
 8017d42:	bf15      	itete	ne
 8017d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8017d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017d4e:	81a3      	strheq	r3, [r4, #12]
 8017d50:	bf18      	it	ne
 8017d52:	81a3      	strhne	r3, [r4, #12]
 8017d54:	bd10      	pop	{r4, pc}

08017d56 <__sclose>:
 8017d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d5a:	f000 b8d3 	b.w	8017f04 <_close_r>
	...

08017d60 <__swbuf_r>:
 8017d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d62:	460e      	mov	r6, r1
 8017d64:	4614      	mov	r4, r2
 8017d66:	4605      	mov	r5, r0
 8017d68:	b118      	cbz	r0, 8017d72 <__swbuf_r+0x12>
 8017d6a:	6983      	ldr	r3, [r0, #24]
 8017d6c:	b90b      	cbnz	r3, 8017d72 <__swbuf_r+0x12>
 8017d6e:	f7ff fa67 	bl	8017240 <__sinit>
 8017d72:	4b21      	ldr	r3, [pc, #132]	; (8017df8 <__swbuf_r+0x98>)
 8017d74:	429c      	cmp	r4, r3
 8017d76:	d12b      	bne.n	8017dd0 <__swbuf_r+0x70>
 8017d78:	686c      	ldr	r4, [r5, #4]
 8017d7a:	69a3      	ldr	r3, [r4, #24]
 8017d7c:	60a3      	str	r3, [r4, #8]
 8017d7e:	89a3      	ldrh	r3, [r4, #12]
 8017d80:	071a      	lsls	r2, r3, #28
 8017d82:	d52f      	bpl.n	8017de4 <__swbuf_r+0x84>
 8017d84:	6923      	ldr	r3, [r4, #16]
 8017d86:	b36b      	cbz	r3, 8017de4 <__swbuf_r+0x84>
 8017d88:	6923      	ldr	r3, [r4, #16]
 8017d8a:	6820      	ldr	r0, [r4, #0]
 8017d8c:	1ac0      	subs	r0, r0, r3
 8017d8e:	6963      	ldr	r3, [r4, #20]
 8017d90:	b2f6      	uxtb	r6, r6
 8017d92:	4283      	cmp	r3, r0
 8017d94:	4637      	mov	r7, r6
 8017d96:	dc04      	bgt.n	8017da2 <__swbuf_r+0x42>
 8017d98:	4621      	mov	r1, r4
 8017d9a:	4628      	mov	r0, r5
 8017d9c:	f000 f948 	bl	8018030 <_fflush_r>
 8017da0:	bb30      	cbnz	r0, 8017df0 <__swbuf_r+0x90>
 8017da2:	68a3      	ldr	r3, [r4, #8]
 8017da4:	3b01      	subs	r3, #1
 8017da6:	60a3      	str	r3, [r4, #8]
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	1c5a      	adds	r2, r3, #1
 8017dac:	6022      	str	r2, [r4, #0]
 8017dae:	701e      	strb	r6, [r3, #0]
 8017db0:	6963      	ldr	r3, [r4, #20]
 8017db2:	3001      	adds	r0, #1
 8017db4:	4283      	cmp	r3, r0
 8017db6:	d004      	beq.n	8017dc2 <__swbuf_r+0x62>
 8017db8:	89a3      	ldrh	r3, [r4, #12]
 8017dba:	07db      	lsls	r3, r3, #31
 8017dbc:	d506      	bpl.n	8017dcc <__swbuf_r+0x6c>
 8017dbe:	2e0a      	cmp	r6, #10
 8017dc0:	d104      	bne.n	8017dcc <__swbuf_r+0x6c>
 8017dc2:	4621      	mov	r1, r4
 8017dc4:	4628      	mov	r0, r5
 8017dc6:	f000 f933 	bl	8018030 <_fflush_r>
 8017dca:	b988      	cbnz	r0, 8017df0 <__swbuf_r+0x90>
 8017dcc:	4638      	mov	r0, r7
 8017dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dd0:	4b0a      	ldr	r3, [pc, #40]	; (8017dfc <__swbuf_r+0x9c>)
 8017dd2:	429c      	cmp	r4, r3
 8017dd4:	d101      	bne.n	8017dda <__swbuf_r+0x7a>
 8017dd6:	68ac      	ldr	r4, [r5, #8]
 8017dd8:	e7cf      	b.n	8017d7a <__swbuf_r+0x1a>
 8017dda:	4b09      	ldr	r3, [pc, #36]	; (8017e00 <__swbuf_r+0xa0>)
 8017ddc:	429c      	cmp	r4, r3
 8017dde:	bf08      	it	eq
 8017de0:	68ec      	ldreq	r4, [r5, #12]
 8017de2:	e7ca      	b.n	8017d7a <__swbuf_r+0x1a>
 8017de4:	4621      	mov	r1, r4
 8017de6:	4628      	mov	r0, r5
 8017de8:	f000 f81e 	bl	8017e28 <__swsetup_r>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	d0cb      	beq.n	8017d88 <__swbuf_r+0x28>
 8017df0:	f04f 37ff 	mov.w	r7, #4294967295
 8017df4:	e7ea      	b.n	8017dcc <__swbuf_r+0x6c>
 8017df6:	bf00      	nop
 8017df8:	0801bd0c 	.word	0x0801bd0c
 8017dfc:	0801bd2c 	.word	0x0801bd2c
 8017e00:	0801bcec 	.word	0x0801bcec

08017e04 <_write_r>:
 8017e04:	b538      	push	{r3, r4, r5, lr}
 8017e06:	4d07      	ldr	r5, [pc, #28]	; (8017e24 <_write_r+0x20>)
 8017e08:	4604      	mov	r4, r0
 8017e0a:	4608      	mov	r0, r1
 8017e0c:	4611      	mov	r1, r2
 8017e0e:	2200      	movs	r2, #0
 8017e10:	602a      	str	r2, [r5, #0]
 8017e12:	461a      	mov	r2, r3
 8017e14:	f7e9 fb1d 	bl	8001452 <_write>
 8017e18:	1c43      	adds	r3, r0, #1
 8017e1a:	d102      	bne.n	8017e22 <_write_r+0x1e>
 8017e1c:	682b      	ldr	r3, [r5, #0]
 8017e1e:	b103      	cbz	r3, 8017e22 <_write_r+0x1e>
 8017e20:	6023      	str	r3, [r4, #0]
 8017e22:	bd38      	pop	{r3, r4, r5, pc}
 8017e24:	2400fdc4 	.word	0x2400fdc4

08017e28 <__swsetup_r>:
 8017e28:	4b32      	ldr	r3, [pc, #200]	; (8017ef4 <__swsetup_r+0xcc>)
 8017e2a:	b570      	push	{r4, r5, r6, lr}
 8017e2c:	681d      	ldr	r5, [r3, #0]
 8017e2e:	4606      	mov	r6, r0
 8017e30:	460c      	mov	r4, r1
 8017e32:	b125      	cbz	r5, 8017e3e <__swsetup_r+0x16>
 8017e34:	69ab      	ldr	r3, [r5, #24]
 8017e36:	b913      	cbnz	r3, 8017e3e <__swsetup_r+0x16>
 8017e38:	4628      	mov	r0, r5
 8017e3a:	f7ff fa01 	bl	8017240 <__sinit>
 8017e3e:	4b2e      	ldr	r3, [pc, #184]	; (8017ef8 <__swsetup_r+0xd0>)
 8017e40:	429c      	cmp	r4, r3
 8017e42:	d10f      	bne.n	8017e64 <__swsetup_r+0x3c>
 8017e44:	686c      	ldr	r4, [r5, #4]
 8017e46:	89a3      	ldrh	r3, [r4, #12]
 8017e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e4c:	0719      	lsls	r1, r3, #28
 8017e4e:	d42c      	bmi.n	8017eaa <__swsetup_r+0x82>
 8017e50:	06dd      	lsls	r5, r3, #27
 8017e52:	d411      	bmi.n	8017e78 <__swsetup_r+0x50>
 8017e54:	2309      	movs	r3, #9
 8017e56:	6033      	str	r3, [r6, #0]
 8017e58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017e5c:	81a3      	strh	r3, [r4, #12]
 8017e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8017e62:	e03e      	b.n	8017ee2 <__swsetup_r+0xba>
 8017e64:	4b25      	ldr	r3, [pc, #148]	; (8017efc <__swsetup_r+0xd4>)
 8017e66:	429c      	cmp	r4, r3
 8017e68:	d101      	bne.n	8017e6e <__swsetup_r+0x46>
 8017e6a:	68ac      	ldr	r4, [r5, #8]
 8017e6c:	e7eb      	b.n	8017e46 <__swsetup_r+0x1e>
 8017e6e:	4b24      	ldr	r3, [pc, #144]	; (8017f00 <__swsetup_r+0xd8>)
 8017e70:	429c      	cmp	r4, r3
 8017e72:	bf08      	it	eq
 8017e74:	68ec      	ldreq	r4, [r5, #12]
 8017e76:	e7e6      	b.n	8017e46 <__swsetup_r+0x1e>
 8017e78:	0758      	lsls	r0, r3, #29
 8017e7a:	d512      	bpl.n	8017ea2 <__swsetup_r+0x7a>
 8017e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e7e:	b141      	cbz	r1, 8017e92 <__swsetup_r+0x6a>
 8017e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e84:	4299      	cmp	r1, r3
 8017e86:	d002      	beq.n	8017e8e <__swsetup_r+0x66>
 8017e88:	4630      	mov	r0, r6
 8017e8a:	f7ff facf 	bl	801742c <_free_r>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	6363      	str	r3, [r4, #52]	; 0x34
 8017e92:	89a3      	ldrh	r3, [r4, #12]
 8017e94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e98:	81a3      	strh	r3, [r4, #12]
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	6063      	str	r3, [r4, #4]
 8017e9e:	6923      	ldr	r3, [r4, #16]
 8017ea0:	6023      	str	r3, [r4, #0]
 8017ea2:	89a3      	ldrh	r3, [r4, #12]
 8017ea4:	f043 0308 	orr.w	r3, r3, #8
 8017ea8:	81a3      	strh	r3, [r4, #12]
 8017eaa:	6923      	ldr	r3, [r4, #16]
 8017eac:	b94b      	cbnz	r3, 8017ec2 <__swsetup_r+0x9a>
 8017eae:	89a3      	ldrh	r3, [r4, #12]
 8017eb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017eb8:	d003      	beq.n	8017ec2 <__swsetup_r+0x9a>
 8017eba:	4621      	mov	r1, r4
 8017ebc:	4630      	mov	r0, r6
 8017ebe:	f000 f929 	bl	8018114 <__smakebuf_r>
 8017ec2:	89a0      	ldrh	r0, [r4, #12]
 8017ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ec8:	f010 0301 	ands.w	r3, r0, #1
 8017ecc:	d00a      	beq.n	8017ee4 <__swsetup_r+0xbc>
 8017ece:	2300      	movs	r3, #0
 8017ed0:	60a3      	str	r3, [r4, #8]
 8017ed2:	6963      	ldr	r3, [r4, #20]
 8017ed4:	425b      	negs	r3, r3
 8017ed6:	61a3      	str	r3, [r4, #24]
 8017ed8:	6923      	ldr	r3, [r4, #16]
 8017eda:	b943      	cbnz	r3, 8017eee <__swsetup_r+0xc6>
 8017edc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017ee0:	d1ba      	bne.n	8017e58 <__swsetup_r+0x30>
 8017ee2:	bd70      	pop	{r4, r5, r6, pc}
 8017ee4:	0781      	lsls	r1, r0, #30
 8017ee6:	bf58      	it	pl
 8017ee8:	6963      	ldrpl	r3, [r4, #20]
 8017eea:	60a3      	str	r3, [r4, #8]
 8017eec:	e7f4      	b.n	8017ed8 <__swsetup_r+0xb0>
 8017eee:	2000      	movs	r0, #0
 8017ef0:	e7f7      	b.n	8017ee2 <__swsetup_r+0xba>
 8017ef2:	bf00      	nop
 8017ef4:	24000060 	.word	0x24000060
 8017ef8:	0801bd0c 	.word	0x0801bd0c
 8017efc:	0801bd2c 	.word	0x0801bd2c
 8017f00:	0801bcec 	.word	0x0801bcec

08017f04 <_close_r>:
 8017f04:	b538      	push	{r3, r4, r5, lr}
 8017f06:	4d06      	ldr	r5, [pc, #24]	; (8017f20 <_close_r+0x1c>)
 8017f08:	2300      	movs	r3, #0
 8017f0a:	4604      	mov	r4, r0
 8017f0c:	4608      	mov	r0, r1
 8017f0e:	602b      	str	r3, [r5, #0]
 8017f10:	f7e9 faac 	bl	800146c <_close>
 8017f14:	1c43      	adds	r3, r0, #1
 8017f16:	d102      	bne.n	8017f1e <_close_r+0x1a>
 8017f18:	682b      	ldr	r3, [r5, #0]
 8017f1a:	b103      	cbz	r3, 8017f1e <_close_r+0x1a>
 8017f1c:	6023      	str	r3, [r4, #0]
 8017f1e:	bd38      	pop	{r3, r4, r5, pc}
 8017f20:	2400fdc4 	.word	0x2400fdc4

08017f24 <__sflush_r>:
 8017f24:	898a      	ldrh	r2, [r1, #12]
 8017f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f2a:	4605      	mov	r5, r0
 8017f2c:	0710      	lsls	r0, r2, #28
 8017f2e:	460c      	mov	r4, r1
 8017f30:	d458      	bmi.n	8017fe4 <__sflush_r+0xc0>
 8017f32:	684b      	ldr	r3, [r1, #4]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	dc05      	bgt.n	8017f44 <__sflush_r+0x20>
 8017f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	dc02      	bgt.n	8017f44 <__sflush_r+0x20>
 8017f3e:	2000      	movs	r0, #0
 8017f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f46:	2e00      	cmp	r6, #0
 8017f48:	d0f9      	beq.n	8017f3e <__sflush_r+0x1a>
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017f50:	682f      	ldr	r7, [r5, #0]
 8017f52:	602b      	str	r3, [r5, #0]
 8017f54:	d032      	beq.n	8017fbc <__sflush_r+0x98>
 8017f56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017f58:	89a3      	ldrh	r3, [r4, #12]
 8017f5a:	075a      	lsls	r2, r3, #29
 8017f5c:	d505      	bpl.n	8017f6a <__sflush_r+0x46>
 8017f5e:	6863      	ldr	r3, [r4, #4]
 8017f60:	1ac0      	subs	r0, r0, r3
 8017f62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017f64:	b10b      	cbz	r3, 8017f6a <__sflush_r+0x46>
 8017f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017f68:	1ac0      	subs	r0, r0, r3
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	4602      	mov	r2, r0
 8017f6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f70:	6a21      	ldr	r1, [r4, #32]
 8017f72:	4628      	mov	r0, r5
 8017f74:	47b0      	blx	r6
 8017f76:	1c43      	adds	r3, r0, #1
 8017f78:	89a3      	ldrh	r3, [r4, #12]
 8017f7a:	d106      	bne.n	8017f8a <__sflush_r+0x66>
 8017f7c:	6829      	ldr	r1, [r5, #0]
 8017f7e:	291d      	cmp	r1, #29
 8017f80:	d82c      	bhi.n	8017fdc <__sflush_r+0xb8>
 8017f82:	4a2a      	ldr	r2, [pc, #168]	; (801802c <__sflush_r+0x108>)
 8017f84:	40ca      	lsrs	r2, r1
 8017f86:	07d6      	lsls	r6, r2, #31
 8017f88:	d528      	bpl.n	8017fdc <__sflush_r+0xb8>
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	6062      	str	r2, [r4, #4]
 8017f8e:	04d9      	lsls	r1, r3, #19
 8017f90:	6922      	ldr	r2, [r4, #16]
 8017f92:	6022      	str	r2, [r4, #0]
 8017f94:	d504      	bpl.n	8017fa0 <__sflush_r+0x7c>
 8017f96:	1c42      	adds	r2, r0, #1
 8017f98:	d101      	bne.n	8017f9e <__sflush_r+0x7a>
 8017f9a:	682b      	ldr	r3, [r5, #0]
 8017f9c:	b903      	cbnz	r3, 8017fa0 <__sflush_r+0x7c>
 8017f9e:	6560      	str	r0, [r4, #84]	; 0x54
 8017fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017fa2:	602f      	str	r7, [r5, #0]
 8017fa4:	2900      	cmp	r1, #0
 8017fa6:	d0ca      	beq.n	8017f3e <__sflush_r+0x1a>
 8017fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fac:	4299      	cmp	r1, r3
 8017fae:	d002      	beq.n	8017fb6 <__sflush_r+0x92>
 8017fb0:	4628      	mov	r0, r5
 8017fb2:	f7ff fa3b 	bl	801742c <_free_r>
 8017fb6:	2000      	movs	r0, #0
 8017fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8017fba:	e7c1      	b.n	8017f40 <__sflush_r+0x1c>
 8017fbc:	6a21      	ldr	r1, [r4, #32]
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	47b0      	blx	r6
 8017fc4:	1c41      	adds	r1, r0, #1
 8017fc6:	d1c7      	bne.n	8017f58 <__sflush_r+0x34>
 8017fc8:	682b      	ldr	r3, [r5, #0]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d0c4      	beq.n	8017f58 <__sflush_r+0x34>
 8017fce:	2b1d      	cmp	r3, #29
 8017fd0:	d001      	beq.n	8017fd6 <__sflush_r+0xb2>
 8017fd2:	2b16      	cmp	r3, #22
 8017fd4:	d101      	bne.n	8017fda <__sflush_r+0xb6>
 8017fd6:	602f      	str	r7, [r5, #0]
 8017fd8:	e7b1      	b.n	8017f3e <__sflush_r+0x1a>
 8017fda:	89a3      	ldrh	r3, [r4, #12]
 8017fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fe0:	81a3      	strh	r3, [r4, #12]
 8017fe2:	e7ad      	b.n	8017f40 <__sflush_r+0x1c>
 8017fe4:	690f      	ldr	r7, [r1, #16]
 8017fe6:	2f00      	cmp	r7, #0
 8017fe8:	d0a9      	beq.n	8017f3e <__sflush_r+0x1a>
 8017fea:	0793      	lsls	r3, r2, #30
 8017fec:	680e      	ldr	r6, [r1, #0]
 8017fee:	bf08      	it	eq
 8017ff0:	694b      	ldreq	r3, [r1, #20]
 8017ff2:	600f      	str	r7, [r1, #0]
 8017ff4:	bf18      	it	ne
 8017ff6:	2300      	movne	r3, #0
 8017ff8:	eba6 0807 	sub.w	r8, r6, r7
 8017ffc:	608b      	str	r3, [r1, #8]
 8017ffe:	f1b8 0f00 	cmp.w	r8, #0
 8018002:	dd9c      	ble.n	8017f3e <__sflush_r+0x1a>
 8018004:	6a21      	ldr	r1, [r4, #32]
 8018006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018008:	4643      	mov	r3, r8
 801800a:	463a      	mov	r2, r7
 801800c:	4628      	mov	r0, r5
 801800e:	47b0      	blx	r6
 8018010:	2800      	cmp	r0, #0
 8018012:	dc06      	bgt.n	8018022 <__sflush_r+0xfe>
 8018014:	89a3      	ldrh	r3, [r4, #12]
 8018016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801801a:	81a3      	strh	r3, [r4, #12]
 801801c:	f04f 30ff 	mov.w	r0, #4294967295
 8018020:	e78e      	b.n	8017f40 <__sflush_r+0x1c>
 8018022:	4407      	add	r7, r0
 8018024:	eba8 0800 	sub.w	r8, r8, r0
 8018028:	e7e9      	b.n	8017ffe <__sflush_r+0xda>
 801802a:	bf00      	nop
 801802c:	20400001 	.word	0x20400001

08018030 <_fflush_r>:
 8018030:	b538      	push	{r3, r4, r5, lr}
 8018032:	690b      	ldr	r3, [r1, #16]
 8018034:	4605      	mov	r5, r0
 8018036:	460c      	mov	r4, r1
 8018038:	b913      	cbnz	r3, 8018040 <_fflush_r+0x10>
 801803a:	2500      	movs	r5, #0
 801803c:	4628      	mov	r0, r5
 801803e:	bd38      	pop	{r3, r4, r5, pc}
 8018040:	b118      	cbz	r0, 801804a <_fflush_r+0x1a>
 8018042:	6983      	ldr	r3, [r0, #24]
 8018044:	b90b      	cbnz	r3, 801804a <_fflush_r+0x1a>
 8018046:	f7ff f8fb 	bl	8017240 <__sinit>
 801804a:	4b14      	ldr	r3, [pc, #80]	; (801809c <_fflush_r+0x6c>)
 801804c:	429c      	cmp	r4, r3
 801804e:	d11b      	bne.n	8018088 <_fflush_r+0x58>
 8018050:	686c      	ldr	r4, [r5, #4]
 8018052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d0ef      	beq.n	801803a <_fflush_r+0xa>
 801805a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801805c:	07d0      	lsls	r0, r2, #31
 801805e:	d404      	bmi.n	801806a <_fflush_r+0x3a>
 8018060:	0599      	lsls	r1, r3, #22
 8018062:	d402      	bmi.n	801806a <_fflush_r+0x3a>
 8018064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018066:	f7ff f9c0 	bl	80173ea <__retarget_lock_acquire_recursive>
 801806a:	4628      	mov	r0, r5
 801806c:	4621      	mov	r1, r4
 801806e:	f7ff ff59 	bl	8017f24 <__sflush_r>
 8018072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018074:	07da      	lsls	r2, r3, #31
 8018076:	4605      	mov	r5, r0
 8018078:	d4e0      	bmi.n	801803c <_fflush_r+0xc>
 801807a:	89a3      	ldrh	r3, [r4, #12]
 801807c:	059b      	lsls	r3, r3, #22
 801807e:	d4dd      	bmi.n	801803c <_fflush_r+0xc>
 8018080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018082:	f7ff f9b3 	bl	80173ec <__retarget_lock_release_recursive>
 8018086:	e7d9      	b.n	801803c <_fflush_r+0xc>
 8018088:	4b05      	ldr	r3, [pc, #20]	; (80180a0 <_fflush_r+0x70>)
 801808a:	429c      	cmp	r4, r3
 801808c:	d101      	bne.n	8018092 <_fflush_r+0x62>
 801808e:	68ac      	ldr	r4, [r5, #8]
 8018090:	e7df      	b.n	8018052 <_fflush_r+0x22>
 8018092:	4b04      	ldr	r3, [pc, #16]	; (80180a4 <_fflush_r+0x74>)
 8018094:	429c      	cmp	r4, r3
 8018096:	bf08      	it	eq
 8018098:	68ec      	ldreq	r4, [r5, #12]
 801809a:	e7da      	b.n	8018052 <_fflush_r+0x22>
 801809c:	0801bd0c 	.word	0x0801bd0c
 80180a0:	0801bd2c 	.word	0x0801bd2c
 80180a4:	0801bcec 	.word	0x0801bcec

080180a8 <_lseek_r>:
 80180a8:	b538      	push	{r3, r4, r5, lr}
 80180aa:	4d07      	ldr	r5, [pc, #28]	; (80180c8 <_lseek_r+0x20>)
 80180ac:	4604      	mov	r4, r0
 80180ae:	4608      	mov	r0, r1
 80180b0:	4611      	mov	r1, r2
 80180b2:	2200      	movs	r2, #0
 80180b4:	602a      	str	r2, [r5, #0]
 80180b6:	461a      	mov	r2, r3
 80180b8:	f7e9 f9e2 	bl	8001480 <_lseek>
 80180bc:	1c43      	adds	r3, r0, #1
 80180be:	d102      	bne.n	80180c6 <_lseek_r+0x1e>
 80180c0:	682b      	ldr	r3, [r5, #0]
 80180c2:	b103      	cbz	r3, 80180c6 <_lseek_r+0x1e>
 80180c4:	6023      	str	r3, [r4, #0]
 80180c6:	bd38      	pop	{r3, r4, r5, pc}
 80180c8:	2400fdc4 	.word	0x2400fdc4

080180cc <__swhatbuf_r>:
 80180cc:	b570      	push	{r4, r5, r6, lr}
 80180ce:	460e      	mov	r6, r1
 80180d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180d4:	2900      	cmp	r1, #0
 80180d6:	b096      	sub	sp, #88	; 0x58
 80180d8:	4614      	mov	r4, r2
 80180da:	461d      	mov	r5, r3
 80180dc:	da07      	bge.n	80180ee <__swhatbuf_r+0x22>
 80180de:	2300      	movs	r3, #0
 80180e0:	602b      	str	r3, [r5, #0]
 80180e2:	89b3      	ldrh	r3, [r6, #12]
 80180e4:	061a      	lsls	r2, r3, #24
 80180e6:	d410      	bmi.n	801810a <__swhatbuf_r+0x3e>
 80180e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180ec:	e00e      	b.n	801810c <__swhatbuf_r+0x40>
 80180ee:	466a      	mov	r2, sp
 80180f0:	f000 f86e 	bl	80181d0 <_fstat_r>
 80180f4:	2800      	cmp	r0, #0
 80180f6:	dbf2      	blt.n	80180de <__swhatbuf_r+0x12>
 80180f8:	9a01      	ldr	r2, [sp, #4]
 80180fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80180fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018102:	425a      	negs	r2, r3
 8018104:	415a      	adcs	r2, r3
 8018106:	602a      	str	r2, [r5, #0]
 8018108:	e7ee      	b.n	80180e8 <__swhatbuf_r+0x1c>
 801810a:	2340      	movs	r3, #64	; 0x40
 801810c:	2000      	movs	r0, #0
 801810e:	6023      	str	r3, [r4, #0]
 8018110:	b016      	add	sp, #88	; 0x58
 8018112:	bd70      	pop	{r4, r5, r6, pc}

08018114 <__smakebuf_r>:
 8018114:	898b      	ldrh	r3, [r1, #12]
 8018116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018118:	079d      	lsls	r5, r3, #30
 801811a:	4606      	mov	r6, r0
 801811c:	460c      	mov	r4, r1
 801811e:	d507      	bpl.n	8018130 <__smakebuf_r+0x1c>
 8018120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018124:	6023      	str	r3, [r4, #0]
 8018126:	6123      	str	r3, [r4, #16]
 8018128:	2301      	movs	r3, #1
 801812a:	6163      	str	r3, [r4, #20]
 801812c:	b002      	add	sp, #8
 801812e:	bd70      	pop	{r4, r5, r6, pc}
 8018130:	ab01      	add	r3, sp, #4
 8018132:	466a      	mov	r2, sp
 8018134:	f7ff ffca 	bl	80180cc <__swhatbuf_r>
 8018138:	9900      	ldr	r1, [sp, #0]
 801813a:	4605      	mov	r5, r0
 801813c:	4630      	mov	r0, r6
 801813e:	f7ff f9c5 	bl	80174cc <_malloc_r>
 8018142:	b948      	cbnz	r0, 8018158 <__smakebuf_r+0x44>
 8018144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018148:	059a      	lsls	r2, r3, #22
 801814a:	d4ef      	bmi.n	801812c <__smakebuf_r+0x18>
 801814c:	f023 0303 	bic.w	r3, r3, #3
 8018150:	f043 0302 	orr.w	r3, r3, #2
 8018154:	81a3      	strh	r3, [r4, #12]
 8018156:	e7e3      	b.n	8018120 <__smakebuf_r+0xc>
 8018158:	4b0d      	ldr	r3, [pc, #52]	; (8018190 <__smakebuf_r+0x7c>)
 801815a:	62b3      	str	r3, [r6, #40]	; 0x28
 801815c:	89a3      	ldrh	r3, [r4, #12]
 801815e:	6020      	str	r0, [r4, #0]
 8018160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018164:	81a3      	strh	r3, [r4, #12]
 8018166:	9b00      	ldr	r3, [sp, #0]
 8018168:	6163      	str	r3, [r4, #20]
 801816a:	9b01      	ldr	r3, [sp, #4]
 801816c:	6120      	str	r0, [r4, #16]
 801816e:	b15b      	cbz	r3, 8018188 <__smakebuf_r+0x74>
 8018170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018174:	4630      	mov	r0, r6
 8018176:	f000 f83d 	bl	80181f4 <_isatty_r>
 801817a:	b128      	cbz	r0, 8018188 <__smakebuf_r+0x74>
 801817c:	89a3      	ldrh	r3, [r4, #12]
 801817e:	f023 0303 	bic.w	r3, r3, #3
 8018182:	f043 0301 	orr.w	r3, r3, #1
 8018186:	81a3      	strh	r3, [r4, #12]
 8018188:	89a0      	ldrh	r0, [r4, #12]
 801818a:	4305      	orrs	r5, r0
 801818c:	81a5      	strh	r5, [r4, #12]
 801818e:	e7cd      	b.n	801812c <__smakebuf_r+0x18>
 8018190:	080171d9 	.word	0x080171d9

08018194 <__malloc_lock>:
 8018194:	4801      	ldr	r0, [pc, #4]	; (801819c <__malloc_lock+0x8>)
 8018196:	f7ff b928 	b.w	80173ea <__retarget_lock_acquire_recursive>
 801819a:	bf00      	nop
 801819c:	2400fdbc 	.word	0x2400fdbc

080181a0 <__malloc_unlock>:
 80181a0:	4801      	ldr	r0, [pc, #4]	; (80181a8 <__malloc_unlock+0x8>)
 80181a2:	f7ff b923 	b.w	80173ec <__retarget_lock_release_recursive>
 80181a6:	bf00      	nop
 80181a8:	2400fdbc 	.word	0x2400fdbc

080181ac <_read_r>:
 80181ac:	b538      	push	{r3, r4, r5, lr}
 80181ae:	4d07      	ldr	r5, [pc, #28]	; (80181cc <_read_r+0x20>)
 80181b0:	4604      	mov	r4, r0
 80181b2:	4608      	mov	r0, r1
 80181b4:	4611      	mov	r1, r2
 80181b6:	2200      	movs	r2, #0
 80181b8:	602a      	str	r2, [r5, #0]
 80181ba:	461a      	mov	r2, r3
 80181bc:	f7e9 f93c 	bl	8001438 <_read>
 80181c0:	1c43      	adds	r3, r0, #1
 80181c2:	d102      	bne.n	80181ca <_read_r+0x1e>
 80181c4:	682b      	ldr	r3, [r5, #0]
 80181c6:	b103      	cbz	r3, 80181ca <_read_r+0x1e>
 80181c8:	6023      	str	r3, [r4, #0]
 80181ca:	bd38      	pop	{r3, r4, r5, pc}
 80181cc:	2400fdc4 	.word	0x2400fdc4

080181d0 <_fstat_r>:
 80181d0:	b538      	push	{r3, r4, r5, lr}
 80181d2:	4d07      	ldr	r5, [pc, #28]	; (80181f0 <_fstat_r+0x20>)
 80181d4:	2300      	movs	r3, #0
 80181d6:	4604      	mov	r4, r0
 80181d8:	4608      	mov	r0, r1
 80181da:	4611      	mov	r1, r2
 80181dc:	602b      	str	r3, [r5, #0]
 80181de:	f7e9 f948 	bl	8001472 <_fstat>
 80181e2:	1c43      	adds	r3, r0, #1
 80181e4:	d102      	bne.n	80181ec <_fstat_r+0x1c>
 80181e6:	682b      	ldr	r3, [r5, #0]
 80181e8:	b103      	cbz	r3, 80181ec <_fstat_r+0x1c>
 80181ea:	6023      	str	r3, [r4, #0]
 80181ec:	bd38      	pop	{r3, r4, r5, pc}
 80181ee:	bf00      	nop
 80181f0:	2400fdc4 	.word	0x2400fdc4

080181f4 <_isatty_r>:
 80181f4:	b538      	push	{r3, r4, r5, lr}
 80181f6:	4d06      	ldr	r5, [pc, #24]	; (8018210 <_isatty_r+0x1c>)
 80181f8:	2300      	movs	r3, #0
 80181fa:	4604      	mov	r4, r0
 80181fc:	4608      	mov	r0, r1
 80181fe:	602b      	str	r3, [r5, #0]
 8018200:	f7e9 f93c 	bl	800147c <_isatty>
 8018204:	1c43      	adds	r3, r0, #1
 8018206:	d102      	bne.n	801820e <_isatty_r+0x1a>
 8018208:	682b      	ldr	r3, [r5, #0]
 801820a:	b103      	cbz	r3, 801820e <_isatty_r+0x1a>
 801820c:	6023      	str	r3, [r4, #0]
 801820e:	bd38      	pop	{r3, r4, r5, pc}
 8018210:	2400fdc4 	.word	0x2400fdc4

08018214 <_init>:
 8018214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018216:	bf00      	nop
 8018218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801821a:	bc08      	pop	{r3}
 801821c:	469e      	mov	lr, r3
 801821e:	4770      	bx	lr

08018220 <_fini>:
 8018220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018222:	bf00      	nop
 8018224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018226:	bc08      	pop	{r3}
 8018228:	469e      	mov	lr, r3
 801822a:	4770      	bx	lr
